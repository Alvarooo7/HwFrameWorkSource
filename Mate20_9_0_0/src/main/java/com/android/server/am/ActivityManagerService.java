package com.android.server.am;

import android.app.ActivityManager;
import android.app.ActivityManager.ProcessErrorStateInfo;
import android.app.ActivityManager.RecentTaskInfo;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.ActivityManager.RunningServiceInfo;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.ActivityManager.StackInfo;
import android.app.ActivityManager.TaskDescription;
import android.app.ActivityManager.TaskSnapshot;
import android.app.ActivityManagerInternal;
import android.app.ActivityManagerInternal.ScreenObserver;
import android.app.ActivityManagerInternal.SleepToken;
import android.app.ActivityOptions;
import android.app.ActivityThread;
import android.app.AlertDialog;
import android.app.AppGlobals;
import android.app.AppOpsManager;
import android.app.ApplicationErrorReport.CrashInfo;
import android.app.ApplicationErrorReport.ParcelableCrashInfo;
import android.app.BroadcastOptions;
import android.app.ContentProviderHolder;
import android.app.Dialog;
import android.app.GrantedUriPermission;
import android.app.IActivityController;
import android.app.IApplicationThread;
import android.app.IAssistDataReceiver;
import android.app.IHwActivityNotifier;
import android.app.IInstrumentationWatcher;
import android.app.INotificationManager;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidObserver;
import android.app.IUserSwitchObserver;
import android.app.Notification;
import android.app.Notification.Builder;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.PictureInPictureParams;
import android.app.ProcessMemoryState;
import android.app.ProfilerInfo;
import android.app.RemoteAction;
import android.app.WaitResult;
import android.app.WindowConfiguration.ActivityType;
import android.app.WindowConfiguration.WindowingMode;
import android.app.admin.DevicePolicyCache;
import android.app.assist.AssistContent;
import android.app.assist.AssistStructure;
import android.app.backup.IBackupManager;
import android.app.servertransaction.ConfigurationChangeItem;
import android.app.usage.UsageStatsManagerInternal;
import android.common.HwFrameworkFactory;
import android.content.BroadcastReceiver;
import android.content.ClipData;
import android.content.ComponentName;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IContentProvider;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.UriPermission;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.ConfigurationInfo;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageDataObserver.Stub;
import android.content.pm.IPackageManager;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.PackageManagerInternal;
import android.content.pm.ParceledListSlice;
import android.content.pm.PathPermission;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.UserInfo;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.IHwConfiguration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.graphics.Rect;
import android.hardware.display.DisplayManagerInternal;
import android.hdm.HwDeviceManager;
import android.hwtheme.HwThemeManager;
import android.iawareperf.UniPerf;
import android.metrics.LogMaker;
import android.net.NetworkPolicyManager;
import android.net.ProxyInfo;
import android.net.Uri;
import android.net.util.NetworkConstants;
import android.os.Binder;
import android.os.Build;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Debug;
import android.os.Debug.MemoryInfo;
import android.os.DropBoxManager;
import android.os.Environment;
import android.os.FactoryTest;
import android.os.FileObserver;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.IBinder.DeathRecipient;
import android.os.IMWThirdpartyCallback;
import android.os.IPermissionController;
import android.os.IProcessInfoService;
import android.os.IProgressListener;
import android.os.LocaleList;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.PersistableBundle;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.PowerManagerInternal;
import android.os.Process;
import android.os.Process.ProcessStartResult;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.ShellCallback;
import android.os.StrictMode;
import android.os.StrictMode.ThreadPolicy;
import android.os.StrictMode.ViolationInfo;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.TransactionTooLargeException;
import android.os.UpdateLock;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.WorkSource;
import android.os.storage.IStorageManager;
import android.os.storage.StorageManager;
import android.os.storage.StorageManagerInternal;
import android.provider.Settings;
import android.provider.Settings.Global;
import android.provider.Settings.Secure;
import android.provider.Settings.System;
import android.rms.iaware.AwareAppStartBinder;
import android.service.voice.IVoiceInteractionSession;
import android.service.voice.VoiceInteractionManagerInternal;
import android.telecom.TelecomManager;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.AtomicFile;
import android.util.DebugUtils;
import android.util.EventLog;
import android.util.Flog;
import android.util.HwPCUtils;
import android.util.HwSlog;
import android.util.Jlog;
import android.util.Log;
import android.util.LongSparseArray;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.StatsLog;
import android.util.TimeUtils;
import android.util.Xml;
import android.util.proto.ProtoOutputStream;
import android.util.proto.ProtoUtils;
import android.view.IRecentsAnimationRunner;
import android.view.LayoutInflater;
import android.view.RemoteAnimationAdapter;
import android.view.RemoteAnimationDefinition;
import android.view.View;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.view.autofill.AutofillManagerInternal;
import android.zrhung.IZrHung;
import android.zrhung.ZrHungData;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.annotations.VisibleForTesting;
import com.android.internal.app.AssistUtils;
import com.android.internal.app.DumpHeapActivity;
import com.android.internal.app.IAppOpsCallback;
import com.android.internal.app.IAppOpsService;
import com.android.internal.app.IVoiceInteractor;
import com.android.internal.app.ProcessMap;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BatteryStatsImpl;
import com.android.internal.os.BatteryStatsImpl.BatteryCallback;
import com.android.internal.os.BatteryStatsImpl.Uid.Proc;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.ProcessCpuTracker.Stats;
import com.android.internal.os.TransferPipe;
import com.android.internal.os.Zygote;
import com.android.internal.os.logging.MetricsLoggerWrapper;
import com.android.internal.policy.IKeyguardDismissCallback;
import com.android.internal.policy.KeyguardDismissCallback;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.DumpUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.FastXmlSerializer;
import com.android.internal.util.MemInfoReader;
import com.android.internal.util.Preconditions;
import com.android.internal.util.XmlUtils;
import com.android.server.AbsLocationManagerService;
import com.android.server.AlarmManagerService;
import com.android.server.AnimationThread;
import com.android.server.AppOpsService;
import com.android.server.AttributeCache;
import com.android.server.BinderCallsStatsService;
import com.android.server.DisplayThread;
import com.android.server.EventLogTags;
import com.android.server.FgThread;
import com.android.server.GraphicsStatsService;
import com.android.server.HwServiceExFactory;
import com.android.server.HwServiceFactory;
import com.android.server.HwServiceFactory.IHwActiveServices;
import com.android.server.HwServiceFactory.IHwActivityManagerService;
import com.android.server.HwServiceFactory.IHwActivityStackSupervisor;
import com.android.server.HwServiceFactory.IHwAppOpsService;
import com.android.server.IntentResolver;
import com.android.server.IoThread;
import com.android.server.LocalServices;
import com.android.server.LockGuard;
import com.android.server.NetworkManagementInternal;
import com.android.server.RescueParty;
import com.android.server.ServiceThread;
import com.android.server.SmartShrinker;
import com.android.server.SystemConfig;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.ThreadPriorityBooster;
import com.android.server.UiThread;
import com.android.server.Watchdog;
import com.android.server.Watchdog.Monitor;
import com.android.server.am.UriPermission.PersistedTimeComparator;
import com.android.server.am.UriPermission.Snapshot;
import com.android.server.audio.AudioService;
import com.android.server.backup.BackupAgentTimeoutParameters;
import com.android.server.connectivity.NetworkAgentInfo;
import com.android.server.firewall.IntentFirewall;
import com.android.server.firewall.IntentFirewall.AMSInterface;
import com.android.server.job.JobSchedulerInternal;
import com.android.server.job.JobSchedulerShellCommand;
import com.android.server.job.controllers.JobStatus;
import com.android.server.mtm.taskstatus.ProcessInfo;
import com.android.server.os.HwBootFail;
import com.android.server.pm.DumpState;
import com.android.server.pm.Installer;
import com.android.server.pm.PackageManagerService;
import com.android.server.pm.dex.DexManager;
import com.android.server.policy.PhoneWindowManager;
import com.android.server.power.IHwShutdownThread;
import com.android.server.slice.SliceClientPermissions.SliceAuthority;
import com.android.server.usb.descriptors.UsbTerminalTypes;
import com.android.server.utils.PriorityDump;
import com.android.server.utils.PriorityDump.PriorityDumper;
import com.android.server.vr.VrManagerInternal;
import com.android.server.wm.ConfigurationContainer;
import com.android.server.wm.PinnedStackWindowController;
import com.android.server.wm.SurfaceAnimationThread;
import com.android.server.wm.WindowManagerService;
import com.android.server.zrhung.IZRHungService;
import com.google.android.collect.Lists;
import com.google.android.collect.Maps;
import com.huawei.android.app.IHwActivityManager;
import com.huawei.android.app.IHwDAMonitorCallback;
import com.huawei.android.audio.HwAudioServiceManager;
import com.huawei.pgmng.common.Utils;
import dalvik.system.VMRuntime;
import huawei.android.security.IHwBehaviorCollectManager;
import huawei.android.security.IHwBehaviorCollectManager.BehaviorId;
import huawei.cust.HwCustUtils;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.ref.WeakReference;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import libcore.io.IoUtils;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;

public class ActivityManagerService extends AbsActivityManager implements IHwActivityManagerInner, Monitor, BatteryCallback {
    public static final String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
    static final int ADD_POWERSAVE_TEMP_WHITELIST_APP_MSG = 97;
    static final int ALLOW_FULL_ONLY = 2;
    static final int ALLOW_NON_FULL = 0;
    static final int ALLOW_NON_FULL_IN_PROFILE = 1;
    private static final long ALL_DISPATCH_THRESHOLD_MS = 1000;
    static final boolean ANIMATE = true;
    static final long APP_SWITCH_DELAY_TIME = 5000;
    static final String APS_DISPLAY_RESOLUTION_CHANGING = "aps_display_resolution_changing";
    private static final String ATTR_CREATED_TIME = "createdTime";
    private static final String ATTR_MODE_FLAGS = "modeFlags";
    private static final String ATTR_PREFIX = "prefix";
    private static final String ATTR_SOURCE_PKG = "sourcePkg";
    private static final String ATTR_SOURCE_USER_ID = "sourceUserId";
    private static final String ATTR_TARGET_PKG = "targetPkg";
    private static final String ATTR_TARGET_USER_ID = "targetUserId";
    private static final String ATTR_URI = "uri";
    private static final String ATTR_USER_HANDLE = "userHandle";
    static final long BATTERY_STATS_TIME = 1800000;
    static final int BROADCAST_BG_TIMEOUT = ((int) (SCALE_ANR * 60000.0f));
    static final int BROADCAST_FG_TIMEOUT = ((int) ((IS_FPGA ? 30000.0f : 20000.0f) * SCALE_ANR));
    static final int CANCEL_HEAVY_NOTIFICATION_MSG = 25;
    static final int CHECK_EXCESSIVE_POWER_USE_MSG = 27;
    static final int CHECK_SERVICE_TIMEOUT_MSG = 99;
    static final int CLEAR_DNS_CACHE_MSG = 28;
    static final int COLLECT_PSS_BG_MSG = 1;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT = 10000;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 57;
    static final int DELETE_DUMPHEAP_MSG = 51;
    static final int DISMISS_DIALOG_UI_MSG = 48;
    static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
    static final int DISPATCH_PENDING_INTENT_CANCEL_MSG = 67;
    static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
    static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
    static final int DISPATCH_SCREEN_AWAKE_MSG = 64;
    static final int DISPATCH_SCREEN_KEYGUARD_MSG = 65;
    static final int DISPATCH_UIDS_CHANGED_UI_MSG = 53;
    static final int DROPBOX_MAX_SIZE = 196608;
    static final long[] DUMP_MEM_BUCKETS = new long[]{5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
    static final int[] DUMP_MEM_OOM_ADJ = new int[]{JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, -900, -800, -700, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900};
    static final String[] DUMP_MEM_OOM_COMPACT_LABEL = new String[]{"native", "sys", "pers", "persvc", "fore", "vis", "percept", "heavy", HealthServiceWrapper.INSTANCE_HEALTHD, "servicea", "home", "prev", "serviceb", "cached"};
    static final String[] DUMP_MEM_OOM_LABEL = new String[]{"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Heavy Weight", "Backup", "A Services", "Home", "Previous", "B Services", "Cached"};
    static final String[] EMPTY_STRING_ARRAY = new String[0];
    private static final int ENABLE_TIME = 3000;
    static final int ENTER_ANIMATION_COMPLETE_MSG = 44;
    static final int FINALIZE_PENDING_INTENT_MSG = 23;
    static final int FINISH_BOOTING_MSG = 45;
    static final int FIRST_ACTIVITY_STACK_MSG = 100;
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int FIRST_COMPAT_MODE_MSG = 300;
    static final int FIRST_SUPERVISOR_STACK_MSG = 100;
    static final int FORCE_GC_ALL_MSG = 418;
    static final int FREEZE_DELAY = 1000;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int GC_DELAY = 210000;
    static final int HANDLE_TRUST_STORAGE_UPDATE_MSG = 63;
    static final int IDLE_UIDS_MSG = 58;
    static final int IMMERSIVE_MODE_LOCK_MSG = 37;
    private static final int INSTRUMENTATION_FLAG_DISABLE_HIDDEN_API_CHECKS = 1;
    static final int INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT = ((int) (60000.0f * SCALE_ANR));
    private static final String INTENT_REMOTE_BUGREPORT_FINISHED = "com.android.internal.intent.action.REMOTE_BUGREPORT_FINISHED";
    static final boolean IS_DEBUG_VERSION;
    static final boolean IS_FPGA = boardname.contains("fpga");
    static final boolean IS_USER_BUILD = "user".equals(Build.TYPE);
    static final int KEY_DISPATCHING_TIMEOUT = ((int) ((IS_FPGA ? 15000.0f : 5000.0f) * SCALE_ANR));
    static final int KILL_APPLICATION_MSG = 22;
    private static final int KSM_SHARED = 0;
    private static final int KSM_SHARING = 1;
    private static final int KSM_UNSHARED = 2;
    private static final int KSM_VOLATILE = 3;
    static final int LOG_STACK_STATE = 60;
    private static final int MAX_BUGREPORT_TITLE_SIZE = 50;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    static final int MAX_PERSISTED_URI_GRANTS = 128;
    private static final int MAX_RECEIVERS_ALLOWED_PER_APP = 1000;
    private static final int MEMINFO_COMPACT_VERSION = 1;
    static final long MONITOR_CPU_MAX_TIME = 268435455;
    static final long MONITOR_CPU_MIN_TIME = 5000;
    static final boolean MONITOR_CPU_USAGE = true;
    static final boolean MONITOR_THREAD_CPU_USAGE = false;
    private static final String MTM_THREAD_NAME = "MultiTaskManagerService";
    static final int MY_PID = Process.myPid();
    private static final int NATIVE_DUMP_TIMEOUT_MS = 2000;
    private static final long NETWORK_ACCESS_TIMEOUT_DEFAULT_MS = 200;
    @VisibleForTesting
    static final int NETWORK_STATE_BLOCK = 1;
    @VisibleForTesting
    static final int NETWORK_STATE_NO_CHANGE = 0;
    @VisibleForTesting
    static final int NETWORK_STATE_UNBLOCK = 2;
    static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 49;
    static final int PENDING_ASSIST_EXTRAS_LONG_TIMEOUT = 2000;
    static final int PENDING_ASSIST_EXTRAS_TIMEOUT = 500;
    static final int PENDING_AUTOFILL_ASSIST_STRUCTURE_TIMEOUT = 2000;
    private static final int PERSISTENT_MASK = 9;
    static final int PERSIST_URI_GRANTS_MSG = 38;
    static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 50;
    static final int POST_HEAVY_NOTIFICATION_MSG = 24;
    private static final int[] PROCESS_STATE_STATS_FORMAT = new int[]{32, 544, 10272};
    static final int PROC_START_TIMEOUT = 10000;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
    static final int PUSH_TEMP_WHITELIST_UI_MSG = 68;
    private static final String REASON_BACKGROUND = "kill background";
    private static final String REASON_STOP_BY_APP = "by app";
    private static final String REASON_SYS_REPLACE = "replace sys pkg";
    static final int REPORT_MEM_USAGE_MSG = 33;
    static final int REPORT_TIME_TRACKER_MSG = 54;
    static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
    protected static final float SCALE_ANR = (SCALE_ANR_PROP >= SCALE_ANR_VALID ? SCALE_ANR_PROP : SCALE_ANR_VALID);
    private static float SCALE_ANR_PROP = (mIsDebuggable ? ((float) SystemProperties.getInt("persist.scale.anr", 100)) / 100.0f : 1.0f);
    private static float SCALE_ANR_VALID = 0.2f;
    static final int SEND_LOCALE_TO_MOUNT_DAEMON_MSG = 47;
    static final int SERVICE_FOREGROUND_CRASH_MSG = 69;
    static final int SERVICE_FOREGROUND_TIMEOUT_MSG = 66;
    static final String SERVICE_RECORD_KEY = "servicerecord";
    static final int SERVICE_TIMEOUT_MSG = 12;
    static final int SHOW_COMPAT_MODE_DIALOG_UI_MSG = 30;
    static final int SHOW_ERROR_UI_MSG = 1;
    static final int SHOW_FACTORY_ERROR_UI_MSG = 3;
    static final int SHOW_FINGERPRINT_ERROR_UI_MSG = 15;
    static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
    static final int SHOW_UID_ERROR_UI_MSG = 14;
    static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 56;
    private static final long SINGLE_DISPATCH_THRESHOLD_MS = 100;
    private static final int SLOW_UID_OBSERVER_THRESHOLD_MS = 20;
    static final int STOCK_PM_FLAGS = 1024;
    static final int STOP_FREEZE_SCREEN = 500;
    static final String SYSTEM_DEBUGGABLE = "ro.debuggable";
    private static final String SYSUI_COMPONENT_NAME = "com.android.systemui/.SystemUIService";
    public static final String TAG = "ActivityManager";
    private static final String TAG_BACKUP = "ActivityManager";
    private static final String TAG_BROADCAST = "ActivityManager";
    private static final String TAG_CLEANUP = "ActivityManager";
    private static final String TAG_CONFIGURATION;
    private static final String TAG_FOCUS = "ActivityManager";
    private static final String TAG_IMMERSIVE = "ActivityManager";
    private static final String TAG_KEYGUARD = "ActivityManager_keyguard";
    private static final String TAG_LOCKTASK = "ActivityManager";
    private static final String TAG_LRU = "ActivityManager";
    private static final String TAG_MU = "ActivityManager_MU";
    private static final String TAG_NETWORK = "ActivityManager_Network";
    private static final String TAG_OOM_ADJ = "ActivityManager";
    private static final String TAG_POWER = "ActivityManager";
    private static final String TAG_PROCESSES = "ActivityManager";
    private static final String TAG_PROCESS_OBSERVERS = "ActivityManager";
    private static final String TAG_PROVIDER = "ActivityManager";
    private static final String TAG_PSS = "ActivityManager";
    private static final String TAG_RECENTS = "ActivityManager";
    private static final String TAG_SERVICE = "ActivityManager";
    private static final String TAG_STACK = "ActivityManager";
    private static final String TAG_SWITCH = "ActivityManager";
    private static final String TAG_UID_OBSERVERS = "ActivityManager";
    private static final String TAG_URI_GRANT = "uri-grant";
    private static final String TAG_URI_GRANTS = "uri-grants";
    private static final String TAG_URI_PERMISSION = "ActivityManager";
    private static final String TAG_VISIBILITY;
    static final boolean TAKE_FULLSCREEN_SCREENSHOTS = true;
    public static final int TOP_APP_PRIORITY_BOOST = -10;
    static final int TRIM_SERVICE_AFTER_BOOT = 98;
    static final int UPDATE_CONFIGURATION_MSG = 4;
    static final int UPDATE_HTTP_PROXY_MSG = 29;
    static final int UPDATE_TIME_PREFERENCE_MSG = 41;
    static final int UPDATE_TIME_ZONE = 13;
    static final boolean VALIDATE_UID_STATES = true;
    static final int VR_MODE_CHANGE_MSG = 61;
    static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;
    static String boardname = SystemProperties.get("ro.board.boardname", "0");
    private static final IZrHung mAppEyeBinderBlock = HwFrameworkFactory.getZrHung("appeye_ssbinderfull");
    static final boolean mIsDebuggable = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
    @GuardedBy("ActivityManagerService.class")
    private static SimpleDateFormat sAnrFileDateFormat;
    private static final ThreadLocal<Identity> sCallerIdentity = new ThreadLocal();
    static boolean sDisableForceGC = false;
    static KillHandler sKillHandler = null;
    static ServiceThread sKillThread = null;
    private static String sTheRealBuildSerial = Shell.NIGHT_MODE_STR_UNKNOWN;
    private static ThreadPriorityBooster sThreadPriorityBooster = new ThreadPriorityBooster(-2, 6);
    final int GL_ES_VERSION;
    final ArrayList<ActiveInstrumentation> mActiveInstrumentation = new ArrayList();
    ProcessChangeItem[] mActiveProcessChanges;
    ChangeItem[] mActiveUidChanges;
    final SparseArray<UidRecord> mActiveUids;
    ComponentName mActiveVoiceInteractionServiceComponent;
    boolean mActivityIdle;
    private final ActivityStartController mActivityStartController;
    int mAdjSeq;
    final SparseArray<ArrayMap<String, Integer>> mAllowAppSwitchUids;
    boolean mAllowLowerMemLevel;
    private AlarmManagerService mAlms;
    private final HashSet<Integer> mAlreadyLoggedViolatedStacks;
    boolean mAlwaysFinishActivities;
    private Map<String, String> mAppAgentMap;
    ArrayMap<String, IBinder> mAppBindArgs;
    final AppErrors mAppErrors;
    final AppOpsService mAppOpsService;
    long mAppSwitchesAllowedTime;
    final AppWarnings mAppWarnings;
    private AssistUtils mAssistUtils;
    final SparseArray<ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>>> mAssociations;
    final ArrayList<ProcessChangeItem> mAvailProcessChanges;
    final ArrayList<ChangeItem> mAvailUidChanges;
    int[] mBackgroundAppIdWhitelist;
    ArraySet<String> mBackgroundLaunchBroadcasts;
    String mBackupAppName;
    BackupRecord mBackupTarget;
    final ArrayMap<String, Boolean> mBadPkgs;
    final BatteryStatsService mBatteryStatsService;
    BroadcastQueue mBgBroadcastQueue;
    final Handler mBgHandler;
    BroadcastQueue mBgKeyAppBroadcastQueue;
    BroadcastQueue mBgThirdAppBroadcastQueue;
    private boolean mBinderTransactionTrackingEnabled;
    @GuardedBy("this")
    boolean mBootAnimationComplete;
    int mBootPhase;
    boolean mBooted;
    @GuardedBy("this")
    boolean mBooting;
    final BroadcastQueue[] mBroadcastQueues;
    @GuardedBy("this")
    boolean mCallFinishBooting;
    @GuardedBy("this")
    private boolean mCheckedForSetup;
    CompatModeDialog mCompatModeDialog;
    final CompatModePackages mCompatModePackages;
    private int mConfigurationSeq;
    final ActivityManagerConstants mConstants;
    final Context mContext;
    IActivityController mController;
    boolean mControllerIsAMonkey;
    CoreSettingsObserver mCoreSettingsObserver;
    protected boolean mCpusetSwitch = false;
    private HashSet<String> mCtsActions;
    private HashSet<String> mCtsPackages;
    private AppTimeTracker mCurAppTimeTracker;
    BroadcastStats mCurBroadcastStats;
    OomAdjObserver mCurOomAdjObserver;
    int mCurOomAdjUid;
    private String mCurResumedPackage;
    private int mCurResumedUid;
    HwCustActivityManagerService mCustAms;
    HwDAMonitorProxy mDAProxy;
    String mDebugApp;
    boolean mDebugTransient;
    DevelopmentSettingsObserver mDevelopmentSettingsObserver;
    int[] mDeviceIdleExceptIdleWhitelist;
    int[] mDeviceIdleTempWhitelist;
    int[] mDeviceIdleWhitelist;
    String mDeviceOwnerName;
    boolean mDidAppSwitch;
    volatile int mFactoryTest;
    BroadcastQueue mFgBroadcastQueue;
    BroadcastQueue mFgKeyAppBroadcastQueue;
    BroadcastQueue mFgThirdAppBroadcastQueue;
    FontScaleSettingObserver mFontScaleSettingObserver;
    boolean mForceBackgroundCheck;
    boolean mForceResizableActivities;
    final ProcessMap<ArrayList<ProcessRecord>> mForegroundPackages;
    boolean mFullPssPending;
    float mFullscreenThumbnailScale;
    private final AtomicFile mGrantFile;
    @GuardedBy("this")
    private final SparseArray<ArrayMap<GrantUri, UriPermission>> mGrantedUriPermissions;
    final MainHandler mHandler;
    final ServiceThread mHandlerThread;
    boolean mHasHeavyWeightFeature;
    ProcessRecord mHeavyWeightProcess;
    final HiddenApiSettings mHiddenApiBlacklist;
    ProcessRecord mHomeProcess;
    IHwActivityManagerServiceEx mHwAMSEx;
    HwInnerActivityManagerService mHwInnerService;
    final SparseArray<ImportanceToken> mImportantProcesses;
    private final Injector mInjector;
    private Installer mInstaller;
    final InstrumentationReporter mInstrumentationReporter = new InstrumentationReporter();
    public final IntentFirewall mIntentFirewall;
    final HashMap<Key, WeakReference<PendingIntentRecord>> mIntentSenderRecords;
    boolean mIsHwLowRam;
    ArrayMap<String, IBinder> mIsolatedAppBindArgs;
    final SparseArray<ProcessRecord> mIsolatedProcesses;
    private final KeyguardController mKeyguardController;
    private boolean mKeyguardShown;
    String mLastANRState;
    protected ActivityRecord mLastActivityRecord;
    private int mLastAppCrashedPid = -1;
    BroadcastStats mLastBroadcastStats;
    final AtomicLong mLastCpuTime;
    long mLastFullPssTime;
    long mLastIdleTime;
    long mLastMemUsageReportTime;
    int mLastMemoryLevel;
    int mLastNumProcesses;
    long mLastPowerCheckUptime;
    private ActivityRecord mLastResumedActivity;
    long mLastWriteTime;
    @GuardedBy("this")
    boolean mLaunchWarningShown;
    final ArrayList<ContentProviderRecord> mLaunchingProviders;
    private final ClientLifecycleManager mLifecycleManager;
    com.android.server.DeviceIdleController.LocalService mLocalDeviceIdleController;
    PowerManagerInternal mLocalPowerManager;
    public final ThreadLocal<String> mLocalStopReason;
    private final LockTaskController mLockTaskController;
    long mLowRamStartTime;
    long mLowRamTimeSinceLastIdle;
    int mLruProcessActivityStart;
    int mLruProcessServiceStart;
    protected final ArrayList<ProcessRecord> mLruProcesses;
    int mLruSeq;
    String mMemWatchDumpFile;
    int mMemWatchDumpPid;
    String mMemWatchDumpProcName;
    int mMemWatchDumpUid;
    final ProcessMap<Pair<Long, String>> mMemWatchProcesses;
    String mNativeDebuggingApp;
    int mNewNumAServiceProcs;
    int mNewNumServiceProcs;
    int mNextIsolatedProcessUid;
    int mNumCachedHiddenProcs;
    int mNumNonCachedProcs;
    int mNumServiceProcs;
    volatile boolean mOnBattery;
    String mOrigDebugApp;
    boolean mOrigWaitForDebugger;
    PackageManagerInternal mPackageManagerInt;
    final ArrayList<PendingAssistExtras> mPendingAssistExtras;
    final ArrayList<ProcessChangeItem> mPendingProcessChanges;
    final ArrayList<ProcessRecord> mPendingPssProcesses;
    @GuardedBy("this")
    private final LongSparseArray<ProcessRecord> mPendingStarts;
    final SparseArray<PendingTempWhitelist> mPendingTempWhitelist;
    final ArrayList<ChangeItem> mPendingUidChanges;
    final boolean mPermissionReviewRequired;
    boolean mPersistentReady;
    final ArrayList<ProcessRecord> mPersistentStartingProcesses;
    final SparseArray<ProcessRecord> mPidsSelfLocked;
    ProcessRecord mPreviousProcess;
    long mPreviousProcessVisibleTime;
    private final PriorityDumper mPriorityDumper;
    final Handler mProcStartHandler;
    final ServiceThread mProcStartHandlerThread;
    @GuardedBy("this")
    private long mProcStartSeqCounter;
    @GuardedBy("this")
    @VisibleForTesting
    long mProcStateSeqCounter;
    final CountDownLatch mProcessCpuInitLatch;
    final AtomicBoolean mProcessCpuMutexFree;
    final Thread mProcessCpuThread;
    final ProcessCpuTracker mProcessCpuTracker;
    protected final ProcessList mProcessList;
    protected final ProcessMap<ProcessRecord> mProcessNames;
    final RemoteCallbackList<IProcessObserver> mProcessObservers;
    private final long[] mProcessStateStatsLongs;
    final ProcessStatsService mProcessStats;
    final ArrayList<ProcessRecord> mProcessesOnHold;
    volatile boolean mProcessesReady;
    final ArrayList<ProcessRecord> mProcessesToGc;
    String mProfileApp;
    ProcessRecord mProfileProc;
    int mProfileType;
    ProfilerInfo mProfilerInfo;
    final ProviderMap mProviderMap;
    final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver;
    private final RecentTasks mRecentTasks;
    final HashMap<IBinder, ReceiverList> mRegisteredReceivers;
    final ArrayList<ProcessRecord> mRemovedProcesses;
    IVoiceInteractionSession mRunningVoice;
    boolean mSafeMode;
    final List<ScreenObserver> mScreenObservers;
    final ActiveServices mServices;
    private boolean mShouldFreeze;
    private boolean mShowDialogs = true;
    boolean mShuttingDown;
    private boolean mSleeping;
    final ActivityStackSupervisor mStackSupervisor;
    final SparseArray<ArrayMap<String, ArrayList<Intent>>> mStickyBroadcasts;
    final StringBuilder mStringBuilder;
    private String[] mSupportedSystemLocales;
    boolean mSupportsFreeformWindowManagement;
    boolean mSupportsLeanbackOnly;
    boolean mSupportsMultiDisplay;
    boolean mSupportsMultiWindow;
    boolean mSupportsPictureInPicture;
    boolean mSupportsSplitScreenMultiWindow;
    boolean mSuppressResizeConfigChanges;
    private Dialog mSwitchUserDlg;
    boolean mSystemProvidersInstalled;
    volatile boolean mSystemReady;
    SystemServiceManager mSystemServiceManager;
    final ActivityThread mSystemThread;
    final TaskChangeNotificationController mTaskChangeNotificationController;
    private Configuration mTempConfig;
    boolean mTestPssMode;
    int mThumbnailHeight;
    int mThumbnailWidth;
    private final ArraySet<BroadcastQueue> mTmpBroadcastQueue;
    final long[] mTmpLong;
    private final UpdateConfigurationResult mTmpUpdateConfigurationResult;
    String mTopAction;
    ComponentName mTopComponent;
    String mTopData;
    int mTopProcessState;
    private ActivityRecord mTracedResumedActivity;
    String mTrackAllocationApp;
    boolean mTrackingAssociations;
    final Context mUiContext;
    final Handler mUiHandler;
    int mUidChangeDispatchCount;
    final RemoteCallbackList<IUidObserver> mUidObservers;
    final UpdateLock mUpdateLock;
    UsageStatsManagerInternal mUsageStatsService;
    private boolean mUseFifoUiScheduling = false;
    final UserController mUserController;
    private boolean mUserIsMonkey;
    private boolean mUserStateInitializing;
    final SparseArray<UidRecord> mValidateUids;
    private int mViSessionId;
    WakeLock mVoiceWakeLock;
    int mVr2dDisplayId = -1;
    private final VrController mVrController;
    boolean mWaitForDebugger;
    @VisibleForTesting
    long mWaitForNetworkTimeoutMs;
    private int mWakefulness;
    protected boolean mWarmColdSwitch = false;
    WindowManagerService mWindowManager;
    private volatile int mWtfClusterCount;
    private volatile long mWtfClusterStart;

    /* renamed from: com.android.server.am.ActivityManagerService$7 */
    class AnonymousClass7 extends Stub {
        final /* synthetic */ ApplicationInfo val$appInfo;
        final /* synthetic */ boolean val$isInstantApp;
        final /* synthetic */ IPackageDataObserver val$observer;
        final /* synthetic */ int val$resolvedUserId;

        AnonymousClass7(ApplicationInfo applicationInfo, int i, boolean z, IPackageDataObserver iPackageDataObserver) {
            this.val$appInfo = applicationInfo;
            this.val$resolvedUserId = i;
            this.val$isInstantApp = z;
            this.val$observer = iPackageDataObserver;
        }

        public void onRemoveCompleted(String packageName, boolean succeeded) throws RemoteException {
            String str = packageName;
            if (this.val$appInfo != null) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.finishForceStopPackageLocked(str, this.val$appInfo.uid);
                    } finally {
                        while (true) {
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            }
            Intent intent = new Intent("android.intent.action.PACKAGE_DATA_CLEARED", Uri.fromParts("package", str, null));
            intent.addFlags(DumpState.DUMP_SERVICE_PERMISSIONS);
            intent.putExtra("android.intent.extra.UID", this.val$appInfo != null ? this.val$appInfo.uid : -1);
            intent.putExtra("android.intent.extra.user_handle", this.val$resolvedUserId);
            if (this.val$isInstantApp) {
                intent.putExtra("android.intent.extra.PACKAGE_NAME", str);
                ActivityManagerService.this.broadcastIntentInPackage(PackageManagerService.PLATFORM_PACKAGE_NAME, 1000, intent, null, null, 0, null, null, "android.permission.ACCESS_INSTANT_APPS", null, false, false, this.val$resolvedUserId);
            } else {
                ActivityManagerService.this.broadcastIntentInPackage(PackageManagerService.PLATFORM_PACKAGE_NAME, 1000, intent, null, null, 0, null, null, null, null, false, false, this.val$resolvedUserId);
            }
            if (this.val$observer != null) {
                this.val$observer.onRemoveCompleted(str, succeeded);
            } else {
                boolean z = succeeded;
            }
        }
    }

    private final class AppDeathRecipient implements DeathRecipient {
        final ProcessRecord mApp;
        final IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(ProcessRecord app, int pid, IApplicationThread thread) {
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                String str = ActivityManagerService.TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("New death recipient ");
                stringBuilder.append(this);
                stringBuilder.append(" for thread ");
                stringBuilder.append(thread.asBinder());
                Slog.v(str, stringBuilder.toString());
            }
            this.mApp = app;
            this.mPid = pid;
            this.mAppThread = thread;
        }

        public void binderDied() {
            boolean isKilledByAm = this.mApp.killedByAm;
            boolean isForgroundActivities = this.mApp.foregroundActivities;
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                String str = ActivityManagerService.TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Death received in ");
                stringBuilder.append(this);
                stringBuilder.append(" for thread ");
                stringBuilder.append(this.mAppThread.asBinder());
                Slog.v(str, stringBuilder.toString());
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            if (isKilledByAm || isForgroundActivities) {
                ActivityManagerService.this.mHwAMSEx.reportAppDiedMsg(this.mApp.userId, this.mApp.processName, -1, "BinderDiedElse");
            } else {
                ActivityManagerService.this.mHwAMSEx.reportAppDiedMsg(this.mApp.userId, this.mApp.processName, -1, "BinderDiedLMK");
            }
        }
    }

    static final class Association {
        int mCount;
        int mLastState = 20;
        long mLastStateUptime;
        int mNesting;
        final String mSourceProcess;
        final int mSourceUid;
        long mStartTime;
        long[] mStateTimes = new long[20];
        final ComponentName mTargetComponent;
        final String mTargetProcess;
        final int mTargetUid;
        long mTime;

        Association(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent, String targetProcess) {
            this.mSourceUid = sourceUid;
            this.mSourceProcess = sourceProcess;
            this.mTargetUid = targetUid;
            this.mTargetComponent = targetComponent;
            this.mTargetProcess = targetProcess;
        }
    }

    static class CpuBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDumper mPriorityDumper = new PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto && DumpUtils.checkDumpAndUsageStatsPermission(CpuBinder.this.mActivityManagerService.mContext, "cpuinfo", pw)) {
                    synchronized (CpuBinder.this.mActivityManagerService.mProcessCpuTracker) {
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentLoad());
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
                    }
                }
            }
        };

        CpuBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
        }
    }

    static class DbBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        DbBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", pw)) {
                this.mActivityManagerService.dumpDbInfo(fd, pw, args);
            }
        }
    }

    private final class DevelopmentSettingsObserver extends ContentObserver {
        private final ComponentName mBugreportStorageProvider = new ComponentName("com.android.shell", "com.android.shell.BugreportStorageProvider");
        private final Uri mUri = Global.getUriFor("development_settings_enabled");

        public DevelopmentSettingsObserver() {
            super(ActivityManagerService.this.mHandler);
            ActivityManagerService.this.mContext.getContentResolver().registerContentObserver(this.mUri, false, this, -1);
            onChange();
        }

        public void onChange(boolean selfChange, Uri uri, int userId) {
            if (this.mUri.equals(uri)) {
                onChange();
            }
        }

        public void onChange() {
            int i = 1;
            boolean enabled = Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), "development_settings_enabled", Build.IS_ENG) != 0;
            PackageManager packageManager = ActivityManagerService.this.mContext.getPackageManager();
            ComponentName componentName = this.mBugreportStorageProvider;
            if (!enabled) {
                i = 0;
            }
            packageManager.setComponentEnabledSetting(componentName, i, 0);
        }
    }

    @Deprecated
    public static class DumpStackFileObserver extends FileObserver {
        private static final int TRACE_DUMP_TIMEOUT_MS = 10000;
        private boolean mClosed;
        private final String mTracesPath;

        public DumpStackFileObserver(String tracesPath) {
            super(tracesPath, 8);
            this.mTracesPath = tracesPath;
        }

        public synchronized void onEvent(int event, String path) {
            this.mClosed = true;
            notify();
        }

        public long dumpWithTimeout(int pid, long timeout) {
            Process.sendSignal(pid, 3);
            long start = SystemClock.elapsedRealtime();
            long waitTime = Math.min(timeout, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
            synchronized (this) {
                try {
                    wait(waitTime);
                } catch (InterruptedException e) {
                    Slog.wtf(ActivityManagerService.TAG, e);
                }
            }
            long timeWaited = SystemClock.elapsedRealtime() - start;
            if (timeWaited >= timeout) {
                return timeWaited;
            }
            if (!this.mClosed) {
                String str = ActivityManagerService.TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Didn't see close of ");
                stringBuilder.append(this.mTracesPath);
                stringBuilder.append(" for pid ");
                stringBuilder.append(pid);
                stringBuilder.append(". Attempting native stack collection.");
                Slog.w(str, stringBuilder.toString());
                Debug.dumpNativeBacktraceToFileTimeout(pid, this.mTracesPath, (int) (Math.min(2000, timeout - timeWaited) / 1000));
            }
            long end = SystemClock.elapsedRealtime();
            this.mClosed = false;
            return end - start;
        }
    }

    private final class FontScaleSettingObserver extends ContentObserver {
        private final Uri mFontScaleUri = System.getUriFor("font_scale");
        private final Uri mHideErrorDialogsUri = Global.getUriFor("hide_error_dialogs");

        public FontScaleSettingObserver() {
            super(ActivityManagerService.this.mHandler);
            ContentResolver resolver = ActivityManagerService.this.mContext.getContentResolver();
            resolver.registerContentObserver(this.mFontScaleUri, false, this, -1);
            resolver.registerContentObserver(this.mHideErrorDialogsUri, false, this, -1);
        }

        public void onChange(boolean selfChange, Uri uri, int userId) {
            if (this.mFontScaleUri.equals(uri)) {
                ActivityManagerService.this.updateFontScaleIfNeeded(userId);
            } else if (this.mHideErrorDialogsUri.equals(uri)) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.updateShouldShowDialogsLocked(ActivityManagerService.this.getGlobalConfiguration());
                    } finally {
                        while (true) {
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            }
        }
    }

    public static class GrantUri {
        public boolean prefix;
        public final int sourceUserId;
        public final Uri uri;

        public GrantUri(int sourceUserId, Uri uri, boolean prefix) {
            this.sourceUserId = sourceUserId;
            this.uri = uri;
            this.prefix = prefix;
        }

        public int hashCode() {
            return (31 * ((31 * ((31 * 1) + this.sourceUserId)) + this.uri.hashCode())) + (this.prefix ? 1231 : 1237);
        }

        public boolean equals(Object o) {
            boolean z = false;
            if (!(o instanceof GrantUri)) {
                return false;
            }
            GrantUri other = (GrantUri) o;
            if (this.uri.equals(other.uri) && this.sourceUserId == other.sourceUserId && this.prefix == other.prefix) {
                z = true;
            }
            return z;
        }

        public String toString() {
            String result = new StringBuilder();
            result.append(this.uri.toString());
            result.append(" [user ");
            result.append(this.sourceUserId);
            result.append("]");
            result = result.toString();
            if (!this.prefix) {
                return result;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(result);
            stringBuilder.append(" [prefix]");
            return stringBuilder.toString();
        }

        public String toSafeString() {
            String result = new StringBuilder();
            result.append(this.uri.toSafeString());
            result.append(" [user ");
            result.append(this.sourceUserId);
            result.append("]");
            result = result.toString();
            if (!this.prefix) {
                return result;
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(result);
            stringBuilder.append(" [prefix]");
            return stringBuilder.toString();
        }

        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1138166333442L, this.uri.toString());
            proto.write(1120986464257L, this.sourceUserId);
            proto.end(token);
        }

        public static GrantUri resolve(int defaultSourceUserHandle, Uri uri) {
            if ("content".equals(uri.getScheme())) {
                return new GrantUri(ContentProvider.getUserIdFromUri(uri, defaultSourceUserHandle), ContentProvider.getUriWithoutUserId(uri), false);
            }
            return new GrantUri(defaultSourceUserHandle, uri, false);
        }
    }

    static class GraphicsBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        GraphicsBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", pw)) {
                String str = ActivityManagerService.TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("gfxinfo dump() called by uid:");
                stringBuilder.append(Binder.getCallingUid());
                stringBuilder.append(" pid:");
                stringBuilder.append(Binder.getCallingPid());
                Slog.i(str, stringBuilder.toString());
                this.mActivityManagerService.dumpGraphicsHardwareUsage(fd, pw, args);
            }
        }
    }

    static class HiddenApiSettings extends ContentObserver {
        private boolean mBlacklistDisabled;
        private final Context mContext;
        private List<String> mExemptions = Collections.emptyList();
        private String mExemptionsStr;
        private int mLogSampleRate = -1;
        private int mPolicyP = -1;
        private int mPolicyPreP = -1;

        public HiddenApiSettings(Handler handler, Context context) {
            super(handler);
            this.mContext = context;
        }

        public void registerObserver() {
            this.mContext.getContentResolver().registerContentObserver(Global.getUriFor("hidden_api_blacklist_exemptions"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Global.getUriFor("hidden_api_access_log_sampling_rate"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Global.getUriFor("hidden_api_policy_pre_p_apps"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Global.getUriFor("hidden_api_policy_p_apps"), false, this);
            update();
        }

        private void update() {
            String exemptions = Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!TextUtils.equals(exemptions, this.mExemptionsStr)) {
                this.mExemptionsStr = exemptions;
                if ("*".equals(exemptions)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = Collections.emptyList();
                } else {
                    List emptyList;
                    this.mBlacklistDisabled = false;
                    if (TextUtils.isEmpty(exemptions)) {
                        emptyList = Collections.emptyList();
                    } else {
                        emptyList = Arrays.asList(exemptions.split(","));
                    }
                    this.mExemptions = emptyList;
                }
                if (!Process.zygoteProcess.setApiBlacklistExemptions(this.mExemptions)) {
                    Slog.e(ActivityManagerService.TAG, "Failed to set API blacklist exemptions!");
                    this.mExemptions = Collections.emptyList();
                }
            }
            int logSampleRate = Global.getInt(this.mContext.getContentResolver(), "hidden_api_access_log_sampling_rate", -1);
            if (logSampleRate < 0 || logSampleRate > 65536) {
                logSampleRate = -1;
            }
            if (!(logSampleRate == -1 || logSampleRate == this.mLogSampleRate)) {
                this.mLogSampleRate = logSampleRate;
                Process.zygoteProcess.setHiddenApiAccessLogSampleRate(this.mLogSampleRate);
            }
            this.mPolicyPreP = getValidEnforcementPolicy("hidden_api_policy_pre_p_apps");
            this.mPolicyP = getValidEnforcementPolicy("hidden_api_policy_p_apps");
        }

        private int getValidEnforcementPolicy(String settingsKey) {
            int policy = Global.getInt(this.mContext.getContentResolver(), settingsKey, -1);
            if (ApplicationInfo.isValidHiddenApiEnforcementPolicy(policy)) {
                return policy;
            }
            return -1;
        }

        boolean isDisabled() {
            return this.mBlacklistDisabled;
        }

        int getPolicyForPrePApps() {
            return this.mPolicyPreP;
        }

        int getPolicyForPApps() {
            return this.mPolicyP;
        }

        public void onChange(boolean selfChange) {
            update();
        }
    }

    public class HwInnerActivityManagerService extends IHwActivityManager.Stub {
        ActivityManagerService mAMS;

        HwInnerActivityManagerService(ActivityManagerService ams) {
            this.mAMS = ams;
        }

        private boolean checkPermissionForHAM() {
            int uid = UserHandle.getAppId(Binder.getCallingUid());
            if (uid == 1000) {
                return true;
            }
            String str = ActivityManagerService.TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Process Permission error! uid:");
            stringBuilder.append(uid);
            Slog.e(str, stringBuilder.toString());
            return false;
        }

        public void registerDAMonitorCallback(IHwDAMonitorCallback callback) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mDAProxy.registerDAMonitorCallback(callback);
            }
        }

        public void setCpusetSwitch(boolean enable) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mCpusetSwitch = enable;
            }
        }

        public void setWarmColdSwitch(boolean enable) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mWarmColdSwitch = enable;
            }
        }

        public boolean cleanPackageRes(List<String> packageList, Map alarmTags, int targetUid, boolean cleanAlarm, boolean isNative, boolean hasPerceptAlarm) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.cleanPackageRes(packageList, alarmTags, targetUid, cleanAlarm, isNative, hasPerceptAlarm);
            }
            return false;
        }

        public boolean registerThirdPartyCallBack(IMWThirdpartyCallback aCallBackHandler) {
            return ActivityManagerService.this.mHwAMSEx.registerThirdPartyCallBack(aCallBackHandler);
        }

        public boolean unregisterThirdPartyCallBack(IMWThirdpartyCallback aCallBackHandler) {
            return ActivityManagerService.this.mHwAMSEx.unregisterThirdPartyCallBack(aCallBackHandler);
        }

        public void reportScreenRecord(int uid, int pid, int status) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mDAProxy.reportScreenRecord(uid, pid, status);
            }
        }

        public boolean isFreeFormVisible() {
            return ActivityManagerService.this.mHwAMSEx.isFreeFormVisible();
        }

        public void registerHwActivityNotifier(IHwActivityNotifier notifier, String reason) {
            ActivityManagerService.this.mHwAMSEx.registerHwActivityNotifier(notifier, reason);
        }

        public void unregisterHwActivityNotifier(IHwActivityNotifier notifier) {
            ActivityManagerService.this.mHwAMSEx.unregisterHwActivityNotifier(notifier);
        }

        public boolean handleANRFilterFIFO(int uid, int cmd) {
            return ActivityManagerService.this.mHwAMSEx.handleANRFilterFIFO(uid, cmd);
        }

        public void handleShowAppEyeAnrUi(int pid, int uid, String processName, String packageName) {
            ActivityManagerService.this.mHwAMSEx.zrHungSendEvent(IZRHungService.EVENT_HANDLESHOWANRDIALOG, pid, uid, packageName, processName, null);
        }

        public boolean isTaskVisible(int id) {
            return ActivityManagerService.this.mHwAMSEx.isTaskVisible(id);
        }

        public List<String> getPidWithUiFromUid(int uid) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.getPidWithUiFromUid(uid);
            }
            return null;
        }

        public int preloadApplication(String packageName, int userId) {
            return ActivityManagerService.this.mHwAMSEx.preloadApplication(packageName, userId);
        }

        public boolean killProcessRecordFromIAware(ProcessInfo procInfo, boolean restartservice, boolean isAsynchronous, String reason) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromIAwareInternal(procInfo, restartservice, isAsynchronous, reason, false);
            }
            return false;
        }

        public boolean killProcessRecordFromIAwareNative(ProcessInfo procInfo, boolean restartservice, boolean isAsynchronous, String reason) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromIAwareInternal(procInfo, restartservice, isAsynchronous, reason, true);
            }
            return false;
        }

        public boolean killProcessRecordFromMTM(ProcessInfo procInfo, boolean restartservice, String reason) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromMTM(procInfo, restartservice, reason);
            }
            return false;
        }

        public boolean isProcessExistLocked(String processName, int uid) {
            boolean z = false;
            if (!checkPermissionForHAM()) {
                return false;
            }
            if (ActivityManagerService.this.getProcessRecordLocked(processName, uid, true) != null) {
                z = true;
            }
            return z;
        }

        public void removePackageAlarm(String pkg, List<String> tags, int targetUid) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.removePackageAlarm(pkg, tags, targetUid);
            }
        }

        public boolean getProcessRecordFromMTM(ProcessInfo procInfo) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.getProcessRecordFromMTM(procInfo);
            }
            return false;
        }

        public void setAndRestoreMaxAdjIfNeed(List<String> adjCustPkg) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.setAndRestoreMaxAdjIfNeed(adjCustPkg);
            }
        }

        public void reportProcessDied(int pid) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.reportProcessDied(pid);
            }
        }

        public void reportAssocDisable() {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.reportAssocDisable();
            }
        }

        public ActivityInfo getLastResumedActivity() {
            int callingPid = Binder.getCallingPid();
            int callingUid = Binder.getCallingUid();
            ActivityInfo activityInfo = null;
            if (ActivityManagerService.this.checkPermission("android.permission.REAL_GET_TASKS", callingPid, callingUid) == 0) {
                if (ActivityManagerService.this.mLastResumedActivity != null) {
                    activityInfo = ActivityManagerService.this.mLastResumedActivity.info;
                }
                return activityInfo;
            }
            String str = ActivityManagerService.TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("permission denied for, callingPid:");
            stringBuilder.append(callingPid);
            stringBuilder.append(", callingUid:");
            stringBuilder.append(callingUid);
            stringBuilder.append(", requires: android.Manifest.permission.REAL_GET_TASKS");
            Slog.d(str, stringBuilder.toString());
            return null;
        }

        public boolean isProcessExistPidsSelfLocked(String processName, int uid) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.isProcessExistPidsSelfLocked(processName, uid);
            }
            return false;
        }

        public int getTopTaskIdInDisplay(int displayId, String pkgName, boolean invisibleAlso) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.getTopTaskIdInDisplay(displayId, pkgName, invisibleAlso);
            }
            return -1;
        }

        public boolean isTaskSupportResize(int taskId, boolean isFullscreen, boolean isMaximized) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.isTaskSupportResize(taskId, isFullscreen, isMaximized);
            }
            return false;
        }

        public Rect getPCTopTaskBounds(int displayId) {
            if (checkPermissionForHAM()) {
                return ActivityManagerService.this.mHwAMSEx.getPCTopTaskBounds(displayId);
            }
            return null;
        }
    }

    private class Identity {
        public final int pid;
        public final IBinder token;
        public final int uid;

        Identity(IBinder _token, int _pid, int _uid) {
            this.token = _token;
            this.pid = _pid;
            this.uid = _uid;
        }
    }

    abstract class ImportanceToken implements DeathRecipient {
        final int pid;
        final String reason;
        final IBinder token;

        ImportanceToken(int _pid, IBinder _token, String _reason) {
            this.pid = _pid;
            this.token = _token;
            this.reason = _reason;
        }

        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("ImportanceToken { ");
            stringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
            stringBuilder.append(" ");
            stringBuilder.append(this.reason);
            stringBuilder.append(" ");
            stringBuilder.append(this.pid);
            stringBuilder.append(" ");
            stringBuilder.append(this.token);
            stringBuilder.append(" }");
            return stringBuilder.toString();
        }

        void writeToProto(ProtoOutputStream proto, long fieldId) {
            long pToken = proto.start(fieldId);
            proto.write(1120986464257L, this.pid);
            if (this.token != null) {
                proto.write(1138166333442L, this.token.toString());
            }
            proto.write(1138166333443L, this.reason);
            proto.end(pToken);
        }
    }

    @VisibleForTesting
    public static class Injector {
        private NetworkManagementInternal mNmi;

        public Context getContext() {
            return null;
        }

        public AppOpsService getAppOpsService(File file, Handler handler) {
            return new AppOpsService(file, handler);
        }

        public Handler getUiHandler(ActivityManagerService service) {
            Objects.requireNonNull(service);
            return new UiHandler();
        }

        public boolean isNetworkRestrictedForUid(int uid) {
            if (ensureHasNetworkManagementInternal()) {
                return this.mNmi.isNetworkRestrictedForUid(uid);
            }
            return false;
        }

        private boolean ensureHasNetworkManagementInternal() {
            if (this.mNmi == null) {
                this.mNmi = (NetworkManagementInternal) LocalServices.getService(NetworkManagementInternal.class);
            }
            return this.mNmi != null;
        }
    }

    static class ItemMatcher {
        boolean all = true;
        ArrayList<ComponentName> components;
        ArrayList<Integer> objects;
        ArrayList<String> strings;

        ItemMatcher() {
        }

        void build(String name) {
            ComponentName componentName = ComponentName.unflattenFromString(name);
            if (componentName != null) {
                if (this.components == null) {
                    this.components = new ArrayList();
                }
                this.components.add(componentName);
                this.all = false;
                return;
            }
            int objectId = 0;
            try {
                objectId = Integer.parseInt(name, 16);
                if (this.objects == null) {
                    this.objects = new ArrayList();
                }
                this.objects.add(Integer.valueOf(objectId));
                this.all = false;
            } catch (RuntimeException e) {
                if (this.strings == null) {
                    this.strings = new ArrayList();
                }
                this.strings.add(name);
                this.all = false;
            }
        }

        int build(String[] args, int opti) {
            while (opti < args.length) {
                String name = args[opti];
                if ("--".equals(name)) {
                    return opti + 1;
                }
                build(name);
                opti++;
            }
            return opti;
        }

        boolean match(Object object, ComponentName comp) {
            if (this.all) {
                return true;
            }
            int i;
            if (this.components != null) {
                for (i = 0; i < this.components.size(); i++) {
                    if (((ComponentName) this.components.get(i)).equals(comp)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (i = 0; i < this.objects.size(); i++) {
                    if (System.identityHashCode(object) == ((Integer) this.objects.get(i)).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings != null) {
                String flat = comp.flattenToString();
                for (int i2 = 0; i2 < this.strings.size(); i2++) {
                    if (flat.contains((CharSequence) this.strings.get(i2))) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    final class KillHandler extends Handler {
        static final int KILL_PROCESS_GROUP_MSG = 4000;

        public KillHandler(Looper looper) {
            super(looper, null, true);
        }

        public void handleMessage(Message msg) {
            if (msg.what != KILL_PROCESS_GROUP_MSG) {
                super.handleMessage(msg);
                return;
            }
            Trace.traceBegin(64, "killProcessGroup");
            Process.killProcessGroup(msg.arg1, msg.arg2);
            Trace.traceEnd(64);
        }
    }

    @VisibleForTesting
    final class LocalService extends ActivityManagerInternal {
        LocalService() {
        }

        public void grantUriPermissionFromIntent(int callingUid, String targetPkg, Intent intent, int targetUserId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.grantUriPermissionFromIntentLocked(callingUid, targetPkg, intent, null, targetUserId);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public String checkContentProviderAccess(String authority, int userId) {
            return ActivityManagerService.this.checkContentProviderAccess(authority, userId);
        }

        public void onWakefulnessChanged(int wakefulness) {
            ActivityManagerService.this.onWakefulnessChanged(wakefulness);
        }

        public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
            return ActivityManagerService.this.startIsolatedProcess(entryPoint, entryPointArgs, processName, abiOverride, uid, crashHandler);
        }

        public SleepToken acquireSleepToken(String tag, int displayId) {
            Preconditions.checkNotNull(tag);
            return ActivityManagerService.this.acquireSleepToken(tag, displayId);
        }

        public ComponentName getHomeActivityForUser(int userId) {
            ComponentName componentName;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityRecord homeActivity = ActivityManagerService.this.mStackSupervisor.getHomeActivityForUser(userId);
                    componentName = homeActivity == null ? null : homeActivity.realActivity;
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            return componentName;
        }

        public void onUserRemoved(int userId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.onUserStoppedLocked(userId);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            ActivityManagerService.this.mBatteryStatsService.onUserRemoved(userId);
            ActivityManagerService.this.mUserController.onUserRemoved(userId);
        }

        public void onLocalVoiceInteractionStarted(IBinder activity, IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.onLocalVoiceInteractionStartedLocked(activity, voiceSession, voiceInteractor);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void notifyAppTransitionStarting(SparseIntArray reasons, long timestamp) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.getActivityMetricsLogger().notifyTransitionStarting(reasons, timestamp);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void notifyAppTransitionFinished() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.notifyAppTransitionDone();
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void notifyAppTransitionCancelled() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.notifyAppTransitionDone();
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public List<IBinder> getTopVisibleActivities() {
            List<IBinder> topVisibleActivities;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    topVisibleActivities = ActivityManagerService.this.mStackSupervisor.getTopVisibleActivities();
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            return topVisibleActivities;
        }

        public void notifyDockedStackMinimizedChanged(boolean minimized) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.setDockedStackMinimized(minimized);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void killForegroundAppsForUser(int userHandle) {
            synchronized (ActivityManagerService.this) {
                try {
                    int ip;
                    ActivityManagerService.boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList();
                    int NP = ActivityManagerService.this.mProcessNames.getMap().size();
                    for (ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) ActivityManagerService.this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = (ProcessRecord) apps.valueAt(ia);
                            if (!app.persistent) {
                                if (app.removed) {
                                    procs.add(app);
                                } else if (app.userId == userHandle && app.foregroundActivities) {
                                    app.removed = true;
                                    procs.add(app);
                                }
                            }
                        }
                    }
                    ip = procs.size();
                    for (int i = 0; i < ip; i++) {
                        ActivityManagerService.this.removeProcessLocked((ProcessRecord) procs.get(i), false, true, "kill all fg");
                    }
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void setPendingIntentWhitelistDuration(IIntentSender target, IBinder whitelistToken, long duration) {
            if (target instanceof PendingIntentRecord) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ((PendingIntentRecord) target).setWhitelistDurationLocked(whitelistToken, duration);
                    } finally {
                        while (true) {
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
                return;
            }
            String str = ActivityManagerService.TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("markAsSentFromNotification(): not a PendingIntentRecord: ");
            stringBuilder.append(target);
            Slog.w(str, stringBuilder.toString());
        }

        public void setDeviceIdleWhitelist(int[] allAppids, int[] exceptIdleAppids) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleWhitelist = allAppids;
                    ActivityManagerService.this.mDeviceIdleExceptIdleWhitelist = exceptIdleAppids;
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void updateDeviceIdleTempWhitelist(int[] appids, int changingAppId, boolean adding) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleTempWhitelist = appids;
                    ActivityManagerService.this.setAppIdTempWhitelistStateLocked(changingAppId, adding);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void updatePersistentConfigurationForUser(Configuration values, int userId) {
            Preconditions.checkNotNull(values, "Configuration must not be null");
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("userId ");
            stringBuilder.append(userId);
            stringBuilder.append(" not supported");
            Preconditions.checkArgumentNonnegative(userId, stringBuilder.toString());
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateConfigurationLocked(values, null, false, true, userId, false);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        /* JADX WARNING: Removed duplicated region for block: B:21:0x0059 A:{SYNTHETIC, Splitter: B:21:0x0059} */
        /* JADX WARNING: Removed duplicated region for block: B:21:0x0059 A:{SYNTHETIC, Splitter: B:21:0x0059} */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public int startActivitiesAsPackage(String packageName, int userId, Intent[] intents, Bundle bOptions) {
            String str;
            int i;
            int packageUid;
            ActivityManagerService activityManagerService;
            Throwable th;
            Object obj = intents;
            Preconditions.checkNotNull(obj, "intents");
            String[] resolvedTypes = new String[obj.length];
            long ident = Binder.clearCallingIdentity();
            int i2 = 0;
            while (i2 < obj.length) {
                try {
                    resolvedTypes[i2] = obj[i2].resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver());
                    i2++;
                } catch (RemoteException e) {
                    str = packageName;
                    i = userId;
                    Binder.restoreCallingIdentity(ident);
                    packageUid = 0;
                    activityManagerService = ActivityManagerService.this;
                    synchronized (activityManagerService) {
                    }
                } catch (Throwable th2) {
                    th = th2;
                    str = packageName;
                    i = userId;
                    Binder.restoreCallingIdentity(ident);
                    throw th;
                }
            }
            str = packageName;
            i = userId;
            try {
                i2 = AppGlobals.getPackageManager().getPackageUid(str, 268435456, i);
                Binder.restoreCallingIdentity(ident);
                packageUid = i2;
            } catch (RemoteException e2) {
                Binder.restoreCallingIdentity(ident);
                packageUid = 0;
                activityManagerService = ActivityManagerService.this;
                synchronized (activityManagerService) {
                }
            } catch (Throwable th3) {
                th = th3;
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
            activityManagerService = ActivityManagerService.this;
            synchronized (activityManagerService) {
                ActivityManagerService activityManagerService2;
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    activityManagerService2 = activityManagerService;
                    try {
                        i2 = ActivityManagerService.this.mActivityStartController.startActivitiesInPackage(packageUid, str, obj, resolvedTypes, null, SafeActivityOptions.fromBundle(bOptions), i, false);
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return i2;
                    } catch (Throwable th4) {
                        th = th4;
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    activityManagerService2 = activityManagerService;
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public int startActivityAsUser(IApplicationThread caller, String callerPacakge, Intent intent, Bundle options, int userId) {
            Intent intent2 = intent;
            return ActivityManagerService.this.startActivityAsUser(caller, callerPacakge, intent2, intent2.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), null, null, 0, 268435456, null, options, userId, false);
        }

        public int getUidProcessState(int uid) {
            return ActivityManagerService.this.getUidState(uid);
        }

        public void notifyKeyguardFlagsChanged(Runnable callback) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    boolean wasTransitionSet = ActivityManagerService.this.mWindowManager.getPendingAppTransition() != 0;
                    if (!wasTransitionSet) {
                        ActivityManagerService.this.mWindowManager.prepareAppTransition(0, false);
                    }
                    ActivityManagerService.this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                    if (!wasTransitionSet) {
                        ActivityManagerService.this.mWindowManager.executeAppTransition();
                    }
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            if (callback != null) {
                callback.run();
            }
        }

        public boolean isSystemReady() {
            return ActivityManagerService.this.mSystemReady;
        }

        public void notifyKeyguardTrustedChanged() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mKeyguardController.isKeyguardShowing(0)) {
                        ActivityManagerService.this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                    }
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public int getPackageScreenCompatMode(String packageName) {
            return ActivityManagerService.this.mCompatModePackages.getPackageScreenCompatModeLocked(packageName);
        }

        /* JADX WARNING: Missing block: B:18:0x0037, code:
            if (r2.hasOverlayUi != r8) goto L_0x003e;
     */
        /* JADX WARNING: Missing block: B:20:0x003a, code:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
     */
        /* JADX WARNING: Missing block: B:21:0x003d, code:
            return;
     */
        /* JADX WARNING: Missing block: B:23:?, code:
            r2.hasOverlayUi = r8;
            r6.this$0.updateOomAdjLocked(r2, true);
     */
        /* JADX WARNING: Missing block: B:25:0x0047, code:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
     */
        /* JADX WARNING: Missing block: B:26:0x004a, code:
            return;
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void setHasOverlayUi(int pid, boolean hasOverlayUi) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        ProcessRecord pr = (ProcessRecord) ActivityManagerService.this.mPidsSelfLocked.get(pid);
                        if (pr == null) {
                            String str = ActivityManagerService.TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("setHasOverlayUi called on unknown pid: ");
                            stringBuilder.append(pid);
                            Slog.w(str, stringBuilder.toString());
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void setRunningRemoteAnimation(int pid, boolean runningRemoteAnimation) {
            ActivityManagerService.this.setRunningRemoteAnimation(pid, runningRemoteAnimation);
        }

        /* JADX WARNING: Missing block: B:15:0x005c, code:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            r2 = r1.networkStateLock;
     */
        /* JADX WARNING: Missing block: B:16:0x0061, code:
            monitor-enter(r2);
     */
        /* JADX WARNING: Missing block: B:19:0x0066, code:
            if (r1.lastNetworkUpdatedProcStateSeq < r8) goto L_0x008d;
     */
        /* JADX WARNING: Missing block: B:21:0x006a, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x008b;
     */
        /* JADX WARNING: Missing block: B:22:0x006c, code:
            r0 = com.android.server.am.ActivityManagerService.TAG_NETWORK;
            r3 = new java.lang.StringBuilder();
            r3.append("procStateSeq: ");
            r3.append(r8);
            r3.append(" has already been handled for uid: ");
            r3.append(r7);
            android.util.Slog.d(r0, r3.toString());
     */
        /* JADX WARNING: Missing block: B:23:0x008b, code:
            monitor-exit(r2);
     */
        /* JADX WARNING: Missing block: B:24:0x008c, code:
            return;
     */
        /* JADX WARNING: Missing block: B:25:0x008d, code:
            r1.lastNetworkUpdatedProcStateSeq = r8;
     */
        /* JADX WARNING: Missing block: B:26:0x0093, code:
            if (r1.curProcStateSeq <= r8) goto L_0x00c3;
     */
        /* JADX WARNING: Missing block: B:28:0x0097, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00c1;
     */
        /* JADX WARNING: Missing block: B:29:0x0099, code:
            r0 = com.android.server.am.ActivityManagerService.TAG_NETWORK;
            r3 = new java.lang.StringBuilder();
            r3.append("No need to handle older seq no., Uid: ");
            r3.append(r7);
            r3.append(", curProcstateSeq: ");
            r3.append(r1.curProcStateSeq);
            r3.append(", procStateSeq: ");
            r3.append(r8);
            android.util.Slog.d(r0, r3.toString());
     */
        /* JADX WARNING: Missing block: B:30:0x00c1, code:
            monitor-exit(r2);
     */
        /* JADX WARNING: Missing block: B:31:0x00c2, code:
            return;
     */
        /* JADX WARNING: Missing block: B:33:0x00c5, code:
            if (r1.waitingForNetwork == false) goto L_0x00ee;
     */
        /* JADX WARNING: Missing block: B:35:0x00c9, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00e9;
     */
        /* JADX WARNING: Missing block: B:36:0x00cb, code:
            r0 = com.android.server.am.ActivityManagerService.TAG_NETWORK;
            r3 = new java.lang.StringBuilder();
            r3.append("Notifying all blocking threads for uid: ");
            r3.append(r7);
            r3.append(", procStateSeq: ");
            r3.append(r8);
            android.util.Slog.d(r0, r3.toString());
     */
        /* JADX WARNING: Missing block: B:37:0x00e9, code:
            r1.networkStateLock.notifyAll();
     */
        /* JADX WARNING: Missing block: B:38:0x00ee, code:
            monitor-exit(r2);
     */
        /* JADX WARNING: Missing block: B:39:0x00ef, code:
            return;
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void notifyNetworkPolicyRulesUpdated(int uid, long procStateSeq) {
            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                String str = ActivityManagerService.TAG_NETWORK;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Got update from NPMS for uid: ");
                stringBuilder.append(uid);
                stringBuilder.append(" seq: ");
                stringBuilder.append(procStateSeq);
                Slog.d(str, stringBuilder.toString());
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    UidRecord record = (UidRecord) ActivityManagerService.this.mActiveUids.get(uid);
                    if (record == null) {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            String str2 = ActivityManagerService.TAG_NETWORK;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("No active uidRecord for uid: ");
                            stringBuilder2.append(uid);
                            stringBuilder2.append(" procStateSeq: ");
                            stringBuilder2.append(procStateSeq);
                            Slog.d(str2, stringBuilder2.toString());
                        }
                    }
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void notifyActiveVoiceInteractionServiceChanged(ComponentName component) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mActiveVoiceInteractionServiceComponent = component;
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void setVr2dDisplayId(int vr2dDisplayId) {
            if (ActivityManagerDebugConfig.DEBUG_STACK) {
                String str = ActivityManagerService.TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("setVr2dDisplayId called for: ");
                stringBuilder.append(vr2dDisplayId);
                Slog.d(str, stringBuilder.toString());
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mVr2dDisplayId = vr2dDisplayId;
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public int handleUserForClone(String name, int userId) {
            return ActivityManagerService.this.handleUserForClone(name, userId);
        }

        public void saveANRState(String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    StringWriter sw = new StringWriter();
                    PrintWriter pw = new FastPrintWriter(sw, false, 1024);
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("  ANR time: ");
                    stringBuilder.append(DateFormat.getDateTimeInstance().format(new Date()));
                    pw.println(stringBuilder.toString());
                    if (reason != null) {
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("  Reason: ");
                        stringBuilder.append(reason);
                        pw.println(stringBuilder.toString());
                    }
                    pw.println();
                    ActivityManagerService.this.mActivityStartController.dump(pw, "  ", null);
                    pw.println();
                    pw.println("-------------------------------------------------------------------------------");
                    ActivityManagerService.this.dumpActivitiesLocked(null, pw, null, 0, true, false, null, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                    pw.println();
                    pw.close();
                    ActivityManagerService.this.mLastANRState = sw.toString();
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void clearSavedANRState() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mLastANRState = null;
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void setFocusedActivity(IBinder token) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.forTokenLocked(token);
                    if (r != null) {
                        if (ActivityManagerService.this.mStackSupervisor.moveFocusableActivityStackToFrontLocked(r, "setFocusedActivity")) {
                            ActivityManagerService.this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                        }
                    } else {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("setFocusedActivity: No activity record matching token=");
                        stringBuilder.append(token);
                        throw new IllegalArgumentException(stringBuilder.toString());
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        /* JADX WARNING: Missing block: B:16:0x003f, code:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
     */
        /* JADX WARNING: Missing block: B:17:0x0042, code:
            return;
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void setAllowAppSwitches(String type, int uid, int userId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mUserController.isUserRunning(userId, 1)) {
                        ArrayMap<String, Integer> types = (ArrayMap) ActivityManagerService.this.mAllowAppSwitchUids.get(userId);
                        if (types == null) {
                            if (uid < 0) {
                            } else {
                                types = new ArrayMap();
                                ActivityManagerService.this.mAllowAppSwitchUids.put(userId, types);
                            }
                        }
                        if (uid < 0) {
                            types.remove(type);
                        } else {
                            types.put(type, Integer.valueOf(uid));
                        }
                    }
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public boolean isRuntimeRestarted() {
            return ActivityManagerService.this.mSystemServiceManager.isRuntimeRestarted();
        }

        public boolean hasRunningActivity(int uid, String packageName) {
            if (packageName == null) {
                return false;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < ActivityManagerService.this.mLruProcesses.size(); i++) {
                        ProcessRecord processRecord = (ProcessRecord) ActivityManagerService.this.mLruProcesses.get(i);
                        if (processRecord.uid == uid) {
                            int j = 0;
                            while (j < processRecord.activities.size()) {
                                if (!packageName.equals(((ActivityRecord) processRecord.activities.get(j)).packageName)) {
                                    j++;
                                }
                            }
                            continue;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            return true;
        }

        public void registerScreenObserver(ScreenObserver observer) {
            ActivityManagerService.this.mScreenObservers.add(observer);
        }

        public boolean canStartMoreUsers() {
            return ActivityManagerService.this.mUserController.canStartMoreUsers();
        }

        public void setSwitchingFromSystemUserMessage(String switchingFromSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingFromSystemUserMessage(switchingFromSystemUserMessage);
        }

        public void setSwitchingToSystemUserMessage(String switchingToSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingToSystemUserMessage(switchingToSystemUserMessage);
        }

        public int getMaxRunningUsers() {
            return ActivityManagerService.this.mUserController.mMaxRunningUsers;
        }

        public boolean isCallerRecents(int callingUid) {
            return ActivityManagerService.this.getRecentTasks().isCallerRecents(callingUid);
        }

        public boolean isRecentsComponentHomeActivity(int userId) {
            return ActivityManagerService.this.getRecentTasks().isRecentsComponentHomeActivity(userId);
        }

        public void cancelRecentsAnimation(boolean restoreHomeStackPosition) {
            ActivityManagerService.this.cancelRecentsAnimation(restoreHomeStackPosition);
        }

        public boolean isUidActive(int uid) {
            boolean isUidActiveLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    isUidActiveLocked = ActivityManagerService.this.isUidActiveLocked(uid);
                } finally {
                    while (true) {
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            return isUidActiveLocked;
        }

        public List<ProcessMemoryState> getMemoryStateForProcesses() {
            Throwable th;
            LocalService processMemoryStates = this;
            List<ProcessMemoryState> processMemoryStates2 = new ArrayList();
            SparseArray sparseArray = ActivityManagerService.this.mPidsSelfLocked;
            synchronized (sparseArray) {
                int i = 0;
                List<ProcessMemoryState> processMemoryStates3;
                SparseArray sparseArray2;
                try {
                    int size = ActivityManagerService.this.mPidsSelfLocked.size();
                    while (i < size) {
                        int i2;
                        int size2;
                        ProcessRecord r = (ProcessRecord) ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                        int pid = r.pid;
                        int uid = r.uid;
                        MemoryStat memoryStat = MemoryStatUtil.readMemoryStatFromFilesystem(uid, pid);
                        if (memoryStat == null) {
                            i2 = i;
                            processMemoryStates3 = processMemoryStates2;
                            sparseArray2 = sparseArray;
                            size2 = size;
                        } else {
                            size2 = size;
                            i2 = i;
                            List<ProcessMemoryState> processMemoryStates4 = processMemoryStates2;
                            sparseArray2 = sparseArray;
                            try {
                                processMemoryStates3 = processMemoryStates4;
                                processMemoryStates3.add(new ProcessMemoryState(uid, r.processName, r.maxAdj, memoryStat.pgfault, memoryStat.pgmajfault, memoryStat.rssInBytes, memoryStat.cacheInBytes, memoryStat.swapInBytes));
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        }
                        i = i2 + 1;
                        processMemoryStates2 = processMemoryStates3;
                        size = size2;
                        sparseArray = sparseArray2;
                        processMemoryStates = this;
                    }
                    processMemoryStates3 = processMemoryStates2;
                    return processMemoryStates3;
                } catch (Throwable th3) {
                    th = th3;
                    processMemoryStates3 = processMemoryStates2;
                    sparseArray2 = sparseArray;
                    throw th;
                }
            }
        }

        public void enforceCallerIsRecentsOrHasPermission(String permission, String func) {
            ActivityManagerService.this.enforceCallerIsRecentsOrHasPermission(permission, func);
        }

        public ActivityInfo getLastResumedActivity() {
            return ActivityManagerService.this.mLastResumedActivity == null ? null : ActivityManagerService.this.mLastResumedActivity.info;
        }
    }

    final class MainHandler extends Handler {
        public MainHandler(Looper looper) {
            super(looper, null, true);
        }

        public void handleMessage(Message msg) {
            String str;
            StringBuilder stringBuilder;
            RuntimeException e;
            Intent intent;
            Message message = msg;
            String reportPackage = null;
            boolean z = false;
            int i;
            int i2;
            ProcessRecord r;
            ProcessRecord app;
            INotificationManager inm;
            ActivityRecord root;
            String host;
            String port;
            boolean nextState;
            String str2;
            int uid;
            switch (message.what) {
                case 4:
                    System.putConfigurationForUser(ActivityManagerService.this.mContext.getContentResolver(), (Configuration) message.obj, message.arg1);
                    break;
                case 5:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.performAppGcsIfAppropriateLocked();
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    break;
                case 12:
                    ActivityManagerService.this.mServices.serviceTimeout((ProcessRecord) message.obj);
                    break;
                case 13:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            i = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                i2 = i;
                                if (i2 >= 0) {
                                    r = (ProcessRecord) ActivityManagerService.this.mLruProcesses.get(i2);
                                    if (r.thread != null) {
                                        r.thread.updateTimeZone();
                                    }
                                    i = i2 - 1;
                                }
                            }
                        } catch (RemoteException e2) {
                            str = ActivityManagerService.TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Failed to update time zone for: ");
                            stringBuilder.append(r.info.processName);
                            Slog.w(str, stringBuilder.toString());
                        } catch (Throwable th) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 20:
                    app = message.obj;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.processStartTimedOutLocked(app);
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    break;
                case 22:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            Bundle bundle = message.obj;
                            ActivityManagerService.this.forceStopPackageLocked(bundle.getString(AbsLocationManagerService.DEL_PKG), message.arg1, false, false, true, false, false, message.arg2, bundle.getString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY));
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    break;
                case 23:
                    ((PendingIntentRecord) message.obj).completeFinalize();
                    break;
                case 24:
                    inm = NotificationManager.getService();
                    if (inm != null) {
                        root = message.obj;
                        r = root.app;
                        if (r != null) {
                            try {
                                String text = ActivityManagerService.this.mContext.getString(17040164, new Object[]{context.getApplicationInfo().loadLabel(ActivityManagerService.this.mContext.createPackageContext(r.info.packageName, 0).getPackageManager())});
                                try {
                                    inm.enqueueNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, PackageManagerService.PLATFORM_PACKAGE_NAME, null, 11, new Builder(ActivityManagerService.this.mContext.createPackageContext(r.info.packageName, 0), SystemNotificationChannels.HEAVY_WEIGHT_APP).setSmallIcon(17303482).setWhen(0).setOngoing(true).setTicker(text).setColor(ActivityManagerService.this.mContext.getColor(17170784)).setContentTitle(text).setContentText(ActivityManagerService.this.mContext.getText(17040165)).setContentIntent(PendingIntent.getActivityAsUser(ActivityManagerService.this.mContext, 0, root.intent, 268435456, null, new UserHandle(root.userId))).build(), root.userId);
                                    break;
                                } catch (RuntimeException e3) {
                                    Slog.w(ActivityManagerService.TAG, "Error showing notification for heavy-weight app", e3);
                                    break;
                                } catch (RemoteException e4) {
                                    break;
                                }
                            } catch (NameNotFoundException e5) {
                                Slog.w(ActivityManagerService.TAG, "Unable to create context for heavy notification", e5);
                                break;
                            }
                        }
                        return;
                    }
                    return;
                case 25:
                    inm = NotificationManager.getService();
                    if (inm != null) {
                        try {
                            inm.cancelNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, null, 11, message.arg1);
                            break;
                        } catch (RuntimeException e32) {
                            Slog.w(ActivityManagerService.TAG, "Error canceling notification for service", e32);
                            break;
                        } catch (RemoteException e6) {
                            break;
                        }
                    }
                    return;
                case ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG /*27*/:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.checkExcessivePowerUsageLocked();
                            removeMessages(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG);
                            sendMessageDelayed(obtainMessage(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG), ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    break;
                case 28:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            i = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                i2 = i;
                                if (i2 >= 0) {
                                    r = (ProcessRecord) ActivityManagerService.this.mLruProcesses.get(i2);
                                    if (r.thread != null) {
                                        r.thread.clearDnsCache();
                                    }
                                    i = i2 - 1;
                                }
                            }
                        } catch (RemoteException e7) {
                            str = ActivityManagerService.TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Failed to clear dns cache for: ");
                            stringBuilder.append(r.info.processName);
                            Slog.w(str, stringBuilder.toString());
                        } catch (Throwable th2) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 29:
                    ProxyInfo proxy = message.obj;
                    host = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                    String host2 = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                    port = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                    str = Uri.EMPTY;
                    if (proxy != null) {
                        host = proxy.getHost();
                        host2 = Integer.toString(proxy.getPort());
                        port = proxy.getExclusionListAsString();
                        str = proxy.getPacFileUrl();
                    }
                    reportPackage = str;
                    str = port;
                    port = host2;
                    host2 = host;
                    synchronized (ActivityManagerService.this) {
                        ProcessRecord r2;
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            i = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                int i3 = i;
                                if (i3 >= 0) {
                                    r2 = (ProcessRecord) ActivityManagerService.this.mLruProcesses.get(i3);
                                    if (!(r2.thread == null || r2.isolated)) {
                                        r2.thread.setHttpProxy(host2, port, str, reportPackage);
                                    }
                                    i = i3 - 1;
                                }
                            }
                        } catch (RemoteException e8) {
                            String str3 = ActivityManagerService.TAG;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("Failed to update http proxy for: ");
                            stringBuilder2.append(r2.info.processName);
                            Slog.w(str3, stringBuilder2.toString());
                        } catch (Throwable th3) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 33:
                    final ArrayList<ProcessMemInfo> memInfos = message.obj;
                    new Thread() {
                        public void run() {
                            ActivityManagerService.this.reportMemUsage(memInfos);
                        }
                    }.start();
                    break;
                case 37:
                    nextState = message.arg1 != 0;
                    if (ActivityManagerService.this.mUpdateLock.isHeld() != nextState) {
                        if (ActivityManagerDebugConfig.DEBUG_IMMERSIVE) {
                            str2 = ActivityManagerService.TAG;
                            StringBuilder stringBuilder3 = new StringBuilder();
                            stringBuilder3.append("Applying new update lock state '");
                            stringBuilder3.append(nextState);
                            stringBuilder3.append("' for ");
                            stringBuilder3.append((ActivityRecord) message.obj);
                            Slog.d(str2, stringBuilder3.toString());
                        }
                        if (!nextState) {
                            ActivityManagerService.this.mUpdateLock.release();
                            break;
                        } else {
                            ActivityManagerService.this.mUpdateLock.acquire();
                            break;
                        }
                    }
                    break;
                case 38:
                    ActivityManagerService.this.writeGrantedUriPermissions();
                    break;
                case 41:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            i = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                i2 = i;
                                if (i2 >= 0) {
                                    r = (ProcessRecord) ActivityManagerService.this.mLruProcesses.get(i2);
                                    if (r.thread != null) {
                                        r.thread.updateTimePrefs(message.arg1);
                                    }
                                    i = i2 - 1;
                                }
                            }
                        } catch (RemoteException e9) {
                            str = ActivityManagerService.TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Failed to update preferences for: ");
                            stringBuilder.append(r.info.processName);
                            Slog.w(str, stringBuilder.toString());
                        } catch (Throwable th4) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 44:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            root = ActivityRecord.forTokenLocked((IBinder) message.obj);
                            if (!(root == null || root.app == null || root.app.thread == null)) {
                                try {
                                    root.app.thread.scheduleEnterAnimationComplete(root.appToken);
                                } catch (RemoteException e10) {
                                }
                            }
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    break;
                case 45:
                    if (message.arg1 != 0) {
                        Trace.traceBegin(64, "FinishBooting");
                        ActivityManagerService.this.finishBooting();
                        Trace.traceEnd(64);
                    }
                    if (message.arg2 != 0) {
                        ActivityManagerService.this.enableScreenAfterBoot();
                        break;
                    }
                    break;
                case 47:
                    try {
                        Locale l = message.obj;
                        IStorageManager storageManager = IStorageManager.Stub.asInterface(ServiceManager.getService("mount"));
                        port = ActivityManagerService.TAG;
                        StringBuilder stringBuilder4 = new StringBuilder();
                        stringBuilder4.append("Storing locale ");
                        stringBuilder4.append(l.toLanguageTag());
                        stringBuilder4.append(" for decryption UI");
                        Log.d(port, stringBuilder4.toString());
                        storageManager.setField("SystemLocale", l.toLanguageTag());
                        break;
                    } catch (Exception e11) {
                        Log.e(ActivityManagerService.TAG, "Error storing locale for decryption UI", e11);
                        break;
                    }
                case 49:
                    uid = message.arg1;
                    byte[] firstPacket = (byte[]) message.obj;
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        int i4 = 0;
                        while (true) {
                            int i5 = i4;
                            if (i5 < ActivityManagerService.this.mPidsSelfLocked.size()) {
                                ProcessRecord p = (ProcessRecord) ActivityManagerService.this.mPidsSelfLocked.valueAt(i5);
                                if (p.uid == uid && p.thread != null) {
                                    try {
                                        p.thread.notifyCleartextNetwork(firstPacket);
                                    } catch (RemoteException e12) {
                                    }
                                }
                                i4 = i5 + 1;
                            }
                        }
                    }
                case HdmiCecKeycode.CEC_KEYCODE_PREVIOUS_CHANNEL /*50*/:
                    int uid2;
                    long memLimit;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            host = ActivityManagerService.this.mMemWatchDumpProcName;
                            uid2 = ActivityManagerService.this.mMemWatchDumpUid;
                            Pair<Long, String> val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(host, uid2);
                            if (val == null) {
                                val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(host, 0);
                            }
                            if (val != null) {
                                memLimit = ((Long) val.first).longValue();
                                reportPackage = val.second;
                            } else {
                                memLimit = 0;
                            }
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    String procName = host;
                    long memLimit2 = memLimit;
                    if (procName != null) {
                        if (ActivityManagerDebugConfig.DEBUG_PSS) {
                            host = ActivityManagerService.TAG;
                            StringBuilder stringBuilder5 = new StringBuilder();
                            stringBuilder5.append("Showing dump heap notification from ");
                            stringBuilder5.append(procName);
                            stringBuilder5.append(SliceAuthority.DELIMITER);
                            stringBuilder5.append(uid2);
                            Slog.d(host, stringBuilder5.toString());
                        }
                        INotificationManager inm2 = NotificationManager.getService();
                        if (inm2 != null) {
                            str2 = ActivityManagerService.this.mContext.getString(17039958, new Object[]{procName});
                            Intent deleteIntent = new Intent();
                            deleteIntent.setAction("com.android.server.am.DELETE_DUMPHEAP");
                            Intent intent2 = new Intent();
                            intent2.setClassName(PackageManagerService.PLATFORM_PACKAGE_NAME, DumpHeapActivity.class.getName());
                            intent2.putExtra("process", procName);
                            intent2.putExtra("size", memLimit2);
                            if (reportPackage != null) {
                                intent2.putExtra("direct_launch", reportPackage);
                            }
                            int userId = UserHandle.getUserId(uid2);
                            try {
                                try {
                                    inm2.enqueueNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, PackageManagerService.PLATFORM_PACKAGE_NAME, null, 12, new Builder(ActivityManagerService.this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17303482).setWhen(0).setOngoing(true).setAutoCancel(true).setTicker(str2).setColor(ActivityManagerService.this.mContext.getColor(17170784)).setContentTitle(str2).setContentText(ActivityManagerService.this.mContext.getText(17039959)).setContentIntent(PendingIntent.getActivityAsUser(ActivityManagerService.this.mContext, 0, intent2, 268435456, null, new UserHandle(userId))).setDeleteIntent(PendingIntent.getBroadcastAsUser(ActivityManagerService.this.mContext, 0, deleteIntent, 0, UserHandle.SYSTEM)).build(), userId);
                                    break;
                                } catch (RuntimeException e13) {
                                    e32 = e13;
                                } catch (RemoteException e14) {
                                    break;
                                }
                            } catch (RuntimeException e15) {
                                e32 = e15;
                                intent = deleteIntent;
                                Slog.w(ActivityManagerService.TAG, "Error showing notification for dump heap", e32);
                                break;
                            } catch (RemoteException e16) {
                                intent = deleteIntent;
                                break;
                            }
                        }
                        return;
                    }
                    return;
                case 51:
                    ActivityManagerService.this.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.mMemWatchDumpFile = null;
                            ActivityManagerService.this.mMemWatchDumpProcName = null;
                            ActivityManagerService.this.mMemWatchDumpPid = -1;
                            ActivityManagerService.this.mMemWatchDumpUid = -1;
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    break;
                case 54:
                    message.obj.deliverResult(ActivityManagerService.this.mContext);
                    break;
                case 56:
                    try {
                        ((IUiAutomationConnection) message.obj).shutdown();
                    } catch (RemoteException e17) {
                        RemoteException remoteException = e17;
                        Slog.w(ActivityManagerService.TAG, "Error shutting down UiAutomationConnection");
                    }
                    ActivityManagerService.this.mUserIsMonkey = false;
                    break;
                case 57:
                    app = message.obj;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.processContentProviderPublishTimedOutLocked(app);
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    break;
                case 58:
                    ActivityManagerService.this.idleUids();
                    break;
                case 61:
                    if (ActivityManagerService.this.mVrController.onVrModeChanged((ActivityRecord) message.obj)) {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                nextState = ActivityManagerService.this.mVrController.shouldDisableNonVrUiLocked();
                                ActivityManagerService.this.mWindowManager.disableNonVrUi(nextState);
                                if (nextState) {
                                    ActivityManagerService.this.mStackSupervisor.removeStacksInWindowingModes(2);
                                }
                            } finally {
                                while (true) {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    break;
                                }
                            }
                        }
                        break;
                    }
                    return;
                case ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG /*63*/:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            i = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                i2 = i;
                                if (i2 >= 0) {
                                    r = (ProcessRecord) ActivityManagerService.this.mLruProcesses.get(i2);
                                    if (r.thread != null) {
                                        r.thread.handleTrustStorageUpdate();
                                    }
                                    i = i2 - 1;
                                }
                            }
                        } catch (RemoteException e18) {
                            str = ActivityManagerService.TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Failed to handle trust storage update for: ");
                            stringBuilder.append(r.info.processName);
                            Slog.w(str, stringBuilder.toString());
                        } catch (Throwable th5) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 64:
                    if (message.arg1 != 0) {
                        z = true;
                    }
                    nextState = z;
                    for (uid = ActivityManagerService.this.mScreenObservers.size() - 1; uid >= 0; uid--) {
                        ((ScreenObserver) ActivityManagerService.this.mScreenObservers.get(uid)).onAwakeStateChanged(nextState);
                    }
                    break;
                case 65:
                    if (message.arg1 != 0) {
                        z = true;
                    }
                    nextState = z;
                    for (uid = ActivityManagerService.this.mScreenObservers.size() - 1; uid >= 0; uid--) {
                        ((ScreenObserver) ActivityManagerService.this.mScreenObservers.get(uid)).onKeyguardStateChanged(nextState);
                    }
                    break;
                case 66:
                    ActivityManagerService.this.mServices.serviceForegroundTimeout((ServiceRecord) message.obj);
                    break;
                case 67:
                    RemoteCallbackList<IResultReceiver> callbacks = message.obj;
                    i2 = callbacks.beginBroadcast();
                    i = 0;
                    while (true) {
                        int i6 = i;
                        if (i6 >= i2) {
                            callbacks.finishBroadcast();
                            break;
                        } else {
                            try {
                                ((IResultReceiver) callbacks.getBroadcastItem(i6)).send(0, null);
                            } catch (RemoteException e19) {
                            }
                            i = i6 + 1;
                        }
                    }
                case 69:
                    ActivityManagerService.this.mServices.serviceForegroundCrash((ProcessRecord) message.obj, msg.getData().getCharSequence(ActivityManagerService.SERVICE_RECORD_KEY));
                    break;
                case 97:
                    if (ActivityManagerService.this.mLocalDeviceIdleController != null) {
                        ActivityManagerService.this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(message.arg1, (long) message.arg2, true, (String) message.obj);
                        break;
                    }
                    break;
                case 98:
                    ActivityManagerService.this.trimServicesAfterBoot();
                    break;
                case 99:
                    ProcessRecord proc = message.obj;
                    if (proc != null) {
                        Utils.handleTimeOut("startservice", proc.processName, String.valueOf(proc.pid));
                        break;
                    }
                    break;
                case ActivityManagerService.FORCE_GC_ALL_MSG /*418*/:
                    Log.i(ActivityManagerService.TAG, "forceGCAfterRebooting message received");
                    ActivityManagerService.this.forceGCAfterRebooting();
                    break;
                case 500:
                    Slog.i(ActivityManagerService.TAG, "STOP_FREEZE_SCREEN");
                    ActivityManagerService.this.mWindowManager.stopFreezingScreen();
                    break;
            }
        }
    }

    static class MemBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDumper mPriorityDumper = new PriorityDumper() {
            public void dumpHigh(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                dump(fd, pw, new String[]{"-a"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                MemBinder.this.mActivityManagerService.dumpApplicationMemoryUsage(fd, pw, "  ", args, false, null, asProto);
            }
        };

        MemBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", pw)) {
                PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
            }
        }
    }

    static final class MemItem {
        final boolean hasActivities;
        final int id;
        final boolean isProc = false;
        final String label;
        final long pss;
        final String shortLabel;
        ArrayList<MemItem> subitems;
        final long swapPss;

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id, boolean _hasActivities) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = _hasActivities;
        }

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = false;
        }
    }

    private static class MemoryUsageDumpOptions {
        boolean dumpDalvik;
        boolean dumpDetails;
        boolean dumpFullDetails;
        boolean dumpProto;
        boolean dumpSummaryOnly;
        boolean dumpSwapPss;
        boolean dumpUnreachable;
        boolean isCheckinRequest;
        boolean isCompact;
        boolean localOnly;
        boolean oomOnly;
        boolean packages;

        private MemoryUsageDumpOptions() {
        }

        /* synthetic */ MemoryUsageDumpOptions(AnonymousClass1 x0) {
            this();
        }
    }

    static class NeededUriGrants extends ArrayList<GrantUri> {
        final int flags;
        final String targetPkg;
        final int targetUid;

        NeededUriGrants(String targetPkg, int targetUid, int flags) {
            this.targetPkg = targetPkg;
            this.targetUid = targetUid;
            this.flags = flags;
        }

        void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1138166333441L, this.targetPkg);
            proto.write(1120986464258L, this.targetUid);
            proto.write(1120986464259L, this.flags);
            int N = size();
            for (int i = 0; i < N; i++) {
                ((GrantUri) get(i)).writeToProto(proto, 2246267895812L);
            }
            proto.end(token);
        }
    }

    interface OomAdjObserver {
        void onOomAdjMessage(String str);
    }

    public class PendingAssistExtras extends Binder implements Runnable {
        public final ActivityRecord activity;
        public AssistContent content = null;
        public final Bundle extras;
        public boolean haveResult = false;
        public final String hint;
        public final Intent intent;
        public boolean isHome;
        public final IAssistDataReceiver receiver;
        public Bundle receiverExtras;
        public Bundle result = null;
        public AssistStructure structure = null;
        public final int userHandle;

        public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent, String _hint, IAssistDataReceiver _receiver, Bundle _receiverExtras, int _userHandle) {
            this.activity = _activity;
            this.extras = _extras;
            this.intent = _intent;
            this.hint = _hint;
            this.receiver = _receiver;
            this.receiverExtras = _receiverExtras;
            this.userHandle = _userHandle;
        }

        public void run() {
            String str = ActivityManagerService.TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("getAssistContextExtras failed: timeout retrieving from ");
            stringBuilder.append(this.activity);
            Slog.w(str, stringBuilder.toString());
            synchronized (this) {
                this.haveResult = true;
                notifyAll();
            }
            ActivityManagerService.this.pendingAssistExtrasTimedOut(this);
        }
    }

    static final class PendingTempWhitelist {
        final long duration;
        final String tag;
        final int targetUid;

        PendingTempWhitelist(int _targetUid, long _duration, String _tag) {
            this.targetUid = _targetUid;
            this.duration = _duration;
            this.tag = _tag;
        }

        void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1120986464257L, this.targetUid);
            proto.write(1112396529666L, this.duration);
            proto.write(1138166333443L, this.tag);
            proto.end(token);
        }
    }

    static class PermissionController extends IPermissionController.Stub {
        ActivityManagerService mActivityManagerService;

        PermissionController(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public boolean checkPermission(String permission, int pid, int uid) {
            return this.mActivityManagerService.checkPermission(permission, pid, uid) == 0;
        }

        public int noteOp(String op, int uid, String packageName) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(AppOpsManager.strOpToOp(op), uid, packageName);
        }

        public String[] getPackagesForUid(int uid) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(uid);
        }

        public boolean isRuntimePermission(String permission) {
            boolean z = false;
            try {
                if ((this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(permission, 0).protectionLevel & 15) == 1) {
                    z = true;
                }
                return z;
            } catch (NameNotFoundException nnfe) {
                String str = ActivityManagerService.TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("No such permission: ");
                stringBuilder.append(permission);
                Slog.e(str, stringBuilder.toString(), nnfe);
                return false;
            }
        }

        public int getPackageUid(String packageName, int flags) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(packageName, flags);
            } catch (NameNotFoundException e) {
                return -1;
            }
        }
    }

    static final class ProcessChangeItem {
        static final int CHANGE_ACTIVITIES = 1;
        int changes;
        boolean foregroundActivities;
        int pid;
        int processState;
        int uid;

        ProcessChangeItem() {
        }
    }

    static class ProcessInfoService extends IProcessInfoService.Stub {
        final ActivityManagerService mActivityManagerService;

        ProcessInfoService(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public void getProcessStatesFromPids(int[] pids, int[] states) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, null);
        }

        public void getProcessStatesAndOomScoresFromPids(int[] pids, int[] states, int[] scores) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, scores);
        }
    }

    final class UiHandler extends Handler {
        public UiHandler() {
            super(UiThread.get().getLooper(), null, true);
        }

        /* JADX WARNING: Missing block: B:26:0x0069, code:
            return;
     */
        /* JADX WARNING: Missing block: B:30:0x0077, code:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
     */
        /* JADX WARNING: Missing block: B:72:0x01e2, code:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            r8.this$0.ensureBootCompleted();
     */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void handleMessage(Message msg) {
            int i = msg.what;
            if (i == 6) {
                Dialog d = null;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ProcessRecord app = msg.obj;
                        if (msg.arg1 != 0) {
                            if (!app.waitedForDebugger) {
                                d = new AppWaitingForDebuggerDialog(ActivityManagerService.this, ActivityManagerService.this.mUiContext, app);
                                app.waitDialog = d;
                                app.waitedForDebugger = true;
                            }
                        } else if (app.waitDialog != null) {
                            app.waitDialog.dismiss();
                            app.waitDialog = null;
                        }
                    } finally {
                        while (true) {
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
                if (d != null) {
                    d.show();
                }
            } else if (i == 26) {
                HashMap<String, Object> data = msg.obj;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ProcessRecord proc = (ProcessRecord) data.get("app");
                        if (proc == null) {
                            Slog.e(ActivityManagerService.TAG, "App not found when showing strict mode dialog.");
                        } else if (proc.crashDialog != null) {
                            String str = ActivityManagerService.TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("App already has strict mode dialog: ");
                            stringBuilder.append(proc);
                            Slog.e(str, stringBuilder.toString());
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        } else {
                            AppErrorResult res = (AppErrorResult) data.get(IZRHungService.PARA_RESULT);
                            if (!ActivityManagerService.this.mShowDialogs || ActivityManagerService.this.mSleeping || ActivityManagerService.this.mShuttingDown) {
                                res.set(0);
                            } else {
                                Dialog d2 = new StrictModeViolationDialog(ActivityManagerService.this.mUiContext, ActivityManagerService.this, res, proc);
                                d2.show();
                                proc.crashDialog = d2;
                            }
                        }
                    } finally {
                        while (true) {
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            } else if (i == 48) {
                ((Dialog) msg.obj).dismiss();
            } else if (i == 53) {
                ActivityManagerService.this.dispatchUidsChanged();
            } else if (i == 68) {
                ActivityManagerService.this.pushTempWhitelist();
            } else if (i != 70) {
                switch (i) {
                    case 1:
                        ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(msg);
                        ActivityManagerService.this.ensureBootCompleted();
                        break;
                    case 2:
                        ActivityManagerService.this.mAppErrors.handleShowAnrUi(msg);
                        ActivityManagerService.this.ensureBootCompleted();
                        break;
                    case 3:
                        new FactoryErrorDialog(ActivityManagerService.this.mUiContext, msg.getData().getCharSequence("msg")).show();
                        ActivityManagerService.this.ensureBootCompleted();
                        break;
                    default:
                        AlertDialog d3;
                        switch (i) {
                            case 14:
                                if (ActivityManagerService.this.mShowDialogs) {
                                    d3 = new BaseErrorDialog(ActivityManagerService.this.mUiContext);
                                    d3.getWindow().setType(2010);
                                    d3.setCancelable(false);
                                    d3.setTitle(ActivityManagerService.this.mUiContext.getText(17039580));
                                    d3.setMessage(ActivityManagerService.this.mUiContext.getText(17041230));
                                    d3.setButton(-1, ActivityManagerService.this.mUiContext.getText(17039370), obtainMessage(48, d3));
                                    d3.show();
                                    break;
                                }
                                break;
                            case 15:
                                if (ActivityManagerService.this.mShowDialogs) {
                                    d3 = new BaseErrorDialog(ActivityManagerService.this.mUiContext);
                                    d3.getWindow().setType(2010);
                                    d3.setCancelable(false);
                                    d3.setTitle(ActivityManagerService.this.mUiContext.getText(17039580));
                                    d3.setMessage(ActivityManagerService.this.mUiContext.getText(17041229));
                                    d3.setButton(-1, ActivityManagerService.this.mUiContext.getText(17039370), obtainMessage(48, d3));
                                    d3.show();
                                    break;
                                }
                                break;
                            default:
                                switch (i) {
                                    case 30:
                                        synchronized (ActivityManagerService.this) {
                                            try {
                                                ActivityManagerService.boostPriorityForLockedSection();
                                                ActivityRecord ar = msg.obj;
                                                if (ActivityManagerService.this.mCompatModeDialog != null) {
                                                    if (!ActivityManagerService.this.mCompatModeDialog.mAppInfo.packageName.equals(ar.info.applicationInfo.packageName)) {
                                                        ActivityManagerService.this.mCompatModeDialog.dismiss();
                                                        ActivityManagerService.this.mCompatModeDialog = null;
                                                        break;
                                                    }
                                                }
                                            } finally {
                                                while (true) {
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                    break;
                                                }
                                            }
                                        }
                                        break;
                                    case 31:
                                        ActivityManagerService.this.dispatchProcessesChanged();
                                        break;
                                    case 32:
                                        ActivityManagerService.this.dispatchProcessDied(msg.arg1, msg.arg2);
                                        break;
                                }
                                break;
                        }
                }
            } else {
                ActivityManagerService.this.dispatchOomAdjObserver((String) msg.obj);
            }
        }
    }

    static final class UidObserverRegistration {
        private static int[] ORIG_ENUMS = new int[]{4, 8, 2, 1};
        private static int[] PROTO_ENUMS = new int[]{3, 4, 2, 1};
        final int cutpoint;
        final SparseIntArray lastProcStates;
        int mMaxDispatchTime;
        int mSlowDispatchCount;
        final String pkg;
        final int uid;
        final int which;

        UidObserverRegistration(int _uid, String _pkg, int _which, int _cutpoint) {
            this.uid = _uid;
            this.pkg = _pkg;
            this.which = _which;
            this.cutpoint = _cutpoint;
            if (this.cutpoint >= 0) {
                this.lastProcStates = new SparseIntArray();
            } else {
                this.lastProcStates = null;
            }
        }

        void writeToProto(ProtoOutputStream proto, long fieldId) {
            ProtoOutputStream protoOutputStream = proto;
            long token = proto.start(fieldId);
            protoOutputStream.write(1120986464257L, this.uid);
            protoOutputStream.write(1138166333442L, this.pkg);
            ProtoUtils.writeBitWiseFlagsToProtoEnum(protoOutputStream, 2259152797699L, this.which, ORIG_ENUMS, PROTO_ENUMS);
            protoOutputStream.write(1120986464260L, this.cutpoint);
            if (this.lastProcStates != null) {
                int NI = this.lastProcStates.size();
                for (int i = 0; i < NI; i++) {
                    long pToken = protoOutputStream.start(2246267895813L);
                    protoOutputStream.write(1120986464257L, this.lastProcStates.keyAt(i));
                    protoOutputStream.write(1120986464258L, this.lastProcStates.valueAt(i));
                    protoOutputStream.end(pToken);
                }
            }
            protoOutputStream.end(token);
        }
    }

    private static final class UpdateConfigurationResult {
        boolean activityRelaunched;
        int changes;

        private UpdateConfigurationResult() {
        }

        /* synthetic */ UpdateConfigurationResult(AnonymousClass1 x0) {
            this();
        }

        void reset() {
            this.changes = 0;
            this.activityRelaunched = false;
        }
    }

    class IntentFirewallInterface implements AMSInterface {
        IntentFirewallInterface() {
        }

        public int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
            return ActivityManagerService.this.checkComponentPermission(permission, pid, uid, owningUid, exported);
        }

        public Object getAMSLock() {
            return ActivityManagerService.this;
        }
    }

    public static final class Lifecycle extends SystemService {
        private final ActivityManagerService mService;

        public Lifecycle(Context context) {
            super(context);
            IHwActivityManagerService iAMS = HwServiceFactory.getHwActivityManagerService();
            if (iAMS != null) {
                this.mService = iAMS.getInstance(context);
            } else {
                this.mService = new ActivityManagerService(context);
            }
        }

        public void onStart() {
            this.mService.start();
        }

        public void onBootPhase(int phase) {
            this.mService.mBootPhase = phase;
            if (phase == 500) {
                this.mService.mBatteryStatsService.systemServicesReady();
                this.mService.mServices.systemServicesReady();
            }
        }

        public void onCleanupUser(int userId) {
            this.mService.mBatteryStatsService.onCleanupUser(userId);
        }

        public ActivityManagerService getService() {
            return this.mService;
        }
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    private void doDump(java.io.FileDescriptor r38, java.io.PrintWriter r39, java.lang.String[] r40, boolean r41) {
        /*
        r37 = this;
        r10 = r37;
        r11 = r38;
        r12 = r39;
        r13 = r40;
        r0 = r10.mContext;
        r1 = "ActivityManager";
        r0 = com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(r0, r1, r12);
        if (r0 != 0) goto L_0x0013;
    L_0x0012:
        return;
    L_0x0013:
        r0 = "ActivityManager";
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "Start dump, calling from : pid=";
        r1.append(r2);
        r2 = android.os.Binder.getCallingPid();
        r1.append(r2);
        r2 = ", uid=";
        r1.append(r2);
        r2 = android.os.Binder.getCallingUid();
        r1.append(r2);
        r1 = r1.toString();
        android.util.Log.i(r0, r1);
        r14 = android.util.HwSlog.handleLogRequest(r40);
        if (r14 == 0) goto L_0x0040;
    L_0x003f:
        return;
    L_0x0040:
        r0 = 0;
        r1 = 0;
        r2 = 0;
        r3 = 0;
        r4 = 0;
        r5 = 0;
        r6 = 0;
        r7 = 0;
        r8 = 0;
        r9 = r0;
        r16 = r1;
        r19 = r2;
        r20 = r3;
        r21 = r4;
        r17 = r5;
        r18 = r6;
        r15 = r7;
        r0 = r8;
    L_0x0058:
        r1 = r13.length;
        r7 = 1;
        if (r0 >= r1) goto L_0x0103;
    L_0x005c:
        r1 = r13[r0];
        if (r1 == 0) goto L_0x0103;
    L_0x0060:
        r2 = r1.length();
        if (r2 <= 0) goto L_0x0103;
    L_0x0066:
        r2 = r1.charAt(r8);
        r3 = 45;
        if (r2 == r3) goto L_0x0070;
    L_0x006e:
        goto L_0x0103;
    L_0x0070:
        r0 = r0 + 1;
        r2 = "-a";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x007d;
    L_0x007a:
        r9 = 1;
        goto L_0x0101;
    L_0x007d:
        r2 = "-c";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x0089;
    L_0x0085:
        r16 = 1;
        goto L_0x0101;
    L_0x0089:
        r2 = "-v";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x0095;
    L_0x0091:
        r17 = 1;
        goto L_0x0101;
    L_0x0095:
        r2 = "-f";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x00a0;
    L_0x009d:
        r18 = 1;
        goto L_0x0101;
    L_0x00a0:
        r2 = "-p";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x00b8;
    L_0x00a8:
        r2 = r13.length;
        if (r0 >= r2) goto L_0x00b2;
    L_0x00ab:
        r15 = r13[r0];
        r0 = r0 + 1;
        r16 = 1;
        goto L_0x0101;
    L_0x00b2:
        r2 = "Error: -p option requires package argument";
        r12.println(r2);
        return;
    L_0x00b8:
        r2 = "--checkin";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x00c6;
    L_0x00c0:
        r2 = r7;
        r19 = r7;
    L_0x00c3:
        r20 = r2;
        goto L_0x0101;
    L_0x00c6:
        r2 = "-C";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x00d0;
    L_0x00ce:
        r2 = 1;
        goto L_0x00c3;
    L_0x00d0:
        r2 = "--normal-priority";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x00dc;
    L_0x00d8:
        r2 = 1;
        r21 = r2;
        goto L_0x0101;
    L_0x00dc:
        r2 = "-h";
        r2 = r2.equals(r1);
        if (r2 == 0) goto L_0x00e8;
    L_0x00e4:
        com.android.server.am.ActivityManagerShellCommand.dumpHelp(r12, r7);
        return;
    L_0x00e8:
        r2 = new java.lang.StringBuilder;
        r2.<init>();
        r3 = "Unknown argument: ";
        r2.append(r3);
        r2.append(r1);
        r3 = "; use -h for help";
        r2.append(r3);
        r2 = r2.toString();
        r12.println(r2);
    L_0x0101:
        goto L_0x0058;
    L_0x0103:
        r5 = android.os.Binder.clearCallingIdentity();
        r1 = 2;
        if (r41 == 0) goto L_0x0254;
    L_0x010a:
        r2 = new android.util.proto.ProtoOutputStream;
        r2.<init>(r11);
        r3 = r13.length;
        if (r0 >= r3) goto L_0x0115;
    L_0x0112:
        r3 = r13[r0];
        goto L_0x0117;
    L_0x0115:
        r3 = "";
    L_0x0117:
        r4 = r0 + 1;
        r0 = "activities";
        r0 = r0.equals(r3);
        if (r0 != 0) goto L_0x023a;
    L_0x0121:
        r0 = "a";
        r0 = r0.equals(r3);
        if (r0 == 0) goto L_0x012d;
    L_0x0129:
        r27 = r3;
        goto L_0x023c;
    L_0x012d:
        r0 = "broadcasts";
        r0 = r0.equals(r3);
        if (r0 != 0) goto L_0x0226;
    L_0x0135:
        r0 = "b";
        r0 = r0.equals(r3);
        if (r0 == 0) goto L_0x0141;
    L_0x013d:
        r27 = r3;
        goto L_0x0228;
    L_0x0141:
        r0 = "provider";
        r0 = r0.equals(r3);
        if (r0 == 0) goto L_0x0187;
    L_0x014a:
        r0 = r13.length;
        if (r4 < r0) goto L_0x0151;
    L_0x014d:
        r0 = 0;
        r1 = EMPTY_STRING_ARRAY;
        goto L_0x0163;
    L_0x0151:
        r0 = r13[r4];
        r4 = r4 + 1;
        r7 = r13.length;
        r7 = r7 - r4;
        r7 = new java.lang.String[r7];
        r8 = r13.length;
        if (r8 <= r1) goto L_0x0162;
    L_0x015c:
        r1 = r13.length;
        r1 = r1 - r4;
        r8 = 0;
        java.lang.System.arraycopy(r13, r4, r7, r8, r1);
    L_0x0162:
        r1 = r7;
    L_0x0163:
        r7 = r10.dumpProviderProto(r11, r12, r0, r1);
        if (r7 != 0) goto L_0x0183;
    L_0x0169:
        r7 = new java.lang.StringBuilder;
        r7.<init>();
        r8 = "No providers match: ";
        r7.append(r8);
        r7.append(r0);
        r7 = r7.toString();
        r12.println(r7);
        r7 = "Use -h for help.";
        r12.println(r7);
    L_0x0183:
        r27 = r3;
        goto L_0x0247;
    L_0x0187:
        r0 = "service";
        r0 = r0.equals(r3);
        r7 = 1146756268033; // 0x10b00000001 float:1.4E-45 double:5.66572876188E-312;
        if (r0 == 0) goto L_0x019b;
    L_0x0195:
        r0 = r10.mServices;
        r0.writeToProto(r2, r7);
        goto L_0x0183;
    L_0x019b:
        r0 = "processes";
        r0 = r0.equals(r3);
        if (r0 != 0) goto L_0x0207;
    L_0x01a4:
        r0 = "p";
        r0 = r0.equals(r3);
        if (r0 == 0) goto L_0x01b0;
    L_0x01ad:
        r27 = r3;
        goto L_0x0209;
    L_0x01b0:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x01fd }
        r0 = r2.start(r7);	 Catch:{ all -> 0x01fd }
        r10.writeActivitiesToProtoLocked(r2);	 Catch:{ all -> 0x01fd }
        r2.end(r0);	 Catch:{ all -> 0x01fd }
        r7 = 1146756268034; // 0x10b00000002 float:2.8E-45 double:5.665728761887E-312;	 Catch:{ all -> 0x01fd }
        r7 = r2.start(r7);	 Catch:{ all -> 0x01fd }
        r10.writeBroadcastsToProtoLocked(r2);	 Catch:{ all -> 0x01fd }
        r2.end(r7);	 Catch:{ all -> 0x01fd }
        r25 = r0;	 Catch:{ all -> 0x01fd }
        r0 = 1146756268035; // 0x10b00000003 float:4.2E-45 double:5.66572876189E-312;	 Catch:{ all -> 0x01fd }
        r0 = r2.start(r0);	 Catch:{ all -> 0x01fd }
        r27 = r3;
        r3 = r10.mServices;	 Catch:{ all -> 0x0205 }
        r28 = r7;	 Catch:{ all -> 0x0205 }
        r7 = 1146756268033; // 0x10b00000001 float:1.4E-45 double:5.66572876188E-312;	 Catch:{ all -> 0x0205 }
        r3.writeToProto(r2, r7);	 Catch:{ all -> 0x0205 }
        r2.end(r0);	 Catch:{ all -> 0x0205 }
        r7 = 1146756268036; // 0x10b00000004 float:5.6E-45 double:5.665728761897E-312;	 Catch:{ all -> 0x0205 }
        r7 = r2.start(r7);	 Catch:{ all -> 0x0205 }
        r10.writeProcessesToProtoLocked(r2, r15);	 Catch:{ all -> 0x0205 }
        r2.end(r7);	 Catch:{ all -> 0x0205 }
        monitor-exit(r37);	 Catch:{ all -> 0x0205 }
        resetPriorityAfterLockedSection();
        goto L_0x0247;
    L_0x01fd:
        r0 = move-exception;
        r27 = r3;
    L_0x0200:
        monitor-exit(r37);	 Catch:{ all -> 0x0205 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0205:
        r0 = move-exception;
        goto L_0x0200;
    L_0x0207:
        r27 = r3;
    L_0x0209:
        r0 = r13.length;
        if (r4 >= r0) goto L_0x0210;
    L_0x020c:
        r15 = r13[r4];
        r4 = r4 + 1;
    L_0x0210:
        r3 = r4;
        r1 = r15;
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0220 }
        r10.writeProcessesToProtoLocked(r2, r1);	 Catch:{ all -> 0x0220 }
        monitor-exit(r37);	 Catch:{ all -> 0x0220 }
        resetPriorityAfterLockedSection();
        r15 = r1;
        r4 = r3;
        goto L_0x0247;
    L_0x0220:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0220 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0226:
        r27 = r3;
    L_0x0228:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0234 }
        r10.writeBroadcastsToProtoLocked(r2);	 Catch:{ all -> 0x0234 }
        monitor-exit(r37);	 Catch:{ all -> 0x0234 }
        resetPriorityAfterLockedSection();
        goto L_0x0247;
    L_0x0234:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0234 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x023a:
        r27 = r3;
    L_0x023c:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x024e }
        r10.writeActivitiesToProtoLocked(r2);	 Catch:{ all -> 0x024e }
        monitor-exit(r37);	 Catch:{ all -> 0x024e }
        resetPriorityAfterLockedSection();
    L_0x0247:
        r2.flush();
        android.os.Binder.restoreCallingIdentity(r5);
        return;
    L_0x024e:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x024e }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0254:
        r23 = r10.getAppId(r15);
        r24 = 0;
        r2 = r13.length;
        if (r0 >= r2) goto L_0x077a;
    L_0x025d:
        r8 = r13[r0];
        r4 = r0 + 1;
        r0 = "activities";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x0747;
    L_0x0269:
        r0 = "a";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x027b;
    L_0x0271:
        r30 = r5;
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
        goto L_0x074f;
    L_0x027b:
        r0 = "lastanr";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x029f;
    L_0x0284:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0299 }
        r10.dumpLastANRLocked(r12);	 Catch:{ all -> 0x0299 }
        monitor-exit(r37);	 Catch:{ all -> 0x0299 }
        resetPriorityAfterLockedSection();
    L_0x028f:
        r30 = r5;
    L_0x0291:
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
        goto L_0x0763;
    L_0x0299:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0299 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x029f:
        r0 = "starter";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x02ba;
    L_0x02a8:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x02b4 }
        r10.dumpActivityStarterLocked(r12, r15);	 Catch:{ all -> 0x02b4 }
        monitor-exit(r37);	 Catch:{ all -> 0x02b4 }
        resetPriorityAfterLockedSection();
        goto L_0x028f;
    L_0x02b4:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x02b4 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x02ba:
        r0 = "containers";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x02d4;
    L_0x02c2:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x02ce }
        r10.dumpActivityContainersLocked(r12);	 Catch:{ all -> 0x02ce }
        monitor-exit(r37);	 Catch:{ all -> 0x02ce }
        resetPriorityAfterLockedSection();
        goto L_0x028f;
    L_0x02ce:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x02ce }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x02d4:
        r0 = "recents";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x0726;
    L_0x02dd:
        r0 = "r";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x02f1;
    L_0x02e6:
        r30 = r5;
        r0 = r7;
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
        goto L_0x072f;
    L_0x02f1:
        r0 = "binder-proxies";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x032a;
    L_0x02f9:
        r0 = r13.length;
        if (r4 < r0) goto L_0x0306;
    L_0x02fc:
        r0 = com.android.internal.os.BinderInternal.nGetBinderProxyPerUidCounts();
        r1 = "Counts of Binder Proxies held by SYSTEM";
        r10.dumpBinderProxiesCounts(r12, r0, r1);
        goto L_0x028f;
    L_0x0306:
        r0 = r13[r4];
        r4 = r4 + 1;
        java.lang.System.gc();
        java.lang.System.runFinalization();
        java.lang.System.gc();
        r1 = java.lang.Integer.parseInt(r0);
        r1 = com.android.internal.os.BinderInternal.nGetBinderProxyCount(r1);
        r12.println(r1);
        r25 = r4;
        r30 = r5;
    L_0x0323:
        r34 = r9;
        r33 = r14;
    L_0x0327:
        r14 = r8;
        goto L_0x0765;
    L_0x032a:
        r0 = "broadcasts";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x06f2;
    L_0x0332:
        r0 = "b";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x0344;
    L_0x033a:
        r30 = r5;
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
        goto L_0x06fa;
    L_0x0344:
        r0 = "broadcast-stats";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x0396;
    L_0x034c:
        r0 = r13.length;
        if (r4 >= r0) goto L_0x0358;
    L_0x034f:
        r0 = r13[r4];
        r4 = r4 + 1;
        r26 = r0;
        r25 = r4;
        goto L_0x035c;
    L_0x0358:
        r25 = r4;
        r26 = r15;
    L_0x035c:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x038c }
        if (r20 == 0) goto L_0x0373;
    L_0x0362:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r6 = r5;
        r5 = r25;
        r30 = r6;
        r6 = r19;
        r7 = r26;
        r1.dumpBroadcastStatsCheckinLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0394 }
        goto L_0x0381;	 Catch:{ all -> 0x0394 }
    L_0x0373:
        r30 = r5;	 Catch:{ all -> 0x0394 }
        r6 = 1;	 Catch:{ all -> 0x0394 }
        r1 = r10;	 Catch:{ all -> 0x0394 }
        r2 = r11;	 Catch:{ all -> 0x0394 }
        r3 = r12;	 Catch:{ all -> 0x0394 }
        r4 = r13;	 Catch:{ all -> 0x0394 }
        r5 = r25;	 Catch:{ all -> 0x0394 }
        r7 = r26;	 Catch:{ all -> 0x0394 }
        r1.dumpBroadcastStatsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0394 }
    L_0x0381:
        monitor-exit(r37);	 Catch:{ all -> 0x0394 }
        resetPriorityAfterLockedSection();
        r34 = r9;
        r33 = r14;
        r15 = r26;
        goto L_0x0327;
    L_0x038c:
        r0 = move-exception;
        r30 = r5;
    L_0x038f:
        monitor-exit(r37);	 Catch:{ all -> 0x0394 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0394:
        r0 = move-exception;
        goto L_0x038f;
    L_0x0396:
        r30 = r5;
        r0 = "intents";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x06c4;
    L_0x03a0:
        r0 = "i";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x03b0;
    L_0x03a8:
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
        goto L_0x06ca;
    L_0x03b0:
        r0 = "processes";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x0689;
    L_0x03b9:
        r0 = "p";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x03cb;
    L_0x03c2:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
        goto L_0x0690;
    L_0x03cb:
        r0 = "oom";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x0666;
    L_0x03d4:
        r0 = "o";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x03e6;
    L_0x03dd:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
        goto L_0x066d;
    L_0x03e6:
        r0 = "permissions";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x0645;
    L_0x03ef:
        r0 = "perm";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x0401;
    L_0x03f8:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
        goto L_0x064c;
    L_0x0401:
        r0 = "provider";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x0452;
    L_0x040a:
        r0 = r13.length;
        if (r4 < r0) goto L_0x0415;
    L_0x040d:
        r0 = 0;
        r1 = EMPTY_STRING_ARRAY;
        r22 = r1;
    L_0x0412:
        r25 = r4;
        goto L_0x0429;
    L_0x0415:
        r0 = r13[r4];
        r4 = r4 + 1;
        r2 = r13.length;
        r2 = r2 - r4;
        r2 = new java.lang.String[r2];
        r3 = r13.length;
        if (r3 <= r1) goto L_0x0426;
    L_0x0420:
        r1 = r13.length;
        r1 = r1 - r4;
        r3 = 0;
        java.lang.System.arraycopy(r13, r4, r2, r3, r1);
    L_0x0426:
        r22 = r2;
        goto L_0x0412;
    L_0x0429:
        r6 = 0;
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r0;
        r5 = r22;
        r7 = r9;
        r1 = r1.dumpProvider(r2, r3, r4, r5, r6, r7);
        if (r1 != 0) goto L_0x0323;
    L_0x0437:
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "No providers match: ";
        r1.append(r2);
        r1.append(r0);
        r1 = r1.toString();
        r12.println(r1);
        r1 = "Use -h for help.";
        r12.println(r1);
    L_0x0450:
        goto L_0x0323;
    L_0x0452:
        r0 = "providers";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x0624;
    L_0x045b:
        r0 = "prov";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x046d;
    L_0x0464:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
        goto L_0x062b;
    L_0x046d:
        r0 = "service";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x04bf;
    L_0x0476:
        r0 = r13.length;
        if (r4 < r0) goto L_0x0481;
    L_0x0479:
        r0 = 0;
        r1 = EMPTY_STRING_ARRAY;
        r22 = r1;
    L_0x047e:
        r25 = r4;
        goto L_0x0495;
    L_0x0481:
        r0 = r13[r4];
        r4 = r4 + 1;
        r2 = r13.length;
        r2 = r2 - r4;
        r2 = new java.lang.String[r2];
        r3 = r13.length;
        if (r3 <= r1) goto L_0x0492;
    L_0x048c:
        r1 = r13.length;
        r1 = r1 - r4;
        r3 = 0;
        java.lang.System.arraycopy(r13, r4, r2, r3, r1);
    L_0x0492:
        r22 = r2;
        goto L_0x047e;
    L_0x0495:
        r1 = r10.mServices;
        r6 = 0;
        r2 = r11;
        r3 = r12;
        r4 = r0;
        r5 = r22;
        r7 = r9;
        r1 = r1.dumpService(r2, r3, r4, r5, r6, r7);
        if (r1 != 0) goto L_0x0323;
    L_0x04a4:
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "No services match: ";
        r1.append(r2);
        r1.append(r0);
        r1 = r1.toString();
        r12.println(r1);
        r1 = "Use -h for help.";
        r12.println(r1);
    L_0x04bd:
        goto L_0x0323;
    L_0x04bf:
        r0 = "package";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x04f1;
    L_0x04c8:
        r0 = r13.length;
        if (r4 < r0) goto L_0x04d7;
    L_0x04cb:
        r0 = "package: no package name specified";
        r12.println(r0);
        r0 = "Use -h for help.";
        r12.println(r0);
        goto L_0x04ed;
    L_0x04d7:
        r15 = r13[r4];
        r4 = r4 + 1;
        r0 = r13.length;
        r0 = r0 - r4;
        r0 = new java.lang.String[r0];
        r2 = r13.length;
        if (r2 <= r1) goto L_0x04e8;
    L_0x04e2:
        r1 = r13.length;
        r1 = r1 - r4;
        r2 = 0;
        java.lang.System.arraycopy(r13, r4, r0, r2, r1);
    L_0x04e8:
        r1 = r0;
        r4 = 0;
        r24 = 1;
        r13 = r1;
    L_0x04ed:
        r25 = r4;
        goto L_0x0323;
    L_0x04f1:
        r0 = "associations";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x0600;
    L_0x04f9:
        r0 = "as";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x050a;
    L_0x0501:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
        goto L_0x0607;
    L_0x050a:
        r0 = "settings";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x0528;
    L_0x0513:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0522 }
        r0 = r10.mConstants;	 Catch:{ all -> 0x0522 }
        r0.dump(r12);	 Catch:{ all -> 0x0522 }
        monitor-exit(r37);	 Catch:{ all -> 0x0522 }
        resetPriorityAfterLockedSection();
        goto L_0x0291;
    L_0x0522:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0522 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0528:
        r0 = "services";
        r0 = r0.equals(r8);
        if (r0 != 0) goto L_0x05b7;
    L_0x0531:
        r0 = "s";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x0543;
    L_0x053a:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
        goto L_0x05be;
    L_0x0543:
        r0 = "locks";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x0551;
    L_0x054c:
        com.android.server.LockGuard.dump(r38, r39, r40);
        goto L_0x0291;
    L_0x0551:
        r0 = "handler";
        r0 = r0.equals(r8);
        if (r0 == 0) goto L_0x056c;
    L_0x0559:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0566 }
        r10.dumpHandler(r12);	 Catch:{ all -> 0x0566 }
        monitor-exit(r37);	 Catch:{ all -> 0x0566 }
        resetPriorityAfterLockedSection();
        goto L_0x0291;
    L_0x0566:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0566 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x056c:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r6 = r4;
        r4 = r8;
        r5 = r13;
        r32 = r6;
        r0 = r7;
        r7 = r9;
        r33 = r14;
        r14 = r8;
        r8 = r17;
        r34 = r9;
        r9 = r18;
        r1 = r1.dumpActivity(r2, r3, r4, r5, r6, r7, r8, r9);
        if (r1 != 0) goto L_0x067f;
    L_0x0585:
        r1 = new com.android.server.am.ActivityManagerShellCommand;
        r1.<init>(r10, r0);
        r3 = 0;
        r5 = 0;
        r7 = 0;
        r8 = new android.os.ResultReceiver;
        r0 = 0;
        r8.<init>(r0);
        r2 = r10;
        r4 = r11;
        r6 = r13;
        r0 = r1.exec(r2, r3, r4, r5, r6, r7, r8);
        if (r0 >= 0) goto L_0x067f;
    L_0x059c:
        r2 = new java.lang.StringBuilder;
        r2.<init>();
        r3 = "Bad activity command, or no activities match: ";
        r2.append(r3);
        r2.append(r14);
        r2 = r2.toString();
        r12.println(r2);
        r2 = "Use -h for help.";
        r12.println(r2);
        goto L_0x067f;
    L_0x05b7:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
    L_0x05be:
        if (r16 == 0) goto L_0x05e0;
    L_0x05c0:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x05da }
        r1 = r10.mServices;	 Catch:{ all -> 0x05da }
        r6 = 1;	 Catch:{ all -> 0x05da }
        r2 = r11;	 Catch:{ all -> 0x05da }
        r3 = r12;	 Catch:{ all -> 0x05da }
        r4 = r13;	 Catch:{ all -> 0x05da }
        r5 = r32;	 Catch:{ all -> 0x05da }
        r7 = r15;	 Catch:{ all -> 0x05da }
        r0 = r1.newServiceDumperLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x05da }
        monitor-exit(r37);	 Catch:{ all -> 0x05da }
        resetPriorityAfterLockedSection();
        r0.dumpWithClient();
        goto L_0x067f;
    L_0x05da:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x05da }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x05e0:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x05fa }
        r1 = r10.mServices;	 Catch:{ all -> 0x05fa }
        r6 = 1;	 Catch:{ all -> 0x05fa }
        r2 = r11;	 Catch:{ all -> 0x05fa }
        r3 = r12;	 Catch:{ all -> 0x05fa }
        r4 = r13;	 Catch:{ all -> 0x05fa }
        r5 = r32;	 Catch:{ all -> 0x05fa }
        r7 = r15;	 Catch:{ all -> 0x05fa }
        r0 = r1.newServiceDumperLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x05fa }
        r0.dumpLocked();	 Catch:{ all -> 0x05fa }
        monitor-exit(r37);	 Catch:{ all -> 0x05fa }
        resetPriorityAfterLockedSection();
        goto L_0x067f;
    L_0x05fa:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x05fa }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0600:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
    L_0x0607:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x061e }
        r6 = 1;	 Catch:{ all -> 0x061e }
        r1 = r10;	 Catch:{ all -> 0x061e }
        r2 = r11;	 Catch:{ all -> 0x061e }
        r3 = r12;	 Catch:{ all -> 0x061e }
        r4 = r13;	 Catch:{ all -> 0x061e }
        r5 = r32;	 Catch:{ all -> 0x061e }
        r7 = r16;	 Catch:{ all -> 0x061e }
        r8 = r15;	 Catch:{ all -> 0x061e }
        r1.dumpAssociationsLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x061e }
        monitor-exit(r37);	 Catch:{ all -> 0x061e }
        resetPriorityAfterLockedSection();
        goto L_0x067f;
    L_0x061e:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x061e }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0624:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
    L_0x062b:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x063f }
        r6 = 1;	 Catch:{ all -> 0x063f }
        r7 = 0;	 Catch:{ all -> 0x063f }
        r1 = r10;	 Catch:{ all -> 0x063f }
        r2 = r11;	 Catch:{ all -> 0x063f }
        r3 = r12;	 Catch:{ all -> 0x063f }
        r4 = r13;	 Catch:{ all -> 0x063f }
        r5 = r32;	 Catch:{ all -> 0x063f }
        r1.dumpProvidersLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x063f }
        monitor-exit(r37);	 Catch:{ all -> 0x063f }
        resetPriorityAfterLockedSection();
        goto L_0x067f;
    L_0x063f:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x063f }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0645:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
    L_0x064c:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0660 }
        r6 = 1;	 Catch:{ all -> 0x0660 }
        r7 = 0;	 Catch:{ all -> 0x0660 }
        r1 = r10;	 Catch:{ all -> 0x0660 }
        r2 = r11;	 Catch:{ all -> 0x0660 }
        r3 = r12;	 Catch:{ all -> 0x0660 }
        r4 = r13;	 Catch:{ all -> 0x0660 }
        r5 = r32;	 Catch:{ all -> 0x0660 }
        r1.dumpPermissionsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0660 }
        monitor-exit(r37);	 Catch:{ all -> 0x0660 }
        resetPriorityAfterLockedSection();
        goto L_0x067f;
    L_0x0660:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0660 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0666:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
    L_0x066d:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0683 }
        r6 = 1;	 Catch:{ all -> 0x0683 }
        r1 = r10;	 Catch:{ all -> 0x0683 }
        r2 = r11;	 Catch:{ all -> 0x0683 }
        r3 = r12;	 Catch:{ all -> 0x0683 }
        r4 = r13;	 Catch:{ all -> 0x0683 }
        r5 = r32;	 Catch:{ all -> 0x0683 }
        r1.dumpOomLocked(r2, r3, r4, r5, r6);	 Catch:{ all -> 0x0683 }
        monitor-exit(r37);	 Catch:{ all -> 0x0683 }
        resetPriorityAfterLockedSection();
    L_0x067f:
        r9 = r32;
        goto L_0x0763;
    L_0x0683:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0683 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0689:
        r32 = r4;
        r34 = r9;
        r33 = r14;
        r14 = r8;
    L_0x0690:
        r0 = r13.length;
        r9 = r32;
        if (r9 >= r0) goto L_0x069e;
    L_0x0695:
        r0 = r13[r9];
        r4 = r9 + 1;
        r25 = r0;
        r22 = r4;
        goto L_0x06a2;
    L_0x069e:
        r22 = r9;
        r25 = r15;
    L_0x06a2:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x06be }
        r6 = 1;	 Catch:{ all -> 0x06be }
        r1 = r10;	 Catch:{ all -> 0x06be }
        r2 = r11;	 Catch:{ all -> 0x06be }
        r3 = r12;	 Catch:{ all -> 0x06be }
        r4 = r13;	 Catch:{ all -> 0x06be }
        r5 = r22;	 Catch:{ all -> 0x06be }
        r7 = r25;	 Catch:{ all -> 0x06be }
        r8 = r23;	 Catch:{ all -> 0x06be }
        r1.dumpProcessesLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x06be }
        monitor-exit(r37);	 Catch:{ all -> 0x06be }
        resetPriorityAfterLockedSection();
        r15 = r25;
        r25 = r22;
        goto L_0x0765;
    L_0x06be:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x06be }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x06c4:
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
    L_0x06ca:
        r0 = r13.length;
        if (r9 >= r0) goto L_0x06d5;
    L_0x06cd:
        r0 = r13[r9];
        r4 = r9 + 1;
        r22 = r0;
        r8 = r4;
        goto L_0x06d8;
    L_0x06d5:
        r8 = r9;
        r22 = r15;
    L_0x06d8:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x06ec }
        r6 = 1;	 Catch:{ all -> 0x06ec }
        r1 = r10;	 Catch:{ all -> 0x06ec }
        r2 = r11;	 Catch:{ all -> 0x06ec }
        r3 = r12;	 Catch:{ all -> 0x06ec }
        r4 = r13;	 Catch:{ all -> 0x06ec }
        r5 = r8;	 Catch:{ all -> 0x06ec }
        r7 = r22;	 Catch:{ all -> 0x06ec }
        r1.dumpPendingIntentsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x06ec }
        monitor-exit(r37);	 Catch:{ all -> 0x06ec }
        resetPriorityAfterLockedSection();
        goto L_0x071b;
    L_0x06ec:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x06ec }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x06f2:
        r30 = r5;
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
    L_0x06fa:
        r0 = r13.length;
        if (r9 >= r0) goto L_0x0705;
    L_0x06fd:
        r0 = r13[r9];
        r4 = r9 + 1;
        r22 = r0;
        r8 = r4;
        goto L_0x0708;
    L_0x0705:
        r8 = r9;
        r22 = r15;
    L_0x0708:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0720 }
        r6 = 1;	 Catch:{ all -> 0x0720 }
        r1 = r10;	 Catch:{ all -> 0x0720 }
        r2 = r11;	 Catch:{ all -> 0x0720 }
        r3 = r12;	 Catch:{ all -> 0x0720 }
        r4 = r13;	 Catch:{ all -> 0x0720 }
        r5 = r8;	 Catch:{ all -> 0x0720 }
        r7 = r22;	 Catch:{ all -> 0x0720 }
        r1.dumpBroadcastsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0720 }
        monitor-exit(r37);	 Catch:{ all -> 0x0720 }
        resetPriorityAfterLockedSection();
    L_0x071b:
        r25 = r8;
        r15 = r22;
        goto L_0x0765;
    L_0x0720:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0720 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0726:
        r30 = r5;
        r0 = r7;
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
    L_0x072f:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0741 }
        r1 = r10.mRecentTasks;	 Catch:{ all -> 0x0741 }
        if (r1 == 0) goto L_0x073c;	 Catch:{ all -> 0x0741 }
    L_0x0737:
        r1 = r10.mRecentTasks;	 Catch:{ all -> 0x0741 }
        r1.dump(r12, r0, r15);	 Catch:{ all -> 0x0741 }
    L_0x073c:
        monitor-exit(r37);	 Catch:{ all -> 0x0741 }
        resetPriorityAfterLockedSection();
        goto L_0x0763;
    L_0x0741:
        r0 = move-exception;
        monitor-exit(r37);	 Catch:{ all -> 0x0741 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0747:
        r30 = r5;
        r34 = r9;
        r33 = r14;
        r9 = r4;
        r14 = r8;
    L_0x074f:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0770 }
        r6 = 1;	 Catch:{ all -> 0x0770 }
        r1 = r10;	 Catch:{ all -> 0x0770 }
        r2 = r11;	 Catch:{ all -> 0x0770 }
        r3 = r12;	 Catch:{ all -> 0x0770 }
        r4 = r13;	 Catch:{ all -> 0x0770 }
        r5 = r9;	 Catch:{ all -> 0x0770 }
        r7 = r16;	 Catch:{ all -> 0x0770 }
        r8 = r15;	 Catch:{ all -> 0x0770 }
        r1.dumpActivitiesLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x0770 }
        monitor-exit(r37);	 Catch:{ all -> 0x0770 }
        resetPriorityAfterLockedSection();
    L_0x0763:
        r25 = r9;
    L_0x0765:
        if (r24 != 0) goto L_0x076d;
    L_0x0767:
        r7 = r30;
        android.os.Binder.restoreCallingIdentity(r7);
        return;
    L_0x076d:
        r7 = r30;
        goto L_0x0781;
    L_0x0770:
        r0 = move-exception;
        r7 = r30;
    L_0x0773:
        monitor-exit(r37);	 Catch:{ all -> 0x0778 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0778:
        r0 = move-exception;
        goto L_0x0773;
    L_0x077a:
        r7 = r5;
        r34 = r9;
        r33 = r14;
        r25 = r0;
    L_0x0781:
        if (r20 == 0) goto L_0x0796;
    L_0x0783:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r19;
        r8 = r7;
        r7 = r15;
        r1.dumpBroadcastStatsCheckinLocked(r2, r3, r4, r5, r6, r7);
        r35 = r8;
        r14 = r34;
        goto L_0x0a30;
    L_0x0796:
        r8 = r7;
        if (r16 == 0) goto L_0x08fc;
    L_0x0799:
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x08f0 }
        r0 = r10.mConstants;	 Catch:{ all -> 0x08f0 }
        r0.dump(r12);	 Catch:{ all -> 0x08f0 }
        r39.println();	 Catch:{ all -> 0x08f0 }
        r14 = r34;
        if (r14 == 0) goto L_0x07b4;
    L_0x07a9:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x07af }
        r12.println(r0);	 Catch:{ all -> 0x07af }
        goto L_0x07b4;
    L_0x07af:
        r0 = move-exception;
        r35 = r8;
        goto L_0x08f5;
    L_0x07b4:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpPendingIntentsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x08ec }
        r39.println();	 Catch:{ all -> 0x08ec }
        if (r14 == 0) goto L_0x07c9;
    L_0x07c4:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x07af }
        r12.println(r0);	 Catch:{ all -> 0x07af }
    L_0x07c9:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpBroadcastsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x08ec }
        r39.println();	 Catch:{ all -> 0x08ec }
        if (r14 == 0) goto L_0x07de;
    L_0x07d9:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x07af }
        r12.println(r0);	 Catch:{ all -> 0x07af }
    L_0x07de:
        if (r14 != 0) goto L_0x07e2;
    L_0x07e0:
        if (r15 == 0) goto L_0x07f7;
    L_0x07e2:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpBroadcastStatsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x08ec }
        r39.println();	 Catch:{ all -> 0x08ec }
        if (r14 == 0) goto L_0x07f7;
    L_0x07f2:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x07af }
        r12.println(r0);	 Catch:{ all -> 0x07af }
    L_0x07f7:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpProvidersLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x08ec }
        r39.println();	 Catch:{ all -> 0x08ec }
        if (r14 == 0) goto L_0x080c;
    L_0x0807:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x07af }
        r12.println(r0);	 Catch:{ all -> 0x07af }
    L_0x080c:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpPermissionsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x08ec }
        r39.println();	 Catch:{ all -> 0x08ec }
        if (r14 == 0) goto L_0x0821;
    L_0x081c:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x07af }
        r12.println(r0);	 Catch:{ all -> 0x07af }
    L_0x0821:
        r1 = r10.mServices;	 Catch:{ all -> 0x08ec }
        r2 = r11;	 Catch:{ all -> 0x08ec }
        r3 = r12;	 Catch:{ all -> 0x08ec }
        r4 = r13;	 Catch:{ all -> 0x08ec }
        r5 = r25;	 Catch:{ all -> 0x08ec }
        r6 = r14;	 Catch:{ all -> 0x08ec }
        r7 = r15;	 Catch:{ all -> 0x08ec }
        r0 = r1.newServiceDumperLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x08ec }
        r7 = r0;	 Catch:{ all -> 0x08ec }
        monitor-exit(r37);	 Catch:{ all -> 0x08ec }
        resetPriorityAfterLockedSection();
        r7.dumpWithClient();
        r39.println();
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x08e0 }
        if (r14 == 0) goto L_0x084c;
    L_0x083f:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0845 }
        r12.println(r0);	 Catch:{ all -> 0x0845 }
        goto L_0x084c;
    L_0x0845:
        r0 = move-exception;
        r22 = r7;
        r35 = r8;
        goto L_0x08e5;
    L_0x084c:
        r0 = r10.mRecentTasks;	 Catch:{ all -> 0x08e0 }
        if (r0 == 0) goto L_0x0855;
    L_0x0850:
        r0 = r10.mRecentTasks;	 Catch:{ all -> 0x0845 }
        r0.dump(r12, r14, r15);	 Catch:{ all -> 0x0845 }
    L_0x0855:
        r39.println();	 Catch:{ all -> 0x08e0 }
        if (r14 == 0) goto L_0x085f;
    L_0x085a:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0845 }
        r12.println(r0);	 Catch:{ all -> 0x0845 }
    L_0x085f:
        r10.dumpLastANRLocked(r12);	 Catch:{ all -> 0x08e0 }
        r39.println();	 Catch:{ all -> 0x08e0 }
        if (r14 == 0) goto L_0x086c;
    L_0x0867:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0845 }
        r12.println(r0);	 Catch:{ all -> 0x0845 }
    L_0x086c:
        r10.dumpActivityStarterLocked(r12, r15);	 Catch:{ all -> 0x08e0 }
        r39.println();	 Catch:{ all -> 0x08e0 }
        if (r14 == 0) goto L_0x0879;
    L_0x0874:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0845 }
        r12.println(r0);	 Catch:{ all -> 0x0845 }
    L_0x0879:
        r10.dumpActivityContainersLocked(r12);	 Catch:{ all -> 0x08e0 }
        r39.println();	 Catch:{ all -> 0x08e0 }
        if (r14 == 0) goto L_0x0886;
    L_0x0881:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0845 }
        r12.println(r0);	 Catch:{ all -> 0x0845 }
    L_0x0886:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r22 = r7;
        r7 = r16;
        r35 = r8;
        r8 = r15;
        r1.dumpActivitiesLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x08ea }
        r0 = r10.mAssociations;	 Catch:{ all -> 0x08ea }
        r0 = r0.size();	 Catch:{ all -> 0x08ea }
        if (r0 <= 0) goto L_0x08b6;	 Catch:{ all -> 0x08ea }
    L_0x089f:
        r39.println();	 Catch:{ all -> 0x08ea }
        if (r14 == 0) goto L_0x08a9;	 Catch:{ all -> 0x08ea }
    L_0x08a4:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x08ea }
        r12.println(r0);	 Catch:{ all -> 0x08ea }
    L_0x08a9:
        r1 = r10;	 Catch:{ all -> 0x08ea }
        r2 = r11;	 Catch:{ all -> 0x08ea }
        r3 = r12;	 Catch:{ all -> 0x08ea }
        r4 = r13;	 Catch:{ all -> 0x08ea }
        r5 = r25;	 Catch:{ all -> 0x08ea }
        r6 = r14;	 Catch:{ all -> 0x08ea }
        r7 = r16;	 Catch:{ all -> 0x08ea }
        r8 = r15;	 Catch:{ all -> 0x08ea }
        r1.dumpAssociationsLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x08ea }
    L_0x08b6:
        r39.println();	 Catch:{ all -> 0x08ea }
        if (r14 == 0) goto L_0x08c0;	 Catch:{ all -> 0x08ea }
    L_0x08bb:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x08ea }
        r12.println(r0);	 Catch:{ all -> 0x08ea }
    L_0x08c0:
        r1 = r10;	 Catch:{ all -> 0x08ea }
        r2 = r11;	 Catch:{ all -> 0x08ea }
        r3 = r12;	 Catch:{ all -> 0x08ea }
        r4 = r13;	 Catch:{ all -> 0x08ea }
        r5 = r25;	 Catch:{ all -> 0x08ea }
        r6 = r14;	 Catch:{ all -> 0x08ea }
        r7 = r15;	 Catch:{ all -> 0x08ea }
        r8 = r23;	 Catch:{ all -> 0x08ea }
        r1.dumpProcessesLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x08ea }
        r39.println();	 Catch:{ all -> 0x08ea }
        if (r14 == 0) goto L_0x08d7;	 Catch:{ all -> 0x08ea }
    L_0x08d2:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x08ea }
        r12.println(r0);	 Catch:{ all -> 0x08ea }
    L_0x08d7:
        r10.dumpHandler(r12);	 Catch:{ all -> 0x08ea }
        monitor-exit(r37);	 Catch:{ all -> 0x08ea }
        resetPriorityAfterLockedSection();
        goto L_0x0a30;
    L_0x08e0:
        r0 = move-exception;
        r22 = r7;
        r35 = r8;
    L_0x08e5:
        monitor-exit(r37);	 Catch:{ all -> 0x08ea }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x08ea:
        r0 = move-exception;
        goto L_0x08e5;
    L_0x08ec:
        r0 = move-exception;
        r35 = r8;
        goto L_0x08f5;
    L_0x08f0:
        r0 = move-exception;
        r35 = r8;
        r14 = r34;
    L_0x08f5:
        monitor-exit(r37);	 Catch:{ all -> 0x08fa }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x08fa:
        r0 = move-exception;
        goto L_0x08f5;
    L_0x08fc:
        r35 = r8;
        r14 = r34;
        monitor-enter(r37);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0a36 }
        r0 = r10.mConstants;	 Catch:{ all -> 0x0a36 }
        r0.dump(r12);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x0919;
    L_0x090e:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
        goto L_0x0919;
    L_0x0914:
        r0 = move-exception;
        r1 = r35;
        goto L_0x0a39;
    L_0x0919:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpPendingIntentsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x092e;
    L_0x0929:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x092e:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpBroadcastsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x0943;
    L_0x093e:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x0943:
        if (r14 != 0) goto L_0x0947;
    L_0x0945:
        if (r15 == 0) goto L_0x095c;
    L_0x0947:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpBroadcastStatsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x095c;
    L_0x0957:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x095c:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpProvidersLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x0971;
    L_0x096c:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x0971:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r1.dumpPermissionsLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x0986;
    L_0x0981:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x0986:
        r1 = r10.mServices;	 Catch:{ all -> 0x0a36 }
        r2 = r11;	 Catch:{ all -> 0x0a36 }
        r3 = r12;	 Catch:{ all -> 0x0a36 }
        r4 = r13;	 Catch:{ all -> 0x0a36 }
        r5 = r25;	 Catch:{ all -> 0x0a36 }
        r6 = r14;	 Catch:{ all -> 0x0a36 }
        r7 = r15;	 Catch:{ all -> 0x0a36 }
        r0 = r1.newServiceDumperLocked(r2, r3, r4, r5, r6, r7);	 Catch:{ all -> 0x0a36 }
        r0.dumpLocked();	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x09a0;
    L_0x099b:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x09a0:
        r0 = r10.mRecentTasks;	 Catch:{ all -> 0x0a36 }
        if (r0 == 0) goto L_0x09a9;
    L_0x09a4:
        r0 = r10.mRecentTasks;	 Catch:{ all -> 0x0914 }
        r0.dump(r12, r14, r15);	 Catch:{ all -> 0x0914 }
    L_0x09a9:
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x09b3;
    L_0x09ae:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x09b3:
        r10.dumpLastANRLocked(r12);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x09c0;
    L_0x09bb:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x09c0:
        r10.dumpActivityStarterLocked(r12, r15);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x09cd;
    L_0x09c8:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x09cd:
        r10.dumpActivityContainersLocked(r12);	 Catch:{ all -> 0x0a36 }
        if (r21 != 0) goto L_0x09e9;
    L_0x09d2:
        r39.println();	 Catch:{ all -> 0x0914 }
        if (r14 == 0) goto L_0x09dc;	 Catch:{ all -> 0x0914 }
    L_0x09d7:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x09dc:
        r1 = r10;	 Catch:{ all -> 0x0914 }
        r2 = r11;	 Catch:{ all -> 0x0914 }
        r3 = r12;	 Catch:{ all -> 0x0914 }
        r4 = r13;	 Catch:{ all -> 0x0914 }
        r5 = r25;	 Catch:{ all -> 0x0914 }
        r6 = r14;	 Catch:{ all -> 0x0914 }
        r7 = r16;	 Catch:{ all -> 0x0914 }
        r8 = r15;	 Catch:{ all -> 0x0914 }
        r1.dumpActivitiesLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x0914 }
    L_0x09e9:
        r0 = r10.mAssociations;	 Catch:{ all -> 0x0a36 }
        r0 = r0.size();	 Catch:{ all -> 0x0a36 }
        if (r0 <= 0) goto L_0x0a08;
    L_0x09f1:
        r39.println();	 Catch:{ all -> 0x0914 }
        if (r14 == 0) goto L_0x09fb;	 Catch:{ all -> 0x0914 }
    L_0x09f6:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x09fb:
        r1 = r10;	 Catch:{ all -> 0x0914 }
        r2 = r11;	 Catch:{ all -> 0x0914 }
        r3 = r12;	 Catch:{ all -> 0x0914 }
        r4 = r13;	 Catch:{ all -> 0x0914 }
        r5 = r25;	 Catch:{ all -> 0x0914 }
        r6 = r14;	 Catch:{ all -> 0x0914 }
        r7 = r16;	 Catch:{ all -> 0x0914 }
        r8 = r15;	 Catch:{ all -> 0x0914 }
        r1.dumpAssociationsLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x0914 }
    L_0x0a08:
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x0a12;
    L_0x0a0d:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x0a12:
        r1 = r10;
        r2 = r11;
        r3 = r12;
        r4 = r13;
        r5 = r25;
        r6 = r14;
        r7 = r15;
        r8 = r23;
        r1.dumpProcessesLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x0a36 }
        r39.println();	 Catch:{ all -> 0x0a36 }
        if (r14 == 0) goto L_0x0a29;
    L_0x0a24:
        r0 = "-------------------------------------------------------------------------------";	 Catch:{ all -> 0x0914 }
        r12.println(r0);	 Catch:{ all -> 0x0914 }
    L_0x0a29:
        r10.dumpHandler(r12);	 Catch:{ all -> 0x0a36 }
        monitor-exit(r37);	 Catch:{ all -> 0x0a36 }
        resetPriorityAfterLockedSection();
    L_0x0a30:
        r1 = r35;
        android.os.Binder.restoreCallingIdentity(r1);
        return;
    L_0x0a36:
        r0 = move-exception;
        r1 = r35;
    L_0x0a39:
        monitor-exit(r37);	 Catch:{ all -> 0x0a3e }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0a3e:
        r0 = move-exception;
        goto L_0x0a39;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.doDump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean):void");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    private final void dumpApplicationMemoryUsage(java.io.FileDescriptor r129, com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions r130, java.lang.String[] r131, boolean r132, java.util.ArrayList<com.android.server.am.ProcessRecord> r133) {
        /*
        r128 = this;
        r1 = r128;
        r2 = r129;
        r3 = r130;
        r12 = r131;
        r14 = r133;
        r10 = android.os.SystemClock.uptimeMillis();
        r8 = android.os.SystemClock.elapsedRealtime();
        r15 = 1;
        r7 = new long[r15];
        r4 = 0;
        if (r14 != 0) goto L_0x0173;
    L_0x0018:
        r0 = "N/A";
        r15 = r12.length;
        if (r15 <= 0) goto L_0x0151;
    L_0x001d:
        r15 = r12[r4];
        r0 = r15.charAt(r4);
        r5 = 45;
        if (r0 == r5) goto L_0x014a;
    L_0x0027:
        r0 = new java.util.ArrayList;
        r0.<init>();
        r5 = r0;
        r128.updateCpuStatsNow();
        r0 = -1;
        r6 = r0;
        r0 = r12[r4];	 Catch:{ NumberFormatException -> 0x003a }
        r0 = java.lang.Integer.parseInt(r0);	 Catch:{ NumberFormatException -> 0x003a }
        r6 = r0;
        goto L_0x003b;
    L_0x003a:
        r0 = move-exception;
    L_0x003b:
        r4 = r1.mProcessCpuTracker;
        monitor-enter(r4);
        r0 = r1.mProcessCpuTracker;	 Catch:{ all -> 0x013d }
        r0 = r0.countStats();	 Catch:{ all -> 0x013d }
        r26 = 0;
    L_0x0046:
        r27 = r26;
        r28 = r15;
        r15 = r27;
        if (r15 >= r0) goto L_0x0090;
    L_0x004e:
        r29 = r0;
        r0 = r1.mProcessCpuTracker;	 Catch:{ all -> 0x0087 }
        r0 = r0.getStats(r15);	 Catch:{ all -> 0x0087 }
        r14 = r0.pid;	 Catch:{ all -> 0x0087 }
        if (r14 == r6) goto L_0x0070;	 Catch:{ all -> 0x0087 }
    L_0x005a:
        r14 = r0.baseName;	 Catch:{ all -> 0x0087 }
        if (r14 == 0) goto L_0x006d;	 Catch:{ all -> 0x0087 }
    L_0x005e:
        r14 = r0.baseName;	 Catch:{ all -> 0x0087 }
        r31 = r6;
        r25 = 0;
        r6 = r12[r25];	 Catch:{ all -> 0x0080 }
        r6 = r14.equals(r6);	 Catch:{ all -> 0x0080 }
        if (r6 == 0) goto L_0x0075;	 Catch:{ all -> 0x0080 }
    L_0x006c:
        goto L_0x0072;	 Catch:{ all -> 0x0080 }
    L_0x006d:
        r31 = r6;	 Catch:{ all -> 0x0080 }
        goto L_0x0075;	 Catch:{ all -> 0x0080 }
    L_0x0070:
        r31 = r6;	 Catch:{ all -> 0x0080 }
    L_0x0072:
        r5.add(r0);	 Catch:{ all -> 0x0080 }
    L_0x0075:
        r26 = r15 + 1;
        r15 = r28;
        r0 = r29;
        r6 = r31;
        r14 = r133;
        goto L_0x0046;
    L_0x0080:
        r0 = move-exception;
        r48 = r8;
        r50 = r10;
        goto L_0x0146;
    L_0x0087:
        r0 = move-exception;
        r31 = r6;
        r48 = r8;
        r50 = r10;
        goto L_0x0146;
    L_0x0090:
        r31 = r6;
        monitor-exit(r4);	 Catch:{ all -> 0x0137 }
        r0 = r5.size();
        if (r0 <= 0) goto L_0x0132;
    L_0x0099:
        r0 = new android.util.proto.ProtoOutputStream;
        r0.<init>(r2);
        r14 = 1112396529665; // 0x10300000001 float:1.4E-45 double:5.495969098605E-312;
        r0.write(r14, r10);
        r14 = 1112396529666; // 0x10300000002 float:2.8E-45 double:5.49596909861E-312;
        r0.write(r14, r8);
        r4 = 0;
        r6 = r5.size();
        r14 = 1;
        r6 = r6 - r14;
    L_0x00b5:
        if (r6 < 0) goto L_0x012a;
    L_0x00b7:
        r14 = r5.get(r6);
        r14 = (com.android.internal.os.ProcessCpuTracker.Stats) r14;
        r15 = r14.pid;
        r48 = r8;
        r8 = 2246267895811; // 0x20b00000003 float:4.2E-45 double:1.1098037986763E-311;
        r8 = r0.start(r8);
        r50 = r10;
        r10 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r0.write(r10, r15);
        r10 = r14.baseName;
        r11 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        r0.write(r11, r10);
        if (r4 != 0) goto L_0x00e6;
    L_0x00e0:
        r10 = new android.os.Debug$MemoryInfo;
        r10.<init>();
        r4 = r10;
    L_0x00e6:
        r10 = r3.dumpDetails;
        if (r10 != 0) goto L_0x0100;
    L_0x00ea:
        if (r132 != 0) goto L_0x00f1;
    L_0x00ec:
        r10 = r3.oomOnly;
        if (r10 != 0) goto L_0x00f1;
    L_0x00f0:
        goto L_0x0100;
    L_0x00f1:
        r10 = 0;
        r11 = android.os.Debug.getPss(r15, r7, r10);
        r10 = (int) r11;
        r4.dalvikPss = r10;
        r10 = 0;
        r11 = r7[r10];
        r10 = (int) r11;
        r4.dalvikPrivateDirty = r10;
        goto L_0x0103;
    L_0x0100:
        android.os.Debug.getMemoryInfo(r15, r4);
    L_0x0103:
        r10 = r3.dumpDalvik;
        r11 = r3.dumpSummaryOnly;
        r36 = 0;
        r38 = 0;
        r40 = 0;
        r42 = 0;
        r44 = 0;
        r46 = 0;
        r32 = r0;
        r33 = r4;
        r34 = r10;
        r35 = r11;
        android.app.ActivityThread.dumpMemInfoTable(r32, r33, r34, r35, r36, r38, r40, r42, r44, r46);
        r0.end(r8);
        r6 = r6 + -1;
        r8 = r48;
        r10 = r50;
        r12 = r131;
        goto L_0x00b5;
    L_0x012a:
        r48 = r8;
        r50 = r10;
        r0.flush();
        return;
    L_0x0132:
        r48 = r8;
        r50 = r10;
        goto L_0x0157;
    L_0x0137:
        r0 = move-exception;
        r48 = r8;
        r50 = r10;
        goto L_0x0146;
    L_0x013d:
        r0 = move-exception;
        r31 = r6;
        r48 = r8;
        r50 = r10;
        r28 = r15;
    L_0x0146:
        monitor-exit(r4);	 Catch:{ all -> 0x0148 }
        throw r0;
    L_0x0148:
        r0 = move-exception;
        goto L_0x0146;
    L_0x014a:
        r48 = r8;
        r50 = r10;
        r28 = r15;
        goto L_0x0157;
    L_0x0151:
        r48 = r8;
        r50 = r10;
        r28 = r0;
    L_0x0157:
        r0 = "ActivityManager";
        r4 = new java.lang.StringBuilder;
        r4.<init>();
        r5 = "No process found for: ";
        r4.append(r5);
        r5 = 0;
        r12 = r131;
        r5 = r12[r5];
        r4.append(r5);
        r4 = r4.toString();
        android.util.Log.d(r0, r4);
        return;
    L_0x0173:
        r48 = r8;
        r50 = r10;
        if (r132 != 0) goto L_0x0192;
    L_0x0179:
        r0 = r3.oomOnly;
        if (r0 != 0) goto L_0x0192;
    L_0x017d:
        r14 = r133;
        r0 = r133.size();
        r4 = 1;
        if (r0 == r4) goto L_0x018e;
    L_0x0186:
        r0 = r3.isCheckinRequest;
        if (r0 != 0) goto L_0x018e;
    L_0x018a:
        r0 = r3.packages;
        if (r0 == 0) goto L_0x0194;
    L_0x018e:
        r4 = 1;
        r3.dumpDetails = r4;
        goto L_0x0194;
    L_0x0192:
        r14 = r133;
    L_0x0194:
        r0 = new android.util.proto.ProtoOutputStream;
        r0.<init>(r2);
        r15 = r0;
        r10 = r50;
        r4 = 1112396529665; // 0x10300000001 float:1.4E-45 double:5.495969098605E-312;
        r15.write(r4, r10);
        r8 = r48;
        r4 = 1112396529666; // 0x10300000002 float:2.8E-45 double:5.49596909861E-312;
        r15.write(r4, r8);
        r0 = new java.util.ArrayList;
        r0.<init>();
        r6 = r0;
        r0 = new android.util.SparseArray;
        r0.<init>();
        r5 = r0;
        r19 = 0;
        r23 = 0;
        r26 = 0;
        r28 = 0;
        r0 = r3.dumpDalvik;
        r4 = 14;
        if (r0 == 0) goto L_0x01cb;
    L_0x01c8:
        r0 = new long[r4];
        goto L_0x01cd;
    L_0x01cb:
        r0 = libcore.util.EmptyArray.LONG;
    L_0x01cd:
        r53 = r0;
        r0 = r3.dumpDalvik;
        if (r0 == 0) goto L_0x01d6;
    L_0x01d3:
        r0 = new long[r4];
        goto L_0x01d8;
    L_0x01d6:
        r0 = libcore.util.EmptyArray.LONG;
    L_0x01d8:
        r42 = r0;
        r30 = 0;
        r32 = 0;
        r4 = 17;
        r2 = new long[r4];
        r54 = r2;
        r2 = new long[r4];
        r0 = DUMP_MEM_OOM_LABEL;
        r0 = r0.length;
        r55 = r2;
        r2 = new long[r0];
        r0 = DUMP_MEM_OOM_LABEL;
        r0 = r0.length;
        r56 = r2;
        r2 = new long[r0];
        r0 = DUMP_MEM_OOM_LABEL;
        r0 = r0.length;
        r57 = r2;
        r2 = new java.util.ArrayList[r0];
        r34 = 0;
        r36 = 0;
        r38 = 0;
        r40 = 0;
        r0 = 0;
        r43 = 0;
        r44 = r133.size();
        r22 = 1;
        r44 = r44 + -1;
        r45 = r26;
        r47 = r28;
        r49 = r30;
        r51 = r32;
        r58 = r34;
        r60 = r36;
        r62 = r38;
        r64 = r40;
        r33 = r0;
    L_0x0220:
        r66 = r44;
        r67 = r2;
        r2 = r66;
        if (r2 < 0) goto L_0x0658;
    L_0x0228:
        r0 = r14.get(r2);
        r14 = r0;
        r14 = (com.android.server.am.ProcessRecord) r14;
        monitor-enter(r128);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x063d }
        r0 = r14.thread;	 Catch:{ all -> 0x063d }
        r44 = r0;	 Catch:{ all -> 0x063d }
        r0 = r14.pid;	 Catch:{ all -> 0x063d }
        r78 = r0;	 Catch:{ all -> 0x063d }
        r0 = r14.getSetAdjWithServices();	 Catch:{ all -> 0x063d }
        r79 = r0;	 Catch:{ all -> 0x063d }
        r0 = r14.activities;	 Catch:{ all -> 0x063d }
        r0 = r0.size();	 Catch:{ all -> 0x063d }
        if (r0 <= 0) goto L_0x024b;	 Catch:{ all -> 0x063d }
    L_0x0249:
        r0 = 1;	 Catch:{ all -> 0x063d }
        goto L_0x024c;	 Catch:{ all -> 0x063d }
    L_0x024b:
        r0 = 0;	 Catch:{ all -> 0x063d }
    L_0x024c:
        r66 = r0;	 Catch:{ all -> 0x063d }
        monitor-exit(r128);	 Catch:{ all -> 0x063d }
        resetPriorityAfterLockedSection();
        if (r44 != 0) goto L_0x0272;
        r80 = r2;
        r12 = r5;
        r106 = r6;
        r97 = r7;
        r40 = r8;
        r81 = r10;
        r107 = r53;
        r8 = r56;
        r16 = 0;
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        goto L_0x05d8;
    L_0x0272:
        if (r43 != 0) goto L_0x027d;
    L_0x0274:
        r0 = new android.os.Debug$MemoryInfo;
        r0.<init>();
        r80 = r2;
        r2 = r0;
        goto L_0x0281;
    L_0x027d:
        r80 = r2;
        r2 = r43;
    L_0x0281:
        r0 = r3.dumpDetails;
        if (r0 != 0) goto L_0x02bb;
    L_0x0285:
        if (r132 != 0) goto L_0x0294;
    L_0x0287:
        r0 = r3.oomOnly;
        if (r0 != 0) goto L_0x0294;
    L_0x028b:
        r83 = r5;
        r82 = r6;
        r13 = r78;
        r21 = 0;
        goto L_0x02c3;
    L_0x0294:
        r0 = 3;
        r26 = android.os.SystemClock.currentThreadTimeMillis();
        r83 = r5;
        r82 = r6;
        r13 = r78;
        r4 = 0;
        r5 = android.os.Debug.getPss(r13, r7, r4);
        r5 = (int) r5;
        r2.dalvikPss = r5;
        r5 = android.os.SystemClock.currentThreadTimeMillis();
        r84 = r5;
        r21 = 0;
        r4 = r7[r21];
        r4 = (int) r4;
        r2.dalvikPrivateDirty = r4;
        r78 = r0;
        r25 = r33;
        r86 = r84;
        goto L_0x02d7;
    L_0x02bb:
        r83 = r5;
        r82 = r6;
        r13 = r78;
        r21 = 0;
    L_0x02c3:
        r0 = 4;
        r26 = android.os.SystemClock.currentThreadTimeMillis();
        android.os.Debug.getMemoryInfo(r13, r2);
        r5 = android.os.SystemClock.currentThreadTimeMillis();
        r4 = r2.hasSwappedOutPss;
        r78 = r0;
        r25 = r4;
        r86 = r5;
    L_0x02d7:
        r84 = r26;
        r0 = r3.dumpDetails;
        if (r0 == 0) goto L_0x0421;
    L_0x02dd:
        r0 = r3.localOnly;
        r5 = 2246267895812; // 0x20b00000004 float:5.6E-45 double:1.109803798677E-311;
        if (r0 == 0) goto L_0x0347;
    L_0x02e6:
        r4 = r15.start(r5);
        r88 = r7;
        r6 = 1146756268033; // 0x10b00000001 float:1.4E-45 double:5.66572876188E-312;
        r6 = r15.start(r6);
        r89 = r8;
        r8 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r15.write(r8, r13);
        r0 = r14.processName;
        r8 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        r15.write(r8, r0);
        r0 = r3.dumpDalvik;
        r8 = r3.dumpSummaryOnly;
        r30 = 0;
        r32 = 0;
        r34 = 0;
        r36 = 0;
        r38 = 0;
        r40 = 0;
        r26 = r15;
        r27 = r2;
        r28 = r0;
        r29 = r8;
        android.app.ActivityThread.dumpMemInfoTable(r26, r27, r28, r29, r30, r32, r34, r36, r38, r40);
        r15.end(r6);
        r15.end(r4);
        r94 = r13;
        r93 = r14;
        r16 = r21;
        r95 = r82;
        r96 = r83;
        r97 = r88;
        r40 = r89;
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        r81 = r10;
        goto L_0x043b;
    L_0x0347:
        r88 = r7;
        r89 = r8;
        r0 = new com.android.internal.os.ByteTransferPipe;	 Catch:{ IOException -> 0x03fe, RemoteException -> 0x03db }
        r0.<init>();	 Catch:{ IOException -> 0x03fe, RemoteException -> 0x03db }
        r9 = r0;
        r0 = r9.getWriteFd();	 Catch:{ all -> 0x03b7 }
        r7 = r3.dumpFullDetails;	 Catch:{ all -> 0x03b7 }
        r8 = r3.dumpDalvik;	 Catch:{ all -> 0x03b7 }
        r4 = r3.dumpSummaryOnly;	 Catch:{ all -> 0x03b7 }
        r91 = r10;
        r10 = r3.dumpUnreachable;	 Catch:{ all -> 0x039a }
        r11 = r4;
        r16 = r21;
        r4 = r44;
        r94 = r13;
        r93 = r14;
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        r13 = r5;
        r6 = r83;
        r5 = r0;
        r96 = r6;
        r95 = r82;
        r6 = r2;
        r97 = r88;
        r40 = r89;
        r13 = r9;
        r9 = r11;
        r81 = r91;
        r11 = r12;
        r4.dumpMemInfoProto(r5, r6, r7, r8, r9, r10, r11);	 Catch:{ all -> 0x0398 }
        r0 = r13.get();	 Catch:{ all -> 0x0398 }
        r4 = 2246267895812; // 0x20b00000004 float:5.6E-45 double:1.109803798677E-311;	 Catch:{ all -> 0x0398 }
        r15.write(r4, r0);	 Catch:{ all -> 0x0398 }
        r13.kill();	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        goto L_0x0420;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
    L_0x0398:
        r0 = move-exception;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        goto L_0x03d3;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
    L_0x039a:
        r0 = move-exception;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r94 = r13;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r93 = r14;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r16 = r21;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r95 = r82;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r96 = r83;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r97 = r88;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r40 = r89;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r81 = r91;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r13 = r9;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        goto L_0x03d3;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
    L_0x03b7:
        r0 = move-exception;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r94 = r13;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r93 = r14;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r16 = r21;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r95 = r82;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r96 = r83;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r97 = r88;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r40 = r89;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r13 = r9;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        r81 = r10;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
    L_0x03d3:
        r13.kill();	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
        throw r0;	 Catch:{ IOException -> 0x03d9, RemoteException -> 0x03d7 }
    L_0x03d7:
        r0 = move-exception;
        goto L_0x03f6;
    L_0x03d9:
        r0 = move-exception;
        goto L_0x0419;
    L_0x03db:
        r0 = move-exception;
        r94 = r13;
        r93 = r14;
        r16 = r21;
        r95 = r82;
        r96 = r83;
        r97 = r88;
        r40 = r89;
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        r81 = r10;
    L_0x03f6:
        r4 = "ActivityManager";
        r5 = "Got RemoteException!";
        android.util.Log.e(r4, r5, r0);
        goto L_0x043b;
    L_0x03fe:
        r0 = move-exception;
        r94 = r13;
        r93 = r14;
        r16 = r21;
        r95 = r82;
        r96 = r83;
        r97 = r88;
        r40 = r89;
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        r81 = r10;
    L_0x0419:
        r4 = "ActivityManager";
        r5 = "Got IOException!";
        android.util.Log.e(r4, r5, r0);
    L_0x0420:
        goto L_0x043b;
    L_0x0421:
        r97 = r7;
        r40 = r8;
        r94 = r13;
        r93 = r14;
        r16 = r21;
        r95 = r82;
        r96 = r83;
        r17 = 1120986464257; // 0x10500000001 float:1.4E-45 double:5.538409014424E-312;
        r38 = 1138166333442; // 0x10900000002 float:2.8E-45 double:5.62328884607E-312;
        r81 = r10;
    L_0x043b:
        r0 = r2.getTotalPss();
        r4 = (long) r0;
        r0 = r2.getTotalUss();
        r6 = (long) r0;
        r0 = r2.getTotalRss();
        r8 = (long) r0;
        r0 = r2.getTotalSwappedOutPss();
        r10 = (long) r0;
        monitor-enter(r128);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x061f }
        r13 = r93;
        r0 = r13.thread;	 Catch:{ all -> 0x0607 }
        if (r0 == 0) goto L_0x04a9;
    L_0x0459:
        r0 = r13.getSetAdjWithServices();	 Catch:{ all -> 0x0490 }
        r14 = r79;
        if (r14 != r0) goto L_0x04ab;
    L_0x0461:
        r0 = r13.baseProcessTracker;	 Catch:{ all -> 0x0479 }
        r33 = 1;	 Catch:{ all -> 0x0479 }
        r35 = r86 - r84;	 Catch:{ all -> 0x0479 }
        r12 = r13.pkgList;	 Catch:{ all -> 0x0479 }
        r26 = r0;	 Catch:{ all -> 0x0479 }
        r27 = r4;	 Catch:{ all -> 0x0479 }
        r29 = r6;	 Catch:{ all -> 0x0479 }
        r31 = r8;	 Catch:{ all -> 0x0479 }
        r34 = r78;	 Catch:{ all -> 0x0479 }
        r37 = r12;	 Catch:{ all -> 0x0479 }
        r26.addPss(r27, r29, r31, r33, r34, r35, r37);	 Catch:{ all -> 0x0479 }
        goto L_0x04ab;
    L_0x0479:
        r0 = move-exception;
        r98 = r6;
        r101 = r8;
        r104 = r10;
        r103 = r13;
        r107 = r53;
        r8 = r56;
        r6 = r62;
        r100 = r94;
        r106 = r95;
        r12 = r96;
        goto L_0x0636;
    L_0x0490:
        r0 = move-exception;
        r14 = r79;
        r98 = r6;
        r101 = r8;
        r104 = r10;
        r103 = r13;
        r107 = r53;
        r8 = r56;
        r6 = r62;
        r100 = r94;
        r106 = r95;
        r12 = r96;
        goto L_0x0636;
    L_0x04a9:
        r14 = r79;
    L_0x04ab:
        monitor-exit(r128);	 Catch:{ all -> 0x05f1 }
        resetPriorityAfterLockedSection();
        r0 = r3.isCheckinRequest;
        if (r0 != 0) goto L_0x05c8;
    L_0x04b3:
        if (r2 == 0) goto L_0x05c8;
    L_0x04b5:
        r58 = r58 + r4;
        r60 = r60 + r10;
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r12 = new java.lang.StringBuilder;
        r12.<init>();
        r98 = r6;
        r6 = r13.processName;
        r12.append(r6);
        r6 = " (pid ";
        r12.append(r6);
        r6 = r94;
        r12.append(r6);
        if (r66 == 0) goto L_0x04d6;
    L_0x04d3:
        r7 = " / activities)";
        goto L_0x04d8;
    L_0x04d6:
        r7 = ")";
    L_0x04d8:
        r12.append(r7);
        r70 = r12.toString();
        r7 = r13.processName;
        r69 = r0;
        r71 = r7;
        r72 = r4;
        r74 = r10;
        r76 = r6;
        r77 = r66;
        r69.<init>(r70, r71, r72, r74, r76, r77);
        r7 = r95;
        r7.add(r0);
        r12 = r96;
        r12.put(r6, r0);
        r100 = r6;
        r6 = r2.nativePss;
        r101 = r8;
        r8 = (long) r6;
        r19 = r19 + r8;
        r6 = r2.nativeSwappedOutPss;
        r8 = (long) r6;
        r23 = r23 + r8;
        r6 = r2.dalvikPss;
        r8 = (long) r6;
        r45 = r45 + r8;
        r6 = r2.dalvikSwappedOutPss;
        r8 = (long) r6;
        r47 = r47 + r8;
        r6 = r16;
    L_0x0514:
        r8 = r53;
        r9 = r8.length;
        if (r6 >= r9) goto L_0x0549;
    L_0x0519:
        r26 = r8[r6];
        r103 = r13;
        r9 = 17;
        r13 = r9 + r6;
        r13 = r2.getOtherPss(r13);
        r104 = r10;
        r9 = (long) r13;
        r26 = r26 + r9;
        r8[r6] = r26;
        r9 = r42[r6];
        r11 = 17;
        r13 = r11 + r6;
        r11 = r2.getOtherSwappedOutPss(r13);
        r106 = r7;
        r107 = r8;
        r7 = (long) r11;
        r9 = r9 + r7;
        r42[r6] = r9;
        r6 = r6 + 1;
        r13 = r103;
        r10 = r104;
        r7 = r106;
        r53 = r107;
        goto L_0x0514;
    L_0x0549:
        r106 = r7;
        r107 = r8;
        r104 = r10;
        r103 = r13;
        r6 = r2.otherPss;
        r6 = (long) r6;
        r49 = r49 + r6;
        r6 = r2.otherSwappedOutPss;
        r6 = (long) r6;
        r51 = r51 + r6;
        r6 = r16;
    L_0x055d:
        r7 = 17;
        if (r6 >= r7) goto L_0x057c;
    L_0x0561:
        r7 = r2.getOtherPss(r6);
        r7 = (long) r7;
        r9 = r54[r6];
        r9 = r9 + r7;
        r54[r6] = r9;
        r49 = r49 - r7;
        r9 = r2.getOtherSwappedOutPss(r6);
        r7 = (long) r9;
        r9 = r55[r6];
        r9 = r9 + r7;
        r55[r6] = r9;
        r51 = r51 - r7;
        r6 = r6 + 1;
        goto L_0x055d;
    L_0x057c:
        r6 = 900; // 0x384 float:1.261E-42 double:4.447E-321;
        if (r14 < r6) goto L_0x0587;
    L_0x0580:
        r6 = r62;
        r62 = r6 + r4;
        r64 = r64 + r104;
        goto L_0x0589;
    L_0x0587:
        r6 = r62;
    L_0x0589:
        r6 = r16;
    L_0x058b:
        r8 = r56;
        r7 = r8.length;
        if (r6 >= r7) goto L_0x05c5;
    L_0x0590:
        r7 = r8.length;
        r9 = 1;
        r7 = r7 - r9;
        if (r6 == r7) goto L_0x05a9;
    L_0x0595:
        r7 = DUMP_MEM_OOM_ADJ;
        r7 = r7[r6];
        if (r14 < r7) goto L_0x05a4;
    L_0x059b:
        r7 = DUMP_MEM_OOM_ADJ;
        r9 = r6 + 1;
        r7 = r7[r9];
        if (r14 >= r7) goto L_0x05a4;
    L_0x05a3:
        goto L_0x05a9;
    L_0x05a4:
        r6 = r6 + 1;
        r56 = r8;
        goto L_0x058b;
    L_0x05a9:
        r9 = r8[r6];
        r9 = r9 + r4;
        r8[r6] = r9;
        r9 = r57[r6];
        r9 = r9 + r104;
        r57[r6] = r9;
        r7 = r67[r6];
        if (r7 != 0) goto L_0x05bf;
    L_0x05b8:
        r7 = new java.util.ArrayList;
        r7.<init>();
        r67[r6] = r7;
    L_0x05bf:
        r7 = r67[r6];
        r7.add(r0);
    L_0x05c5:
        r43 = r2;
        goto L_0x05d6;
    L_0x05c8:
        r107 = r53;
        r8 = r56;
        r6 = r62;
        r106 = r95;
        r12 = r96;
        r43 = r2;
        r62 = r6;
    L_0x05d6:
        r33 = r25;
    L_0x05d8:
        r44 = r80 + -1;
        r56 = r8;
        r5 = r12;
        r8 = r40;
        r2 = r67;
        r10 = r81;
        r7 = r97;
        r6 = r106;
        r53 = r107;
        r4 = 17;
        r12 = r131;
        r14 = r133;
        goto L_0x0220;
    L_0x05f1:
        r0 = move-exception;
        r98 = r6;
        r101 = r8;
        r104 = r10;
        r103 = r13;
        r107 = r53;
        r8 = r56;
        r6 = r62;
        r100 = r94;
        r106 = r95;
        r12 = r96;
        goto L_0x0636;
    L_0x0607:
        r0 = move-exception;
        r98 = r6;
        r101 = r8;
        r104 = r10;
        r103 = r13;
        r107 = r53;
        r8 = r56;
        r6 = r62;
        r14 = r79;
        r100 = r94;
        r106 = r95;
        r12 = r96;
        goto L_0x0636;
    L_0x061f:
        r0 = move-exception;
        r98 = r6;
        r101 = r8;
        r104 = r10;
        r107 = r53;
        r8 = r56;
        r6 = r62;
        r14 = r79;
        r103 = r93;
        r100 = r94;
        r106 = r95;
        r12 = r96;
    L_0x0636:
        monitor-exit(r128);	 Catch:{ all -> 0x063b }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x063b:
        r0 = move-exception;
        goto L_0x0636;
    L_0x063d:
        r0 = move-exception;
        r80 = r2;
        r12 = r5;
        r106 = r6;
        r97 = r7;
        r40 = r8;
        r81 = r10;
        r103 = r14;
        r107 = r53;
        r8 = r56;
        r6 = r62;
    L_0x0651:
        monitor-exit(r128);	 Catch:{ all -> 0x0656 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0656:
        r0 = move-exception;
        goto L_0x0651;
    L_0x0658:
        r12 = r5;
        r106 = r6;
        r97 = r7;
        r40 = r8;
        r81 = r10;
        r107 = r53;
        r8 = r56;
        r6 = r62;
        r16 = 0;
        r4 = 0;
        r0 = r133.size();
        r2 = 1;
        if (r0 <= r2) goto L_0x0bfe;
    L_0x0672:
        r0 = r3.packages;
        if (r0 != 0) goto L_0x0bfe;
    L_0x0676:
        r128.updateCpuStatsNow();
        r2 = 0;
        r9 = r1.mProcessCpuTracker;
        monitor-enter(r9);
        r0 = r1.mProcessCpuTracker;	 Catch:{ all -> 0x0be9 }
        r0 = r0.countStats();	 Catch:{ all -> 0x0be9 }
        r43 = r2;
        r10 = r4;
        r2 = r16;
        r4 = r23;
    L_0x068a:
        if (r2 >= r0) goto L_0x08c9;
    L_0x068c:
        r13 = r1.mProcessCpuTracker;	 Catch:{ all -> 0x08b6 }
        r13 = r13.getStats(r2);	 Catch:{ all -> 0x08b6 }
        r108 = r6;
        r6 = r13.vsize;	 Catch:{ all -> 0x08a2 }
        r17 = 0;	 Catch:{ all -> 0x08a2 }
        r6 = (r6 > r17 ? 1 : (r6 == r17 ? 0 : -1));	 Catch:{ all -> 0x08a2 }
        if (r6 <= 0) goto L_0x087e;	 Catch:{ all -> 0x08a2 }
    L_0x069c:
        r6 = r13.pid;	 Catch:{ all -> 0x08a2 }
        r6 = r12.indexOfKey(r6);	 Catch:{ all -> 0x08a2 }
        if (r6 >= 0) goto L_0x087e;
    L_0x06a4:
        if (r43 != 0) goto L_0x06c0;
    L_0x06a6:
        r6 = new android.os.Debug$MemoryInfo;	 Catch:{ all -> 0x06ac }
        r6.<init>();	 Catch:{ all -> 0x06ac }
        goto L_0x06c2;
    L_0x06ac:
        r0 = move-exception;
        r23 = r4;
        r4 = r10;
        r110 = r12;
        r2 = r15;
        r6 = r43;
    L_0x06b5:
        r115 = r97;
        r117 = r106;
        r124 = r107;
        r13 = r108;
        r15 = r1;
        goto L_0x0bfa;
    L_0x06c0:
        r6 = r43;
    L_0x06c2:
        if (r132 != 0) goto L_0x06dd;
    L_0x06c4:
        r14 = r3.oomOnly;	 Catch:{ all -> 0x06d5 }
        if (r14 != 0) goto L_0x06dd;	 Catch:{ all -> 0x06d5 }
    L_0x06c8:
        r14 = r13.pid;	 Catch:{ all -> 0x06d5 }
        android.os.Debug.getMemoryInfo(r14, r6);	 Catch:{ all -> 0x06d5 }
        r111 = r0;
        r110 = r12;
        r12 = r97;
        r7 = 0;
        goto L_0x06f2;
    L_0x06d5:
        r0 = move-exception;
        r23 = r4;
        r4 = r10;
        r110 = r12;
        r2 = r15;
        goto L_0x06b5;
    L_0x06dd:
        r14 = r13.pid;	 Catch:{ all -> 0x0872 }
        r111 = r0;
        r110 = r12;
        r12 = r97;
        r7 = 0;
        r0 = android.os.Debug.getPss(r14, r12, r7);	 Catch:{ all -> 0x0861 }
        r0 = (int) r0;	 Catch:{ all -> 0x0861 }
        r6.nativePss = r0;	 Catch:{ all -> 0x0861 }
        r0 = r12[r16];	 Catch:{ all -> 0x0861 }
        r0 = (int) r0;	 Catch:{ all -> 0x0861 }
        r6.nativePrivateDirty = r0;	 Catch:{ all -> 0x0861 }
    L_0x06f2:
        r0 = r6.getTotalPss();	 Catch:{ all -> 0x0861 }
        r0 = (long) r0;	 Catch:{ all -> 0x0861 }
        r14 = r6.getTotalSwappedOutPss();	 Catch:{ all -> 0x0861 }
        r112 = r8;
        r7 = (long) r14;
        r58 = r58 + r0;
        r10 = r10 + r0;
        r14 = new com.android.server.am.ActivityManagerService$MemItem;	 Catch:{ all -> 0x084b }
        r113 = r10;
        r10 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0837 }
        r10.<init>();	 Catch:{ all -> 0x0837 }
        r11 = r13.name;	 Catch:{ all -> 0x0837 }
        r10.append(r11);	 Catch:{ all -> 0x0837 }
        r11 = " (pid ";	 Catch:{ all -> 0x0837 }
        r10.append(r11);	 Catch:{ all -> 0x0837 }
        r11 = r13.pid;	 Catch:{ all -> 0x0837 }
        r10.append(r11);	 Catch:{ all -> 0x0837 }
        r11 = ")";	 Catch:{ all -> 0x0837 }
        r10.append(r11);	 Catch:{ all -> 0x0837 }
        r24 = r10.toString();	 Catch:{ all -> 0x0837 }
        r10 = r13.name;	 Catch:{ all -> 0x0837 }
        r11 = r6.getSummaryTotalSwapPss();	 Catch:{ all -> 0x0837 }
        r115 = r12;
        r11 = (long) r11;
        r116 = r15;
        r15 = r13.pid;	 Catch:{ all -> 0x0824 }
        r31 = 0;	 Catch:{ all -> 0x0824 }
        r23 = r14;	 Catch:{ all -> 0x0824 }
        r25 = r10;	 Catch:{ all -> 0x0824 }
        r26 = r0;	 Catch:{ all -> 0x0824 }
        r28 = r11;	 Catch:{ all -> 0x0824 }
        r30 = r15;	 Catch:{ all -> 0x0824 }
        r23.<init>(r24, r25, r26, r28, r30, r31);	 Catch:{ all -> 0x0824 }
        r10 = r14;
        r12 = r106;
        r12.add(r10);	 Catch:{ all -> 0x0811 }
        r11 = r6.nativePss;	 Catch:{ all -> 0x0811 }
        r14 = (long) r11;	 Catch:{ all -> 0x0811 }
        r19 = r19 + r14;	 Catch:{ all -> 0x0811 }
        r11 = r6.nativeSwappedOutPss;	 Catch:{ all -> 0x0811 }
        r14 = (long) r11;
        r23 = r4 + r14;
        r4 = r6.dalvikPss;	 Catch:{ all -> 0x080d }
        r4 = (long) r4;	 Catch:{ all -> 0x080d }
        r45 = r45 + r4;	 Catch:{ all -> 0x080d }
        r4 = r6.dalvikSwappedOutPss;	 Catch:{ all -> 0x080d }
        r4 = (long) r4;
        r47 = r47 + r4;
        r4 = r16;
    L_0x075a:
        r14 = r107;
        r5 = r14.length;	 Catch:{ all -> 0x07fc }
        if (r4 >= r5) goto L_0x079a;	 Catch:{ all -> 0x07fc }
    L_0x075f:
        r17 = r14[r4];	 Catch:{ all -> 0x07fc }
        r5 = 17;	 Catch:{ all -> 0x07fc }
        r11 = r5 + r4;	 Catch:{ all -> 0x07fc }
        r5 = r6.getOtherPss(r11);	 Catch:{ all -> 0x07fc }
        r117 = r12;
        r11 = (long) r5;
        r17 = r17 + r11;
        r14[r4] = r17;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r11 = r42[r4];	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r5 = 17;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r15 = r5 + r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r5 = r6.getOtherSwappedOutPss(r15);	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r118 = r13;
        r119 = r14;
        r13 = (long) r5;
        r11 = r11 + r13;
        r42[r4] = r11;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r4 + 1;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r12 = r117;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r13 = r118;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r107 = r119;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        goto L_0x075a;	 Catch:{ all -> 0x078b, all -> 0x07ed }
    L_0x078b:
        r0 = move-exception;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r124 = r14;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r13 = r108;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r8 = r112;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r113;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r2 = r116;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r15 = r128;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        goto L_0x0bfa;	 Catch:{ all -> 0x078b, all -> 0x07ed }
    L_0x079a:
        r117 = r12;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r118 = r13;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r119 = r14;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r6.otherPss;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = (long) r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r49 = r49 + r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r6.otherSwappedOutPss;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = (long) r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r51 = r51 + r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r16;	 Catch:{ all -> 0x078b, all -> 0x07ed }
    L_0x07ac:
        r5 = 17;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        if (r4 >= r5) goto L_0x07cb;	 Catch:{ all -> 0x078b, all -> 0x07ed }
    L_0x07b0:
        r5 = r6.getOtherPss(r4);	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r11 = (long) r5;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r13 = r54[r4];	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r13 = r13 + r11;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r54[r4] = r13;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r49 = r49 - r11;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r5 = r6.getOtherSwappedOutPss(r4);	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r11 = (long) r5;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r13 = r55[r4];	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r13 = r13 + r11;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r55[r4] = r13;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r51 = r51 - r11;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r4 + 1;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        goto L_0x07ac;	 Catch:{ all -> 0x078b, all -> 0x07ed }
    L_0x07cb:
        r4 = r112[r16];	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r4 + r0;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r112[r16] = r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r57[r16];	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r4 + r7;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r57[r16] = r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4 = r67[r16];	 Catch:{ all -> 0x078b, all -> 0x07ed }
        if (r4 != 0) goto L_0x07e0;	 Catch:{ all -> 0x078b, all -> 0x07ed }
    L_0x07d9:
        r4 = new java.util.ArrayList;	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4.<init>();	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r67[r16] = r4;	 Catch:{ all -> 0x078b, all -> 0x07ed }
    L_0x07e0:
        r4 = r67[r16];	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r4.add(r10);	 Catch:{ all -> 0x078b, all -> 0x07ed }
        r43 = r6;
        r4 = r23;
        r10 = r113;
        goto L_0x088c;
    L_0x07ed:
        r0 = move-exception;
        r13 = r108;
        r8 = r112;
        r4 = r113;
        r2 = r116;
        r124 = r119;
        r15 = r128;
        goto L_0x0bfa;
    L_0x07fc:
        r0 = move-exception;
        r117 = r12;
        r124 = r14;
        r13 = r108;
        r8 = r112;
        r4 = r113;
        r2 = r116;
        r15 = r128;
        goto L_0x0bfa;
    L_0x080d:
        r0 = move-exception;
        r117 = r12;
        goto L_0x0816;
    L_0x0811:
        r0 = move-exception;
        r117 = r12;
        r23 = r4;
    L_0x0816:
        r124 = r107;
        r13 = r108;
        r8 = r112;
        r4 = r113;
        r2 = r116;
        r15 = r128;
        goto L_0x0bfa;
    L_0x0824:
        r0 = move-exception;
        r117 = r106;
        r23 = r4;
        r124 = r107;
        r13 = r108;
        r8 = r112;
        r4 = r113;
        r2 = r116;
        r15 = r128;
        goto L_0x0bfa;
    L_0x0837:
        r0 = move-exception;
        r115 = r12;
        r117 = r106;
        r23 = r4;
        r2 = r15;
        r124 = r107;
        r13 = r108;
        r8 = r112;
        r4 = r113;
        r15 = r128;
        goto L_0x0bfa;
    L_0x084b:
        r0 = move-exception;
        r113 = r10;
        r115 = r12;
        r117 = r106;
        r23 = r4;
        r2 = r15;
        r124 = r107;
        r13 = r108;
        r8 = r112;
        r4 = r113;
        r15 = r128;
        goto L_0x0bfa;
    L_0x0861:
        r0 = move-exception;
        r115 = r12;
        r117 = r106;
        r23 = r4;
        r4 = r10;
        r2 = r15;
        r124 = r107;
        r13 = r108;
        r15 = r128;
        goto L_0x0bfa;
    L_0x0872:
        r0 = move-exception;
        r110 = r12;
        r115 = r97;
        r117 = r106;
        r23 = r4;
        r4 = r10;
        r2 = r15;
        goto L_0x08af;
    L_0x087e:
        r111 = r0;
        r112 = r8;
        r110 = r12;
        r116 = r15;
        r115 = r97;
        r117 = r106;
        r119 = r107;
    L_0x088c:
        r2 = r2 + 1;
        r6 = r108;
        r12 = r110;
        r0 = r111;
        r8 = r112;
        r97 = r115;
        r15 = r116;
        r106 = r117;
        r107 = r119;
        r1 = r128;
        goto L_0x068a;
    L_0x08a2:
        r0 = move-exception;
        r110 = r12;
        r115 = r97;
        r117 = r106;
        r23 = r4;
        r4 = r10;
        r2 = r15;
        r6 = r43;
    L_0x08af:
        r124 = r107;
        r13 = r108;
        r15 = r1;
        goto L_0x0bfa;
    L_0x08b6:
        r0 = move-exception;
        r110 = r12;
        r115 = r97;
        r117 = r106;
        r23 = r4;
        r13 = r6;
        r4 = r10;
        r2 = r15;
        r6 = r43;
        r124 = r107;
        r15 = r1;
        goto L_0x0bfa;
    L_0x08c9:
        r108 = r6;
        r112 = r8;
        r110 = r12;
        r116 = r15;
        r115 = r97;
        r117 = r106;
        r119 = r107;
        monitor-exit(r9);	 Catch:{ all -> 0x0bd6 }
        r0 = new java.util.ArrayList;
        r0.<init>();
        r1 = r0;
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r24 = "Native";
        r25 = "Native";
        r30 = -1;
        r23 = r0;
        r26 = r19;
        r28 = r4;
        r23.<init>(r24, r25, r26, r28, r30);
        r1.add(r0);
        r2 = -2;
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r24 = "Dalvik";
        r25 = "Dalvik";
        r30 = -2;
        r23 = r0;
        r26 = r45;
        r28 = r47;
        r23.<init>(r24, r25, r26, r28, r30);
        r1.add(r0);
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r24 = "Unknown";
        r25 = "Unknown";
        r30 = -3;
        r23 = r0;
        r26 = r49;
        r28 = r51;
        r23.<init>(r24, r25, r26, r28, r30);
        r1.add(r0);
        r0 = r16;
    L_0x091d:
        r6 = 17;
        if (r0 >= r6) goto L_0x093c;
    L_0x0921:
        r6 = android.os.Debug.MemoryInfo.getOtherLabel(r0);
        r7 = new com.android.server.am.ActivityManagerService$MemItem;
        r26 = r54[r0];
        r28 = r55[r0];
        r23 = r7;
        r24 = r6;
        r25 = r6;
        r30 = r0;
        r23.<init>(r24, r25, r26, r28, r30);
        r1.add(r7);
        r0 = r0 + 1;
        goto L_0x091d;
    L_0x093c:
        r6 = r119;
        r0 = r6.length;
        if (r0 <= 0) goto L_0x09a4;
    L_0x0941:
        r0 = r1.iterator();
    L_0x0945:
        r7 = r0.hasNext();
        if (r7 == 0) goto L_0x09a4;
    L_0x094b:
        r7 = r0.next();
        r7 = (com.android.server.am.ActivityManagerService.MemItem) r7;
        r8 = 0;
        r9 = 0;
        r12 = r7.id;
        r13 = -2;
        if (r12 != r13) goto L_0x095b;
    L_0x0958:
        r8 = 0;
        r9 = 3;
        goto L_0x0978;
    L_0x095b:
        r12 = r7.id;
        if (r12 != 0) goto L_0x0963;
    L_0x095f:
        r8 = 4;
        r9 = 8;
        goto L_0x0978;
    L_0x0963:
        r12 = r7.id;
        r13 = 10;
        if (r12 != r13) goto L_0x096e;
    L_0x0969:
        r8 = 9;
        r9 = 11;
        goto L_0x0978;
    L_0x096e:
        r12 = r7.id;
        r13 = 12;
        if (r12 != r13) goto L_0x0945;
    L_0x0974:
        r8 = 12;
        r9 = 13;
    L_0x0978:
        r12 = new java.util.ArrayList;
        r12.<init>();
        r7.subitems = r12;
        r12 = r8;
    L_0x0980:
        if (r12 > r9) goto L_0x09a3;
    L_0x0982:
        r13 = 17;
        r14 = r13 + r12;
        r14 = android.os.Debug.MemoryInfo.getOtherLabel(r14);
        r15 = r7.subitems;
        r13 = new com.android.server.am.ActivityManagerService$MemItem;
        r26 = r6[r12];
        r28 = r42[r12];
        r23 = r13;
        r24 = r14;
        r25 = r14;
        r30 = r12;
        r23.<init>(r24, r25, r26, r28, r30);
        r15.add(r13);
        r12 = r12 + 1;
        goto L_0x0980;
    L_0x09a3:
        goto L_0x0945;
    L_0x09a4:
        r0 = new java.util.ArrayList;
        r0.<init>();
        r7 = r0;
        r0 = r16;
    L_0x09ac:
        r8 = r112;
        r9 = r8.length;
        if (r0 >= r9) goto L_0x09e6;
    L_0x09b1:
        r12 = r8[r0];
        r14 = 0;
        r9 = (r12 > r14 ? 1 : (r12 == r14 ? 0 : -1));
        if (r9 == 0) goto L_0x09e1;
    L_0x09b9:
        r9 = r3.isCompact;
        if (r9 == 0) goto L_0x09c4;
    L_0x09bd:
        r9 = DUMP_MEM_OOM_COMPACT_LABEL;
        r9 = r9[r0];
    L_0x09c1:
        r24 = r9;
        goto L_0x09c9;
    L_0x09c4:
        r9 = DUMP_MEM_OOM_LABEL;
        r9 = r9[r0];
        goto L_0x09c1;
    L_0x09c9:
        r9 = new com.android.server.am.ActivityManagerService$MemItem;
        r26 = r8[r0];
        r28 = r57[r0];
        r12 = DUMP_MEM_OOM_ADJ;
        r30 = r12[r0];
        r23 = r9;
        r25 = r24;
        r23.<init>(r24, r25, r26, r28, r30);
        r12 = r67[r0];
        r9.subitems = r12;
        r7.add(r9);
    L_0x09e1:
        r0 = r0 + 1;
        r112 = r8;
        goto L_0x09ac;
    L_0x09e6:
        r0 = r3.dumpSwapPss;
        if (r0 == 0) goto L_0x09f4;
    L_0x09ea:
        if (r33 == 0) goto L_0x09f4;
    L_0x09ec:
        r12 = 0;
        r0 = (r60 > r12 ? 1 : (r60 == r12 ? 0 : -1));
        if (r0 == 0) goto L_0x09f4;
    L_0x09f2:
        r0 = 1;
        goto L_0x09f6;
    L_0x09f4:
        r0 = r16;
    L_0x09f6:
        r3.dumpSwapPss = r0;
        r0 = r3.oomOnly;
        if (r0 != 0) goto L_0x0a11;
    L_0x09fc:
        r27 = 2246267895813; // 0x20b00000005 float:7.0E-45 double:1.1098037986773E-311;
        r29 = "proc";
        r31 = 1;
        r0 = r3.dumpSwapPss;
        r26 = r116;
        r30 = r117;
        r32 = r0;
        dumpMemItems(r26, r27, r29, r30, r31, r32);
    L_0x0a11:
        r27 = 2246267895814; // 0x20b00000006 float:8.4E-45 double:1.109803798678E-311;
        r29 = "oom";
        r31 = 0;
        r0 = r3.dumpSwapPss;
        r26 = r116;
        r30 = r7;
        r32 = r0;
        dumpMemItems(r26, r27, r29, r30, r31, r32);
        if (r132 != 0) goto L_0x0a40;
    L_0x0a28:
        r0 = r3.oomOnly;
        if (r0 != 0) goto L_0x0a40;
    L_0x0a2c:
        r27 = 2246267895815; // 0x20b00000007 float:9.8E-45 double:1.1098037986783E-311;
        r29 = "cat";
        r31 = 1;
        r0 = r3.dumpSwapPss;
        r26 = r116;
        r30 = r1;
        r32 = r0;
        dumpMemItems(r26, r27, r29, r30, r31, r32);
    L_0x0a40:
        r0 = new com.android.internal.util.MemInfoReader;
        r0.<init>();
        r9 = r0;
        r9.readMemInfo();
        r13 = 0;
        r0 = (r10 > r13 ? 1 : (r10 == r13 ? 0 : -1));
        r13 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        if (r0 <= 0) goto L_0x0a90;
    L_0x0a51:
        r15 = r128;
        monitor-enter(r128);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0a8a }
        r17 = r9.getRealCachedSizeKb();	 Catch:{ all -> 0x0a8a }
        r23 = r9.getFreeSizeKb();	 Catch:{ all -> 0x0a8a }
        r25 = r9.getZramTotalSizeKb();	 Catch:{ all -> 0x0a8a }
        r27 = r9.getKernelUsedSizeKb();	 Catch:{ all -> 0x0a8a }
        r68 = r17 * r13;	 Catch:{ all -> 0x0a8a }
        r70 = r23 * r13;	 Catch:{ all -> 0x0a8a }
        r72 = r25 * r13;	 Catch:{ all -> 0x0a8a }
        r74 = r27 * r13;	 Catch:{ all -> 0x0a8a }
        r76 = r10 * r13;	 Catch:{ all -> 0x0a8a }
        com.android.server.am.EventLogTags.writeAmMeminfo(r68, r70, r72, r74, r76);	 Catch:{ all -> 0x0a8a }
        r0 = r15.mProcessStats;	 Catch:{ all -> 0x0a8a }
        r68 = r0;	 Catch:{ all -> 0x0a8a }
        r69 = r17;	 Catch:{ all -> 0x0a8a }
        r71 = r23;	 Catch:{ all -> 0x0a8a }
        r73 = r25;	 Catch:{ all -> 0x0a8a }
        r75 = r27;	 Catch:{ all -> 0x0a8a }
        r77 = r10;	 Catch:{ all -> 0x0a8a }
        r68.addSysMemUsageLocked(r69, r71, r73, r75, r77);	 Catch:{ all -> 0x0a8a }
        monitor-exit(r128);	 Catch:{ all -> 0x0a8a }
        resetPriorityAfterLockedSection();
        goto L_0x0a92;
    L_0x0a8a:
        r0 = move-exception;
        monitor-exit(r128);	 Catch:{ all -> 0x0a8a }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0a90:
        r15 = r128;
    L_0x0a92:
        if (r132 != 0) goto L_0x0ad5;
    L_0x0a94:
        r13 = 1112396529672; // 0x10300000008 float:1.1E-44 double:5.49596909864E-312;
        r120 = r1;
        r0 = r9.getTotalSizeKb();
        r121 = r2;
        r2 = r116;
        r2.write(r13, r0);
        r0 = 1159641169929; // 0x10e00000009 float:1.3E-44 double:5.72938863565E-312;
        r13 = r15.mLastMemoryLevel;
        r2.write(r0, r13);
        r0 = 1112396529674; // 0x1030000000a float:1.4E-44 double:5.49596909865E-312;
        r13 = r108;
        r2.write(r0, r13);
        r0 = 1112396529675; // 0x1030000000b float:1.5E-44 double:5.495969098654E-312;
        r122 = r4;
        r3 = r9.getCachedSizeKb();
        r2.write(r0, r3);
        r0 = 1112396529676; // 0x1030000000c float:1.7E-44 double:5.49596909866E-312;
        r3 = r9.getFreeSizeKb();
        r2.write(r0, r3);
        goto L_0x0adf;
    L_0x0ad5:
        r120 = r1;
        r121 = r2;
        r122 = r4;
        r13 = r108;
        r2 = r116;
    L_0x0adf:
        r0 = r9.getTotalSizeKb();
        r3 = r58 - r60;
        r0 = r0 - r3;
        r3 = r9.getFreeSizeKb();
        r0 = r0 - r3;
        r3 = r9.getRealCachedSizeKb();
        r0 = r0 - r3;
        r3 = r9.getKernelUsedSizeKb();
        r0 = r0 - r3;
        r3 = r9.getZramTotalSizeKb();
        r0 = r0 - r3;
        r3 = 1112396529677; // 0x1030000000d float:1.8E-44 double:5.495969098664E-312;
        r124 = r6;
        r5 = r58 - r13;
        r2.write(r3, r5);
        r3 = 1112396529678; // 0x1030000000e float:2.0E-44 double:5.49596909867E-312;
        r5 = r9.getKernelUsedSizeKb();
        r2.write(r3, r5);
        r3 = 1112396529679; // 0x1030000000f float:2.1E-44 double:5.495969098674E-312;
        r2.write(r3, r0);
        if (r132 != 0) goto L_0x0bd3;
    L_0x0b1c:
        r3 = r9.getZramTotalSizeKb();
        r5 = 0;
        r3 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1));
        if (r3 == 0) goto L_0x0b50;
    L_0x0b26:
        r3 = 1112396529680; // 0x10300000010 float:2.24E-44 double:5.49596909868E-312;
        r5 = r9.getZramTotalSizeKb();
        r2.write(r3, r5);
        r3 = 1112396529681; // 0x10300000011 float:2.4E-44 double:5.495969098684E-312;
        r5 = r9.getSwapTotalSizeKb();
        r17 = r9.getSwapFreeSizeKb();
        r5 = r5 - r17;
        r2.write(r3, r5);
        r3 = 1112396529682; // 0x10300000012 float:2.5E-44 double:5.49596909869E-312;
        r5 = r9.getSwapTotalSizeKb();
        r2.write(r3, r5);
    L_0x0b50:
        r3 = r128.getKsmInfo();
        r4 = 1112396529683; // 0x10300000013 float:2.7E-44 double:5.495969098694E-312;
        r125 = r0;
        r6 = 1;
        r0 = r3[r6];
        r2.write(r4, r0);
        r0 = 1112396529684; // 0x10300000014 float:2.8E-44 double:5.4959690987E-312;
        r4 = r3[r16];
        r2.write(r0, r4);
        r0 = 1112396529685; // 0x10300000015 float:2.9E-44 double:5.495969098704E-312;
        r4 = 2;
        r4 = r3[r4];
        r2.write(r0, r4);
        r0 = 1112396529686; // 0x10300000016 float:3.1E-44 double:5.49596909871E-312;
        r4 = 3;
        r4 = r3[r4];
        r2.write(r0, r4);
        r0 = 1120986464279; // 0x10500000017 float:3.2E-44 double:5.538409014533E-312;
        r4 = android.app.ActivityManager.staticGetMemoryClass();
        r2.write(r0, r4);
        r0 = 1120986464280; // 0x10500000018 float:3.4E-44 double:5.53840901454E-312;
        r4 = android.app.ActivityManager.staticGetLargeMemoryClass();
        r2.write(r0, r4);
        r0 = 1112396529689; // 0x10300000019 float:3.5E-44 double:5.495969098724E-312;
        r4 = r15.mProcessList;
        r5 = 906; // 0x38a float:1.27E-42 double:4.476E-321;
        r4 = r4.getMemLevel(r5);
        r16 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r4 = r4 / r16;
        r2.write(r0, r4);
        r0 = 1112396529690; // 0x1030000001a float:3.6E-44 double:5.49596909873E-312;
        r4 = r15.mProcessList;
        r4 = r4.getCachedRestoreThresholdKb();
        r2.write(r0, r4);
        r0 = 1133871366171; // 0x1080000001b float:3.8E-44 double:5.60206888828E-312;
        r4 = android.app.ActivityManager.isLowRamDeviceStatic();
        r2.write(r0, r4);
        r0 = 1133871366172; // 0x1080000001c float:3.9E-44 double:5.602068888287E-312;
        r4 = android.app.ActivityManager.isHighEndGfx();
        r2.write(r0, r4);
    L_0x0bd3:
        r23 = r122;
        goto L_0x0c0a;
    L_0x0bd6:
        r0 = move-exception;
        r122 = r4;
        r13 = r108;
        r8 = r112;
        r2 = r116;
        r124 = r119;
        r15 = r128;
        r4 = r10;
        r6 = r43;
        r23 = r122;
        goto L_0x0bfa;
    L_0x0be9:
        r0 = move-exception;
        r13 = r6;
        r110 = r12;
        r115 = r97;
        r117 = r106;
        r124 = r107;
        r127 = r15;
        r15 = r1;
        r1 = r2;
        r2 = r127;
        r6 = r1;
    L_0x0bfa:
        monitor-exit(r9);	 Catch:{ all -> 0x0bfc }
        throw r0;
    L_0x0bfc:
        r0 = move-exception;
        goto L_0x0bfa;
    L_0x0bfe:
        r13 = r6;
        r110 = r12;
        r2 = r15;
        r115 = r97;
        r117 = r106;
        r124 = r107;
        r15 = r1;
        r10 = r4;
    L_0x0c0a:
        r2.flush();
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpApplicationMemoryUsage(java.io.FileDescriptor, com.android.server.am.ActivityManagerService$MemoryUsageDumpOptions, java.lang.String[], boolean, java.util.ArrayList):void");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    private final void dumpApplicationMemoryUsage(java.io.FileDescriptor r106, java.io.PrintWriter r107, java.lang.String r108, com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions r109, java.lang.String[] r110, boolean r111, java.util.ArrayList<com.android.server.am.ProcessRecord> r112, java.io.PrintWriter r113) {
        /*
        r105 = this;
        r9 = r105;
        r15 = r107;
        r14 = r109;
        r13 = r110;
        r12 = r112;
        r30 = android.os.SystemClock.uptimeMillis();
        r32 = android.os.SystemClock.elapsedRealtime();
        r11 = 1;
        r10 = new long[r11];
        r7 = 0;
        if (r12 != 0) goto L_0x0166;
    L_0x0018:
        r0 = "N/A";
        r1 = r13.length;
        if (r1 <= 0) goto L_0x014d;
    L_0x001d:
        r5 = r13[r7];
        r0 = r5.charAt(r7);
        r1 = 45;
        if (r0 == r1) goto L_0x0144;
    L_0x0027:
        r0 = new java.util.ArrayList;
        r0.<init>();
        r6 = r0;
        r105.updateCpuStatsNow();
        r0 = -1;
        r1 = r0;
        r0 = r13[r7];	 Catch:{ NumberFormatException -> 0x003a }
        r0 = java.lang.Integer.parseInt(r0);	 Catch:{ NumberFormatException -> 0x003a }
        r1 = r0;
        goto L_0x003b;
    L_0x003a:
        r0 = move-exception;
    L_0x003b:
        r3 = r1;
        r1 = r9.mProcessCpuTracker;
        monitor-enter(r1);
        r0 = r9.mProcessCpuTracker;	 Catch:{ all -> 0x0135 }
        r0 = r0.countStats();	 Catch:{ all -> 0x0135 }
        r2 = r7;
    L_0x0046:
        if (r2 >= r0) goto L_0x0074;
    L_0x0048:
        r4 = r9.mProcessCpuTracker;	 Catch:{ all -> 0x0067 }
        r4 = r4.getStats(r2);	 Catch:{ all -> 0x0067 }
        r8 = r4.pid;	 Catch:{ all -> 0x0067 }
        if (r8 == r3) goto L_0x0060;	 Catch:{ all -> 0x0067 }
    L_0x0052:
        r8 = r4.baseName;	 Catch:{ all -> 0x0067 }
        if (r8 == 0) goto L_0x0063;	 Catch:{ all -> 0x0067 }
    L_0x0056:
        r8 = r4.baseName;	 Catch:{ all -> 0x0067 }
        r11 = r13[r7];	 Catch:{ all -> 0x0067 }
        r8 = r8.equals(r11);	 Catch:{ all -> 0x0067 }
        if (r8 == 0) goto L_0x0063;	 Catch:{ all -> 0x0067 }
    L_0x0060:
        r6.add(r4);	 Catch:{ all -> 0x0067 }
    L_0x0063:
        r2 = r2 + 1;
        r11 = 1;
        goto L_0x0046;
    L_0x0067:
        r0 = move-exception;
        r36 = r3;
        r37 = r5;
        r34 = r6;
        r40 = r10;
        r5 = r14;
        r6 = r15;
        goto L_0x0140;
    L_0x0074:
        monitor-exit(r1);	 Catch:{ all -> 0x0135 }
        r0 = r6.size();
        if (r0 <= 0) goto L_0x0144;
    L_0x007b:
        r0 = r14.isCheckinRequest;
        r8 = r14.isCompact;
        r1 = r9;
        r2 = r15;
        r36 = r3;
        r3 = r30;
        r37 = r5;
        r11 = r6;
        r5 = r32;
        r38 = r7;
        r7 = r0;
        r13 = 0;
        r1.dumpApplicationMemoryUsageHeader(r2, r3, r5, r7, r8);
        r0 = 0;
        r1 = r11.size();
        r2 = 1;
        r1 = r1 - r2;
    L_0x0098:
        if (r1 < 0) goto L_0x012e;
    L_0x009a:
        r2 = r11.get(r1);
        r2 = (com.android.internal.os.ProcessCpuTracker.Stats) r2;
        r3 = r2.pid;
        r4 = r14.isCheckinRequest;
        if (r4 != 0) goto L_0x00cd;
    L_0x00a6:
        r4 = r14.dumpDetails;
        if (r4 == 0) goto L_0x00cd;
    L_0x00aa:
        r4 = new java.lang.StringBuilder;
        r4.<init>();
        r5 = "\n** MEMINFO in pid ";
        r4.append(r5);
        r4.append(r3);
        r5 = " [";
        r4.append(r5);
        r5 = r2.baseName;
        r4.append(r5);
        r5 = "] **";
        r4.append(r5);
        r4 = r4.toString();
        r15.println(r4);
    L_0x00cd:
        if (r0 != 0) goto L_0x00d5;
    L_0x00cf:
        r4 = new android.os.Debug$MemoryInfo;
        r4.<init>();
        r0 = r4;
    L_0x00d5:
        r4 = r14.dumpDetails;
        if (r4 != 0) goto L_0x00ed;
    L_0x00d9:
        if (r111 != 0) goto L_0x00e0;
    L_0x00db:
        r4 = r14.oomOnly;
        if (r4 != 0) goto L_0x00e0;
    L_0x00df:
        goto L_0x00ed;
    L_0x00e0:
        r4 = android.os.Debug.getPss(r3, r10, r13);
        r4 = (int) r4;
        r0.dalvikPss = r4;
        r4 = r10[r38];
        r4 = (int) r4;
        r0.dalvikPrivateDirty = r4;
        goto L_0x00f0;
    L_0x00ed:
        android.os.Debug.getMemoryInfo(r3, r0);
    L_0x00f0:
        r4 = r14.isCheckinRequest;
        r5 = r14.dumpFullDetails;
        r6 = r14.dumpDalvik;
        r7 = r14.dumpSummaryOnly;
        r8 = r2.baseName;
        r18 = 0;
        r20 = 0;
        r22 = 0;
        r24 = 0;
        r26 = 0;
        r28 = 0;
        r40 = r10;
        r10 = r15;
        r34 = r11;
        r11 = r0;
        r12 = r4;
        r4 = r13;
        r13 = r5;
        r5 = r14;
        r14 = r6;
        r6 = r15;
        r15 = r7;
        r16 = r3;
        r17 = r8;
        android.app.ActivityThread.dumpMemInfoTable(r10, r11, r12, r13, r14, r15, r16, r17, r18, r20, r22, r24, r26, r28);
        r7 = r5.isCheckinRequest;
        if (r7 == 0) goto L_0x0121;
    L_0x011e:
        r107.println();
    L_0x0121:
        r1 = r1 + -1;
        r12 = r112;
        r13 = r4;
        r14 = r5;
        r15 = r6;
        r11 = r34;
        r10 = r40;
        goto L_0x0098;
    L_0x012e:
        r40 = r10;
        r34 = r11;
        r5 = r14;
        r6 = r15;
        return;
    L_0x0135:
        r0 = move-exception;
        r36 = r3;
        r37 = r5;
        r34 = r6;
        r40 = r10;
        r5 = r14;
        r6 = r15;
    L_0x0140:
        monitor-exit(r1);	 Catch:{ all -> 0x0142 }
        throw r0;
    L_0x0142:
        r0 = move-exception;
        goto L_0x0140;
    L_0x0144:
        r37 = r5;
        r40 = r10;
        r5 = r14;
        r6 = r15;
        r0 = r37;
        goto L_0x0151;
    L_0x014d:
        r40 = r10;
        r5 = r14;
        r6 = r15;
    L_0x0151:
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "No process found for: ";
        r1.append(r2);
        r1.append(r0);
        r1 = r1.toString();
        r6.println(r1);
        return;
    L_0x0166:
        r38 = r7;
        r40 = r10;
        r5 = r14;
        r6 = r15;
        r4 = 0;
        if (r111 != 0) goto L_0x0185;
    L_0x016f:
        r0 = r5.oomOnly;
        if (r0 != 0) goto L_0x0185;
    L_0x0173:
        r0 = r112.size();
        r1 = 1;
        if (r0 == r1) goto L_0x0182;
    L_0x017a:
        r0 = r5.isCheckinRequest;
        if (r0 != 0) goto L_0x0182;
    L_0x017e:
        r0 = r5.packages;
        if (r0 == 0) goto L_0x0185;
    L_0x0182:
        r1 = 1;
        r5.dumpDetails = r1;
    L_0x0185:
        r7 = r5.isCheckinRequest;
        r8 = r5.isCompact;
        r1 = r9;
        r2 = r6;
        r15 = r4;
        r3 = r30;
        r13 = r5;
        r14 = r6;
        r5 = r32;
        r1.dumpApplicationMemoryUsageHeader(r2, r3, r5, r7, r8);
        r0 = new java.util.ArrayList;
        r0.<init>();
        r8 = r0;
        r0 = new android.util.SparseArray;
        r0.<init>();
        r7 = r0;
        r0 = 0;
        r2 = 0;
        r4 = 0;
        r10 = 0;
        r6 = r13.dumpDalvik;
        r12 = 14;
        if (r6 == 0) goto L_0x01b2;
    L_0x01af:
        r6 = new long[r12];
        goto L_0x01b4;
    L_0x01b2:
        r6 = libcore.util.EmptyArray.LONG;
    L_0x01b4:
        r15 = r13.dumpDalvik;
        if (r15 == 0) goto L_0x01bb;
    L_0x01b8:
        r12 = new long[r12];
        goto L_0x01bd;
    L_0x01bb:
        r12 = libcore.util.EmptyArray.LONG;
    L_0x01bd:
        r34 = r12;
        r15 = 0;
        r17 = 0;
        r12 = 17;
        r42 = r4;
        r5 = new long[r12];
        r4 = new long[r12];
        r12 = DUMP_MEM_OOM_LABEL;
        r12 = r12.length;
        r12 = new long[r12];
        r45 = r0;
        r0 = DUMP_MEM_OOM_LABEL;
        r0 = r0.length;
        r1 = new long[r0];
        r0 = DUMP_MEM_OOM_LABEL;
        r0 = r0.length;
        r47 = r2;
        r3 = new java.util.ArrayList[r0];
        r19 = 0;
        r21 = 0;
        r23 = 0;
        r25 = 0;
        r0 = 0;
        r2 = 0;
        r27 = r112.size();
        r28 = 1;
        r27 = r27 + -1;
        r35 = r10;
        r49 = r15;
        r51 = r17;
        r53 = r19;
        r55 = r21;
        r57 = r23;
        r59 = r25;
        r10 = r0;
    L_0x01ff:
        r15 = r27;
        if (r15 < 0) goto L_0x05cb;
    L_0x0203:
        r11 = r112;
        r0 = r11.get(r15);
        r61 = r3;
        r3 = r0;
        r3 = (com.android.server.am.ProcessRecord) r3;
        monitor-enter(r105);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x05b1 }
        r0 = r3.thread;	 Catch:{ all -> 0x05b1 }
        r37 = r0;	 Catch:{ all -> 0x05b1 }
        r0 = r3.pid;	 Catch:{ all -> 0x05b1 }
        r62 = r0;	 Catch:{ all -> 0x05b1 }
        r0 = r3.getSetAdjWithServices();	 Catch:{ all -> 0x05b1 }
        r63 = r0;	 Catch:{ all -> 0x05b1 }
        r0 = r3.activities;	 Catch:{ all -> 0x05b1 }
        r0 = r0.size();	 Catch:{ all -> 0x05b1 }
        if (r0 <= 0) goto L_0x022b;	 Catch:{ all -> 0x05b1 }
    L_0x0228:
        r0 = r28;	 Catch:{ all -> 0x05b1 }
        goto L_0x022d;	 Catch:{ all -> 0x05b1 }
    L_0x022b:
        r0 = r38;	 Catch:{ all -> 0x05b1 }
    L_0x022d:
        r39 = r0;	 Catch:{ all -> 0x05b1 }
        monitor-exit(r105);	 Catch:{ all -> 0x05b1 }
        resetPriorityAfterLockedSection();
        if (r37 == 0) goto L_0x058a;
    L_0x0235:
        r0 = r13.isCheckinRequest;
        if (r0 != 0) goto L_0x0265;
    L_0x0239:
        r0 = r13.dumpDetails;
        if (r0 == 0) goto L_0x0265;
    L_0x023d:
        r0 = new java.lang.StringBuilder;
        r0.<init>();
        r11 = "\n** MEMINFO in pid ";
        r0.append(r11);
        r11 = r62;
        r0.append(r11);
        r65 = r12;
        r12 = " [";
        r0.append(r12);
        r12 = r3.processName;
        r0.append(r12);
        r12 = "] **";
        r0.append(r12);
        r0 = r0.toString();
        r14.println(r0);
        goto L_0x0269;
    L_0x0265:
        r65 = r12;
        r11 = r62;
    L_0x0269:
        if (r2 != 0) goto L_0x0271;
    L_0x026b:
        r0 = new android.os.Debug$MemoryInfo;
        r0.<init>();
        r2 = r0;
    L_0x0271:
        r0 = r13.dumpDetails;
        if (r0 != 0) goto L_0x02a7;
    L_0x0275:
        if (r111 != 0) goto L_0x0283;
    L_0x0277:
        r0 = r13.oomOnly;
        if (r0 != 0) goto L_0x0283;
    L_0x027b:
        r67 = r1;
        r66 = r15;
        r12 = r40;
        r15 = 0;
        goto L_0x02ae;
    L_0x0283:
        r0 = 3;
        r16 = android.os.SystemClock.currentThreadTimeMillis();
        r68 = r0;
        r67 = r1;
        r66 = r15;
        r12 = r40;
        r15 = 0;
        r0 = android.os.Debug.getPss(r11, r12, r15);
        r0 = (int) r0;
        r2.dalvikPss = r0;
        r0 = android.os.SystemClock.currentThreadTimeMillis();
        r69 = r0;
        r0 = r12[r38];
        r0 = (int) r0;
        r2.dalvikPrivateDirty = r0;
        r1 = r10;
        r40 = r16;
        goto L_0x02c3;
    L_0x02a7:
        r67 = r1;
        r66 = r15;
        r12 = r40;
        r15 = 0;
    L_0x02ae:
        r0 = 4;
        r16 = android.os.SystemClock.currentThreadTimeMillis();
        android.os.Debug.getMemoryInfo(r11, r2);
        r18 = android.os.SystemClock.currentThreadTimeMillis();
        r10 = r2.hasSwappedOutPss;
        r68 = r0;
        r1 = r10;
        r40 = r16;
        r69 = r18;
    L_0x02c3:
        r0 = r13.dumpDetails;
        if (r0 == 0) goto L_0x03a5;
    L_0x02c7:
        r0 = r13.localOnly;
        if (r0 == 0) goto L_0x0311;
    L_0x02cb:
        r0 = r13.isCheckinRequest;
        r10 = r13.dumpFullDetails;
        r15 = r13.dumpDalvik;
        r71 = r1;
        r1 = r13.dumpSummaryOnly;
        r72 = r4;
        r4 = r3.processName;
        r18 = 0;
        r20 = 0;
        r22 = 0;
        r24 = 0;
        r26 = 0;
        r73 = 0;
        r16 = r10;
        r10 = r14;
        r75 = r11;
        r11 = r2;
        r78 = r5;
        r76 = r12;
        r77 = r65;
        r5 = 17;
        r12 = r0;
        r5 = r13;
        r13 = r16;
        r14 = r15;
        r44 = r66;
        r15 = r1;
        r16 = r75;
        r17 = r4;
        r28 = r73;
        android.app.ActivityThread.dumpMemInfoTable(r10, r11, r12, r13, r14, r15, r16, r17, r18, r20, r22, r24, r26, r28);
        r0 = r5.isCheckinRequest;
        if (r0 == 0) goto L_0x030b;
    L_0x0308:
        r107.println();
    L_0x030b:
        r12 = r106;
    L_0x030d:
        r11 = r107;
        goto L_0x03b7;
    L_0x0311:
        r71 = r1;
        r72 = r4;
        r78 = r5;
        r75 = r11;
        r76 = r12;
        r5 = r13;
        r77 = r65;
        r44 = r66;
        r107.flush();
        r0 = new com.android.internal.os.TransferPipe;	 Catch:{ IOException -> 0x0384, RemoteException -> 0x0363 }
        r0.<init>();	 Catch:{ IOException -> 0x0384, RemoteException -> 0x0363 }
        r1 = r0;
        r11 = r1.getWriteFd();	 Catch:{ all -> 0x0358 }
        r13 = r5.isCheckinRequest;	 Catch:{ all -> 0x0358 }
        r14 = r5.dumpFullDetails;	 Catch:{ all -> 0x0358 }
        r15 = r5.dumpDalvik;	 Catch:{ all -> 0x0358 }
        r0 = r5.dumpSummaryOnly;	 Catch:{ all -> 0x0358 }
        r4 = r5.dumpUnreachable;	 Catch:{ all -> 0x0358 }
        r10 = r37;	 Catch:{ all -> 0x0358 }
        r12 = r2;	 Catch:{ all -> 0x0358 }
        r16 = r0;	 Catch:{ all -> 0x0358 }
        r17 = r4;	 Catch:{ all -> 0x0358 }
        r18 = r110;	 Catch:{ all -> 0x0358 }
        r10.dumpMemInfo(r11, r12, r13, r14, r15, r16, r17, r18);	 Catch:{ all -> 0x0358 }
        r0 = r5.dumpUnreachable;	 Catch:{ all -> 0x0358 }
        if (r0 == 0) goto L_0x034a;
    L_0x0347:
        r10 = 30000; // 0x7530 float:4.2039E-41 double:1.4822E-319;
        goto L_0x034c;
    L_0x034a:
        r10 = 5000; // 0x1388 float:7.006E-42 double:2.4703E-320;
    L_0x034c:
        r12 = r106;
        r1.go(r12, r10);	 Catch:{ all -> 0x0356 }
        r1.kill();	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
        goto L_0x030d;	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
    L_0x0356:
        r0 = move-exception;	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
        goto L_0x035b;	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
    L_0x0358:
        r0 = move-exception;	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
        r12 = r106;	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
    L_0x035b:
        r1.kill();	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
        throw r0;	 Catch:{ IOException -> 0x0361, RemoteException -> 0x035f }
    L_0x035f:
        r0 = move-exception;
        goto L_0x0366;
    L_0x0361:
        r0 = move-exception;
        goto L_0x0387;
    L_0x0363:
        r0 = move-exception;
        r12 = r106;
    L_0x0366:
        r1 = r5.isCheckinRequest;
        if (r1 != 0) goto L_0x030d;
    L_0x036a:
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r4 = "Got RemoteException! ";
        r1.append(r4);
        r1.append(r0);
        r1 = r1.toString();
        r11 = r107;
        r11.println(r1);
        r107.flush();
        goto L_0x03b7;
    L_0x0384:
        r0 = move-exception;
        r12 = r106;
    L_0x0387:
        r11 = r107;
        r1 = r5.isCheckinRequest;
        if (r1 != 0) goto L_0x03b7;
    L_0x038d:
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r4 = "Got IoException! ";
        r1.append(r4);
        r1.append(r0);
        r1 = r1.toString();
        r11.println(r1);
        r107.flush();
    L_0x03a4:
        goto L_0x03b7;
    L_0x03a5:
        r71 = r1;
        r72 = r4;
        r78 = r5;
        r75 = r11;
        r76 = r12;
        r5 = r13;
        r11 = r14;
        r77 = r65;
        r44 = r66;
        r12 = r106;
    L_0x03b7:
        r0 = r2.getTotalPss();
        r13 = (long) r0;
        r0 = r2.getTotalUss();
        r11 = (long) r0;
        r0 = r2.getTotalRss();
        r81 = r6;
        r80 = r7;
        r6 = (long) r0;
        r0 = r2.getTotalSwappedOutPss();
        r82 = r2;
        r1 = (long) r0;
        monitor-enter(r105);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x056c }
        r0 = r3.thread;	 Catch:{ all -> 0x056c }
        if (r0 == 0) goto L_0x0429;
    L_0x03d9:
        r0 = r3.getSetAdjWithServices();	 Catch:{ all -> 0x0410 }
        r4 = r63;
        if (r4 != r0) goto L_0x042b;
    L_0x03e1:
        r0 = r3.baseProcessTracker;	 Catch:{ all -> 0x03f9 }
        r23 = 1;	 Catch:{ all -> 0x03f9 }
        r25 = r69 - r40;	 Catch:{ all -> 0x03f9 }
        r10 = r3.pkgList;	 Catch:{ all -> 0x03f9 }
        r16 = r0;	 Catch:{ all -> 0x03f9 }
        r17 = r13;	 Catch:{ all -> 0x03f9 }
        r19 = r11;	 Catch:{ all -> 0x03f9 }
        r21 = r6;	 Catch:{ all -> 0x03f9 }
        r24 = r68;	 Catch:{ all -> 0x03f9 }
        r27 = r10;	 Catch:{ all -> 0x03f9 }
        r16.addPss(r17, r19, r21, r23, r24, r25, r27);	 Catch:{ all -> 0x03f9 }
        goto L_0x042b;
    L_0x03f9:
        r0 = move-exception;
        r87 = r3;
        r83 = r6;
        r85 = r11;
        r88 = r13;
        r12 = r57;
        r90 = r75;
        r14 = r77;
        r7 = r80;
        r11 = r81;
        r6 = r82;
        goto L_0x0583;
    L_0x0410:
        r0 = move-exception;
        r4 = r63;
        r87 = r3;
        r83 = r6;
        r85 = r11;
        r88 = r13;
        r12 = r57;
        r90 = r75;
        r14 = r77;
        r7 = r80;
        r11 = r81;
        r6 = r82;
        goto L_0x0583;
    L_0x0429:
        r4 = r63;
    L_0x042b:
        monitor-exit(r105);	 Catch:{ all -> 0x0556 }
        resetPriorityAfterLockedSection();
        r0 = r5.isCheckinRequest;
        if (r0 != 0) goto L_0x0545;
    L_0x0433:
        if (r82 == 0) goto L_0x0545;
    L_0x0435:
        r53 = r53 + r13;
        r55 = r55 + r1;
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r10 = new java.lang.StringBuilder;
        r10.<init>();
        r15 = r3.processName;
        r10.append(r15);
        r15 = " (pid ";
        r10.append(r15);
        r15 = r75;
        r10.append(r15);
        if (r39 == 0) goto L_0x0458;
    L_0x0451:
        r16 = " / activities)";
    L_0x0453:
        r83 = r6;
        r6 = r16;
        goto L_0x045b;
    L_0x0458:
        r16 = ")";
        goto L_0x0453;
    L_0x045b:
        r10.append(r6);
        r17 = r10.toString();
        r6 = r3.processName;
        r16 = r0;
        r18 = r6;
        r19 = r13;
        r21 = r1;
        r23 = r15;
        r24 = r39;
        r16.<init>(r17, r18, r19, r21, r23, r24);
        r8.add(r0);
        r7 = r80;
        r7.put(r15, r0);
        r6 = r82;
        r10 = r6.nativePss;
        r85 = r11;
        r10 = (long) r10;
        r45 = r45 + r10;
        r10 = r6.nativeSwappedOutPss;
        r10 = (long) r10;
        r47 = r47 + r10;
        r10 = r6.dalvikPss;
        r10 = (long) r10;
        r42 = r42 + r10;
        r10 = r6.dalvikSwappedOutPss;
        r10 = (long) r10;
        r35 = r35 + r10;
        r10 = r38;
    L_0x0495:
        r11 = r81;
        r12 = r11.length;
        if (r10 >= r12) goto L_0x04c8;
    L_0x049a:
        r16 = r11[r10];
        r87 = r3;
        r12 = 17;
        r3 = r12 + r10;
        r3 = r6.getOtherPss(r3);
        r88 = r13;
        r12 = (long) r3;
        r16 = r16 + r12;
        r11[r10] = r16;
        r12 = r34[r10];
        r3 = 17;
        r14 = r3 + r10;
        r3 = r6.getOtherSwappedOutPss(r14);
        r90 = r15;
        r14 = (long) r3;
        r12 = r12 + r14;
        r34[r10] = r12;
        r10 = r10 + 1;
        r81 = r11;
        r3 = r87;
        r13 = r88;
        r15 = r90;
        goto L_0x0495;
    L_0x04c8:
        r87 = r3;
        r88 = r13;
        r90 = r15;
        r3 = r6.otherPss;
        r12 = (long) r3;
        r49 = r49 + r12;
        r3 = r6.otherSwappedOutPss;
        r12 = (long) r3;
        r51 = r51 + r12;
        r3 = r38;
    L_0x04da:
        r10 = 17;
        if (r3 >= r10) goto L_0x04f9;
    L_0x04de:
        r10 = r6.getOtherPss(r3);
        r12 = (long) r10;
        r14 = r78[r3];
        r14 = r14 + r12;
        r78[r3] = r14;
        r49 = r49 - r12;
        r10 = r6.getOtherSwappedOutPss(r3);
        r12 = (long) r10;
        r14 = r72[r3];
        r14 = r14 + r12;
        r72[r3] = r14;
        r51 = r51 - r12;
        r3 = r3 + 1;
        goto L_0x04da;
    L_0x04f9:
        r3 = 900; // 0x384 float:1.261E-42 double:4.447E-321;
        if (r4 < r3) goto L_0x0504;
    L_0x04fd:
        r12 = r57;
        r57 = r12 + r88;
        r59 = r59 + r1;
        goto L_0x0506;
    L_0x0504:
        r12 = r57;
    L_0x0506:
        r3 = r38;
    L_0x0508:
        r14 = r77;
        r10 = r14.length;
        if (r3 >= r10) goto L_0x0542;
    L_0x050d:
        r10 = r14.length;
        r15 = 1;
        r10 = r10 - r15;
        if (r3 == r10) goto L_0x0526;
    L_0x0512:
        r10 = DUMP_MEM_OOM_ADJ;
        r10 = r10[r3];
        if (r4 < r10) goto L_0x0521;
    L_0x0518:
        r10 = DUMP_MEM_OOM_ADJ;
        r12 = r3 + 1;
        r10 = r10[r12];
        if (r4 >= r10) goto L_0x0521;
    L_0x0520:
        goto L_0x0526;
    L_0x0521:
        r3 = r3 + 1;
        r77 = r14;
        goto L_0x0508;
    L_0x0526:
        r12 = r14[r3];
        r12 = r12 + r88;
        r14[r3] = r12;
        r12 = r67[r3];
        r12 = r12 + r1;
        r67[r3] = r12;
        r10 = r61[r3];
        if (r10 != 0) goto L_0x053c;
    L_0x0535:
        r10 = new java.util.ArrayList;
        r10.<init>();
        r61[r3] = r10;
    L_0x053c:
        r10 = r61[r3];
        r10.add(r0);
        goto L_0x0543;
    L_0x0542:
        r15 = 1;
    L_0x0543:
        r2 = r6;
        goto L_0x0553;
    L_0x0545:
        r12 = r57;
        r14 = r77;
        r7 = r80;
        r11 = r81;
        r6 = r82;
        r15 = 1;
        r2 = r6;
        r57 = r12;
    L_0x0553:
        r10 = r71;
        goto L_0x059c;
    L_0x0556:
        r0 = move-exception;
        r87 = r3;
        r83 = r6;
        r85 = r11;
        r88 = r13;
        r12 = r57;
        r90 = r75;
        r14 = r77;
        r7 = r80;
        r11 = r81;
        r6 = r82;
        goto L_0x0583;
    L_0x056c:
        r0 = move-exception;
        r87 = r3;
        r83 = r6;
        r85 = r11;
        r88 = r13;
        r12 = r57;
        r4 = r63;
        r90 = r75;
        r14 = r77;
        r7 = r80;
        r11 = r81;
        r6 = r82;
    L_0x0583:
        monitor-exit(r105);	 Catch:{ all -> 0x0588 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0588:
        r0 = move-exception;
        goto L_0x0583;
    L_0x058a:
        r67 = r1;
        r3 = r2;
        r72 = r4;
        r78 = r5;
        r11 = r6;
        r14 = r12;
        r5 = r13;
        r44 = r15;
        r15 = r28;
        r76 = r40;
        r12 = r57;
    L_0x059c:
        r27 = r44 + -1;
        r13 = r5;
        r6 = r11;
        r12 = r14;
        r28 = r15;
        r3 = r61;
        r1 = r67;
        r4 = r72;
        r40 = r76;
        r5 = r78;
        r14 = r107;
        goto L_0x01ff;
    L_0x05b1:
        r0 = move-exception;
        r67 = r1;
        r87 = r3;
        r72 = r4;
        r78 = r5;
        r11 = r6;
        r14 = r12;
        r5 = r13;
        r44 = r15;
        r76 = r40;
        r12 = r57;
        r3 = r2;
    L_0x05c4:
        monitor-exit(r105);	 Catch:{ all -> 0x05c9 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x05c9:
        r0 = move-exception;
        goto L_0x05c4;
    L_0x05cb:
        r67 = r1;
        r61 = r3;
        r72 = r4;
        r78 = r5;
        r11 = r6;
        r14 = r12;
        r5 = r13;
        r15 = r28;
        r76 = r40;
        r12 = r57;
        r3 = r2;
        r1 = 0;
        r0 = r5.isCheckinRequest;
        if (r0 != 0) goto L_0x0d53;
    L_0x05e3:
        r0 = r112.size();
        if (r0 <= r15) goto L_0x0d53;
    L_0x05e9:
        r0 = r5.packages;
        if (r0 != 0) goto L_0x0d53;
    L_0x05ed:
        r105.updateCpuStatsNow();
        r3 = 0;
        r4 = r9.mProcessCpuTracker;
        monitor-enter(r4);
        r0 = r9.mProcessCpuTracker;	 Catch:{ all -> 0x0d34 }
        r0 = r0.countStats();	 Catch:{ all -> 0x0d34 }
        r25 = r1;
        r24 = r3;
        r1 = r38;
    L_0x0600:
        r27 = 0;
        if (r1 >= r0) goto L_0x0842;
    L_0x0604:
        r2 = r9.mProcessCpuTracker;	 Catch:{ all -> 0x0821 }
        r2 = r2.getStats(r1);	 Catch:{ all -> 0x0821 }
        r91 = r12;
        r12 = r2.vsize;	 Catch:{ all -> 0x07ff }
        r3 = (r12 > r27 ? 1 : (r12 == r27 ? 0 : -1));	 Catch:{ all -> 0x07ff }
        if (r3 <= 0) goto L_0x07de;	 Catch:{ all -> 0x07ff }
    L_0x0612:
        r3 = r2.pid;	 Catch:{ all -> 0x07ff }
        r3 = r7.indexOfKey(r3);	 Catch:{ all -> 0x07ff }
        if (r3 >= 0) goto L_0x07de;
    L_0x061a:
        if (r24 != 0) goto L_0x0644;
    L_0x061c:
        r3 = new android.os.Debug$MemoryInfo;	 Catch:{ all -> 0x0622 }
        r3.<init>();	 Catch:{ all -> 0x0622 }
        goto L_0x0646;
    L_0x0622:
        r0 = move-exception;
        r19 = r7;
        r99 = r8;
        r101 = r10;
        r18 = r11;
        r3 = r24;
    L_0x062d:
        r1 = r25;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r94 = r76;
        r17 = r78;
        r6 = r91;
        r11 = r107;
        r104 = r9;
        r9 = r5;
        r5 = r104;
        goto L_0x0d4f;
    L_0x0644:
        r3 = r24;
    L_0x0646:
        if (r111 != 0) goto L_0x0661;
    L_0x0648:
        r6 = r5.oomOnly;	 Catch:{ all -> 0x0657 }
        if (r6 != 0) goto L_0x0661;	 Catch:{ all -> 0x0657 }
    L_0x064c:
        r6 = r2.pid;	 Catch:{ all -> 0x0657 }
        android.os.Debug.getMemoryInfo(r6, r3);	 Catch:{ all -> 0x0657 }
        r93 = r7;
        r12 = r76;
        r13 = 0;
        goto L_0x0674;
    L_0x0657:
        r0 = move-exception;
        r19 = r7;
        r99 = r8;
        r101 = r10;
        r18 = r11;
        goto L_0x062d;
    L_0x0661:
        r6 = r2.pid;	 Catch:{ all -> 0x07d2 }
        r93 = r7;
        r12 = r76;
        r13 = 0;
        r6 = android.os.Debug.getPss(r6, r12, r13);	 Catch:{ all -> 0x07b2 }
        r6 = (int) r6;	 Catch:{ all -> 0x07b2 }
        r3.nativePss = r6;	 Catch:{ all -> 0x07b2 }
        r6 = r12[r38];	 Catch:{ all -> 0x07b2 }
        r6 = (int) r6;	 Catch:{ all -> 0x07b2 }
        r3.nativePrivateDirty = r6;	 Catch:{ all -> 0x07b2 }
    L_0x0674:
        r6 = r3.getTotalPss();	 Catch:{ all -> 0x07b2 }
        r6 = (long) r6;	 Catch:{ all -> 0x07b2 }
        r13 = r3.getTotalSwappedOutPss();	 Catch:{ all -> 0x07b2 }
        r94 = r12;
        r12 = (long) r13;
        r53 = r53 + r6;
        r55 = r55 + r12;
        r25 = r25 + r6;
        r27 = new com.android.server.am.ActivityManagerService$MemItem;	 Catch:{ all -> 0x0794 }
        r15 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0794 }
        r15.<init>();	 Catch:{ all -> 0x0794 }
        r95 = r0;	 Catch:{ all -> 0x0794 }
        r0 = r2.name;	 Catch:{ all -> 0x0794 }
        r15.append(r0);	 Catch:{ all -> 0x0794 }
        r0 = " (pid ";	 Catch:{ all -> 0x0794 }
        r15.append(r0);	 Catch:{ all -> 0x0794 }
        r0 = r2.pid;	 Catch:{ all -> 0x0794 }
        r15.append(r0);	 Catch:{ all -> 0x0794 }
        r0 = ")";	 Catch:{ all -> 0x0794 }
        r15.append(r0);	 Catch:{ all -> 0x0794 }
        r17 = r15.toString();	 Catch:{ all -> 0x0794 }
        r0 = r2.name;	 Catch:{ all -> 0x0794 }
        r15 = r3.getSummaryTotalSwapPss();	 Catch:{ all -> 0x0794 }
        r96 = r12;	 Catch:{ all -> 0x0794 }
        r12 = (long) r15;	 Catch:{ all -> 0x0794 }
        r15 = r2.pid;	 Catch:{ all -> 0x0794 }
        r24 = 0;	 Catch:{ all -> 0x0794 }
        r16 = r27;	 Catch:{ all -> 0x0794 }
        r18 = r0;	 Catch:{ all -> 0x0794 }
        r19 = r6;	 Catch:{ all -> 0x0794 }
        r21 = r12;	 Catch:{ all -> 0x0794 }
        r23 = r15;	 Catch:{ all -> 0x0794 }
        r16.<init>(r17, r18, r19, r21, r23, r24);	 Catch:{ all -> 0x0794 }
        r0 = r27;	 Catch:{ all -> 0x0794 }
        r8.add(r0);	 Catch:{ all -> 0x0794 }
        r12 = r3.nativePss;	 Catch:{ all -> 0x0794 }
        r12 = (long) r12;	 Catch:{ all -> 0x0794 }
        r45 = r45 + r12;	 Catch:{ all -> 0x0794 }
        r12 = r3.nativeSwappedOutPss;	 Catch:{ all -> 0x0794 }
        r12 = (long) r12;	 Catch:{ all -> 0x0794 }
        r47 = r47 + r12;	 Catch:{ all -> 0x0794 }
        r12 = r3.dalvikPss;	 Catch:{ all -> 0x0794 }
        r12 = (long) r12;	 Catch:{ all -> 0x0794 }
        r42 = r42 + r12;	 Catch:{ all -> 0x0794 }
        r12 = r3.dalvikSwappedOutPss;	 Catch:{ all -> 0x0794 }
        r12 = (long) r12;	 Catch:{ all -> 0x0794 }
        r35 = r35 + r12;	 Catch:{ all -> 0x0794 }
        r12 = r38;	 Catch:{ all -> 0x0794 }
    L_0x06dc:
        r13 = r11.length;	 Catch:{ all -> 0x0794 }
        if (r12 >= r13) goto L_0x072a;	 Catch:{ all -> 0x0794 }
    L_0x06df:
        r15 = r11[r12];	 Catch:{ all -> 0x0794 }
        r98 = r2;	 Catch:{ all -> 0x0794 }
        r13 = 17;	 Catch:{ all -> 0x0794 }
        r2 = r13 + r12;	 Catch:{ all -> 0x0794 }
        r2 = r3.getOtherPss(r2);	 Catch:{ all -> 0x0794 }
        r99 = r8;
        r8 = (long) r2;
        r15 = r15 + r8;
        r11[r12] = r15;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = r34[r12];	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = 17;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r13 = r2 + r12;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = r3.getOtherSwappedOutPss(r13);	 Catch:{ all -> 0x0710, all -> 0x077c }
        r101 = r10;
        r100 = r11;
        r10 = (long) r2;
        r8 = r8 + r10;
        r34[r12] = r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r12 = r12 + 1;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = r98;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = r99;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r11 = r100;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r10 = r101;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r9 = r105;	 Catch:{ all -> 0x0710, all -> 0x077c }
        goto L_0x06dc;	 Catch:{ all -> 0x0710, all -> 0x077c }
    L_0x0710:
        r0 = move-exception;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r101 = r10;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r9 = r5;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r18 = r11;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r1 = r25;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r15 = r61;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r103 = r67;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r16 = r72;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r17 = r78;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r6 = r91;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r19 = r93;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r5 = r105;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r11 = r107;	 Catch:{ all -> 0x0710, all -> 0x077c }
        goto L_0x0d4f;	 Catch:{ all -> 0x0710, all -> 0x077c }
    L_0x072a:
        r98 = r2;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r99 = r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r101 = r10;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r100 = r11;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = r3.otherPss;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = (long) r2;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r49 = r49 + r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = r3.otherSwappedOutPss;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = (long) r2;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r51 = r51 + r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = r38;	 Catch:{ all -> 0x0710, all -> 0x077c }
    L_0x073e:
        r8 = 17;	 Catch:{ all -> 0x0710, all -> 0x077c }
        if (r2 >= r8) goto L_0x075d;	 Catch:{ all -> 0x0710, all -> 0x077c }
    L_0x0742:
        r8 = r3.getOtherPss(r2);	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = (long) r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r10 = r78[r2];	 Catch:{ all -> 0x0710, all -> 0x077c }
        r10 = r10 + r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r78[r2] = r10;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r49 = r49 - r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r10 = r3.getOtherSwappedOutPss(r2);	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = (long) r10;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r10 = r72[r2];	 Catch:{ all -> 0x0710, all -> 0x077c }
        r10 = r10 + r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r72[r2] = r10;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r51 = r51 - r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = r2 + 1;	 Catch:{ all -> 0x0710, all -> 0x077c }
        goto L_0x073e;	 Catch:{ all -> 0x0710, all -> 0x077c }
    L_0x075d:
        r8 = r14[r38];	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = r8 + r6;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r14[r38] = r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = r67[r38];	 Catch:{ all -> 0x0710, all -> 0x077c }
        r8 = r8 + r96;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r67[r38] = r8;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2 = r61[r38];	 Catch:{ all -> 0x0710, all -> 0x077c }
        if (r2 != 0) goto L_0x0773;	 Catch:{ all -> 0x0710, all -> 0x077c }
    L_0x076c:
        r2 = new java.util.ArrayList;	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2.<init>();	 Catch:{ all -> 0x0710, all -> 0x077c }
        r61[r38] = r2;	 Catch:{ all -> 0x0710, all -> 0x077c }
    L_0x0773:
        r2 = r61[r38];	 Catch:{ all -> 0x0710, all -> 0x077c }
        r2.add(r0);	 Catch:{ all -> 0x0710, all -> 0x077c }
        r24 = r3;
        goto L_0x07ea;
    L_0x077c:
        r0 = move-exception;
        r9 = r5;
        r1 = r25;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r17 = r78;
        r6 = r91;
        r19 = r93;
        r18 = r100;
        r5 = r105;
        r11 = r107;
        goto L_0x0d4f;
    L_0x0794:
        r0 = move-exception;
        r99 = r8;
        r101 = r10;
        r18 = r11;
        r1 = r25;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r17 = r78;
        r6 = r91;
        r19 = r93;
        r11 = r107;
        r104 = r9;
        r9 = r5;
        r5 = r104;
        goto L_0x0d4f;
    L_0x07b2:
        r0 = move-exception;
        r99 = r8;
        r101 = r10;
        r94 = r12;
        r18 = r11;
        r1 = r25;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r17 = r78;
        r6 = r91;
        r19 = r93;
        r11 = r107;
        r104 = r9;
        r9 = r5;
        r5 = r104;
        goto L_0x0d4f;
    L_0x07d2:
        r0 = move-exception;
        r99 = r8;
        r101 = r10;
        r94 = r76;
        r19 = r7;
        r18 = r11;
        goto L_0x080c;
    L_0x07de:
        r95 = r0;
        r93 = r7;
        r99 = r8;
        r101 = r10;
        r100 = r11;
        r94 = r76;
    L_0x07ea:
        r1 = r1 + 1;
        r12 = r91;
        r7 = r93;
        r76 = r94;
        r0 = r95;
        r8 = r99;
        r11 = r100;
        r10 = r101;
        r9 = r105;
        r15 = 1;
        goto L_0x0600;
    L_0x07ff:
        r0 = move-exception;
        r99 = r8;
        r101 = r10;
        r94 = r76;
        r19 = r7;
        r18 = r11;
        r3 = r24;
    L_0x080c:
        r1 = r25;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r17 = r78;
        r6 = r91;
        r11 = r107;
        r104 = r9;
        r9 = r5;
        r5 = r104;
        goto L_0x0d4f;
    L_0x0821:
        r0 = move-exception;
        r99 = r8;
        r101 = r10;
        r94 = r76;
        r19 = r7;
        r18 = r11;
        r6 = r12;
        r3 = r24;
        r1 = r25;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r17 = r78;
        r11 = r107;
        r104 = r9;
        r9 = r5;
        r5 = r104;
        goto L_0x0d4f;
    L_0x0842:
        r93 = r7;
        r99 = r8;
        r101 = r10;
        r100 = r11;
        r91 = r12;
        r94 = r76;
        monitor-exit(r4);	 Catch:{ all -> 0x0d1b }
        r0 = new java.util.ArrayList;
        r0.<init>();
        r8 = r0;
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r17 = "Native";
        r18 = "Native";
        r23 = -1;
        r16 = r0;
        r19 = r45;
        r21 = r47;
        r16.<init>(r17, r18, r19, r21, r23);
        r8.add(r0);
        r9 = -2;
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r17 = "Dalvik";
        r18 = "Dalvik";
        r23 = -2;
        r16 = r0;
        r19 = r42;
        r21 = r35;
        r16.<init>(r17, r18, r19, r21, r23);
        r8.add(r0);
        r0 = new com.android.server.am.ActivityManagerService$MemItem;
        r17 = "Unknown";
        r18 = "Unknown";
        r23 = -3;
        r16 = r0;
        r19 = r49;
        r21 = r51;
        r16.<init>(r17, r18, r19, r21, r23);
        r8.add(r0);
        r0 = r38;
    L_0x0894:
        r1 = 17;
        if (r0 >= r1) goto L_0x08b2;
    L_0x0898:
        r1 = android.os.Debug.MemoryInfo.getOtherLabel(r0);
        r2 = new com.android.server.am.ActivityManagerService$MemItem;
        r18 = r78[r0];
        r20 = r72[r0];
        r15 = r2;
        r16 = r1;
        r17 = r1;
        r22 = r0;
        r15.<init>(r16, r17, r18, r20, r22);
        r8.add(r2);
        r0 = r0 + 1;
        goto L_0x0894;
    L_0x08b2:
        r6 = r100;
        r0 = r6.length;
        if (r0 <= 0) goto L_0x091b;
    L_0x08b7:
        r0 = r8.iterator();
    L_0x08bb:
        r1 = r0.hasNext();
        if (r1 == 0) goto L_0x091b;
    L_0x08c1:
        r1 = r0.next();
        r1 = (com.android.server.am.ActivityManagerService.MemItem) r1;
        r2 = 0;
        r3 = 0;
        r4 = r1.id;
        r7 = -2;
        if (r4 != r7) goto L_0x08d1;
    L_0x08ce:
        r2 = 0;
        r3 = 3;
        goto L_0x08ee;
    L_0x08d1:
        r4 = r1.id;
        if (r4 != 0) goto L_0x08d9;
    L_0x08d5:
        r2 = 4;
        r3 = 8;
        goto L_0x08ee;
    L_0x08d9:
        r4 = r1.id;
        r7 = 10;
        if (r4 != r7) goto L_0x08e4;
    L_0x08df:
        r2 = 9;
        r3 = 11;
        goto L_0x08ee;
    L_0x08e4:
        r4 = r1.id;
        r7 = 12;
        if (r4 != r7) goto L_0x08bb;
    L_0x08ea:
        r2 = 12;
        r3 = 13;
    L_0x08ee:
        r4 = new java.util.ArrayList;
        r4.<init>();
        r1.subitems = r4;
        r4 = r2;
    L_0x08f6:
        if (r4 > r3) goto L_0x0918;
    L_0x08f8:
        r7 = 17;
        r12 = r7 + r4;
        r10 = android.os.Debug.MemoryInfo.getOtherLabel(r12);
        r11 = r1.subitems;
        r12 = new com.android.server.am.ActivityManagerService$MemItem;
        r18 = r6[r4];
        r20 = r34[r4];
        r15 = r12;
        r16 = r10;
        r17 = r10;
        r22 = r4;
        r15.<init>(r16, r17, r18, r20, r22);
        r11.add(r12);
        r4 = r4 + 1;
        goto L_0x08f6;
    L_0x0918:
        r7 = 17;
        goto L_0x08bb;
    L_0x091b:
        r0 = new java.util.ArrayList;
        r0.<init>();
        r10 = r0;
        r0 = r38;
    L_0x0923:
        r1 = r14.length;
        if (r0 >= r1) goto L_0x0956;
    L_0x0926:
        r1 = r14[r0];
        r1 = (r1 > r27 ? 1 : (r1 == r27 ? 0 : -1));
        if (r1 == 0) goto L_0x0953;
    L_0x092c:
        r1 = r5.isCompact;
        if (r1 == 0) goto L_0x0937;
    L_0x0930:
        r1 = DUMP_MEM_OOM_COMPACT_LABEL;
        r1 = r1[r0];
    L_0x0934:
        r16 = r1;
        goto L_0x093c;
    L_0x0937:
        r1 = DUMP_MEM_OOM_LABEL;
        r1 = r1[r0];
        goto L_0x0934;
    L_0x093c:
        r1 = new com.android.server.am.ActivityManagerService$MemItem;
        r18 = r14[r0];
        r20 = r67[r0];
        r2 = DUMP_MEM_OOM_ADJ;
        r22 = r2[r0];
        r15 = r1;
        r17 = r16;
        r15.<init>(r16, r17, r18, r20, r22);
        r2 = r61[r0];
        r1.subitems = r2;
        r10.add(r1);
    L_0x0953:
        r0 = r0 + 1;
        goto L_0x0923;
    L_0x0956:
        r0 = r5.dumpSwapPss;
        if (r0 == 0) goto L_0x0962;
    L_0x095a:
        if (r101 == 0) goto L_0x0962;
    L_0x095c:
        r0 = (r55 > r27 ? 1 : (r55 == r27 ? 0 : -1));
        if (r0 == 0) goto L_0x0962;
    L_0x0960:
        r0 = 1;
        goto L_0x0964;
    L_0x0962:
        r0 = r38;
    L_0x0964:
        r5.dumpSwapPss = r0;
        if (r111 != 0) goto L_0x09a0;
    L_0x0968:
        r0 = r5.oomOnly;
        if (r0 != 0) goto L_0x09a0;
    L_0x096c:
        r0 = r5.isCompact;
        if (r0 != 0) goto L_0x09a0;
    L_0x0970:
        r11 = r107;
        r107.println();
        r0 = "Total PSS by process:";
        r11.println(r0);
        r2 = "  ";
        r3 = "proc";
        r0 = 1;
        r7 = r5.isCompact;
        r12 = r5.dumpSwapPss;
        r13 = r67;
        r1 = r11;
        r15 = r61;
        r16 = r72;
        r4 = r99;
        r102 = r9;
        r17 = r78;
        r9 = r5;
        r5 = r0;
        r18 = r6;
        r6 = r7;
        r19 = r93;
        r7 = r12;
        dumpMemItems(r1, r2, r3, r4, r5, r6, r7);
        r107.println();
        goto L_0x09b1;
    L_0x09a0:
        r18 = r6;
        r102 = r9;
        r15 = r61;
        r13 = r67;
        r16 = r72;
        r17 = r78;
        r19 = r93;
        r11 = r107;
        r9 = r5;
    L_0x09b1:
        r0 = r9.isCompact;
        if (r0 != 0) goto L_0x09ba;
    L_0x09b5:
        r0 = "Total PSS by OOM adjustment:";
        r11.println(r0);
    L_0x09ba:
        r2 = "  ";
        r3 = "oom";
        r5 = 0;
        r6 = r9.isCompact;
        r7 = r9.dumpSwapPss;
        r1 = r11;
        r4 = r10;
        dumpMemItems(r1, r2, r3, r4, r5, r6, r7);
        if (r111 != 0) goto L_0x09ef;
    L_0x09cb:
        r0 = r9.oomOnly;
        if (r0 != 0) goto L_0x09ef;
    L_0x09cf:
        if (r113 == 0) goto L_0x09d4;
    L_0x09d1:
        r0 = r113;
        goto L_0x09d5;
    L_0x09d4:
        r0 = r11;
    L_0x09d5:
        r1 = r9.isCompact;
        if (r1 != 0) goto L_0x09e1;
    L_0x09d9:
        r0.println();
        r1 = "Total PSS by category:";
        r0.println(r1);
    L_0x09e1:
        r2 = "  ";
        r3 = "cat";
        r5 = 1;
        r6 = r9.isCompact;
        r7 = r9.dumpSwapPss;
        r1 = r0;
        r4 = r8;
        dumpMemItems(r1, r2, r3, r4, r5, r6, r7);
    L_0x09ef:
        r0 = r9.isCompact;
        if (r0 != 0) goto L_0x09f6;
    L_0x09f3:
        r107.println();
    L_0x09f6:
        r0 = new com.android.internal.util.MemInfoReader;
        r0.<init>();
        r1 = r0;
        r1.readMemInfo();
        r0 = (r25 > r27 ? 1 : (r25 == r27 ? 0 : -1));
        r2 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        if (r0 <= 0) goto L_0x0a44;
    L_0x0a05:
        r5 = r105;
        monitor-enter(r105);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0a3e }
        r6 = r1.getRealCachedSizeKb();	 Catch:{ all -> 0x0a3e }
        r20 = r1.getFreeSizeKb();	 Catch:{ all -> 0x0a3e }
        r22 = r1.getZramTotalSizeKb();	 Catch:{ all -> 0x0a3e }
        r39 = r1.getKernelUsedSizeKb();	 Catch:{ all -> 0x0a3e }
        r61 = r6 * r2;	 Catch:{ all -> 0x0a3e }
        r63 = r20 * r2;	 Catch:{ all -> 0x0a3e }
        r65 = r22 * r2;	 Catch:{ all -> 0x0a3e }
        r67 = r39 * r2;	 Catch:{ all -> 0x0a3e }
        r69 = r25 * r2;	 Catch:{ all -> 0x0a3e }
        com.android.server.am.EventLogTags.writeAmMeminfo(r61, r63, r65, r67, r69);	 Catch:{ all -> 0x0a3e }
        r0 = r5.mProcessStats;	 Catch:{ all -> 0x0a3e }
        r79 = r0;	 Catch:{ all -> 0x0a3e }
        r80 = r6;	 Catch:{ all -> 0x0a3e }
        r82 = r20;	 Catch:{ all -> 0x0a3e }
        r84 = r22;	 Catch:{ all -> 0x0a3e }
        r86 = r39;	 Catch:{ all -> 0x0a3e }
        r88 = r25;	 Catch:{ all -> 0x0a3e }
        r79.addSysMemUsageLocked(r80, r82, r84, r86, r88);	 Catch:{ all -> 0x0a3e }
        monitor-exit(r105);	 Catch:{ all -> 0x0a3e }
        resetPriorityAfterLockedSection();
        goto L_0x0a46;
    L_0x0a3e:
        r0 = move-exception;
        monitor-exit(r105);	 Catch:{ all -> 0x0a3e }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0a44:
        r5 = r105;
    L_0x0a46:
        if (r111 != 0) goto L_0x0b06;
    L_0x0a48:
        r0 = r9.isCompact;
        if (r0 != 0) goto L_0x0ad8;
    L_0x0a4c:
        r0 = "Total RAM: ";
        r11.print(r0);
        r6 = r1.getTotalSizeKb();
        r0 = stringifyKBSize(r6);
        r11.print(r0);
        r0 = " (status ";
        r11.print(r0);
        r0 = r5.mLastMemoryLevel;
        switch(r0) {
            case 0: goto L_0x0a85;
            case 1: goto L_0x0a7e;
            case 2: goto L_0x0a77;
            case 3: goto L_0x0a71;
            default: goto L_0x0a66;
        };
    L_0x0a66:
        r0 = r5.mLastMemoryLevel;
        r11.print(r0);
        r0 = ")";
        r11.println(r0);
        goto L_0x0a8c;
    L_0x0a71:
        r0 = "critical)";
        r11.println(r0);
        goto L_0x0a8c;
    L_0x0a77:
        r0 = "low)";
        r11.println(r0);
        goto L_0x0a8c;
    L_0x0a7e:
        r0 = "moderate)";
        r11.println(r0);
        goto L_0x0a8c;
    L_0x0a85:
        r0 = "normal)";
        r11.println(r0);
    L_0x0a8c:
        r0 = " Free RAM: ";
        r11.print(r0);
        r6 = r1.getCachedSizeKb();
        r57 = r91 + r6;
        r6 = r1.getFreeSizeKb();
        r6 = r57 + r6;
        r0 = stringifyKBSize(r6);
        r11.print(r0);
        r0 = " (";
        r11.print(r0);
        r6 = r91;
        r0 = stringifyKBSize(r6);
        r11.print(r0);
        r0 = " cached pss + ";
        r11.print(r0);
        r2 = r1.getCachedSizeKb();
        r0 = stringifyKBSize(r2);
        r11.print(r0);
        r0 = " cached kernel + ";
        r11.print(r0);
        r2 = r1.getFreeSizeKb();
        r0 = stringifyKBSize(r2);
        r11.print(r0);
        r0 = " free)";
        r11.println(r0);
        goto L_0x0b08;
    L_0x0ad8:
        r6 = r91;
        r0 = "ram,";
        r11.print(r0);
        r2 = r1.getTotalSizeKb();
        r11.print(r2);
        r0 = ",";
        r11.print(r0);
        r2 = r1.getCachedSizeKb();
        r57 = r6 + r2;
        r2 = r1.getFreeSizeKb();
        r2 = r57 + r2;
        r11.print(r2);
        r0 = ",";
        r11.print(r0);
        r2 = r53 - r6;
        r11.println(r2);
        goto L_0x0b08;
    L_0x0b06:
        r6 = r91;
    L_0x0b08:
        r2 = r1.getTotalSizeKb();
        r20 = r53 - r55;
        r2 = r2 - r20;
        r20 = r1.getFreeSizeKb();
        r2 = r2 - r20;
        r20 = r1.getRealCachedSizeKb();
        r2 = r2 - r20;
        r20 = r1.getKernelUsedSizeKb();
        r2 = r2 - r20;
        r20 = r1.getZramTotalSizeKb();
        r2 = r2 - r20;
        r0 = r9.isCompact;
        if (r0 != 0) goto L_0x0b72;
    L_0x0b2c:
        r0 = " Used RAM: ";
        r11.print(r0);
        r20 = r53 - r6;
        r22 = r1.getKernelUsedSizeKb();
        r103 = r13;
        r12 = r20 + r22;
        r0 = stringifyKBSize(r12);
        r11.print(r0);
        r0 = " (";
        r11.print(r0);
        r12 = r53 - r6;
        r0 = stringifyKBSize(r12);
        r11.print(r0);
        r0 = " used pss + ";
        r11.print(r0);
        r12 = r1.getKernelUsedSizeKb();
        r0 = stringifyKBSize(r12);
        r11.print(r0);
        r0 = " kernel)\n";
        r11.print(r0);
        r0 = " Lost RAM: ";
        r11.print(r0);
        r0 = stringifyKBSize(r2);
        r11.println(r0);
        goto L_0x0b7d;
    L_0x0b72:
        r103 = r13;
        r0 = "lostram,";
        r11.print(r0);
        r11.println(r2);
    L_0x0b7d:
        if (r111 != 0) goto L_0x0d71;
    L_0x0b7f:
        r12 = r1.getZramTotalSizeKb();
        r0 = (r12 > r27 ? 1 : (r12 == r27 ? 0 : -1));
        if (r0 == 0) goto L_0x0bec;
    L_0x0b87:
        r0 = r9.isCompact;
        if (r0 != 0) goto L_0x0bc7;
    L_0x0b8b:
        r0 = "     ZRAM: ";
        r11.print(r0);
        r12 = r1.getZramTotalSizeKb();
        r0 = stringifyKBSize(r12);
        r11.print(r0);
        r0 = " physical used for ";
        r11.print(r0);
        r12 = r1.getSwapTotalSizeKb();
        r20 = r1.getSwapFreeSizeKb();
        r12 = r12 - r20;
        r0 = stringifyKBSize(r12);
        r11.print(r0);
        r0 = " in swap (";
        r11.print(r0);
        r12 = r1.getSwapTotalSizeKb();
        r0 = stringifyKBSize(r12);
        r11.print(r0);
        r0 = " total swap)";
        r11.println(r0);
        goto L_0x0bec;
    L_0x0bc7:
        r0 = "zram,";
        r11.print(r0);
        r12 = r1.getZramTotalSizeKb();
        r11.print(r12);
        r0 = ",";
        r11.print(r0);
        r12 = r1.getSwapTotalSizeKb();
        r11.print(r12);
        r0 = ",";
        r11.print(r0);
        r12 = r1.getSwapFreeSizeKb();
        r11.println(r12);
    L_0x0bec:
        r0 = r105.getKsmInfo();
        r4 = r9.isCompact;
        r13 = 3;
        r20 = 2;
        if (r4 != 0) goto L_0x0caa;
    L_0x0bf7:
        r4 = 1;
        r21 = r0[r4];
        r4 = (r21 > r27 ? 1 : (r21 == r27 ? 0 : -1));
        if (r4 != 0) goto L_0x0c10;
    L_0x0bfe:
        r21 = r0[r38];
        r4 = (r21 > r27 ? 1 : (r21 == r27 ? 0 : -1));
        if (r4 != 0) goto L_0x0c10;
    L_0x0c04:
        r21 = r0[r20];
        r4 = (r21 > r27 ? 1 : (r21 == r27 ? 0 : -1));
        if (r4 != 0) goto L_0x0c10;
    L_0x0c0a:
        r21 = r0[r13];
        r4 = (r21 > r27 ? 1 : (r21 == r27 ? 0 : -1));
        if (r4 == 0) goto L_0x0c4f;
    L_0x0c10:
        r4 = "      KSM: ";
        r11.print(r4);
        r4 = 1;
        r12 = r0[r4];
        r4 = stringifyKBSize(r12);
        r11.print(r4);
        r4 = " saved from shared ";
        r11.print(r4);
        r12 = r0[r38];
        r4 = stringifyKBSize(r12);
        r11.print(r4);
        r4 = "           ";
        r11.print(r4);
        r12 = r0[r20];
        r4 = stringifyKBSize(r12);
        r11.print(r4);
        r4 = " unshared; ";
        r11.print(r4);
        r4 = 3;
        r12 = r0[r4];
        r4 = stringifyKBSize(r12);
        r11.print(r4);
        r4 = " volatile";
        r11.println(r4);
    L_0x0c4f:
        r4 = "   Tuning: ";
        r11.print(r4);
        r4 = android.app.ActivityManager.staticGetMemoryClass();
        r11.print(r4);
        r4 = " (large ";
        r11.print(r4);
        r4 = android.app.ActivityManager.staticGetLargeMemoryClass();
        r11.print(r4);
        r4 = "), oom ";
        r11.print(r4);
        r4 = r5.mProcessList;
        r12 = 906; // 0x38a float:1.27E-42 double:4.476E-321;
        r12 = r4.getMemLevel(r12);
        r4 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r4 = stringifySize(r12, r4);
        r11.print(r4);
        r4 = ", restore limit ";
        r11.print(r4);
        r4 = r5.mProcessList;
        r12 = r4.getCachedRestoreThresholdKb();
        r4 = stringifyKBSize(r12);
        r11.print(r4);
        r4 = android.app.ActivityManager.isLowRamDeviceStatic();
        if (r4 == 0) goto L_0x0c9a;
    L_0x0c95:
        r4 = " (low-ram)";
        r11.print(r4);
    L_0x0c9a:
        r4 = android.app.ActivityManager.isHighEndGfx();
        if (r4 == 0) goto L_0x0ca5;
    L_0x0ca0:
        r4 = " (high-end-gfx)";
        r11.print(r4);
    L_0x0ca5:
        r107.println();
        goto L_0x0d71;
    L_0x0caa:
        r4 = "ksm,";
        r11.print(r4);
        r4 = 1;
        r12 = r0[r4];
        r11.print(r12);
        r4 = ",";
        r11.print(r4);
        r12 = r0[r38];
        r11.print(r12);
        r4 = ",";
        r11.print(r4);
        r12 = r0[r20];
        r11.print(r12);
        r4 = ",";
        r11.print(r4);
        r4 = 3;
        r12 = r0[r4];
        r11.println(r12);
        r4 = "tuning,";
        r11.print(r4);
        r4 = android.app.ActivityManager.staticGetMemoryClass();
        r11.print(r4);
        r4 = 44;
        r11.print(r4);
        r12 = android.app.ActivityManager.staticGetLargeMemoryClass();
        r11.print(r12);
        r11.print(r4);
        r4 = r5.mProcessList;
        r12 = 906; // 0x38a float:1.27E-42 double:4.476E-321;
        r12 = r4.getMemLevel(r12);
        r20 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r12 = r12 / r20;
        r11.print(r12);
        r4 = android.app.ActivityManager.isLowRamDeviceStatic();
        if (r4 == 0) goto L_0x0d0b;
    L_0x0d06:
        r4 = ",low-ram";
        r11.print(r4);
    L_0x0d0b:
        r4 = android.app.ActivityManager.isHighEndGfx();
        if (r4 == 0) goto L_0x0d16;
    L_0x0d11:
        r4 = ",high-end-gfx";
        r11.print(r4);
    L_0x0d16:
        r107.println();
        goto L_0x0d71;
    L_0x0d1b:
        r0 = move-exception;
        r9 = r5;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r17 = r78;
        r6 = r91;
        r19 = r93;
        r18 = r100;
        r5 = r105;
        r11 = r107;
        r3 = r24;
        r1 = r25;
        goto L_0x0d4f;
    L_0x0d34:
        r0 = move-exception;
        r19 = r7;
        r99 = r8;
        r101 = r10;
        r18 = r11;
        r6 = r12;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r94 = r76;
        r17 = r78;
        r11 = r107;
        r104 = r9;
        r9 = r5;
        r5 = r104;
    L_0x0d4f:
        monitor-exit(r4);	 Catch:{ all -> 0x0d51 }
        throw r0;
    L_0x0d51:
        r0 = move-exception;
        goto L_0x0d4f;
    L_0x0d53:
        r19 = r7;
        r99 = r8;
        r101 = r10;
        r18 = r11;
        r6 = r12;
        r15 = r61;
        r103 = r67;
        r16 = r72;
        r94 = r76;
        r17 = r78;
        r11 = r107;
        r104 = r9;
        r9 = r5;
        r5 = r104;
        r25 = r1;
        r24 = r3;
    L_0x0d71:
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpApplicationMemoryUsage(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String, com.android.server.am.ActivityManagerService$MemoryUsageDumpOptions, java.lang.String[], boolean, java.util.ArrayList, java.io.PrintWriter):void");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    @com.android.internal.annotations.GuardedBy("this")
    private boolean handleProcessStartedLocked(com.android.server.am.ProcessRecord r27, int r28, boolean r29, long r30, boolean r32) {
        /*
        r26 = this;
        r7 = r26;
        r8 = r27;
        r15 = r28;
        r14 = r29;
        r12 = r30;
        r0 = r7.mPendingStarts;
        r0.remove(r12);
        r11 = r7.isProcStartValidLocked(r8, r12);
        r9 = 0;
        if (r11 == 0) goto L_0x0044;
    L_0x0016:
        r0 = "ActivityManager";
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r1.append(r8);
        r2 = " start not valid, killing pid=";
        r1.append(r2);
        r1.append(r15);
        r2 = ", ";
        r1.append(r2);
        r1.append(r11);
        r1 = r1.toString();
        android.util.Slog.w(r0, r1);
        r8.pendingStart = r9;
        android.os.Process.killProcessQuiet(r28);
        r0 = r8.uid;
        r1 = r8.pid;
        android.os.Process.killProcessGroup(r0, r1);
        return r9;
    L_0x0044:
        r0 = "activity";
        r1 = r8.hostingType;
        r0 = r0.equals(r1);
        if (r0 != 0) goto L_0x0063;
    L_0x004e:
        r0 = "content provider";
        r1 = r8.hostingType;
        r0 = r0.equals(r1);
        if (r0 != 0) goto L_0x0063;
    L_0x0058:
        r0 = r7.mBatteryStatsService;
        r1 = r8.processName;
        r2 = r8.info;
        r2 = r2.uid;
        r0.noteProcessStart(r1, r2);
    L_0x0063:
        r0 = "1";
        r1 = "ro.debuggable";
        r2 = "0";
        r1 = android.os.SystemProperties.get(r1, r2);
        r0 = r0.equals(r1);
        r10 = 1;
        if (r0 != 0) goto L_0x007c;
    L_0x0075:
        r0 = r8.info;
        r0 = r0.flags;
        r0 = r0 & r10;
        if (r0 != 0) goto L_0x0099;
    L_0x007c:
        r0 = 15;
        r1 = android.common.HwFrameworkFactory.getHwResource(r0);
        if (r1 == 0) goto L_0x0099;
    L_0x0084:
        r0 = android.os.StrictMode.allowThreadDiskReads();
        r2 = r0;
        r0 = r8.info;	 Catch:{ all -> 0x0094 }
        r0 = r0.packageName;	 Catch:{ all -> 0x0094 }
        r1.acquire(r15, r0, r9);	 Catch:{ all -> 0x0094 }
        android.os.StrictMode.setThreadPolicy(r2);
        goto L_0x0099;
    L_0x0094:
        r0 = move-exception;
        android.os.StrictMode.setThreadPolicy(r2);
        throw r0;
    L_0x0099:
        r0 = r8.startTime;
        r2 = "startProcess: done updating battery stats";
        r7.checkTime(r0, r2);
        r0 = 30014; // 0x753e float:4.2059E-41 double:1.4829E-319;
        r1 = 6;
        r1 = new java.lang.Object[r1];
        r2 = r8.startUid;
        r2 = android.os.UserHandle.getUserId(r2);
        r2 = java.lang.Integer.valueOf(r2);
        r1[r9] = r2;
        r2 = java.lang.Integer.valueOf(r28);
        r1[r10] = r2;
        r2 = 2;
        r3 = r8.startUid;
        r3 = java.lang.Integer.valueOf(r3);
        r1[r2] = r3;
        r2 = 3;
        r3 = r8.processName;
        r1[r2] = r3;
        r2 = 4;
        r3 = r8.hostingType;
        r1[r2] = r3;
        r2 = 5;
        r3 = r8.hostingNameStr;
        if (r3 == 0) goto L_0x00d3;
    L_0x00d0:
        r3 = r8.hostingNameStr;
        goto L_0x00d5;
    L_0x00d3:
        r3 = "";
    L_0x00d5:
        r1[r2] = r3;
        android.util.EventLog.writeEvent(r0, r1);
        r1 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x00ed }
        r2 = r8.processName;	 Catch:{ RemoteException -> 0x00ed }
        r3 = r8.uid;	 Catch:{ RemoteException -> 0x00ed }
        r4 = r8.seInfo;	 Catch:{ RemoteException -> 0x00ed }
        r0 = r8.info;	 Catch:{ RemoteException -> 0x00ed }
        r5 = r0.sourceDir;	 Catch:{ RemoteException -> 0x00ed }
        r6 = r15;	 Catch:{ RemoteException -> 0x00ed }
        r1.logAppProcessStartIfNeeded(r2, r3, r4, r5, r6);	 Catch:{ RemoteException -> 0x00ed }
        goto L_0x00ee;
    L_0x00ed:
        r0 = move-exception;
    L_0x00ee:
        r0 = r8.persistent;
        if (r0 == 0) goto L_0x00fb;
    L_0x00f2:
        r0 = com.android.server.Watchdog.getInstance();
        r1 = r8.processName;
        r0.processStarted(r1, r15);
    L_0x00fb:
        r0 = r8.startTime;
        r2 = "startProcess: building log message";
        r7.checkTime(r0, r2);
        r6 = r7.mStringBuilder;
        r6.setLength(r9);
        r0 = "Start proc ";
        r6.append(r0);
        r6.append(r15);
        r0 = 58;
        r6.append(r0);
        r0 = r8.processName;
        r6.append(r0);
        r0 = 47;
        r6.append(r0);
        r0 = r8.startUid;
        android.os.UserHandle.formatUid(r6, r0);
        r0 = r8.isolatedEntryPoint;
        if (r0 == 0) goto L_0x0137;
    L_0x0128:
        r0 = " [";
        r6.append(r0);
        r0 = r8.isolatedEntryPoint;
        r6.append(r0);
        r0 = "]";
        r6.append(r0);
    L_0x0137:
        r0 = " for ";
        r6.append(r0);
        r0 = r8.hostingType;
        r6.append(r0);
        r0 = r8.hostingNameStr;
        if (r0 == 0) goto L_0x014f;
    L_0x0145:
        r0 = " ";
        r6.append(r0);
        r0 = r8.hostingNameStr;
        r6.append(r0);
    L_0x014f:
        r0 = "ActivityManager";
        r1 = r6.toString();
        r2 = r8.startUid;
        r7.reportUidInfoMessageLocked(r0, r1, r2);
        r0 = 111; // 0x6f float:1.56E-43 double:5.5E-322;
        r1 = r8.processName;
        r2 = r8.hostingType;
        r3 = java.lang.String.valueOf(r28);
        r4 = new java.lang.String[r10];
        r5 = r8.startUid;
        r5 = java.lang.String.valueOf(r5);
        r4[r9] = r5;
        com.huawei.pgmng.log.LogPower.push(r0, r1, r2, r3, r4);
        r27.setPid(r28);
        r8.usingWrapper = r14;
        r8.pendingStart = r9;
        r0 = r8.startTime;
        r2 = "startProcess: starting to update pids map";
        r7.checkTime(r0, r2);
        r0 = r7.mSystemReady;
        if (r0 == 0) goto L_0x01b0;
    L_0x0184:
        r0 = "activity";
        r1 = r8.hostingType;
        r0 = r0.equals(r1);
        if (r0 == 0) goto L_0x01b0;
    L_0x018e:
        r9 = r7.mDAProxy;
        r0 = r8.info;
        r0 = r0.packageName;
        r1 = r8.processName;
        r2 = r8.startUid;
        r3 = 0;
        r4 = r8.hostingType;
        r5 = r8.hostingNameStr;
        r17 = r10;
        r10 = r0;
        r18 = r11;
        r11 = r1;
        r12 = r15;
        r13 = r2;
        r19 = r14;
        r14 = r3;
        r3 = r15;
        r15 = r4;
        r16 = r5;
        r9.noteProcessStart(r10, r11, r12, r13, r14, r15, r16);
        goto L_0x01b7;
    L_0x01b0:
        r17 = r10;
        r18 = r11;
        r19 = r14;
        r3 = r15;
    L_0x01b7:
        r1 = r7.mPidsSelfLocked;
        monitor-enter(r1);
        r0 = r7.mPidsSelfLocked;	 Catch:{ all -> 0x02a1 }
        r0 = r0.get(r3);	 Catch:{ all -> 0x02a1 }
        r0 = (com.android.server.am.ProcessRecord) r0;	 Catch:{ all -> 0x02a1 }
        r9 = r0;	 Catch:{ all -> 0x02a1 }
        monitor-exit(r1);	 Catch:{ all -> 0x02a1 }
        if (r9 == 0) goto L_0x01f3;
    L_0x01c6:
        r0 = r8.isolated;
        if (r0 != 0) goto L_0x01f3;
    L_0x01ca:
        r0 = "ActivityManager";
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "Reusing pid ";
        r1.append(r2);
        r1.append(r3);
        r2 = " while app is still mapped to it";
        r1.append(r2);
        r1 = r1.toString();
        android.util.Slog.w(r0, r1);
        r0 = 0;
        r4 = 0;
        r5 = -1;
        r10 = 1;
        r1 = r7;
        r2 = r9;
        r11 = r3;
        r3 = r0;
        r12 = r6;
        r6 = r10;
        r1.cleanUpApplicationRecordLocked(r2, r3, r4, r5, r6);
        goto L_0x01f5;
    L_0x01f3:
        r11 = r3;
        r12 = r6;
    L_0x01f5:
        r2 = r7.mPidsSelfLocked;
        monitor-enter(r2);
        r0 = r7.mPidsSelfLocked;
        r0.put(r11, r8);
        if (r32 != 0) goto L_0x0216;
    L_0x01ff:
        r0 = r7.mHandler;
        r1 = 20;
        r0 = r0.obtainMessage(r1);
        r0.obj = r8;
        r1 = r7.mHandler;
        if (r19 == 0) goto L_0x0211;
    L_0x020d:
        r4 = 1200000; // 0x124f80 float:1.681558E-39 double:5.92879E-318;
        goto L_0x0213;
    L_0x0211:
        r4 = 10000; // 0x2710 float:1.4013E-41 double:4.9407E-320;
    L_0x0213:
        r1.sendMessageDelayed(r0, r4);
    L_0x0216:
        monitor-exit(r2);
        r0 = r8.startTime;
        r2 = "startProcess: done updating pids map";
        r7.checkTime(r0, r2);
        r0 = android.util.Jlog.isUBMEnable();
        if (r0 == 0) goto L_0x0272;
    L_0x0225:
        r0 = 268; // 0x10c float:3.76E-43 double:1.324E-321;
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "AC#";
        r1.append(r2);
        r2 = r8.processName;
        if (r2 == 0) goto L_0x0238;
    L_0x0235:
        r2 = r8.processName;
        goto L_0x023b;
    L_0x0238:
        r2 = "unknow";
    L_0x023b:
        r1.append(r2);
        r2 = "(";
        r1.append(r2);
        r2 = r8.info;
        r2 = r2.versionCode;
        r1.append(r2);
        r2 = ",";
        r1.append(r2);
        r2 = r8.pid;
        r1.append(r2);
        r2 = ",";
        r1.append(r2);
        r2 = r8.hostingNameStr;
        if (r2 == 0) goto L_0x0260;
    L_0x025d:
        r2 = r8.hostingNameStr;
        goto L_0x0263;
    L_0x0260:
        r2 = "none";
    L_0x0263:
        r1.append(r2);
        r2 = ")";
        r1.append(r2);
        r1 = r1.toString();
        android.util.Jlog.d(r0, r1);
    L_0x0272:
        r0 = r7.mDAProxy;
        r1 = r8.maxAdj;
        r2 = r8.info;
        r2 = r2.packageName;
        r0 = r0.resetAppMngOomAdj(r1, r2);
        r8.maxAdj = r0;
        r0 = r7.mDAProxy;
        r1 = r8.info;
        r1 = r1.packageName;
        r2 = r8.processName;
        r4 = r8.hostingType;
        r5 = r8.pid;
        r6 = r8.uid;
        r20 = r0;
        r21 = r1;
        r22 = r2;
        r23 = r4;
        r24 = r5;
        r25 = r6;
        r20.notifyProcessStatusChange(r21, r22, r23, r24, r25);
        return r17;
    L_0x029e:
        r0 = move-exception;
        monitor-exit(r2);
        throw r0;
    L_0x02a1:
        r0 = move-exception;
        r11 = r3;
        r12 = r6;
    L_0x02a4:
        monitor-exit(r1);	 Catch:{ all -> 0x02a6 }
        throw r0;
    L_0x02a6:
        r0 = move-exception;
        goto L_0x02a4;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.handleProcessStartedLocked(com.android.server.am.ProcessRecord, int, boolean, long, boolean):boolean");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    public static /* synthetic */ void lambda$startProcessLocked$0(com.android.server.am.ActivityManagerService r20, com.android.server.am.ProcessRecord r21, long r22, java.lang.String r24, java.lang.String r25, int[] r26, int r27, int r28, java.lang.String r29, java.lang.String r30) {
        /*
        r15 = r20;
        r13 = r21;
        r11 = r22;
        r14 = 0;
        monitor-enter(r20);	 Catch:{ RuntimeException -> 0x00af }
        boostPriorityForLockedSection();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r0 = r20.isProcStartValidLocked(r21, r22);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        if (r0 == 0) goto L_0x0031;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
    L_0x0011:
        r1 = "ActivityManager";	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2 = new java.lang.StringBuilder;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2.<init>();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2.append(r13);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r3 = " not valid anymore, don't start process, ";	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2.append(r3);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2.append(r0);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2 = r2.toString();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        android.util.Slog.w(r1, r2);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r13.pendingStart = r14;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        monitor-exit(r20);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        resetPriorityAfterLockedSection();
        return;
    L_0x0031:
        if (r24 != 0) goto L_0x0050;
    L_0x0033:
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r1.<init>();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2 = "wrap.";	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r1.append(r2);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r2 = r13.processName;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r1.append(r2);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r1 = r1.toString();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r1 = android.os.SystemProperties.get(r1);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        if (r1 == 0) goto L_0x004e;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
    L_0x004d:
        goto L_0x0050;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
    L_0x004e:
        r1 = r14;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        goto L_0x0051;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
    L_0x0050:
        r1 = 1;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
    L_0x0051:
        r13.usingWrapper = r1;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r1 = r15.mPendingStarts;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        r1.put(r11, r13);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        monitor-exit(r20);	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        resetPriorityAfterLockedSection();	 Catch:{ RuntimeException -> 0x00af }
        r2 = r13.hostingType;	 Catch:{ RuntimeException -> 0x00af }
        r5 = r13.startUid;	 Catch:{ RuntimeException -> 0x00af }
        r9 = r13.seInfo;	 Catch:{ RuntimeException -> 0x00af }
        r7 = r13.startTime;	 Catch:{ RuntimeException -> 0x00af }
        r1 = r15;
        r3 = r25;
        r4 = r13;
        r6 = r26;
        r16 = r7;
        r7 = r27;
        r8 = r28;
        r10 = r29;
        r11 = r30;
        r12 = r24;
        r13 = r16;
        r0 = r1.startProcess(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13);	 Catch:{ RuntimeException -> 0x009a }
        r1 = r0;	 Catch:{ RuntimeException -> 0x009a }
        monitor-enter(r20);	 Catch:{ RuntimeException -> 0x009a }
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0090 }
        r11 = r21;
        r12 = r22;
        r15.handleProcessStartedLocked(r11, r1, r12);	 Catch:{ all -> 0x008e }
        monitor-exit(r20);	 Catch:{ all -> 0x008e }
        resetPriorityAfterLockedSection();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        goto L_0x00fa;
    L_0x008e:
        r0 = move-exception;
        goto L_0x0095;
    L_0x0090:
        r0 = move-exception;
        r11 = r21;
        r12 = r22;
    L_0x0095:
        monitor-exit(r20);	 Catch:{ all -> 0x008e }
        resetPriorityAfterLockedSection();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        throw r0;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
    L_0x009a:
        r0 = move-exception;
        r11 = r21;
        r12 = r22;
        goto L_0x00b5;
    L_0x00a0:
        r0 = move-exception;
        r18 = r11;
        r11 = r13;
        r12 = r18;
    L_0x00a6:
        monitor-exit(r20);	 Catch:{ all -> 0x00ad }
        resetPriorityAfterLockedSection();	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
        throw r0;	 Catch:{ all -> 0x00a0, RuntimeException -> 0x00ab }
    L_0x00ab:
        r0 = move-exception;
        goto L_0x00b5;
    L_0x00ad:
        r0 = move-exception;
        goto L_0x00a6;
    L_0x00af:
        r0 = move-exception;
        r18 = r11;
        r11 = r13;
        r12 = r18;
    L_0x00b5:
        r14 = r0;
        monitor-enter(r20);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x00fb }
        r0 = "ActivityManager";	 Catch:{ all -> 0x00fb }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x00fb }
        r1.<init>();	 Catch:{ all -> 0x00fb }
        r2 = "Failure starting process ";	 Catch:{ all -> 0x00fb }
        r1.append(r2);	 Catch:{ all -> 0x00fb }
        r2 = r11.processName;	 Catch:{ all -> 0x00fb }
        r1.append(r2);	 Catch:{ all -> 0x00fb }
        r1 = r1.toString();	 Catch:{ all -> 0x00fb }
        android.util.Slog.e(r0, r1, r14);	 Catch:{ all -> 0x00fb }
        r0 = r15.mPendingStarts;	 Catch:{ all -> 0x00fb }
        r0.remove(r12);	 Catch:{ all -> 0x00fb }
        r1 = 0;	 Catch:{ all -> 0x00fb }
        r11.pendingStart = r1;	 Catch:{ all -> 0x00fb }
        r0 = r11.info;	 Catch:{ all -> 0x00fb }
        r2 = r0.packageName;	 Catch:{ all -> 0x00fb }
        r0 = r11.uid;	 Catch:{ all -> 0x00fb }
        r3 = android.os.UserHandle.getAppId(r0);	 Catch:{ all -> 0x00fb }
        r4 = 0;	 Catch:{ all -> 0x00fb }
        r5 = 0;	 Catch:{ all -> 0x00fb }
        r6 = 1;	 Catch:{ all -> 0x00fb }
        r7 = 0;	 Catch:{ all -> 0x00fb }
        r8 = 0;	 Catch:{ all -> 0x00fb }
        r0 = r11.userId;	 Catch:{ all -> 0x00fb }
        r9 = android.os.UserHandle.getUserId(r0);	 Catch:{ all -> 0x00fb }
        r10 = "start failure";	 Catch:{ all -> 0x00fb }
        r1 = r15;	 Catch:{ all -> 0x00fb }
        r1.forceStopPackageLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10);	 Catch:{ all -> 0x00fb }
        monitor-exit(r20);	 Catch:{ all -> 0x00fb }
        resetPriorityAfterLockedSection();
    L_0x00fa:
        return;
    L_0x00fb:
        r0 = move-exception;
        monitor-exit(r20);	 Catch:{ all -> 0x00fb }
        resetPriorityAfterLockedSection();
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.lambda$startProcessLocked$0(com.android.server.am.ActivityManagerService, com.android.server.am.ProcessRecord, long, java.lang.String, java.lang.String, int[], int, int, java.lang.String, java.lang.String):void");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    public boolean clearApplicationUserData(java.lang.String r23, boolean r24, android.content.pm.IPackageDataObserver r25, int r26) {
        /*
        r22 = this;
        r7 = r22;
        r8 = r23;
        r9 = r25;
        r0 = "clearApplicationUserData";
        r7.enforceNotIsolatedCaller(r0);
        r6 = android.os.Binder.getCallingUid();
        r5 = android.os.Binder.getCallingPid();
        r10 = r7.mUserController;
        r16 = "clearApplicationUserData";
        r14 = 0;
        r15 = 2;
        r17 = 0;
        r11 = r5;
        r12 = r6;
        r13 = r26;
        r10 = r10.handleIncomingUser(r11, r12, r13, r14, r15, r16, r17);
        r0 = android.os.Binder.clearCallingIdentity();
        r11 = r0;
        r0 = android.app.AppGlobals.getPackageManager();	 Catch:{ all -> 0x01c6 }
        r13 = r0;	 Catch:{ all -> 0x01c6 }
        monitor-enter(r22);	 Catch:{ all -> 0x01c6 }
        boostPriorityForLockedSection();	 Catch:{ all -> 0x01bb }
        r0 = r22.getPackageManagerInternalLocked();	 Catch:{ all -> 0x01bb }
        r0 = r0.isPackageDataProtected(r10, r8);	 Catch:{ all -> 0x01bb }
        if (r0 != 0) goto L_0x01a3;
    L_0x003b:
        r0 = 0;
        r1 = r0;
        r0 = 8192; // 0x2000 float:1.14794E-41 double:4.0474E-320;
        r0 = r13.getApplicationInfo(r8, r0, r10);	 Catch:{ RemoteException -> 0x004b }
        r1 = r0;
    L_0x0045:
        r14 = r1;
        goto L_0x004d;
    L_0x0047:
        r0 = move-exception;
        r14 = r5;
        goto L_0x01bd;
    L_0x004b:
        r0 = move-exception;
        goto L_0x0045;
    L_0x004d:
        r15 = r14;
        r4 = 1;
        r3 = 0;
        if (r15 == 0) goto L_0x0058;
    L_0x0052:
        r0 = r15.uid;	 Catch:{ all -> 0x0047 }
        if (r0 != r6) goto L_0x0058;
    L_0x0056:
        r0 = r4;
        goto L_0x0059;
    L_0x0058:
        r0 = r3;
    L_0x0059:
        r16 = r0;
        if (r16 != 0) goto L_0x00a8;
    L_0x005d:
        r2 = "android.permission.CLEAR_APP_USER_DATA";	 Catch:{ all -> 0x00a4 }
        r0 = -1;
        r17 = 1;
        r1 = r7;
        r18 = r14;
        r14 = r3;
        r3 = r5;
        r14 = r4;
        r4 = r6;
        r14 = r5;
        r5 = r0;
        r19 = r6;
        r6 = r17;
        r0 = r1.checkComponentPermission(r2, r3, r4, r5, r6);	 Catch:{ all -> 0x009f }
        if (r0 != 0) goto L_0x0076;	 Catch:{ all -> 0x009f }
    L_0x0075:
        goto L_0x00ad;	 Catch:{ all -> 0x009f }
    L_0x0076:
        r0 = new java.lang.SecurityException;	 Catch:{ all -> 0x009f }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x009f }
        r1.<init>();	 Catch:{ all -> 0x009f }
        r2 = "PID ";	 Catch:{ all -> 0x009f }
        r1.append(r2);	 Catch:{ all -> 0x009f }
        r1.append(r14);	 Catch:{ all -> 0x009f }
        r2 = " does not have permission ";	 Catch:{ all -> 0x009f }
        r1.append(r2);	 Catch:{ all -> 0x009f }
        r2 = "android.permission.CLEAR_APP_USER_DATA";	 Catch:{ all -> 0x009f }
        r1.append(r2);	 Catch:{ all -> 0x009f }
        r2 = " to clear data of package ";	 Catch:{ all -> 0x009f }
        r1.append(r2);	 Catch:{ all -> 0x009f }
        r1.append(r8);	 Catch:{ all -> 0x009f }
        r1 = r1.toString();	 Catch:{ all -> 0x009f }
        r0.<init>(r1);	 Catch:{ all -> 0x009f }
        throw r0;	 Catch:{ all -> 0x009f }
    L_0x009f:
        r0 = move-exception;
        r6 = r19;
        goto L_0x01bd;
    L_0x00a4:
        r0 = move-exception;
        r14 = r5;
        goto L_0x01bd;
    L_0x00a8:
        r19 = r6;
        r18 = r14;
        r14 = r5;
    L_0x00ad:
        r0 = r22.getPackageManagerInternalLocked();	 Catch:{ all -> 0x019f }
        r0 = r0.hasInstantApplicationMetadata(r8, r10);	 Catch:{ all -> 0x019f }
        r17 = r0;
        if (r15 != 0) goto L_0x00bd;
    L_0x00b9:
        if (r17 != 0) goto L_0x00bd;
    L_0x00bb:
        r0 = 1;
        goto L_0x00be;
    L_0x00bd:
        r0 = 0;
    L_0x00be:
        r20 = r0;
        if (r15 == 0) goto L_0x00c8;
    L_0x00c2:
        r0 = r15.isInstantApp();	 Catch:{ all -> 0x009f }
        if (r0 != 0) goto L_0x00ca;
    L_0x00c8:
        if (r17 == 0) goto L_0x00cc;
    L_0x00ca:
        r0 = 1;
        goto L_0x00cd;
    L_0x00cc:
        r0 = 0;
    L_0x00cd:
        r21 = r0;
        r2 = "android.permission.ACCESS_INSTANT_APPS";	 Catch:{ all -> 0x019f }
        r5 = -1;	 Catch:{ all -> 0x019f }
        r6 = 1;	 Catch:{ all -> 0x019f }
        r1 = r7;	 Catch:{ all -> 0x019f }
        r3 = r14;	 Catch:{ all -> 0x019f }
        r4 = r19;	 Catch:{ all -> 0x019f }
        r0 = r1.checkComponentPermission(r2, r3, r4, r5, r6);	 Catch:{ all -> 0x019f }
        if (r0 != 0) goto L_0x00df;
    L_0x00dd:
        r0 = 1;
        goto L_0x00e0;
    L_0x00df:
        r0 = 0;
    L_0x00e0:
        r1 = r0;
        if (r20 != 0) goto L_0x016e;
    L_0x00e3:
        if (r21 == 0) goto L_0x00eb;
    L_0x00e5:
        if (r1 != 0) goto L_0x00eb;
    L_0x00e7:
        r6 = r19;
        goto L_0x0170;
    L_0x00eb:
        if (r15 == 0) goto L_0x00f9;
    L_0x00ed:
        r0 = r15.uid;	 Catch:{ all -> 0x009f }
        r2 = "clear data";	 Catch:{ all -> 0x009f }
        r7.forceStopPackageLocked(r8, r0, r2);	 Catch:{ all -> 0x009f }
        r0 = r7.mRecentTasks;	 Catch:{ all -> 0x009f }
        r0.removeTasksByPackageName(r8, r10);	 Catch:{ all -> 0x009f }
    L_0x00f9:
        monitor-exit(r22);	 Catch:{ all -> 0x019f }
        resetPriorityAfterLockedSection();	 Catch:{ all -> 0x016a }
        r5 = r21;	 Catch:{ all -> 0x016a }
        r0 = new com.android.server.am.ActivityManagerService$7;	 Catch:{ all -> 0x016a }
        r1 = r0;	 Catch:{ all -> 0x016a }
        r2 = r7;	 Catch:{ all -> 0x016a }
        r3 = r15;	 Catch:{ all -> 0x016a }
        r4 = r10;	 Catch:{ all -> 0x016a }
        r6 = r9;	 Catch:{ all -> 0x016a }
        r1.<init>(r3, r4, r5, r6);	 Catch:{ all -> 0x016a }
        r1 = r0;
        r13.clearApplicationUserData(r8, r1, r10);	 Catch:{ RemoteException -> 0x015f }
        if (r15 == 0) goto L_0x015c;	 Catch:{ RemoteException -> 0x015f }
    L_0x010f:
        if (r24 != 0) goto L_0x013b;	 Catch:{ RemoteException -> 0x015f }
    L_0x0111:
        monitor-enter(r22);	 Catch:{ RemoteException -> 0x015f }
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r3 = 0;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r4 = 1;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r7.removeUriPermissionsForPackageLocked(r8, r10, r4, r3);	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        monitor-exit(r22);	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        resetPriorityAfterLockedSection();	 Catch:{ RemoteException -> 0x015f }
        r0 = android.app.NotificationManager.getService();	 Catch:{ RemoteException -> 0x015f }
        r3 = r15.uid;	 Catch:{ RemoteException -> 0x015f }
        r4 = r15.uid;	 Catch:{ RemoteException -> 0x015f }
        r6 = r19;
        if (r6 != r4) goto L_0x012c;
    L_0x012a:
        r4 = 1;
        goto L_0x012d;
    L_0x012c:
        r4 = 0;
    L_0x012d:
        r0.clearData(r8, r3, r4);	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        goto L_0x013d;
    L_0x0131:
        r0 = move-exception;
        r6 = r19;
    L_0x0134:
        monitor-exit(r22);	 Catch:{ all -> 0x0139 }
        resetPriorityAfterLockedSection();	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        throw r0;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
    L_0x0139:
        r0 = move-exception;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        goto L_0x0134;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
    L_0x013b:
        r6 = r19;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
    L_0x013d:
        r0 = com.android.server.job.JobSchedulerInternal.class;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r0 = com.android.server.LocalServices.getService(r0);	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r0 = (com.android.server.job.JobSchedulerInternal) r0;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r3 = r15.uid;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r4 = "clear data";	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r0.cancelJobsForUid(r3, r4);	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r3 = com.android.server.AlarmManagerInternal.class;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r3 = com.android.server.LocalServices.getService(r3);	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r3 = (com.android.server.AlarmManagerInternal) r3;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r4 = r15.uid;	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        r3.removeAlarmsForUid(r4);	 Catch:{ all -> 0x0131, RemoteException -> 0x015a }
        goto L_0x015e;
    L_0x015a:
        r0 = move-exception;
        goto L_0x0162;
    L_0x015c:
        r6 = r19;
    L_0x015e:
        goto L_0x0162;
    L_0x015f:
        r0 = move-exception;
        r6 = r19;
    L_0x0162:
        android.os.Binder.restoreCallingIdentity(r11);
        r0 = r15;
        r1 = r5;
        r3 = 1;
        return r3;
    L_0x016a:
        r0 = move-exception;
        r6 = r19;
        goto L_0x01c8;
    L_0x016e:
        r6 = r19;
    L_0x0170:
        r0 = "ActivityManager";	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r3 = new java.lang.StringBuilder;	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r3.<init>();	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r4 = "Invalid packageName: ";	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r3.append(r4);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r3.append(r8);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r3 = r3.toString();	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        android.util.Slog.w(r0, r3);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        if (r9 == 0) goto L_0x0196;
    L_0x0188:
        r3 = 0;
        r9.onRemoveCompleted(r8, r3);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        goto L_0x0196;
    L_0x018d:
        r0 = move-exception;
        r3 = r0;
        r3 = "ActivityManager";	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r4 = "Observer no longer exists.";	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        android.util.Slog.i(r3, r4);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
    L_0x0196:
        monitor-exit(r22);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        resetPriorityAfterLockedSection();
        android.os.Binder.restoreCallingIdentity(r11);
        r3 = 0;
        return r3;
    L_0x019f:
        r0 = move-exception;
        r6 = r19;
        goto L_0x01bd;
    L_0x01a3:
        r14 = r5;
        r0 = new java.lang.SecurityException;	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r1 = new java.lang.StringBuilder;	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r1.<init>();	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r3 = "Cannot clear data for a protected package: ";	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r1.append(r3);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r1.append(r8);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r1 = r1.toString();	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r0.<init>(r1);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        throw r0;	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
    L_0x01bb:
        r0 = move-exception;	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        r14 = r5;	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
    L_0x01bd:
        monitor-exit(r22);	 Catch:{ RemoteException -> 0x018d, all -> 0x01c4 }
        resetPriorityAfterLockedSection();	 Catch:{ all -> 0x01c2 }
        throw r0;	 Catch:{ all -> 0x01c2 }
    L_0x01c2:
        r0 = move-exception;
        goto L_0x01c8;
    L_0x01c4:
        r0 = move-exception;
        goto L_0x01bd;
    L_0x01c6:
        r0 = move-exception;
        r14 = r5;
    L_0x01c8:
        android.os.Binder.restoreCallingIdentity(r11);
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.clearApplicationUserData(java.lang.String, boolean, android.content.pm.IPackageDataObserver, int):boolean");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    void reportMemUsage(java.util.ArrayList<com.android.server.am.ProcessMemInfo> r57) {
        /*
        r56 = this;
        r13 = r56;
        r14 = r57;
        r0 = new android.util.SparseArray;
        r1 = r57.size();
        r0.<init>(r1);
        r15 = r0;
        r0 = 0;
        r1 = r57.size();
    L_0x0013:
        if (r0 >= r1) goto L_0x0023;
    L_0x0015:
        r2 = r14.get(r0);
        r2 = (com.android.server.am.ProcessMemInfo) r2;
        r3 = r2.pid;
        r15.put(r3, r2);
        r0 = r0 + 1;
        goto L_0x0013;
    L_0x0023:
        r56.updateCpuStatsNow();
        r0 = 1;
        r12 = new long[r0];
        r1 = r13.mProcessCpuTracker;
        monitor-enter(r1);
        r2 = r13.mProcessCpuTracker;	 Catch:{ all -> 0x059f }
        r3 = com.android.server.am.-$$Lambda$ActivityManagerService$dLQ66dH4nIti4hweaVJTGHj2tMU.INSTANCE;	 Catch:{ all -> 0x059f }
        r2 = r2.getStats(r3);	 Catch:{ all -> 0x059f }
        r11 = r2;	 Catch:{ all -> 0x059f }
        monitor-exit(r1);	 Catch:{ all -> 0x059f }
        r10 = r11.size();
        r9 = 0;
        r1 = r9;
    L_0x003c:
        r2 = 0;
        r16 = 0;
        if (r1 >= r10) goto L_0x007d;
    L_0x0041:
        r3 = r11.get(r1);
        r3 = (com.android.internal.os.ProcessCpuTracker.Stats) r3;
        r4 = r3.pid;
        r4 = android.os.Debug.getPss(r4, r2, r12);
        r2 = (r4 > r16 ? 1 : (r4 == r16 ? 0 : -1));
        if (r2 <= 0) goto L_0x007a;
    L_0x0051:
        r2 = r3.pid;
        r2 = r15.indexOfKey(r2);
        if (r2 >= 0) goto L_0x007a;
    L_0x0059:
        r2 = new com.android.server.am.ProcessMemInfo;
        r6 = r3.name;
        r7 = r3.pid;
        r19 = -1000; // 0xfffffffffffffc18 float:NaN double:NaN;
        r20 = -1;
        r21 = "native";
        r22 = 0;
        r16 = r2;
        r17 = r6;
        r18 = r7;
        r16.<init>(r17, r18, r19, r20, r21, r22);
        r2.pss = r4;
        r6 = r12[r9];
        r2.memtrack = r6;
        r14.add(r2);
    L_0x007a:
        r1 = r1 + 1;
        goto L_0x003c;
    L_0x007d:
        r3 = 0;
        r5 = 0;
        r1 = 0;
        r7 = r57.size();
        r54 = r3;
        r3 = r5;
        r5 = r54;
    L_0x008b:
        if (r1 >= r7) goto L_0x00b1;
    L_0x008d:
        r8 = r14.get(r1);
        r8 = (com.android.server.am.ProcessMemInfo) r8;
        r24 = r1;
        r0 = r8.pss;
        r0 = (r0 > r16 ? 1 : (r0 == r16 ? 0 : -1));
        if (r0 != 0) goto L_0x00a7;
    L_0x009b:
        r0 = r8.pid;
        r0 = android.os.Debug.getPss(r0, r2, r12);
        r8.pss = r0;
        r0 = r12[r9];
        r8.memtrack = r0;
    L_0x00a7:
        r0 = r8.pss;
        r5 = r5 + r0;
        r0 = r8.memtrack;
        r3 = r3 + r0;
        r1 = r24 + 1;
        r0 = 1;
        goto L_0x008b;
    L_0x00b1:
        r0 = new com.android.server.am.ActivityManagerService$25;
        r0.<init>();
        java.util.Collections.sort(r14, r0);
        r0 = new java.lang.StringBuilder;
        r1 = 128; // 0x80 float:1.794E-43 double:6.32E-322;
        r0.<init>(r1);
        r7 = r0;
        r0 = new java.lang.StringBuilder;
        r0.<init>(r1);
        r8 = r0;
        r0 = "Low on memory -- ";
        r7.append(r0);
        r0 = "total";
        appendMemBucket(r7, r5, r0, r9);
        r0 = "total";
        r1 = 1;
        appendMemBucket(r8, r5, r0, r1);
        r0 = new java.lang.StringBuilder;
        r2 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r0.<init>(r2);
        r1 = r0;
        r0 = new java.lang.StringBuilder;
        r0.<init>(r2);
        r25 = r0;
        r0 = new java.lang.StringBuilder;
        r0.<init>(r2);
        r26 = r0;
        r0 = 1;
        r18 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r19 = 0;
        r21 = 0;
        r27 = 0;
        r24 = 0;
        r29 = r57.size();
        r30 = r12;
        r12 = r18;
        r18 = r0;
        r0 = r24;
    L_0x0106:
        r31 = r29;
        r32 = r3;
        r3 = r31;
        if (r0 >= r3) goto L_0x027a;
    L_0x010e:
        r24 = r14.get(r0);
        r4 = r24;
        r4 = (com.android.server.am.ProcessMemInfo) r4;
        r2 = r4.oomAdj;
        r9 = 900; // 0x384 float:1.261E-42 double:4.447E-321;
        if (r2 < r9) goto L_0x0123;
    L_0x011c:
        r37 = r5;
        r5 = r4.pss;
        r27 = r27 + r5;
        goto L_0x0125;
    L_0x0123:
        r37 = r5;
    L_0x0125:
        r2 = r4.oomAdj;
        r5 = -1000; // 0xfffffffffffffc18 float:NaN double:NaN;
        if (r2 == r5) goto L_0x01c8;
    L_0x012b:
        r2 = r4.oomAdj;
        r6 = 500; // 0x1f4 float:7.0E-43 double:2.47E-321;
        if (r2 < r6) goto L_0x013d;
    L_0x0131:
        r2 = r4.oomAdj;
        r6 = 600; // 0x258 float:8.41E-43 double:2.964E-321;
        if (r2 == r6) goto L_0x013d;
    L_0x0137:
        r2 = r4.oomAdj;
        r6 = 700; // 0x2bc float:9.81E-43 double:3.46E-321;
        if (r2 != r6) goto L_0x01c8;
    L_0x013d:
        r2 = r4.oomAdj;
        if (r12 == r2) goto L_0x0166;
    L_0x0141:
        r12 = r4.oomAdj;
        r2 = r4.oomAdj;
        if (r2 > 0) goto L_0x014c;
    L_0x0147:
        r2 = " / ";
        r7.append(r2);
    L_0x014c:
        r2 = r4.oomAdj;
        if (r2 < 0) goto L_0x0160;
    L_0x0150:
        if (r18 == 0) goto L_0x015a;
    L_0x0152:
        r2 = ":";
        r8.append(r2);
        r2 = 0;
        r18 = r2;
    L_0x015a:
        r2 = "\n\t at ";
        r8.append(r2);
        goto L_0x0170;
    L_0x0160:
        r2 = "$";
        r8.append(r2);
        goto L_0x0170;
    L_0x0166:
        r2 = " ";
        r7.append(r2);
        r2 = "$";
        r8.append(r2);
    L_0x0170:
        r2 = r4.oomAdj;
        if (r2 > 0) goto L_0x017d;
    L_0x0174:
        r5 = r4.pss;
        r2 = r4.name;
        r9 = 0;
        appendMemBucket(r7, r5, r2, r9);
        goto L_0x017e;
    L_0x017d:
        r9 = 0;
    L_0x017e:
        r5 = r4.pss;
        r2 = r4.name;
        r9 = 1;
        appendMemBucket(r8, r5, r2, r9);
        r2 = r4.oomAdj;
        if (r2 < 0) goto L_0x01c8;
    L_0x018a:
        r2 = r0 + 1;
        if (r2 >= r3) goto L_0x019a;
    L_0x018e:
        r2 = r0 + 1;
        r2 = r14.get(r2);
        r2 = (com.android.server.am.ProcessMemInfo) r2;
        r2 = r2.oomAdj;
        if (r2 == r12) goto L_0x01c8;
    L_0x019a:
        r2 = "(";
        r8.append(r2);
        r2 = 0;
    L_0x01a0:
        r5 = DUMP_MEM_OOM_ADJ;
        r5 = r5.length;
        if (r2 >= r5) goto L_0x01c3;
    L_0x01a5:
        r5 = DUMP_MEM_OOM_ADJ;
        r5 = r5[r2];
        r6 = r4.oomAdj;
        if (r5 != r6) goto L_0x01c0;
    L_0x01ad:
        r5 = DUMP_MEM_OOM_LABEL;
        r5 = r5[r2];
        r8.append(r5);
        r5 = ":";
        r8.append(r5);
        r5 = DUMP_MEM_OOM_ADJ;
        r5 = r5[r2];
        r8.append(r5);
    L_0x01c0:
        r2 = r2 + 1;
        goto L_0x01a0;
    L_0x01c3:
        r2 = ")";
        r8.append(r2);
    L_0x01c8:
        r13.appendMemInfo(r1, r4);
        r2 = r4.oomAdj;
        r5 = -1000; // 0xfffffffffffffc18 float:NaN double:NaN;
        if (r2 != r5) goto L_0x0202;
    L_0x01d1:
        r5 = r4.pss;
        r40 = 512; // 0x200 float:7.175E-43 double:2.53E-321;
        r2 = (r5 > r40 ? 1 : (r5 == r40 ? 0 : -1));
        if (r2 < 0) goto L_0x01f7;
    L_0x01d9:
        r9 = r25;
        r13.appendMemInfo(r9, r4);
    L_0x01de:
        r25 = r3;
        r48 = r7;
        r49 = r8;
        r14 = r9;
        r44 = r10;
        r43 = r11;
        r42 = r12;
        r50 = r15;
        r9 = r26;
        r10 = r32;
        r45 = r37;
        r15 = 0;
        r12 = r1;
        goto L_0x025b;
    L_0x01f7:
        r9 = r25;
        r5 = r4.pss;
        r19 = r19 + r5;
        r5 = r4.memtrack;
        r21 = r21 + r5;
        goto L_0x01de;
    L_0x0202:
        r9 = r25;
        r2 = (r19 > r16 ? 1 : (r19 == r16 ? 0 : -1));
        if (r2 <= 0) goto L_0x023d;
    L_0x0208:
        r5 = -1000; // 0xfffffffffffffc18 float:NaN double:NaN;
        r6 = -1;
        r24 = "(Other native)";
        r2 = r1;
        r1 = r13;
        r42 = r12;
        r12 = r2;
        r2 = r9;
        r25 = r3;
        r44 = r10;
        r43 = r11;
        r10 = r32;
        r3 = r5;
        r5 = r4;
        r4 = r6;
        r47 = r5;
        r45 = r37;
        r5 = r19;
        r48 = r7;
        r49 = r8;
        r7 = r21;
        r14 = r9;
        r50 = r15;
        r15 = 0;
        r9 = r24;
        r1.appendBasicMemEntry(r2, r3, r4, r5, r7, r9);
        r1 = 10;
        r14.append(r1);
        r1 = 0;
        r19 = r1;
        goto L_0x0254;
    L_0x023d:
        r25 = r3;
        r47 = r4;
        r48 = r7;
        r49 = r8;
        r14 = r9;
        r44 = r10;
        r43 = r11;
        r42 = r12;
        r50 = r15;
        r10 = r32;
        r45 = r37;
        r15 = 0;
        r12 = r1;
    L_0x0254:
        r9 = r26;
        r1 = r47;
        r13.appendMemInfo(r9, r1);
    L_0x025b:
        r0 = r0 + 1;
        r26 = r9;
        r3 = r10;
        r1 = r12;
        r9 = r15;
        r29 = r25;
        r12 = r42;
        r11 = r43;
        r10 = r44;
        r5 = r45;
        r7 = r48;
        r8 = r49;
        r15 = r50;
        r2 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r25 = r14;
        r14 = r57;
        goto L_0x0106;
    L_0x027a:
        r45 = r5;
        r48 = r7;
        r49 = r8;
        r44 = r10;
        r43 = r11;
        r42 = r12;
        r50 = r15;
        r14 = r25;
        r10 = r32;
        r12 = r1;
        r15 = r9;
        r9 = r26;
        r1 = 10;
        r0 = "           ";
        r9.append(r0);
        r7 = r45;
        com.android.server.am.ProcessList.appendRamKb(r9, r7);
        r0 = ": TOTAL";
        r9.append(r0);
        r0 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1));
        if (r0 <= 0) goto L_0x02b6;
    L_0x02a5:
        r0 = " (";
        r9.append(r0);
        r0 = stringifyKBSize(r10);
        r9.append(r0);
        r0 = " memtrack)";
        r9.append(r0);
    L_0x02b6:
        r0 = "\n";
        r9.append(r0);
        r0 = new com.android.internal.util.MemInfoReader;
        r0.<init>();
        r6 = r0;
        r6.readMemInfo();
        r5 = r6.getRawInfo();
        r0 = new java.lang.StringBuilder;
        r2 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r0.<init>(r2);
        r3 = r0;
        android.os.Debug.getMemInfo(r5);
        r0 = "  MemInfo: ";
        r3.append(r0);
        r0 = 5;
        r1 = r5[r0];
        r0 = stringifyKBSize(r1);
        r3.append(r0);
        r0 = " slab, ";
        r3.append(r0);
        r0 = 4;
        r0 = r5[r0];
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = " shmem, ";
        r3.append(r0);
        r0 = 12;
        r0 = r5[r0];
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = " vm alloc, ";
        r3.append(r0);
        r0 = 13;
        r0 = r5[r0];
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = " page tables ";
        r3.append(r0);
        r0 = 14;
        r0 = r5[r0];
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = " kernel stack\n";
        r3.append(r0);
        r0 = "           ";
        r3.append(r0);
        r0 = 2;
        r1 = r5[r0];
        r1 = stringifyKBSize(r1);
        r3.append(r1);
        r1 = " buffers, ";
        r3.append(r1);
        r1 = 3;
        r51 = r10;
        r10 = r5[r1];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = " cached, ";
        r3.append(r2);
        r2 = 11;
        r10 = r5[r2];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = " mapped, ";
        r3.append(r2);
        r2 = 1;
        r10 = r5[r2];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = " free\n";
        r3.append(r2);
        r2 = 10;
        r10 = r5[r2];
        r4 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1));
        if (r4 == 0) goto L_0x03a5;
    L_0x0372:
        r4 = "  ZRAM: ";
        r3.append(r4);
        r10 = r5[r2];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = " RAM, ";
        r3.append(r2);
        r2 = 8;
        r10 = r5[r2];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = " swap total, ";
        r3.append(r2);
        r2 = 9;
        r10 = r5[r2];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = " swap free\n";
        r3.append(r2);
    L_0x03a5:
        r24 = r56.getKsmInfo();
        r2 = 1;
        r10 = r24[r2];
        r2 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1));
        if (r2 != 0) goto L_0x03c2;
    L_0x03b0:
        r10 = r24[r15];
        r2 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1));
        if (r2 != 0) goto L_0x03c2;
    L_0x03b6:
        r10 = r24[r0];
        r2 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1));
        if (r2 != 0) goto L_0x03c2;
    L_0x03bc:
        r10 = r24[r1];
        r2 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1));
        if (r2 == 0) goto L_0x0400;
    L_0x03c2:
        r2 = "  KSM: ";
        r3.append(r2);
        r2 = 1;
        r10 = r24[r2];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = " saved from shared ";
        r3.append(r2);
        r10 = r24[r15];
        r2 = stringifyKBSize(r10);
        r3.append(r2);
        r2 = "\n       ";
        r3.append(r2);
        r10 = r24[r0];
        r0 = stringifyKBSize(r10);
        r3.append(r0);
        r0 = " unshared; ";
        r3.append(r0);
        r0 = r24[r1];
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = " volatile\n";
        r3.append(r0);
    L_0x0400:
        r0 = "  Free RAM: ";
        r3.append(r0);
        r0 = r6.getCachedSizeKb();
        r0 = r27 + r0;
        r10 = r6.getFreeSizeKb();
        r0 = r0 + r10;
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = "\n";
        r3.append(r0);
        r0 = "  Used RAM: ";
        r3.append(r0);
        r0 = r7 - r27;
        r10 = r6.getKernelUsedSizeKb();
        r0 = r0 + r10;
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = "\n";
        r3.append(r0);
        r0 = "  Lost RAM: ";
        r3.append(r0);
        r0 = r6.getTotalSizeKb();
        r0 = r0 - r7;
        r10 = r6.getFreeSizeKb();
        r0 = r0 - r10;
        r10 = r6.getRealCachedSizeKb();
        r0 = r0 - r10;
        r10 = r6.getKernelUsedSizeKb();
        r0 = r0 - r10;
        r10 = r6.getZramTotalSizeKb();
        r0 = r0 - r10;
        r0 = stringifyKBSize(r0);
        r3.append(r0);
        r0 = "\n";
        r3.append(r0);
        r0 = "ActivityManager";
        r1 = "Low on memory:";
        android.util.Slog.i(r0, r1);
        r0 = "ActivityManager";
        r1 = r14.toString();
        android.util.Slog.i(r0, r1);
        r0 = "ActivityManager";
        r1 = r9.toString();
        android.util.Slog.i(r0, r1);
        r0 = "ActivityManager";
        r1 = r3.toString();
        android.util.Slog.i(r0, r1);
        r0 = new java.lang.StringBuilder;
        r1 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r0.<init>(r1);
        r11 = r0;
        r0 = "Low on memory:";
        r11.append(r0);
        r10 = r49;
        r11.append(r10);
        r0 = 10;
        r11.append(r0);
        r11.append(r12);
        r11.append(r9);
        r11.append(r0);
        r11.append(r3);
        r11.append(r0);
        r0 = new java.io.StringWriter;
        r0.<init>();
        r2 = r0;
        monitor-enter(r56);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x057f }
        r0 = new com.android.internal.util.FastPrintWriter;	 Catch:{ all -> 0x057f }
        r1 = 256; // 0x100 float:3.59E-43 double:1.265E-321;	 Catch:{ all -> 0x057f }
        r0.<init>(r2, r15, r1);	 Catch:{ all -> 0x057f }
        r4 = new java.lang.String[r15];	 Catch:{ all -> 0x057f }
        r0.println();	 Catch:{ all -> 0x057f }
        r15 = 0;
        r16 = 0;
        r17 = 0;
        r23 = 0;
        r25 = -1;
        r1 = r13;
        r53 = r2;
        r2 = r15;
        r15 = r3;
        r3 = r0;
        r26 = r5;
        r5 = r16;
        r16 = r6;
        r6 = r17;
        r38 = r7;
        r7 = r23;
        r8 = r25;
        r1.dumpProcessesLocked(r2, r3, r4, r5, r6, r7, r8);	 Catch:{ all -> 0x056b }
        r0.println();	 Catch:{ all -> 0x056b }
        r1 = r13.mServices;	 Catch:{ all -> 0x056b }
        r32 = 0;	 Catch:{ all -> 0x056b }
        r35 = 0;	 Catch:{ all -> 0x056b }
        r36 = 0;	 Catch:{ all -> 0x056b }
        r37 = 0;	 Catch:{ all -> 0x056b }
        r31 = r1;	 Catch:{ all -> 0x056b }
        r33 = r0;	 Catch:{ all -> 0x056b }
        r34 = r4;	 Catch:{ all -> 0x056b }
        r1 = r31.newServiceDumperLocked(r32, r33, r34, r35, r36, r37);	 Catch:{ all -> 0x056b }
        r1.dumpLocked();	 Catch:{ all -> 0x056b }
        r0.println();	 Catch:{ all -> 0x056b }
        r6 = 0;
        r1 = 0;
        r2 = 0;
        r3 = 0;
        r17 = 0;
        r5 = r13;
        r7 = r0;
        r8 = r4;
        r23 = r9;
        r9 = r1;
        r29 = r10;
        r25 = r44;
        r31 = r51;
        r10 = r2;
        r2 = r11;
        r33 = r43;
        r11 = r3;
        r34 = r12;
        r12 = r17;
        r5.dumpActivitiesLocked(r6, r7, r8, r9, r10, r11, r12);	 Catch:{ all -> 0x0563 }
        r0.flush();	 Catch:{ all -> 0x0563 }
        monitor-exit(r56);	 Catch:{ all -> 0x0563 }
        resetPriorityAfterLockedSection();
        r11 = r53;
        r0 = r11.toString();
        r2.append(r0);
        r0 = 81;
        android.util.StatsLog.write(r0);
        r0 = "lowmem";
        r3 = 0;
        r4 = "system_server";
        r5 = 0;
        r6 = 0;
        r12 = r48;
        r7 = r12.toString();
        r8 = r2.toString();
        r9 = 0;
        r10 = 0;
        r1 = r13;
        r17 = r2;
        r2 = r0;
        r1.addErrorToDropBox(r2, r3, r4, r5, r6, r7, r8, r9, r10);
        monitor-enter(r56);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x055d }
        r0 = android.os.SystemClock.uptimeMillis();	 Catch:{ all -> 0x055d }
        r2 = r13.mLastMemUsageReportTime;	 Catch:{ all -> 0x055d }
        r2 = (r2 > r0 ? 1 : (r2 == r0 ? 0 : -1));	 Catch:{ all -> 0x055d }
        if (r2 >= 0) goto L_0x0558;	 Catch:{ all -> 0x055d }
    L_0x0556:
        r13.mLastMemUsageReportTime = r0;	 Catch:{ all -> 0x055d }
    L_0x0558:
        monitor-exit(r56);	 Catch:{ all -> 0x055d }
        resetPriorityAfterLockedSection();
        return;
    L_0x055d:
        r0 = move-exception;
        monitor-exit(r56);	 Catch:{ all -> 0x055d }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0563:
        r0 = move-exception;
        r17 = r2;
        r12 = r48;
        r11 = r53;
        goto L_0x0598;
    L_0x056b:
        r0 = move-exception;
        r23 = r9;
        r29 = r10;
        r17 = r11;
        r34 = r12;
        r33 = r43;
        r25 = r44;
        r12 = r48;
        r31 = r51;
        r11 = r53;
        goto L_0x0598;
    L_0x057f:
        r0 = move-exception;
        r15 = r3;
        r26 = r5;
        r16 = r6;
        r38 = r7;
        r23 = r9;
        r29 = r10;
        r17 = r11;
        r34 = r12;
        r33 = r43;
        r25 = r44;
        r12 = r48;
        r31 = r51;
        r11 = r2;
    L_0x0598:
        monitor-exit(r56);	 Catch:{ all -> 0x059d }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x059d:
        r0 = move-exception;
        goto L_0x0598;
    L_0x059f:
        r0 = move-exception;
        r30 = r12;
        r50 = r15;
    L_0x05a4:
        monitor-exit(r1);	 Catch:{ all -> 0x05a6 }
        throw r0;
    L_0x05a6:
        r0 = move-exception;
        goto L_0x05a4;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.reportMemUsage(java.util.ArrayList):void");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    public int startActivityIntentSender(android.app.IApplicationThread r19, android.content.IIntentSender r20, android.os.IBinder r21, android.content.Intent r22, java.lang.String r23, android.os.IBinder r24, java.lang.String r25, int r26, int r27, int r28, android.os.Bundle r29) throws android.os.TransactionTooLargeException {
        /*
        r18 = this;
        r1 = r18;
        r2 = r20;
        r15 = r22;
        r0 = android.util.Jlog.isMicroTest();
        if (r0 == 0) goto L_0x001a;
    L_0x000c:
        r0 = 3100; // 0xc1c float:4.344E-42 double:1.5316E-320;
        r3 = "ActivityManagerService";
        r4 = "startActivityIntentSender";
        r3 = android.util.Jlog.getMessage(r3, r4, r15);
        android.util.Jlog.i(r0, r3);
    L_0x001a:
        r0 = "startActivityIntentSender";
        r1.enforceNotIsolatedCaller(r0);
        if (r15 == 0) goto L_0x0031;
    L_0x0022:
        r0 = r22.hasFileDescriptors();
        if (r0 != 0) goto L_0x0029;
    L_0x0028:
        goto L_0x0031;
    L_0x0029:
        r0 = new java.lang.IllegalArgumentException;
        r3 = "File descriptors passed in Intent";
        r0.<init>(r3);
        throw r0;
    L_0x0031:
        r0 = r2 instanceof com.android.server.am.PendingIntentRecord;
        if (r0 == 0) goto L_0x0094;
    L_0x0035:
        r16 = r2;
        r16 = (com.android.server.am.PendingIntentRecord) r16;
        monitor-enter(r18);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x008b }
        r0 = r18.getFocusedStack();	 Catch:{ all -> 0x008b }
        r3 = r0.mResumedActivity;	 Catch:{ all -> 0x008b }
        if (r3 == 0) goto L_0x0057;	 Catch:{ all -> 0x008b }
    L_0x0045:
        r3 = r0.mResumedActivity;	 Catch:{ all -> 0x008b }
        r3 = r3.info;	 Catch:{ all -> 0x008b }
        r3 = r3.applicationInfo;	 Catch:{ all -> 0x008b }
        r3 = r3.uid;	 Catch:{ all -> 0x008b }
        r4 = android.os.Binder.getCallingUid();	 Catch:{ all -> 0x008b }
        if (r3 != r4) goto L_0x0057;	 Catch:{ all -> 0x008b }
    L_0x0053:
        r3 = 0;	 Catch:{ all -> 0x008b }
        r1.mAppSwitchesAllowedTime = r3;	 Catch:{ all -> 0x008b }
    L_0x0057:
        monitor-exit(r18);	 Catch:{ all -> 0x008b }
        resetPriorityAfterLockedSection();
        r4 = 0;
        r8 = 0;
        r9 = 0;
        r3 = r16;
        r5 = r15;
        r6 = r23;
        r7 = r21;
        r10 = r24;
        r11 = r25;
        r12 = r26;
        r13 = r27;
        r14 = r28;
        r2 = r15;
        r15 = r29;
        r0 = r3.sendInner(r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15);
        r3 = android.util.Jlog.isMicroTest();
        if (r3 == 0) goto L_0x008a;
    L_0x007c:
        r3 = 3101; // 0xc1d float:4.345E-42 double:1.532E-320;
        r4 = "ActivityManagerService";
        r5 = "startActivityIntentSender";
        r4 = android.util.Jlog.getMessage(r4, r5, r2);
        android.util.Jlog.i(r3, r4);
    L_0x008a:
        return r0;
    L_0x008b:
        r0 = move-exception;
        r2 = r15;
    L_0x008d:
        monitor-exit(r18);	 Catch:{ all -> 0x0092 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0092:
        r0 = move-exception;
        goto L_0x008d;
    L_0x0094:
        r2 = r15;
        r0 = new java.lang.IllegalArgumentException;
        r3 = "Bad PendingIntent object";
        r0.<init>(r3);
        throw r0;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.startActivityIntentSender(android.app.IApplicationThread, android.content.IIntentSender, android.os.IBinder, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle):int");
    }

    /*  JADX ERROR: NullPointerException in pass: BlockFinish
        java.lang.NullPointerException
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock(BlockFinish.java:45)
        	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:29)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    public void systemReady(java.lang.Runnable r32, android.util.TimingsTraceLog r33) {
        /*
        r31 = this;
        r15 = r31;
        r14 = r32;
        r13 = r33;
        r0 = "PhaseActivityManagerReady";
        r13.traceBegin(r0);
        monitor-enter(r31);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0410 }
        r0 = r15.mSystemReady;	 Catch:{ all -> 0x0410 }
        if (r0 == 0) goto L_0x001d;	 Catch:{ all -> 0x0410 }
    L_0x0013:
        if (r14 == 0) goto L_0x0018;	 Catch:{ all -> 0x0410 }
    L_0x0015:
        r32.run();	 Catch:{ all -> 0x0410 }
    L_0x0018:
        monitor-exit(r31);	 Catch:{ all -> 0x0410 }
        resetPriorityAfterLockedSection();
        return;
    L_0x001d:
        r31.initCtsDropActions();	 Catch:{ all -> 0x0410 }
        r31.initCtsDropPackages();	 Catch:{ all -> 0x0410 }
        r0 = r15.mContext;	 Catch:{ all -> 0x0410 }
        r0 = r0.getPackageManager();	 Catch:{ all -> 0x0410 }
        r1 = "android.software.cant_save_state";	 Catch:{ all -> 0x0410 }
        r0 = r0.hasSystemFeature(r1);	 Catch:{ all -> 0x0410 }
        r15.mHasHeavyWeightFeature = r0;	 Catch:{ all -> 0x0410 }
        r0 = com.android.server.DeviceIdleController.LocalService.class;	 Catch:{ all -> 0x0410 }
        r0 = com.android.server.LocalServices.getService(r0);	 Catch:{ all -> 0x0410 }
        r0 = (com.android.server.DeviceIdleController.LocalService) r0;	 Catch:{ all -> 0x0410 }
        r15.mLocalDeviceIdleController = r0;	 Catch:{ all -> 0x0410 }
        r0 = new com.android.internal.app.AssistUtils;	 Catch:{ all -> 0x0410 }
        r1 = r15.mContext;	 Catch:{ all -> 0x0410 }
        r0.<init>(r1);	 Catch:{ all -> 0x0410 }
        r15.mAssistUtils = r0;	 Catch:{ all -> 0x0410 }
        r0 = r15.mVrController;	 Catch:{ all -> 0x0410 }
        r0.onSystemReady();	 Catch:{ all -> 0x0410 }
        r0 = r15.mUserController;	 Catch:{ all -> 0x0410 }
        r0.onSystemReady();	 Catch:{ all -> 0x0410 }
        r0 = r15.mRecentTasks;	 Catch:{ all -> 0x0410 }
        r0.onSystemReadyLocked();	 Catch:{ all -> 0x0410 }
        r12 = 1;	 Catch:{ all -> 0x0410 }
        r15.mSystemReady = r12;	 Catch:{ all -> 0x0410 }
        r31.startPushService();	 Catch:{ all -> 0x0410 }
        r0 = "sys.super_power_save";	 Catch:{ all -> 0x0410 }
        r1 = "false";	 Catch:{ all -> 0x0410 }
        android.os.SystemProperties.set(r0, r1);	 Catch:{ all -> 0x0410 }
        monitor-exit(r31);	 Catch:{ all -> 0x0410 }
        resetPriorityAfterLockedSection();
        r0 = "device_identifiers";	 Catch:{ RemoteException -> 0x0076 }
        r0 = android.os.ServiceManager.getService(r0);	 Catch:{ RemoteException -> 0x0076 }
        r0 = android.os.IDeviceIdentifiersPolicyService.Stub.asInterface(r0);	 Catch:{ RemoteException -> 0x0076 }
        r0 = r0.getSerial();	 Catch:{ RemoteException -> 0x0076 }
        sTheRealBuildSerial = r0;	 Catch:{ RemoteException -> 0x0076 }
        goto L_0x0077;
    L_0x0076:
        r0 = move-exception;
    L_0x0077:
        r1 = 0;
        r2 = r15.mPidsSelfLocked;
        monitor-enter(r2);
        r0 = r15.mPidsSelfLocked;	 Catch:{ all -> 0x0408 }
        r0 = r0.size();	 Catch:{ all -> 0x0408 }
        r0 = r0 - r12;
        r11 = r1;
    L_0x0083:
        if (r0 < 0) goto L_0x00a7;
    L_0x0085:
        r1 = r15.mPidsSelfLocked;	 Catch:{ all -> 0x00a3 }
        r1 = r1.valueAt(r0);	 Catch:{ all -> 0x00a3 }
        r1 = (com.android.server.am.ProcessRecord) r1;	 Catch:{ all -> 0x00a3 }
        r3 = r1.info;	 Catch:{ all -> 0x00a3 }
        r3 = r15.isAllowedWhileBooting(r3);	 Catch:{ all -> 0x00a3 }
        if (r3 != 0) goto L_0x00a0;	 Catch:{ all -> 0x00a3 }
    L_0x0095:
        if (r11 != 0) goto L_0x009d;	 Catch:{ all -> 0x00a3 }
    L_0x0097:
        r3 = new java.util.ArrayList;	 Catch:{ all -> 0x00a3 }
        r3.<init>();	 Catch:{ all -> 0x00a3 }
        r11 = r3;	 Catch:{ all -> 0x00a3 }
    L_0x009d:
        r11.add(r1);	 Catch:{ all -> 0x00a3 }
    L_0x00a0:
        r0 = r0 + -1;
        goto L_0x0083;
    L_0x00a3:
        r0 = move-exception;
        r1 = r11;
        goto L_0x0409;
    L_0x00a7:
        monitor-exit(r2);	 Catch:{ all -> 0x03ff }
        monitor-enter(r31);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x03f2 }
        r0 = 0;
        if (r11 == 0) goto L_0x00e3;
    L_0x00af:
        r1 = r11.size();	 Catch:{ all -> 0x00db }
        r1 = r1 - r12;	 Catch:{ all -> 0x00db }
    L_0x00b4:
        if (r1 < 0) goto L_0x00e3;	 Catch:{ all -> 0x00db }
    L_0x00b6:
        r2 = r11.get(r1);	 Catch:{ all -> 0x00db }
        r2 = (com.android.server.am.ProcessRecord) r2;	 Catch:{ all -> 0x00db }
        r3 = "ActivityManager";	 Catch:{ all -> 0x00db }
        r4 = new java.lang.StringBuilder;	 Catch:{ all -> 0x00db }
        r4.<init>();	 Catch:{ all -> 0x00db }
        r5 = "Removing system update proc: ";	 Catch:{ all -> 0x00db }
        r4.append(r5);	 Catch:{ all -> 0x00db }
        r4.append(r2);	 Catch:{ all -> 0x00db }
        r4 = r4.toString();	 Catch:{ all -> 0x00db }
        android.util.Slog.i(r3, r4);	 Catch:{ all -> 0x00db }
        r3 = "system update done";	 Catch:{ all -> 0x00db }
        r15.removeProcessLocked(r2, r12, r0, r3);	 Catch:{ all -> 0x00db }
        r1 = r1 + -1;
        goto L_0x00b4;
    L_0x00db:
        r0 = move-exception;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
        goto L_0x03f8;
    L_0x00e3:
        r15.mProcessesReady = r12;	 Catch:{ all -> 0x03f2 }
        monitor-exit(r31);	 Catch:{ all -> 0x03f2 }
        resetPriorityAfterLockedSection();
        r1 = 33;
        r2 = "JL_BOOT_PROGRESS_AMS_READY";
        android.util.Jlog.d(r1, r2);
        r1 = "ActivityManager";
        r2 = "System now ready";
        android.util.Slog.i(r1, r2);
        r1 = 3040; // 0xbe0 float:4.26E-42 double:1.502E-320;
        r2 = android.os.SystemClock.uptimeMillis();
        android.util.EventLog.writeEvent(r1, r2);
        monitor-enter(r31);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x03e5 }
        r1 = r15.mFactoryTest;	 Catch:{ all -> 0x03e5 }
        if (r1 != r12) goto L_0x017e;
    L_0x0108:
        r1 = r15.mContext;	 Catch:{ all -> 0x0176 }
        r1 = r1.getPackageManager();	 Catch:{ all -> 0x0176 }
        r2 = new android.content.Intent;	 Catch:{ all -> 0x0176 }
        r3 = "android.intent.action.FACTORY_TEST";	 Catch:{ all -> 0x0176 }
        r2.<init>(r3);	 Catch:{ all -> 0x0176 }
        r3 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;	 Catch:{ all -> 0x0176 }
        r1 = r1.resolveActivity(r2, r3);	 Catch:{ all -> 0x0176 }
        r2 = 0;	 Catch:{ all -> 0x0176 }
        r3 = 0;	 Catch:{ all -> 0x0176 }
        if (r1 == 0) goto L_0x0149;	 Catch:{ all -> 0x0176 }
    L_0x011f:
        r4 = r1.activityInfo;	 Catch:{ all -> 0x0176 }
        r5 = r4.applicationInfo;	 Catch:{ all -> 0x0176 }
        r6 = r5.flags;	 Catch:{ all -> 0x0176 }
        r6 = r6 & r12;	 Catch:{ all -> 0x0176 }
        if (r6 == 0) goto L_0x013a;	 Catch:{ all -> 0x0176 }
    L_0x0128:
        r6 = "android.intent.action.FACTORY_TEST";	 Catch:{ all -> 0x0176 }
        r15.mTopAction = r6;	 Catch:{ all -> 0x0176 }
        r15.mTopData = r3;	 Catch:{ all -> 0x0176 }
        r6 = new android.content.ComponentName;	 Catch:{ all -> 0x0176 }
        r7 = r5.packageName;	 Catch:{ all -> 0x0176 }
        r8 = r4.name;	 Catch:{ all -> 0x0176 }
        r6.<init>(r7, r8);	 Catch:{ all -> 0x0176 }
        r15.mTopComponent = r6;	 Catch:{ all -> 0x0176 }
        goto L_0x0148;	 Catch:{ all -> 0x0176 }
    L_0x013a:
        r6 = r15.mContext;	 Catch:{ all -> 0x0176 }
        r6 = r6.getResources();	 Catch:{ all -> 0x0176 }
        r7 = 17040051; // 0x10402b3 float:2.4246508E-38 double:8.418904E-317;	 Catch:{ all -> 0x0176 }
        r6 = r6.getText(r7);	 Catch:{ all -> 0x0176 }
        r2 = r6;	 Catch:{ all -> 0x0176 }
    L_0x0148:
        goto L_0x0157;	 Catch:{ all -> 0x0176 }
    L_0x0149:
        r4 = r15.mContext;	 Catch:{ all -> 0x0176 }
        r4 = r4.getResources();	 Catch:{ all -> 0x0176 }
        r5 = 17040050; // 0x10402b2 float:2.4246505E-38 double:8.4189033E-317;	 Catch:{ all -> 0x0176 }
        r4 = r4.getText(r5);	 Catch:{ all -> 0x0176 }
        r2 = r4;	 Catch:{ all -> 0x0176 }
    L_0x0157:
        if (r2 == 0) goto L_0x017e;	 Catch:{ all -> 0x0176 }
    L_0x0159:
        r15.mTopAction = r3;	 Catch:{ all -> 0x0176 }
        r15.mTopData = r3;	 Catch:{ all -> 0x0176 }
        r15.mTopComponent = r3;	 Catch:{ all -> 0x0176 }
        r3 = android.os.Message.obtain();	 Catch:{ all -> 0x0176 }
        r4 = 3;	 Catch:{ all -> 0x0176 }
        r3.what = r4;	 Catch:{ all -> 0x0176 }
        r4 = r3.getData();	 Catch:{ all -> 0x0176 }
        r5 = "msg";	 Catch:{ all -> 0x0176 }
        r4.putCharSequence(r5, r2);	 Catch:{ all -> 0x0176 }
        r4 = r15.mUiHandler;	 Catch:{ all -> 0x0176 }
        r4.sendMessage(r3);	 Catch:{ all -> 0x0176 }
        goto L_0x017e;
    L_0x0176:
        r0 = move-exception;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
        goto L_0x03eb;
    L_0x017e:
        monitor-exit(r31);	 Catch:{ all -> 0x03e5 }
        resetPriorityAfterLockedSection();
        r31.retrieveSettings();
        r1 = r15.mUserController;
        r10 = r1.getCurrentUserId();
        monitor-enter(r31);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x03d7 }
        r31.readGrantedUriPermissionsLocked();	 Catch:{ all -> 0x03d7 }
        monitor-exit(r31);	 Catch:{ all -> 0x03d7 }
        resetPriorityAfterLockedSection();
        r1 = android.os.PowerManagerInternal.class;
        r1 = com.android.server.LocalServices.getService(r1);
        r9 = r1;
        r9 = (android.os.PowerManagerInternal) r9;
        if (r9 == 0) goto L_0x01b6;
    L_0x01a1:
        r1 = new com.android.server.am.-$$Lambda$ActivityManagerService$eFxS8Z-_MXzP9a8ro45rBMHy3bk;
        r1.<init>(r15);
        r2 = 12;
        r9.registerLowPowerModeObserver(r2, r1);
        r1 = r9.getLowPowerState(r2);
        r1 = r1.batterySaverEnabled;
        r15.updateForceBackgroundCheck(r1);
        goto L_0x01bd;
    L_0x01b6:
        r1 = "ActivityManager";
        r2 = "PowerManagerInternal not found.";
        android.util.Slog.wtf(r1, r2);
    L_0x01bd:
        if (r14 == 0) goto L_0x01c2;
    L_0x01bf:
        r32.run();
    L_0x01c2:
        r1 = "ActivityManagerStartApps";
        r13.traceBegin(r1);
        r1 = r15.mBatteryStatsService;
        r2 = 32775; // 0x8007 float:4.5928E-41 double:1.6193E-319;
        r3 = java.lang.Integer.toString(r10);
        r1.noteEvent(r2, r3, r10);
        r1 = r15.mBatteryStatsService;
        r2 = 32776; // 0x8008 float:4.5929E-41 double:1.61935E-319;
        r3 = java.lang.Integer.toString(r10);
        r1.noteEvent(r2, r3, r10);
        r1 = r15.mSystemServiceManager;
        r1.startUser(r10);
        monitor-enter(r31);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r1 = r15.mHwAMSEx;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r1.registerBroadcastReceiver();	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r1 = 524288; // 0x80000 float:7.34684E-40 double:2.590327E-318;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r15.startPersistentApps(r1);	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r15.mPersistentReady = r12;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r15.mBooting = r12;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r1 = android.os.UserManager.isSplitSystemUser();	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        if (r1 == 0) goto L_0x022d;
    L_0x01fc:
        r1 = r15.mContext;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r1 = r1.getContentResolver();	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r2 = "user_setup_complete";	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r1 = android.provider.Settings.Secure.getInt(r1, r2, r0);	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        if (r1 == 0) goto L_0x022d;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
    L_0x020b:
        r1 = new android.content.ComponentName;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r2 = r15.mContext;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r3 = com.android.internal.app.SystemUserHomeActivity.class;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r1.<init>(r2, r3);	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r2 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r2.setComponentEnabledSetting(r1, r12, r0, r0);	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        goto L_0x022d;
    L_0x021c:
        r0 = move-exception;
        r2 = r0.rethrowAsRuntimeException();	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        throw r2;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
    L_0x0222:
        r0 = move-exception;
        r28 = r9;
        r5 = r10;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
        goto L_0x03d0;
    L_0x022d:
        android.hwtheme.HwThemeManager.linkDataSkinDirAsUser(r10);	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r0 = "systemReady";	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r15.startHomeActivityLocked(r10, r0);	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r0 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x0253 }
        r0 = r0.hasSystemUidErrors();	 Catch:{ RemoteException -> 0x0253 }
        if (r0 == 0) goto L_0x0254;	 Catch:{ RemoteException -> 0x0253 }
    L_0x0240:
        r0 = "ActivityManager";	 Catch:{ RemoteException -> 0x0253 }
        r1 = "UIDs on the system are inconsistent, you need to wipe your data partition or your device will be unstable.";	 Catch:{ RemoteException -> 0x0253 }
        android.util.Slog.e(r0, r1);	 Catch:{ RemoteException -> 0x0253 }
        r0 = r15.mUiHandler;	 Catch:{ RemoteException -> 0x0253 }
        r1 = 14;	 Catch:{ RemoteException -> 0x0253 }
        r0 = r0.obtainMessage(r1);	 Catch:{ RemoteException -> 0x0253 }
        r0.sendToTarget();	 Catch:{ RemoteException -> 0x0253 }
    L_0x0252:
        goto L_0x0254;
    L_0x0253:
        r0 = move-exception;
    L_0x0254:
        r0 = android.os.Build.isBuildConsistent();	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        if (r0 != 0) goto L_0x026c;
    L_0x025a:
        r0 = "ActivityManager";	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r1 = "Build fingerprint is not consistent, warning user";	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        android.util.Slog.e(r0, r1);	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r0 = r15.mUiHandler;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r1 = 15;	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r0 = r0.obtainMessage(r1);	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
        r0.sendToTarget();	 Catch:{ RemoteException -> 0x021c, all -> 0x0222 }
    L_0x026c:
        r0 = android.os.Binder.clearCallingIdentity();	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r7 = r0;
        r0 = new android.content.Intent;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r1 = "android.intent.action.USER_STARTED";	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r0.<init>(r1);	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r1 = 1342177280; // 0x50000000 float:8.5899346E9 double:6.631236847E-315;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r0.addFlags(r1);	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r1 = "android.intent.extra.user_handle";	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r0.putExtra(r1, r10);	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r2 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r3 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r5 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r6 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r16 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r17 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r18 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r19 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r20 = -1;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r21 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r22 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r23 = 0;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r24 = MY_PID;	 Catch:{ Throwable -> 0x0359, all -> 0x034c }
        r25 = 1000; // 0x3e8 float:1.401E-42 double:4.94E-321;
        r1 = r15;
        r4 = r0;
        r26 = r7;
        r7 = r16;
        r8 = r17;
        r28 = r9;
        r9 = r18;
        r29 = r10;
        r10 = r19;
        r18 = r11;
        r11 = r20;
        r12 = r21;
        r13 = r22;
        r14 = r23;
        r15 = r24;
        r16 = r25;
        r17 = r29;
        r1.broadcastIntentLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17);	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r1 = new android.content.Intent;	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r2 = "android.intent.action.USER_STARTING";	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r1.<init>(r2);	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r0 = r1;	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r1 = 1073741824; // 0x40000000 float:2.0 double:5.304989477E-315;	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r0.addFlags(r1);	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r1 = "android.intent.extra.user_handle";	 Catch:{ Throwable -> 0x0346, all -> 0x0339 }
        r15 = r29;
        r0.putExtra(r1, r15);	 Catch:{ Throwable -> 0x0333, all -> 0x0327 }
        r2 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x0327 }
        r3 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x0327 }
        r5 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x0327 }
        r6 = new com.android.server.am.ActivityManagerService$19;	 Catch:{ Throwable -> 0x0333, all -> 0x0327 }
        r14 = r31;
        r6.<init>();	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r7 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r8 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r9 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r1 = "android.permission.INTERACT_ACROSS_USERS";	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r10 = new java.lang.String[]{r1};	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r11 = -1;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r12 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r13 = 1;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r16 = 0;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r17 = MY_PID;	 Catch:{ Throwable -> 0x0333, all -> 0x031f }
        r19 = 1000; // 0x3e8 float:1.401E-42 double:4.94E-321;
        r20 = -1;
        r1 = r14;
        r4 = r0;
        r14 = r16;
        r30 = r15;
        r15 = r17;
        r16 = r19;
        r17 = r20;
        r1.broadcastIntentLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17);	 Catch:{ Throwable -> 0x031b, all -> 0x030e }
        r1 = r26;
        android.os.Binder.restoreCallingIdentity(r1);	 Catch:{ all -> 0x0305 }
        goto L_0x036b;
    L_0x0305:
        r0 = move-exception;
        r6 = r33;
        r5 = r30;
        r3 = r31;
        goto L_0x03a7;
    L_0x030e:
        r0 = move-exception;
        r1 = r26;
        r6 = r33;
        r5 = r30;
        r3 = r31;
        r4 = r32;
        goto L_0x03c3;
    L_0x031b:
        r0 = move-exception;
        r1 = r26;
        goto L_0x0361;
    L_0x031f:
        r0 = move-exception;
        r1 = r26;
        r6 = r33;
        r3 = r14;
        r5 = r15;
        goto L_0x032f;
    L_0x0327:
        r0 = move-exception;
        r1 = r26;
        r6 = r33;
        r5 = r15;
        r3 = r31;
    L_0x032f:
        r4 = r32;
        goto L_0x03c3;
    L_0x0333:
        r0 = move-exception;
        r30 = r15;
        r1 = r26;
        goto L_0x0361;
    L_0x0339:
        r0 = move-exception;
        r1 = r26;
        r6 = r33;
        r5 = r29;
        r3 = r31;
        r4 = r32;
        goto L_0x03c3;
    L_0x0346:
        r0 = move-exception;
        r1 = r26;
        r30 = r29;
        goto L_0x0361;
    L_0x034c:
        r0 = move-exception;
        r1 = r7;
        r28 = r9;
        r18 = r11;
        r6 = r33;
        r5 = r10;
        r4 = r14;
        r3 = r15;
        goto L_0x03c3;
    L_0x0359:
        r0 = move-exception;
        r1 = r7;
        r28 = r9;
        r30 = r10;
        r18 = r11;
    L_0x0361:
        r3 = "ActivityManager";	 Catch:{ all -> 0x03ba }
        r4 = "Failed sending first user broadcasts";	 Catch:{ all -> 0x03ba }
        android.util.Slog.wtf(r3, r4, r0);	 Catch:{ all -> 0x03ba }
        android.os.Binder.restoreCallingIdentity(r1);	 Catch:{ all -> 0x03b0 }
        r3 = r31;
        r0 = r3.mStackSupervisor;	 Catch:{ all -> 0x03aa }
        r0.resumeFocusedStackTopActivityLocked();	 Catch:{ all -> 0x03aa }
        r0 = r3.mUserController;	 Catch:{ all -> 0x03aa }
        r4 = -1;
        r5 = r30;
        r0.sendUserSwitchBroadcasts(r4, r5);	 Catch:{ all -> 0x03a4 }
        r0 = 6000; // 0x1770 float:8.408E-42 double:2.9644E-320;	 Catch:{ all -> 0x03a4 }
        r4 = 5500; // 0x157c float:7.707E-42 double:2.7174E-320;	 Catch:{ all -> 0x03a4 }
        com.android.internal.os.BinderInternal.nSetBinderProxyCountWatermarks(r0, r4);	 Catch:{ all -> 0x03a4 }
        r4 = 1;	 Catch:{ all -> 0x03a4 }
        com.android.internal.os.BinderInternal.nSetBinderProxyCountEnabled(r4);	 Catch:{ all -> 0x03a4 }
        r0 = new com.android.server.am.ActivityManagerService$20;	 Catch:{ all -> 0x03a4 }
        r0.<init>();	 Catch:{ all -> 0x03a4 }
        r4 = r3.mHandler;	 Catch:{ all -> 0x03a4 }
        com.android.internal.os.BinderInternal.setBinderProxyCountCallback(r0, r4);	 Catch:{ all -> 0x03a4 }
        r33.traceEnd();	 Catch:{ all -> 0x03a4 }
        r33.traceEnd();	 Catch:{ all -> 0x03a4 }
        monitor-exit(r31);	 Catch:{ all -> 0x03a4 }
        resetPriorityAfterLockedSection();
        r0 = r3.mHwAMSEx;
        r6 = r33;
        r4 = r32;
        r0.systemReady(r4, r6);
        return;
    L_0x03a4:
        r0 = move-exception;
        r6 = r33;
    L_0x03a7:
        r4 = r32;
        goto L_0x03d0;
    L_0x03aa:
        r0 = move-exception;
        r6 = r33;
        r5 = r30;
        goto L_0x03b7;
    L_0x03b0:
        r0 = move-exception;
        r6 = r33;
        r5 = r30;
        r3 = r31;
    L_0x03b7:
        r4 = r32;
        goto L_0x03d0;
    L_0x03ba:
        r0 = move-exception;
        r6 = r33;
        r5 = r30;
        r3 = r31;
        r4 = r32;
    L_0x03c3:
        android.os.Binder.restoreCallingIdentity(r1);	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        throw r0;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
    L_0x03c7:
        r0 = move-exception;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r28 = r9;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r5 = r10;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r18 = r11;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r6 = r13;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r4 = r14;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        r3 = r15;	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
    L_0x03d0:
        monitor-exit(r31);	 Catch:{ all -> 0x03c7, all -> 0x03d5 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x03d5:
        r0 = move-exception;
        goto L_0x03d0;
    L_0x03d7:
        r0 = move-exception;
        r5 = r10;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
    L_0x03de:
        monitor-exit(r31);	 Catch:{ all -> 0x03e3 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x03e3:
        r0 = move-exception;
        goto L_0x03de;
    L_0x03e5:
        r0 = move-exception;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
    L_0x03eb:
        monitor-exit(r31);	 Catch:{ all -> 0x03f0 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x03f0:
        r0 = move-exception;
        goto L_0x03eb;
    L_0x03f2:
        r0 = move-exception;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
    L_0x03f8:
        monitor-exit(r31);	 Catch:{ all -> 0x03fd }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x03fd:
        r0 = move-exception;
        goto L_0x03f8;
    L_0x03ff:
        r0 = move-exception;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
        r1 = r18;
        goto L_0x040c;
    L_0x0408:
        r0 = move-exception;
    L_0x0409:
        r6 = r13;
        r4 = r14;
        r3 = r15;
    L_0x040c:
        monitor-exit(r2);	 Catch:{ all -> 0x040e }
        throw r0;
    L_0x040e:
        r0 = move-exception;
        goto L_0x040c;
    L_0x0410:
        r0 = move-exception;
        r6 = r13;
        r4 = r14;
        r3 = r15;
    L_0x0414:
        monitor-exit(r31);	 Catch:{ all -> 0x0419 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0419:
        r0 = move-exception;
        goto L_0x0414;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.systemReady(java.lang.Runnable, android.util.TimingsTraceLog):void");
    }

    static {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(TAG);
        stringBuilder.append(ActivityManagerDebugConfig.POSTFIX_CONFIGURATION);
        TAG_CONFIGURATION = stringBuilder.toString();
        stringBuilder = new StringBuilder();
        stringBuilder.append(TAG);
        stringBuilder.append(ActivityManagerDebugConfig.POSTFIX_VISIBILITY);
        TAG_VISIBILITY = stringBuilder.toString();
        boolean z = true;
        if (SystemProperties.getInt("ro.logsystem.usertype", 1) != 3) {
            z = false;
        }
        IS_DEBUG_VERSION = z;
    }

    BroadcastQueue broadcastQueueForIntent(Intent intent) {
        boolean isFg = (intent.getFlags() & 268435456) != 0;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Broadcast intent ");
            stringBuilder.append(intent);
            stringBuilder.append(" on ");
            stringBuilder.append(isFg ? "foreground" : "background");
            stringBuilder.append(" queue");
            Slog.i(str, stringBuilder.toString());
        }
        return isFg ? this.mFgBroadcastQueue : this.mBgBroadcastQueue;
    }

    public boolean canShowErrorDialogs() {
        if (!this.mShowDialogs || this.mSleeping || this.mShuttingDown || this.mKeyguardController.isKeyguardOrAodShowing(0) || this.mUserController.hasUserRestriction("no_system_error_dialogs", this.mUserController.getCurrentUserId())) {
            return false;
        }
        return (UserManager.isDeviceInDemoMode(this.mContext) && this.mUserController.getCurrentUser().isDemo()) ? false : true;
    }

    protected ActivityRecord getLastResumedActivity() {
        return this.mLastResumedActivity;
    }

    static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    Configuration getGlobalConfiguration() {
        return this.mStackSupervisor.getConfiguration();
    }

    public void setSystemProcess() {
        try {
            ServiceManager.addService("activity", this, true, 21);
            ServiceManager.addService("procstats", this.mProcessStats);
            ServiceManager.addService("meminfo", new MemBinder(this), false, 2);
            ServiceManager.addService("gfxinfo", new GraphicsBinder(this));
            ServiceManager.addService("dbinfo", new DbBinder(this));
            ServiceManager.addService("cpuinfo", new CpuBinder(this), false, 1);
            ServiceManager.addService("permission", new PermissionController(this));
            ServiceManager.addService("processinfo", new ProcessInfoService(this));
            ApplicationInfo info = this.mContext.getPackageManager().getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, 1049600);
            this.mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = newProcessRecordLocked(info, info.processName, false, 0);
                    app.persistent = true;
                    app.pid = MY_PID;
                    app.maxAdj = -900;
                    app.makeActive(this.mSystemThread.getApplicationThread(), this.mProcessStats);
                    synchronized (this.mPidsSelfLocked) {
                        this.mPidsSelfLocked.put(app.pid, app);
                    }
                    updateLruProcessLocked(app, false, null);
                    updateOomAdjLocked();
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.startWatchingMode(HANDLE_TRUST_STORAGE_UPDATE_MSG, null, new IAppOpsCallback.Stub() {
                public void opChanged(int op, int uid, String packageName) {
                    if (op == ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG && packageName != null && ActivityManagerService.this.mAppOpsService.checkOperation(op, uid, packageName) != 0) {
                        ActivityManagerService.this.runInBackgroundDisabled(uid);
                    }
                }
            });
        } catch (NameNotFoundException e) {
            throw new RuntimeException("Unable to find android system package", e);
        }
    }

    public void setWindowManager(WindowManagerService wm) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mWindowManager = wm;
                this.mStackSupervisor.setWindowManager(wm);
                this.mLockTaskController.setWindowManager(wm);
                this.mWindowManager.registerPointerEventListener(this.mHwAMSEx.getPointerEventListener());
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setAlarmManager(AlarmManagerService service) {
        this.mAlms = service;
    }

    public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager) {
        this.mUsageStatsService = usageStatsManager;
    }

    public void startObservingNativeCrashes() {
        new NativeCrashListener(this).start();
    }

    public IAppOpsService getAppOpsService() {
        return this.mAppOpsService;
    }

    @VisibleForTesting
    public ActivityManagerService(Injector injector) {
        boolean z = SystemProperties.getBoolean("ro.config.hw_low_ram", false) || SystemProperties.getBoolean("ro.config.hw_smart_shrink", false);
        this.mIsHwLowRam = z;
        this.mBroadcastQueues = initialBroadcastQueue();
        this.mSwitchUserDlg = null;
        this.mUserStateInitializing = false;
        this.mCustAms = (HwCustActivityManagerService) HwCustUtils.createObj(HwCustActivityManagerService.class, new Object[0]);
        this.mAllowAppSwitchUids = new SparseArray();
        this.mPriorityDumper = new PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto) {
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"activities"}, asProto);
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"service", ActivityManagerService.SYSUI_COMPONENT_NAME}, asProto);
                }
            }

            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mPendingAssistExtras = new ArrayList();
        this.mProcessList = new ProcessList();
        this.mProcessNames = new ProcessMap();
        this.mIsolatedProcesses = new SparseArray();
        this.mNextIsolatedProcessUid = 0;
        this.mHeavyWeightProcess = null;
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mBadPkgs = new ArrayMap();
        this.mPidsSelfLocked = new SparseArray();
        this.mImportantProcesses = new SparseArray();
        this.mProcessesOnHold = new ArrayList();
        this.mPersistentStartingProcesses = new ArrayList();
        this.mRemovedProcesses = new ArrayList();
        this.mLruProcesses = new ArrayList();
        this.mLruProcessActivityStart = 0;
        this.mLruProcessServiceStart = 0;
        this.mProcessesToGc = new ArrayList();
        this.mPendingPssProcesses = new ArrayList();
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mActiveUids = new SparseArray();
        this.mValidateUids = new SparseArray();
        this.mIntentSenderRecords = new HashMap();
        this.mAlreadyLoggedViolatedStacks = new HashSet();
        this.mRegisteredReceivers = new HashMap();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() {
            protected boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                if (filter.receiverList.receiver == null) {
                    String str = ActivityManagerService.TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("  Receiver of filter's receiverList is null; packageName = ");
                    stringBuilder.append(filter.packageName);
                    Slog.w(str, stringBuilder.toString());
                    return false;
                }
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (((BroadcastFilter) dest.get(i)).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            protected BroadcastFilter newResult(BroadcastFilter filter, int match, int userId) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult(filter, match, userId);
                }
                return null;
            }

            protected BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            protected boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray();
        this.mAssociations = new SparseArray();
        this.mBackupAppName = null;
        this.mBackupTarget = null;
        this.mLaunchingProviders = new ArrayList();
        this.mGrantedUriPermissions = new SparseArray();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new SparseArray();
        this.mTempConfig = new Configuration();
        this.mTmpUpdateConfigurationResult = new UpdateConfigurationResult();
        this.mStringBuilder = new StringBuilder(256);
        this.mTopAction = "android.intent.action.MAIN";
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mLaunchWarningShown = false;
        this.mCheckedForSetup = false;
        this.mSleeping = false;
        this.mTopProcessState = 2;
        this.mWakefulness = 1;
        this.mKeyguardShown = false;
        this.mShuttingDown = false;
        this.mAdjSeq = 0;
        this.mLruSeq = 0;
        this.mNumNonCachedProcs = 0;
        this.mNumCachedHiddenProcs = 0;
        this.mNumServiceProcs = 0;
        this.mNewNumAServiceProcs = 0;
        this.mNewNumServiceProcs = 0;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mController = null;
        this.mControllerIsAMonkey = false;
        this.mProfileApp = null;
        this.mProfileProc = null;
        this.mProfilerInfo = null;
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mTmpLong = new long[3];
        this.mTmpBroadcastQueue = new ArraySet();
        this.mProcStateSeqCounter = 0;
        this.mProcStartSeqCounter = 0;
        this.mPendingStarts = new LongSparseArray();
        this.mScreenObservers = new ArrayList();
        this.mProcessObservers = new RemoteCallbackList();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList();
        this.mAvailProcessChanges = new ArrayList();
        this.mUidObservers = new RemoteCallbackList();
        this.mActiveUidChanges = new ChangeItem[5];
        this.mPendingUidChanges = new ArrayList();
        this.mAvailUidChanges = new ArrayList();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mUpdateLock = new UpdateLock("immersive");
        this.mBooted = false;
        this.mActivityIdle = false;
        this.mLastMemUsageReportTime = 0;
        this.mViSessionId = 1000;
        this.mLocalStopReason = new ThreadLocal();
        this.mBgHandler = new Handler(BackgroundThread.getHandler().getLooper()) {
            /* JADX WARNING: Missing block: B:106:0x0225, code:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
     */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void handleMessage(Message msg) {
                long[] jArr;
                int procState;
                int statType;
                int j;
                long[] tmp;
                int num;
                long j2;
                int i;
                Throwable th;
                AnonymousClass3 anonymousClass3 = this;
                int i2 = 1;
                if (msg.what == 1) {
                    long start = SystemClock.uptimeMillis();
                    MemInfoReader memInfo = null;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            if (ActivityManagerService.this.mFullPssPending) {
                                ActivityManagerService.this.mFullPssPending = false;
                                memInfo = new MemInfoReader();
                            }
                        } finally {
                            while (true) {
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    jArr = null;
                    if (memInfo != null) {
                        List<Stats> stats;
                        ActivityManagerService.this.updateCpuStatsNow();
                        synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                            stats = ActivityManagerService.this.mProcessCpuTracker.getStats(-$$Lambda$ActivityManagerService$3$poTyYzHinA8s8lAJ-y6Bb3JsBNo.INSTANCE);
                        }
                        procState = stats.size();
                        statType = 0;
                        for (j = 0; j < procState; j++) {
                            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                if (ActivityManagerService.this.mPidsSelfLocked.indexOfKey(((Stats) stats.get(j)).pid) >= 0) {
                                } else {
                                    statType += Debug.getPss(((Stats) stats.get(j)).pid, null, null);
                                }
                            }
                        }
                        memInfo.readMemInfo();
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                    String str = ActivityManagerService.TAG;
                                    StringBuilder stringBuilder = new StringBuilder();
                                    stringBuilder.append("Collected native and kernel memory in ");
                                    stringBuilder.append(SystemClock.uptimeMillis() - start);
                                    stringBuilder.append("ms");
                                    Slog.d(str, stringBuilder.toString());
                                }
                                long nativeTotalPss = memInfo.getRealCachedSizeKb();
                                long freeKb = memInfo.getFreeSizeKb();
                                long zramKb = memInfo.getZramTotalSizeKb();
                                long kernelKb = memInfo.getKernelUsedSizeKb();
                                EventLogTags.writeAmMeminfo(nativeTotalPss * 1024, freeKb * 1024, zramKb * 1024, kernelKb * 1024, statType * 1024);
                                ActivityManagerService.this.mProcessStats.addSysMemUsageLocked(nativeTotalPss, freeKb, zramKb, kernelKb, statType);
                            } finally {
                                while (true) {
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    }
                    j = 0;
                    tmp = new long[3];
                    num = 0;
                    loop4:
                    while (true) {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                j = ActivityManagerService.this.mPendingPssProcesses.size();
                                if (j <= 0) {
                                    break loop4;
                                }
                                j = (ProcessRecord) ActivityManagerService.this.mPendingPssProcesses.remove(0);
                                procState = j.pssProcState;
                                statType = j.pssStatType;
                                j2 = j.lastPssTime;
                                long now = SystemClock.uptimeMillis();
                                if (j.thread == null || procState != j.setProcState || j2 + 1000 >= now) {
                                    ProcessList.abortNextPssTime(j.procStateMemTracker);
                                    j = null;
                                    i = 0;
                                } else {
                                    i = j.pid;
                                }
                            } finally {
                                while (true) {
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                        jArr = null;
                        anonymousClass3 = this;
                        i2 = 1;
                    }
                    if (ActivityManagerService.this.mTestPssMode || ActivityManagerDebugConfig.DEBUG_PSS) {
                        String str2 = ActivityManagerService.TAG;
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Collected pss of ");
                        stringBuilder2.append(num);
                        stringBuilder2.append(" processes in ");
                        stringBuilder2.append(SystemClock.uptimeMillis() - start);
                        stringBuilder2.append("ms");
                        Slog.d(str2, stringBuilder2.toString());
                    }
                    ActivityManagerService.this.mPendingPssProcesses.clear();
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                }
                return;
                if (j != 0) {
                    long startTime = SystemClock.currentThreadTimeMillis();
                    long pss = Debug.getPss(i, tmp, jArr);
                    long endTime = SystemClock.currentThreadTimeMillis();
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            if (pss != 0 && j.thread != null && j.setProcState == procState && j.pid == i && j.lastPssTime == j2) {
                                num++;
                                ProcessList.commitNextPssTime(j.procStateMemTracker);
                                ActivityManagerService activityManagerService = ActivityManagerService.this;
                                long j3 = tmp[0];
                                long j4 = tmp[i2];
                                i2 = i;
                                i = procState;
                                try {
                                    activityManagerService.recordPssSampleLocked(j, i, pss, j3, j4, tmp[2], statType, endTime - startTime, SystemClock.uptimeMillis());
                                } catch (Throwable th2) {
                                    th = th2;
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            i2 = i;
                            ProcessList.abortNextPssTime(j.procStateMemTracker);
                            if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                String str3 = ActivityManagerService.TAG;
                                StringBuilder stringBuilder3 = new StringBuilder();
                                stringBuilder3.append("Skipped pss collection of ");
                                stringBuilder3.append(i2);
                                stringBuilder3.append(": ");
                                stringBuilder3.append(j.thread == null ? "NO_THREAD " : BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                                stringBuilder3.append(j.pid != i2 ? "PID_CHANGED " : BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                                stringBuilder3.append(" initState=");
                                stringBuilder3.append(procState);
                                stringBuilder3.append(" curState=");
                                stringBuilder3.append(j.setProcState);
                                i = " ";
                                stringBuilder3.append(i);
                                stringBuilder3.append(j.lastPssTime != j2 ? "TIME_CHANGED" : BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                                Slog.d(str3, stringBuilder3.toString());
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            i2 = i;
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                jArr = null;
                anonymousClass3 = this;
                i2 = 1;
            }

            static /* synthetic */ boolean lambda$handleMessage$0(Stats st) {
                return st.vsize > 0 && st.uid < 10000;
            }
        };
        this.mProcessStateStatsLongs = new long[1];
        this.mPersistentReady = false;
        this.mSupportedSystemLocales = null;
        this.mCtsActions = new HashSet();
        this.mCtsPackages = new HashSet();
        this.mHwAMSEx = null;
        this.mHwInnerService = new HwInnerActivityManagerService(this);
        this.mDAProxy = new HwDAMonitorProxy();
        this.mInjector = injector;
        this.mContext = this.mInjector.getContext();
        this.mUiContext = null;
        this.GL_ES_VERSION = 0;
        this.mActivityStartController = null;
        this.mAppErrors = null;
        this.mAppWarnings = null;
        this.mAppOpsService = this.mInjector.getAppOpsService(null, null);
        this.mBatteryStatsService = null;
        this.mCompatModePackages = null;
        this.mConstants = null;
        this.mGrantFile = null;
        this.mHandler = null;
        this.mHandlerThread = null;
        this.mIntentFirewall = null;
        this.mKeyguardController = null;
        this.mPermissionReviewRequired = false;
        this.mProcessCpuThread = null;
        this.mProcessStats = null;
        this.mProviderMap = null;
        this.mRecentTasks = null;
        this.mServices = null;
        this.mStackSupervisor = null;
        this.mSystemThread = null;
        this.mTaskChangeNotificationController = null;
        this.mUiHandler = injector.getUiHandler(null);
        this.mUserController = null;
        this.mVrController = null;
        this.mLockTaskController = null;
        this.mLifecycleManager = null;
        this.mProcStartHandlerThread = null;
        this.mProcStartHandler = null;
        this.mHiddenApiBlacklist = null;
    }

    public ActivityManagerService(Context systemContext) {
        boolean z = SystemProperties.getBoolean("ro.config.hw_low_ram", false) || SystemProperties.getBoolean("ro.config.hw_smart_shrink", false);
        this.mIsHwLowRam = z;
        this.mBroadcastQueues = initialBroadcastQueue();
        this.mSwitchUserDlg = null;
        this.mUserStateInitializing = false;
        this.mCustAms = (HwCustActivityManagerService) HwCustUtils.createObj(HwCustActivityManagerService.class, new Object[0]);
        this.mAllowAppSwitchUids = new SparseArray();
        this.mPriorityDumper = /* anonymous class already generated */;
        this.mPendingAssistExtras = new ArrayList();
        this.mProcessList = new ProcessList();
        this.mProcessNames = new ProcessMap();
        this.mIsolatedProcesses = new SparseArray();
        this.mNextIsolatedProcessUid = 0;
        this.mHeavyWeightProcess = null;
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mBadPkgs = new ArrayMap();
        this.mPidsSelfLocked = new SparseArray();
        this.mImportantProcesses = new SparseArray();
        this.mProcessesOnHold = new ArrayList();
        this.mPersistentStartingProcesses = new ArrayList();
        this.mRemovedProcesses = new ArrayList();
        this.mLruProcesses = new ArrayList();
        this.mLruProcessActivityStart = 0;
        this.mLruProcessServiceStart = 0;
        this.mProcessesToGc = new ArrayList();
        this.mPendingPssProcesses = new ArrayList();
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mActiveUids = new SparseArray();
        this.mValidateUids = new SparseArray();
        this.mIntentSenderRecords = new HashMap();
        this.mAlreadyLoggedViolatedStacks = new HashSet();
        this.mRegisteredReceivers = new HashMap();
        this.mReceiverResolver = /* anonymous class already generated */;
        this.mStickyBroadcasts = new SparseArray();
        this.mAssociations = new SparseArray();
        this.mBackupAppName = null;
        this.mBackupTarget = null;
        this.mLaunchingProviders = new ArrayList();
        this.mGrantedUriPermissions = new SparseArray();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new SparseArray();
        this.mTempConfig = new Configuration();
        this.mTmpUpdateConfigurationResult = new UpdateConfigurationResult();
        this.mStringBuilder = new StringBuilder(256);
        this.mTopAction = "android.intent.action.MAIN";
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mLaunchWarningShown = false;
        this.mCheckedForSetup = false;
        this.mSleeping = false;
        this.mTopProcessState = 2;
        this.mWakefulness = 1;
        this.mKeyguardShown = false;
        this.mShuttingDown = false;
        this.mAdjSeq = 0;
        this.mLruSeq = 0;
        this.mNumNonCachedProcs = 0;
        this.mNumCachedHiddenProcs = 0;
        this.mNumServiceProcs = 0;
        this.mNewNumAServiceProcs = 0;
        this.mNewNumServiceProcs = 0;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mController = null;
        this.mControllerIsAMonkey = false;
        this.mProfileApp = null;
        this.mProfileProc = null;
        this.mProfilerInfo = null;
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mTmpLong = new long[3];
        this.mTmpBroadcastQueue = new ArraySet();
        this.mProcStateSeqCounter = 0;
        this.mProcStartSeqCounter = 0;
        this.mPendingStarts = new LongSparseArray();
        this.mScreenObservers = new ArrayList();
        this.mProcessObservers = new RemoteCallbackList();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList();
        this.mAvailProcessChanges = new ArrayList();
        this.mUidObservers = new RemoteCallbackList();
        this.mActiveUidChanges = new ChangeItem[5];
        this.mPendingUidChanges = new ArrayList();
        this.mAvailUidChanges = new ArrayList();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mUpdateLock = new UpdateLock("immersive");
        this.mBooted = false;
        this.mActivityIdle = false;
        this.mLastMemUsageReportTime = 0;
        this.mViSessionId = 1000;
        this.mLocalStopReason = new ThreadLocal();
        this.mBgHandler = /* anonymous class already generated */;
        this.mProcessStateStatsLongs = new long[1];
        this.mPersistentReady = false;
        this.mSupportedSystemLocales = null;
        this.mCtsActions = new HashSet();
        this.mCtsPackages = new HashSet();
        this.mHwAMSEx = null;
        this.mHwInnerService = new HwInnerActivityManagerService(this);
        this.mDAProxy = new HwDAMonitorProxy();
        this.mHwAMSEx = HwServiceExFactory.getHwActivityManagerServiceEx(this, systemContext);
        LockGuard.installLock((Object) this, 6);
        this.mInjector = new Injector();
        this.mContext = systemContext;
        this.mFactoryTest = FactoryTest.getMode();
        this.mSystemThread = ActivityThread.currentActivityThread();
        this.mUiContext = this.mSystemThread.getSystemUiContext();
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Memory class: ");
        stringBuilder.append(ActivityManager.staticGetMemoryClass());
        Slog.i(str, stringBuilder.toString());
        this.mPermissionReviewRequired = this.mContext.getResources().getBoolean(17957000);
        this.mHandlerThread = new ServiceThread(TAG, -2, false);
        this.mHandlerThread.start();
        this.mHandler = new MainHandler(this.mHandlerThread.getLooper());
        this.mUiHandler = this.mInjector.getUiHandler(this);
        this.mProcStartHandlerThread = new ServiceThread("ActivityManager:procStart", -2, false);
        this.mProcStartHandlerThread.start();
        this.mProcStartHandler = new Handler(this.mProcStartHandlerThread.getLooper());
        this.mConstants = new ActivityManagerConstants(this, this.mHandler);
        if (sKillHandler == null) {
            sKillThread = new ServiceThread("ActivityManager:kill", 10, true);
            sKillThread.start();
            sKillHandler = new KillHandler(sKillThread.getLooper());
        }
        this.mFgBroadcastQueue = new HwBroadcastQueue(this, this.mHandler, "foreground", (long) BROADCAST_FG_TIMEOUT, false);
        this.mBgBroadcastQueue = new HwBroadcastQueue(this, this.mHandler, "background", (long) BROADCAST_BG_TIMEOUT, false);
        this.mBroadcastQueues[0] = this.mFgBroadcastQueue;
        this.mBroadcastQueues[1] = this.mBgBroadcastQueue;
        setThirdPartyAppBroadcastQueue(this.mBroadcastQueues);
        setKeyAppBroadcastQueue(this.mBroadcastQueues);
        IHwActiveServices iActiveS = HwServiceFactory.getHwActiveServices();
        if (iActiveS != null) {
            this.mServices = iActiveS.getInstance(this);
        } else {
            this.mServices = new ActiveServices(this);
        }
        this.mProviderMap = new ProviderMap(this);
        this.mAppErrors = new AppErrors(this.mUiContext, this);
        File systemDir = new File(Environment.getDataDirectory(), "system");
        systemDir.mkdirs();
        this.mAppWarnings = new AppWarnings(this, this.mUiContext, this.mHandler, this.mUiHandler, systemDir);
        this.mBatteryStatsService = new BatteryStatsService(systemContext, systemDir, this.mHandler);
        this.mBatteryStatsService.getActiveStatistics().readLocked();
        this.mBatteryStatsService.scheduleWriteToDisk();
        this.mBatteryStatsService.setActivityService(this);
        this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : this.mBatteryStatsService.getActiveStatistics().getIsOnBattery();
        this.mBatteryStatsService.getActiveStatistics().setCallback(this);
        this.mProcessStats = new ProcessStatsService(this, new File(systemDir, "procstats"));
        IHwAppOpsService iaos = HwServiceFactory.getHwAppOpsService();
        if (iaos == null) {
            this.mAppOpsService = this.mInjector.getAppOpsService(new File(systemDir, "appops.xml"), this.mHandler);
        } else {
            this.mAppOpsService = iaos.getInstance(new File(systemDir, "appops.xml"), this.mHandler);
        }
        this.mGrantFile = new AtomicFile(new File(systemDir, "urigrants.xml"), TAG_URI_GRANTS);
        this.mUserController = new UserController(this);
        this.mVrController = new VrController(this);
        this.GL_ES_VERSION = SystemProperties.getInt("ro.opengles.version", 0);
        if (SystemProperties.getInt("sys.use_fifo_ui", 0) != 0) {
            this.mUseFifoUiScheduling = true;
        }
        this.mTrackingAssociations = "1".equals(SystemProperties.get("debug.track-associations"));
        this.mTempConfig.setToDefaults();
        this.mTempConfig.setLocales(LocaleList.getDefault());
        this.mTempConfig.seq = 1;
        this.mConfigurationSeq = 1;
        this.mStackSupervisor = createStackSupervisor();
        this.mStackSupervisor.onConfigurationChanged(this.mTempConfig);
        this.mKeyguardController = this.mStackSupervisor.getKeyguardController();
        this.mCompatModePackages = new CompatModePackages(this, systemDir, this.mHandler);
        this.mIntentFirewall = new IntentFirewall(new IntentFirewallInterface(), this.mHandler);
        this.mTaskChangeNotificationController = new TaskChangeNotificationController(this, this.mStackSupervisor, this.mHandler);
        this.mActivityStartController = new ActivityStartController(this);
        this.mRecentTasks = createRecentTasks();
        this.mStackSupervisor.setRecentTasks(this.mRecentTasks);
        this.mLockTaskController = new LockTaskController(this.mContext, this.mStackSupervisor, this.mHandler);
        this.mLifecycleManager = new ClientLifecycleManager();
        this.mProcessCpuThread = new Thread("CpuTracker") {
            public void run() {
                synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                    ActivityManagerService.this.mProcessCpuInitLatch.countDown();
                    ActivityManagerService.this.mProcessCpuTracker.init();
                }
                while (true) {
                    try {
                        synchronized (this) {
                            long now = SystemClock.uptimeMillis();
                            long nextCpuDelay = (ActivityManagerService.this.mLastCpuTime.get() + ActivityManagerService.MONITOR_CPU_MAX_TIME) - now;
                            long nextWriteDelay = (ActivityManagerService.this.mLastWriteTime + 1800000) - now;
                            if (nextWriteDelay < nextCpuDelay) {
                                nextCpuDelay = nextWriteDelay;
                            }
                            if (nextCpuDelay > 0) {
                                ActivityManagerService.this.mProcessCpuMutexFree.set(true);
                                wait(nextCpuDelay);
                            }
                        }
                    } catch (InterruptedException e) {
                    }
                    try {
                        ActivityManagerService.this.updateCpuStatsNow();
                    } catch (Exception e2) {
                        Slog.e(ActivityManagerService.TAG, "Unexpected exception collecting process stats", e2);
                    }
                }
            }
        };
        this.mHiddenApiBlacklist = new HiddenApiSettings(this.mHandler, this.mContext);
        Watchdog.getInstance().addMonitor(this);
        Watchdog.getInstance().addThread(this.mHandler);
        updateOomAdjLocked();
        IZrHung iZrHung = HwFrameworkFactory.getZrHung("appeye_frameworkblock");
        if (iZrHung != null) {
            ZrHungData data = new ZrHungData();
            data.put("monitor", this);
            iZrHung.check(data);
        }
    }

    protected ActivityStackSupervisor createStackSupervisor() {
        ActivityStackSupervisor supervisor;
        IHwActivityStackSupervisor iActivitySS = HwServiceFactory.getHwActivityStackSupervisor();
        if (iActivitySS != null) {
            supervisor = iActivitySS.getInstance(this, this.mHandler.getLooper());
        } else {
            supervisor = new ActivityStackSupervisor(this, this.mHandler.getLooper());
        }
        supervisor.initialize();
        return supervisor;
    }

    protected RecentTasks createRecentTasks() {
        return new RecentTasks(this, this.mStackSupervisor);
    }

    RecentTasks getRecentTasks() {
        return this.mRecentTasks;
    }

    public void setSystemServiceManager(SystemServiceManager mgr) {
        this.mSystemServiceManager = mgr;
    }

    public void setInstaller(Installer installer) {
        this.mInstaller = installer;
    }

    private void start() {
        Process.removeAllProcessGroups();
        this.mProcessCpuThread.start();
        this.mBatteryStatsService.publish();
        this.mAppOpsService.publish(this.mContext);
        Slog.d("AppOps", "AppOpsService published");
        LocalServices.addService(ActivityManagerInternal.class, new LocalService());
        try {
            this.mProcessCpuInitLatch.await();
        } catch (InterruptedException e) {
            Slog.wtf(TAG, "Interrupted wait during start", e);
            Thread.currentThread().interrupt();
            throw new IllegalStateException("Interrupted wait during start");
        }
    }

    void onUserStoppedLocked(int userId) {
        this.mRecentTasks.unloadUserDataFromMemoryLocked(userId);
        this.mAllowAppSwitchUids.remove(userId);
    }

    public void initPowerManagement() {
        this.mStackSupervisor.initPowerManagement();
        this.mBatteryStatsService.initPowerManagement();
        this.mLocalPowerManager = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
        this.mVoiceWakeLock = ((PowerManager) this.mContext.getSystemService("power")).newWakeLock(1, "*voice*");
        this.mVoiceWakeLock.setReferenceCounted(false);
    }

    private ArraySet<String> getBackgroundLaunchBroadcasts() {
        if (this.mBackgroundLaunchBroadcasts == null) {
            this.mBackgroundLaunchBroadcasts = SystemConfig.getInstance().getAllowImplicitBroadcasts();
        }
        return this.mBackgroundLaunchBroadcasts;
    }

    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
        if (code == 1599295570) {
            int NP;
            int i;
            ArrayList<IBinder> procs = new ArrayList();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    NP = this.mProcessNames.getMap().size();
                    i = 0;
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = (ProcessRecord) apps.valueAt(ia);
                            if (app.thread != null) {
                                procs.add(app.thread.asBinder());
                            }
                        }
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            NP = procs.size();
            while (i < NP) {
                Parcel data2 = Parcel.obtain();
                try {
                    ((IBinder) procs.get(i)).transact(1599295570, data2, null, 1);
                } catch (RemoteException e) {
                }
                data2.recycle();
                i++;
            }
        }
        try {
            return super.onTransact(code, data, reply, flags);
        } catch (RuntimeException e2) {
            if (!((e2 instanceof SecurityException) || (e2 instanceof IllegalArgumentException) || (e2 instanceof IllegalStateException))) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Activity Manager Crash. UID:");
                stringBuilder.append(Binder.getCallingUid());
                stringBuilder.append(" PID:");
                stringBuilder.append(Binder.getCallingPid());
                stringBuilder.append(" TRANS:");
                stringBuilder.append(code);
                Slog.wtf(TAG, stringBuilder.toString(), e2);
            }
            throw e2;
        }
    }

    void updateCpuStats() {
        if (this.mLastCpuTime.get() < SystemClock.uptimeMillis() - 5000 && this.mProcessCpuMutexFree.compareAndSet(true, false)) {
            synchronized (this.mProcessCpuThread) {
                this.mProcessCpuThread.notify();
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:62:0x01b5  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    void updateCpuStatsNow() {
        SparseArray sparseArray;
        Throwable th;
        synchronized (this.mProcessCpuTracker) {
            int user;
            int system;
            this.mProcessCpuMutexFree.set(false);
            long now = SystemClock.uptimeMillis();
            boolean haveNewCpuStats = false;
            if (this.mLastCpuTime.get() < now - 5000) {
                this.mLastCpuTime.set(now);
                this.mProcessCpuTracker.update();
                if (this.mProcessCpuTracker.hasGoodLastStats()) {
                    haveNewCpuStats = true;
                    if ("true".equals(SystemProperties.get("events.cpu"))) {
                        user = this.mProcessCpuTracker.getLastUserTime();
                        system = this.mProcessCpuTracker.getLastSystemTime();
                        int iowait = this.mProcessCpuTracker.getLastIoWaitTime();
                        int irq = this.mProcessCpuTracker.getLastIrqTime();
                        int total = ((((user + system) + iowait) + irq) + this.mProcessCpuTracker.getLastSoftIrqTime()) + this.mProcessCpuTracker.getLastIdleTime();
                        if (total == 0) {
                            total = 1;
                        }
                        EventLog.writeEvent(EventLogTags.CPU, new Object[]{Integer.valueOf((((((user + system) + iowait) + irq) + softIrq) * 100) / total), Integer.valueOf((user * 100) / total), Integer.valueOf((system * 100) / total), Integer.valueOf((iowait * 100) / total), Integer.valueOf((irq * 100) / total), Integer.valueOf((softIrq * 100) / total)});
                    }
                }
            }
            boolean haveNewCpuStats2 = haveNewCpuStats;
            BatteryStatsImpl bstats = this.mBatteryStatsService.getActiveStatistics();
            synchronized (bstats) {
                SparseArray sparseArray2 = this.mPidsSelfLocked;
                synchronized (sparseArray2) {
                    int totalUTime;
                    if (haveNewCpuStats2) {
                        try {
                            if (bstats.startAddingCpuLocked()) {
                                int totalUTime2 = 0;
                                system = this.mProcessCpuTracker.countStats();
                                int totalSTime = 0;
                                int i = 0;
                                while (true) {
                                    user = i;
                                    if (user >= system) {
                                        break;
                                    }
                                    int N;
                                    Stats st = this.mProcessCpuTracker.getStats(user);
                                    if (st.working) {
                                        ProcessRecord pr = (ProcessRecord) this.mPidsSelfLocked.get(st.pid);
                                        totalUTime2 += st.rel_utime;
                                        totalSTime += st.rel_stime;
                                        if (pr != null) {
                                            Proc ps = pr.curProcBatteryStats;
                                            if (ps == null || !ps.isActive()) {
                                                Proc processStatsLocked = bstats.getProcessStatsLocked(pr.info.uid, pr.processName);
                                                ps = processStatsLocked;
                                                pr.curProcBatteryStats = processStatsLocked;
                                            }
                                            ps.addCpuTimeLocked(st.rel_utime, st.rel_stime);
                                            totalUTime = totalUTime2;
                                            N = system;
                                            sparseArray = sparseArray2;
                                            try {
                                                pr.curCpuTime += (long) (st.rel_utime + st.rel_stime);
                                                if (pr.lastCpuTime == 0) {
                                                    pr.lastCpuTime = pr.curCpuTime;
                                                }
                                            } catch (Throwable th2) {
                                                th = th2;
                                                throw th;
                                            }
                                        }
                                        totalUTime = totalUTime2;
                                        N = system;
                                        sparseArray = sparseArray2;
                                        Proc ps2 = st.batteryStats;
                                        if (ps2 == null || !ps2.isActive()) {
                                            Proc processStatsLocked2 = bstats.getProcessStatsLocked(bstats.mapUid(st.uid), st.name);
                                            ps2 = processStatsLocked2;
                                            st.batteryStats = processStatsLocked2;
                                        }
                                        ps2.addCpuTimeLocked(st.rel_utime, st.rel_stime);
                                        totalUTime2 = totalUTime;
                                    } else {
                                        N = system;
                                        sparseArray = sparseArray2;
                                    }
                                    i = user + 1;
                                    sparseArray2 = sparseArray;
                                    system = N;
                                }
                                totalUTime = sparseArray2;
                                bstats.finishAddingCpuLocked(totalUTime2, totalSTime, this.mProcessCpuTracker.getLastUserTime(), this.mProcessCpuTracker.getLastSystemTime(), this.mProcessCpuTracker.getLastIoWaitTime(), this.mProcessCpuTracker.getLastIrqTime(), this.mProcessCpuTracker.getLastSoftIrqTime(), this.mProcessCpuTracker.getLastIdleTime());
                                if (this.mLastWriteTime < now - 1800000) {
                                    this.mLastWriteTime = now;
                                    this.mBatteryStatsService.scheduleWriteToDisk();
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            totalUTime = sparseArray2;
                            throw th;
                        }
                    }
                    totalUTime = sparseArray2;
                    if (this.mLastWriteTime < now - 1800000) {
                    }
                }
            }
        }
    }

    public void batteryNeedsCpuUpdate() {
        updateCpuStatsNow();
    }

    public void batteryPowerChanged(boolean onBattery) {
        updateCpuStatsNow();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : onBattery;
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void batteryStatsReset() {
        BinderCallsStatsService.reset();
    }

    public void batterySendBroadcast(Intent intent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, -1);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private ArrayMap<String, IBinder> getCommonServicesLocked(boolean isolated) {
        if (isolated) {
            if (this.mIsolatedAppBindArgs == null) {
                this.mIsolatedAppBindArgs = new ArrayMap(1);
                addServiceToMap(this.mIsolatedAppBindArgs, "package");
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            this.mAppBindArgs = new ArrayMap();
            addServiceToMap(this.mAppBindArgs, "package");
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, "alarm");
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, "input");
            addServiceToMap(this.mAppBindArgs, GraphicsStatsService.GRAPHICS_STATS_SERVICE);
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, "content");
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
        }
        return this.mAppBindArgs;
    }

    private static void addServiceToMap(ArrayMap<String, IBinder> map, String name) {
        IBinder service = ServiceManager.getService(name);
        if (service != null) {
            map.put(name, service);
        }
    }

    @GuardedBy("this")
    void setResumedActivityUncheckLocked(ActivityRecord r, String reason) {
        this.mHwAMSEx.notifyAppSwitch(this.mLastResumedActivity, r);
        TaskRecord task = r.getTask();
        if (!task.isActivityTypeStandard()) {
            r.appTimeTracker = null;
        } else if (this.mCurAppTimeTracker != r.appTimeTracker) {
            if (this.mCurAppTimeTracker != null) {
                this.mCurAppTimeTracker.stop();
                this.mHandler.obtainMessage(54, this.mCurAppTimeTracker).sendToTarget();
                this.mStackSupervisor.clearOtherAppTimeTrackers(r.appTimeTracker);
                this.mCurAppTimeTracker = null;
            }
            if (r.appTimeTracker != null) {
                this.mCurAppTimeTracker = r.appTimeTracker;
                startTimeTrackingFocusedActivityLocked();
            }
        } else {
            startTimeTrackingFocusedActivityLocked();
        }
        if (task.voiceInteractor != null) {
            startRunningVoiceLocked(task.voiceSession, r.info.applicationInfo.uid);
        } else {
            finishRunningVoiceLocked();
            if (this.mLastResumedActivity != null) {
                IVoiceInteractionSession session;
                TaskRecord lastResumedActivityTask = this.mLastResumedActivity.getTask();
                if (lastResumedActivityTask == null || lastResumedActivityTask.voiceSession == null) {
                    session = this.mLastResumedActivity.voiceSession;
                } else {
                    session = lastResumedActivityTask.voiceSession;
                }
                if (session != null) {
                    finishVoiceTask(session);
                }
            }
        }
        if (!(this.mLastResumedActivity == null || r.userId == this.mLastResumedActivity.userId)) {
            this.mUserController.sendForegroundProfileChanged(r.userId);
        }
        this.mLastActivityRecord = this.mLastResumedActivity;
        updateResumedAppTrace(r);
        this.mLastResumedActivity = r;
        this.mWindowManager.setFocusedApp(r.appToken, true);
        applyUpdateLockStateLocked(r);
        applyUpdateVrModeLocked(r);
        EventLogTags.writeAmSetResumedActivity(r == null ? -1 : r.userId, r == null ? "NULL" : r.shortComponentName, reason);
        notifyActivityState(r, ActivityState.RESUMED);
    }

    private void updateResumedAppTrace(ActivityRecord resumed) {
        if (this.mTracedResumedActivity != null) {
            Trace.asyncTraceEnd(64, constructResumedTraceName(this.mTracedResumedActivity.packageName), 0);
        }
        if (resumed != null) {
            Trace.asyncTraceBegin(64, constructResumedTraceName(resumed.packageName), 0);
        }
        this.mTracedResumedActivity = resumed;
    }

    private String constructResumedTraceName(String packageName) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("focused app: ");
        stringBuilder.append(packageName);
        return stringBuilder.toString();
    }

    /* JADX WARNING: Missing block: B:19:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:20:0x006a, code:
            android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Missing block: B:21:0x006e, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setFocusedStack(int stackId) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setFocusedStack()");
        if (ActivityManagerDebugConfig.DEBUG_FOCUS) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("setFocusedStack: stackId=");
            stringBuilder.append(stackId);
            Slog.d(str, stringBuilder.toString());
        }
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                if (stack == null) {
                    String str2 = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("setFocusedStack: No stack with id=");
                    stringBuilder2.append(stackId);
                    Slog.w(str2, stringBuilder2.toString());
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(callingId);
                    return;
                }
                if (this.mStackSupervisor.moveFocusableActivityStackToFrontLocked(stack.topRunningActivityLocked(), "setFocusedStack")) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    /* JADX WARNING: Missing block: B:18:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:19:0x0053, code:
            android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Missing block: B:20:0x0057, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setFocusedTask(int taskId) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setFocusedTask()");
        if (ActivityManagerDebugConfig.DEBUG_FOCUS) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("setFocusedTask: taskId=");
            stringBuilder.append(taskId);
            Slog.d(str, stringBuilder.toString());
        }
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                if (task == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(callingId);
                    return;
                }
                if (this.mStackSupervisor.moveFocusableActivityStackToFrontLocked(task.topRunningActivityLocked(), "setFocusedTask")) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    public void registerTaskStackListener(ITaskStackListener listener) throws RemoteException {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "registerTaskStackListener()");
        this.mTaskChangeNotificationController.registerTaskStackListener(listener);
    }

    public void unregisterTaskStackListener(ITaskStackListener listener) throws RemoteException {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "unregisterTaskStackListener()");
        this.mTaskChangeNotificationController.unregisterTaskStackListener(listener);
    }

    public void notifyActivityDrawn(IBinder token) {
        if (ActivityManagerDebugConfig.DEBUG_VISIBILITY) {
            String str = TAG_VISIBILITY;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("notifyActivityDrawn: token=");
            stringBuilder.append(token);
            Slog.d(str, stringBuilder.toString());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = this.mStackSupervisor.isInAnyStackLocked(token);
                if (r != null) {
                    r.getStack().notifyActivityDrawnLocked(r);
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    final void applyUpdateLockStateLocked(ActivityRecord r) {
        int i = 1;
        boolean nextState = r != null && r.immersive;
        MainHandler mainHandler = this.mHandler;
        MainHandler mainHandler2 = this.mHandler;
        if (!nextState) {
            i = 0;
        }
        mainHandler.sendMessage(mainHandler2.obtainMessage(37, i, 0, r));
    }

    final void applyUpdateVrModeLocked(ActivityRecord r) {
        if (!(r.requestedVrComponent == null || r.getDisplayId() == 0)) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Moving ");
            stringBuilder.append(r.shortComponentName);
            stringBuilder.append(" from stack ");
            stringBuilder.append(r.getStackId());
            stringBuilder.append(" to main stack for VR");
            Slog.i(str, stringBuilder.toString());
            moveTaskToStack(r.getTask().taskId, this.mStackSupervisor.getDefaultDisplay().getOrCreateStack(1, r.getActivityType(), true).mStackId, true);
        }
        this.mHandler.sendMessage(this.mHandler.obtainMessage(61, 0, 0, r));
    }

    final void showAskCompatModeDialogLocked(ActivityRecord r) {
        Message msg = Message.obtain();
        msg.what = 30;
        msg.obj = r.getTask().askedCompatMode ? null : r;
        this.mUiHandler.sendMessage(msg);
    }

    final AppWarnings getAppWarningsLocked() {
        return this.mAppWarnings;
    }

    final void showAppWarningsIfNeededLocked(ActivityRecord r) {
        this.mAppWarnings.showUnsupportedCompileSdkDialogIfNeeded(r);
        this.mAppWarnings.showUnsupportedDisplaySizeDialogIfNeeded(r);
        this.mAppWarnings.showDeprecatedTargetDialogIfNeeded(r);
    }

    private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index, String what, Object obj, ProcessRecord srcApp) {
        app.lastActivityTime = now;
        if (app.activities.size() > 0 || app.recentTasks.size() > 0) {
            return index;
        }
        int lrui = this.mLruProcesses.lastIndexOf(app);
        String str;
        StringBuilder stringBuilder;
        if (lrui < 0) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Adding dependent process ");
            stringBuilder.append(app);
            stringBuilder.append(" not on LRU list: ");
            stringBuilder.append(what);
            stringBuilder.append(" ");
            stringBuilder.append(obj);
            stringBuilder.append(" from ");
            stringBuilder.append(srcApp);
            Slog.wtf(str, stringBuilder.toString());
            return index;
        } else if (lrui >= index || lrui >= this.mLruProcessActivityStart) {
            return index;
        } else {
            this.mLruProcesses.remove(lrui);
            if (index > 0) {
                index--;
            }
            if (ActivityManagerDebugConfig.DEBUG_LRU) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Moving dep from ");
                stringBuilder.append(lrui);
                stringBuilder.append(" to ");
                stringBuilder.append(index);
                stringBuilder.append(" in LRU list: ");
                stringBuilder.append(app);
                Slog.d(str, stringBuilder.toString());
            }
            this.mLruProcesses.add(index, app);
            return index;
        }
    }

    static void killProcessGroup(int uid, int pid) {
        if (sKillHandler != null) {
            sKillHandler.sendMessage(sKillHandler.obtainMessage(4000, uid, pid));
            return;
        }
        Slog.w(TAG, "Asked to kill process group before system bringup!");
        Process.killProcessGroup(uid, pid);
    }

    final void removeLruProcessLocked(ProcessRecord app) {
        int lrui = this.mLruProcesses.lastIndexOf(app);
        if (lrui >= 0) {
            if (!app.killed) {
                String str;
                StringBuilder stringBuilder;
                if (app.persistent) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Removing persistent process that hasn't been killed: ");
                    stringBuilder.append(app);
                    Slog.w(str, stringBuilder.toString());
                } else {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Removing process that hasn't been killed: ");
                    stringBuilder.append(app);
                    Slog.wtfStack(str, stringBuilder.toString());
                    if (app.pid > 0) {
                        Process.killProcessQuiet(app.pid);
                        killProcessGroup(app.uid, app.pid);
                    } else {
                        app.pendingStart = false;
                    }
                }
            }
            if (lrui <= this.mLruProcessActivityStart) {
                this.mLruProcessActivityStart--;
            }
            if (lrui <= this.mLruProcessServiceStart) {
                this.mLruProcessServiceStart--;
            }
            this.mLruProcesses.remove(lrui);
        }
    }

    final void updateLruProcessLocked(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        ProcessRecord processRecord = app;
        ProcessRecord processRecord2 = client;
        boolean z = processRecord.activities.size() > 0 || processRecord.hasClientActivities || processRecord.treatLikeActivity || processRecord.recentTasks.size() > 0;
        boolean hasActivity = z;
        if (activityChange || !hasActivity || (processRecord.persistent && !this.mLruProcesses.contains(processRecord))) {
            int N;
            String str;
            StringBuilder stringBuilder;
            String str2;
            StringBuilder stringBuilder2;
            this.mLruSeq++;
            long now = SystemClock.uptimeMillis();
            processRecord.lastActivityTime = now;
            if (hasActivity) {
                N = this.mLruProcesses.size();
                if (N > 0 && this.mLruProcesses.get(N - 1) == processRecord) {
                    if (ActivityManagerDebugConfig.DEBUG_LRU) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Not moving, already top activity: ");
                        stringBuilder.append(processRecord);
                        Slog.d(str, stringBuilder.toString());
                    }
                    return;
                }
            } else if (this.mLruProcessServiceStart > 0 && this.mLruProcesses.get(this.mLruProcessServiceStart - 1) == processRecord) {
                if (ActivityManagerDebugConfig.DEBUG_LRU) {
                    str2 = TAG;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Not moving, already top other: ");
                    stringBuilder2.append(processRecord);
                    Slog.d(str2, stringBuilder2.toString());
                }
                return;
            }
            int lrui = this.mLruProcesses.lastIndexOf(processRecord);
            if (!processRecord.persistent || lrui < 0) {
                int i;
                int uid;
                int i2;
                long now2;
                if (lrui >= 0) {
                    if (lrui < this.mLruProcessActivityStart) {
                        this.mLruProcessActivityStart--;
                    }
                    if (lrui < this.mLruProcessServiceStart) {
                        this.mLruProcessServiceStart--;
                    }
                    this.mLruProcesses.remove(lrui);
                }
                if (hasActivity) {
                    N = this.mLruProcesses.size();
                    if (processRecord.activities.size() != 0 && processRecord.recentTasks.size() <= 0) {
                        i = N;
                    } else if (this.mLruProcessActivityStart < N - 1) {
                        if (ActivityManagerDebugConfig.DEBUG_LRU) {
                            str = TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Adding to second-top of LRU activity list: ");
                            stringBuilder.append(processRecord);
                            Slog.d(str, stringBuilder.toString());
                        }
                        this.mLruProcesses.add(N - 1, processRecord);
                        uid = processRecord.info.uid;
                        int i3 = N - 2;
                        while (i3 > this.mLruProcessActivityStart && ((ProcessRecord) this.mLruProcesses.get(i3)).info.uid == uid) {
                            if (((ProcessRecord) this.mLruProcesses.get(i3 - 1)).info.uid != uid) {
                                if (ActivityManagerDebugConfig.DEBUG_LRU) {
                                    String str3 = TAG;
                                    StringBuilder stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("Pushing uid ");
                                    stringBuilder3.append(uid);
                                    stringBuilder3.append(" swapping at ");
                                    stringBuilder3.append(i3);
                                    stringBuilder3.append(": ");
                                    stringBuilder3.append(this.mLruProcesses.get(i3));
                                    stringBuilder3.append(" : ");
                                    i = N;
                                    stringBuilder3.append(this.mLruProcesses.get(i3 - 1));
                                    Slog.d(str3, stringBuilder3.toString());
                                } else {
                                    i = N;
                                }
                                ProcessRecord N2 = (ProcessRecord) this.mLruProcesses.get(i3);
                                this.mLruProcesses.set(i3, (ProcessRecord) this.mLruProcesses.get(i3 - 1));
                                this.mLruProcesses.set(i3 - 1, N2);
                                i3--;
                            } else {
                                i = N;
                            }
                            i3--;
                            N = i;
                        }
                        N = this.mLruProcessServiceStart;
                        i2 = 1;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_LRU) {
                        str2 = TAG;
                        stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Adding to top of LRU activity list: ");
                        stringBuilder2.append(processRecord);
                        Slog.d(str2, stringBuilder2.toString());
                    }
                    this.mLruProcesses.add(processRecord);
                    N = this.mLruProcessServiceStart;
                    i2 = 1;
                } else {
                    N = this.mLruProcessServiceStart;
                    if (processRecord2 != null) {
                        uid = this.mLruProcesses.lastIndexOf(processRecord2);
                        if (ActivityManagerDebugConfig.DEBUG_LRU && uid < 0) {
                            String str4 = TAG;
                            StringBuilder stringBuilder4 = new StringBuilder();
                            stringBuilder4.append("Unknown client ");
                            stringBuilder4.append(processRecord2);
                            stringBuilder4.append(" when updating ");
                            stringBuilder4.append(processRecord);
                            Slog.d(str4, stringBuilder4.toString());
                        }
                        if (uid <= lrui) {
                            uid = lrui;
                        }
                        if (uid >= 0 && N > uid) {
                            N = uid;
                        }
                    }
                    if (ActivityManagerDebugConfig.DEBUG_LRU) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Adding at ");
                        stringBuilder.append(N);
                        stringBuilder.append(" of LRU list: ");
                        stringBuilder.append(processRecord);
                        Slog.d(str, stringBuilder.toString());
                    }
                    this.mLruProcesses.add(N, processRecord);
                    uid = N - 1;
                    i2 = 1;
                    this.mLruProcessActivityStart++;
                    this.mLruProcessServiceStart++;
                    N = uid;
                }
                uid = processRecord.connections.size() - i2;
                int nextIndex = N;
                while (true) {
                    int j = uid;
                    if (j < 0) {
                        break;
                    }
                    int j2;
                    ConnectionRecord cr = (ConnectionRecord) processRecord.connections.valueAt(j);
                    if (cr.binding == null || cr.serviceDead || cr.binding.service == null || cr.binding.service.app == null || cr.binding.service.app.lruSeq == this.mLruSeq || cr.binding.service.app.persistent) {
                        j2 = j;
                        now2 = now;
                    } else {
                        j2 = j;
                        now2 = now;
                        nextIndex = updateLruProcessInternalLocked(cr.binding.service.app, now, nextIndex, "service connection", cr, processRecord);
                    }
                    uid = j2 - 1;
                    now = now2;
                }
                now2 = now;
                N = processRecord.conProviders.size() - 1;
                while (true) {
                    int j3 = N;
                    if (j3 >= 0) {
                        ContentProviderRecord contentProviderRecord = ((ContentProviderConnection) processRecord.conProviders.get(j3)).provider;
                        if (contentProviderRecord.proc == null || contentProviderRecord.proc.lruSeq == this.mLruSeq || contentProviderRecord.proc.persistent) {
                            i = j3;
                        } else {
                            ContentProviderRecord cpr = contentProviderRecord;
                            i = j3;
                            nextIndex = updateLruProcessInternalLocked(contentProviderRecord.proc, now2, nextIndex, "provider reference", contentProviderRecord, processRecord);
                        }
                        N = i - 1;
                    } else {
                        return;
                    }
                }
            }
            if (ActivityManagerDebugConfig.DEBUG_LRU) {
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Not moving, persistent: ");
                stringBuilder2.append(processRecord);
                Slog.d(str2, stringBuilder2.toString());
            }
        }
    }

    protected ProcessRecord getProcessRecordLocked(String processName, int uid, boolean keepIfLarge) {
        if (uid == 1000) {
            SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessNames.getMap().get(processName);
            if (procs == null) {
                return null;
            }
            int procCount = procs.size();
            for (int i = 0; i < procCount; i++) {
                int procUid = procs.keyAt(i);
                if (!UserHandle.isApp(procUid) && UserHandle.isSameUser(procUid, uid)) {
                    return (ProcessRecord) procs.valueAt(i);
                }
            }
        }
        ProcessRecord proc = (ProcessRecord) this.mProcessNames.get(processName, uid);
        if (proc != null && !keepIfLarge && this.mLastMemoryLevel > 0 && proc.setProcState >= 18) {
            if (ActivityManagerDebugConfig.DEBUG_PSS) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("May not keep ");
                stringBuilder.append(proc);
                stringBuilder.append(": pss=");
                stringBuilder.append(proc.lastCachedPss);
                Slog.d(str, stringBuilder.toString());
            }
            if (proc.lastCachedPss >= this.mProcessList.getCachedRestoreThresholdKb() && !"com.android.deskclock".equals(processName)) {
                if (proc.baseProcessTracker != null) {
                    proc.baseProcessTracker.reportCachedKill(proc.pkgList, proc.lastCachedPss);
                }
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append(Long.toString(proc.lastCachedPss));
                stringBuilder2.append("k from cached");
                proc.kill(stringBuilder2.toString(), true);
            }
        }
        return proc;
    }

    void notifyPackageUse(String packageName, int reason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                getPackageManagerInternalLocked().notifyPackageUse(packageName, reason);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    boolean isNextTransitionForward() {
        int transit = this.mWindowManager.getPendingAppTransition();
        return transit == 6 || transit == 8 || transit == 10;
    }

    boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ApplicationInfo info = new ApplicationInfo();
                info.uid = 1000;
                String str = processName;
                info.processName = str;
                String str2 = entryPoint;
                info.className = str2;
                info.packageName = PackageManagerService.PLATFORM_PACKAGE_NAME;
                info.seInfoUser = ":complete";
                info.targetSdkVersion = VERSION.SDK_INT;
                z = startProcessLocked(str, info, false, 0, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, null, true, true, uid, true, abiOverride, str2, entryPointArgs, crashHandler) != null;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    @GuardedBy("this")
    final ProcessRecord startProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName, boolean allowWhileBooting, boolean isolated, boolean keepIfLarge) {
        return startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingType, hostingName, allowWhileBooting, isolated, 0, keepIfLarge, null, null, null, null);
    }

    @GuardedBy("this")
    final ProcessRecord startProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName, boolean allowWhileBooting, boolean isolated, int isolatedUid, boolean keepIfLarge, String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) {
        ProcessRecord app;
        String str;
        String str2;
        String str3 = processName;
        ApplicationInfo applicationInfo = info;
        boolean z = knownToBeDead;
        boolean z2 = isolated;
        String[] strArr = entryPointArgs;
        long startTime = SystemClock.elapsedRealtime();
        if (z2) {
            boolean z3 = keepIfLarge;
            app = null;
        } else {
            app = getProcessRecordLocked(str3, applicationInfo.uid, keepIfLarge);
            checkTime(startTime, "startProcess: after getProcessRecord");
            String str4;
            if ((intentFlags & 4) == 0) {
                if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                    str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Clearing bad process: ");
                    stringBuilder.append(applicationInfo.uid);
                    stringBuilder.append(SliceAuthority.DELIMITER);
                    stringBuilder.append(applicationInfo.processName);
                    Slog.v(str, stringBuilder.toString());
                }
                this.mAppErrors.resetProcessCrashTimeLocked(applicationInfo);
                if (this.mAppErrors.isBadProcessLocked(applicationInfo)) {
                    EventLog.writeEvent(EventLogTags.AM_PROC_GOOD, new Object[]{Integer.valueOf(UserHandle.getUserId(applicationInfo.uid)), Integer.valueOf(applicationInfo.uid), applicationInfo.processName});
                    this.mAppErrors.clearBadProcessLocked(applicationInfo);
                    if (app != null) {
                        app.bad = false;
                    }
                }
                if (this.mBadPkgs.get(applicationInfo.packageName) != null) {
                    this.mBadPkgs.remove(applicationInfo.packageName);
                    str4 = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Clearing bad pkg: ");
                    stringBuilder2.append(applicationInfo.packageName);
                    Slog.d(str4, stringBuilder2.toString());
                }
            } else if (this.mAppErrors.isBadProcessLocked(applicationInfo)) {
                str4 = TAG;
                StringBuilder stringBuilder3 = new StringBuilder();
                stringBuilder3.append("Bad process: ");
                stringBuilder3.append(applicationInfo.uid);
                stringBuilder3.append(SliceAuthority.DELIMITER);
                stringBuilder3.append(applicationInfo.processName);
                Slog.v(str4, stringBuilder3.toString());
                return null;
            }
        }
        ProcessRecord app2 = app;
        String str5 = TAG;
        StringBuilder stringBuilder4 = new StringBuilder();
        stringBuilder4.append("startProcess: name=");
        stringBuilder4.append(str3);
        stringBuilder4.append(" app=");
        stringBuilder4.append(app2);
        stringBuilder4.append(" knownToBeDead=");
        stringBuilder4.append(z);
        stringBuilder4.append(" thread=");
        stringBuilder4.append(app2 != null ? app2.thread : null);
        stringBuilder4.append(" pid=");
        stringBuilder4.append(app2 != null ? app2.pid : -1);
        Slog.v(str5, stringBuilder4.toString());
        if (app2 != null && app2.pid > 0) {
            if ((z || app2.killed) && app2.thread != null) {
                if (ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityManagerDebugConfig.DEBUG_CLEANUP) {
                    str5 = TAG;
                    stringBuilder4 = new StringBuilder();
                    stringBuilder4.append("App died: ");
                    stringBuilder4.append(app2);
                    Slog.v(str5, stringBuilder4.toString());
                }
                checkTime(startTime, "startProcess: bad proc running, killing");
                killProcessGroup(app2.uid, app2.pid);
                handleAppDiedLocked(app2, true, true);
                checkTime(startTime, "startProcess: done killing old proc");
            } else {
                if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                    str5 = TAG;
                    stringBuilder4 = new StringBuilder();
                    stringBuilder4.append("App already running: ");
                    stringBuilder4.append(app2);
                    Slog.v(str5, stringBuilder4.toString());
                }
                app2.addPackage(applicationInfo.packageName, (long) applicationInfo.versionCode, this.mProcessStats);
                checkTime(startTime, "startProcess: done, added package to proc");
                return app2;
            }
        }
        String hostingNameStr = hostingName != null ? hostingName.flattenToShortString() : null;
        if (app2 == null) {
            checkTime(startTime, "startProcess: creating new process record");
            app2 = newProcessRecordLocked(applicationInfo, str3, z2, isolatedUid);
            if (app2 == null) {
                str = TAG;
                StringBuilder stringBuilder5 = new StringBuilder();
                stringBuilder5.append("Failed making new process record for ");
                stringBuilder5.append(str3);
                stringBuilder5.append(SliceAuthority.DELIMITER);
                stringBuilder5.append(applicationInfo.uid);
                stringBuilder5.append(" isolated=");
                stringBuilder5.append(z2);
                Slog.w(str, stringBuilder5.toString());
                return null;
            }
            app2.crashHandler = crashHandler;
            app2.isolatedEntryPoint = entryPoint;
            app2.isolatedEntryPointArgs = strArr;
            checkTime(startTime, "startProcess: done creating new process record");
        } else {
            int i = isolatedUid;
            str2 = entryPoint;
            Runnable runnable = crashHandler;
            app2.addPackage(applicationInfo.packageName, (long) applicationInfo.versionCode, this.mProcessStats);
            checkTime(startTime, "startProcess: added package to existing proc");
        }
        if (this.mProcessesReady || isAllowedWhileBooting(applicationInfo) || allowWhileBooting) {
            checkTime(startTime, "startProcess: stepping in to startProcess");
            app2.entryPointArgs = strArr;
            if (!(applicationInfo.hwHbsUid == -1 || app2 == null)) {
                app2.hwHbsUid = applicationInfo.hwHbsUid;
            }
            boolean success = startProcessLocked(app2, hostingType, hostingNameStr, abiOverride);
            checkTime(startTime, "startProcess: done starting proc!");
            return success ? app2 : null;
        }
        if (!this.mProcessesOnHold.contains(app2)) {
            this.mProcessesOnHold.add(app2);
        }
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            str2 = TAG;
            StringBuilder stringBuilder6 = new StringBuilder();
            stringBuilder6.append("System not ready, putting on hold: ");
            stringBuilder6.append(app2);
            Slog.v(str2, stringBuilder6.toString());
        }
        checkTime(startTime, "startProcess: returning with proc on hold");
        return app2;
    }

    boolean isAllowedWhileBooting(ApplicationInfo ai) {
        return (ai.flags & 8) != 0;
    }

    @GuardedBy("this")
    private final void startProcessLocked(ProcessRecord app, String hostingType, String hostingNameStr) {
        startProcessLocked(app, hostingType, hostingNameStr, null);
    }

    @GuardedBy("this")
    protected boolean startProcessLocked(ProcessRecord app, String hostingType, String hostingNameStr, String abiOverride) {
        return startProcessLocked(app, hostingType, hostingNameStr, false, abiOverride);
    }

    /* JADX WARNING: Removed duplicated region for block: B:80:0x019e A:{Catch:{ RuntimeException -> 0x0391 }} */
    /* JADX WARNING: Removed duplicated region for block: B:84:0x01ab A:{SYNTHETIC, Splitter: B:84:0x01ab} */
    /* JADX WARNING: Removed duplicated region for block: B:91:0x01bf A:{Catch:{ RuntimeException -> 0x0391 }} */
    /* JADX WARNING: Removed duplicated region for block: B:94:0x01d0 A:{SYNTHETIC, Splitter: B:94:0x01d0} */
    /* JADX WARNING: Removed duplicated region for block: B:101:0x01ea A:{SYNTHETIC, Splitter: B:101:0x01ea} */
    /* JADX WARNING: Removed duplicated region for block: B:108:0x0203 A:{Catch:{ RuntimeException -> 0x0391 }} */
    /* JADX WARNING: Removed duplicated region for block: B:111:0x0213 A:{Catch:{ RuntimeException -> 0x0391 }} */
    /* JADX WARNING: Removed duplicated region for block: B:114:0x0219 A:{SYNTHETIC, Splitter: B:114:0x0219} */
    /* JADX WARNING: Removed duplicated region for block: B:121:0x0234 A:{SYNTHETIC, Splitter: B:121:0x0234} */
    /* JADX WARNING: Removed duplicated region for block: B:131:0x026d A:{Catch:{ all -> 0x02ca, RemoteException -> 0x015a, RuntimeException -> 0x0153 }} */
    /* JADX WARNING: Removed duplicated region for block: B:130:0x026b A:{Catch:{ all -> 0x02ca, RemoteException -> 0x015a, RuntimeException -> 0x0153 }} */
    /* JADX WARNING: Missing block: B:86:0x01ad, code:
            if (r14.mSafeMode == true) goto L_0x01af;
     */
    /* JADX WARNING: Missing block: B:96:0x01d7, code:
            if ("true".equals(r7) != false) goto L_0x01d9;
     */
    /* JADX WARNING: Missing block: B:103:0x01f1, code:
            if ("true".equals(r5) != false) goto L_0x01f3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    private final boolean startProcessLocked(ProcessRecord app, String hostingType, String hostingNameStr, boolean disableHiddenApiChecks, String abiOverride) {
        ThreadPolicy oldPolicy;
        RuntimeException e;
        long j;
        boolean z;
        String str;
        ProcessRecord processRecord;
        ProcessRecord processRecord2 = app;
        if (processRecord2.pendingStart) {
            return true;
        }
        String str2;
        StringBuilder stringBuilder;
        if (this.mSystemReady) {
            this.mDAProxy.noteProcessStart(processRecord2.info.packageName, processRecord2.processName, processRecord2.pid, processRecord2.uid, true, hostingType, hostingNameStr);
        }
        String str3 = hostingType;
        if ("activity".equals(str3)) {
            processRecord2.launchfromActivity = true;
        } else {
            processRecord2.launchfromActivity = false;
        }
        long startTime = SystemClock.elapsedRealtime();
        if (processRecord2.pid > 0 && processRecord2.pid != MY_PID) {
            checkTime(startTime, "startProcess: removing from pids map");
            synchronized (this.mPidsSelfLocked) {
                this.mPidsSelfLocked.remove(processRecord2.pid);
                this.mHandler.removeMessages(20, processRecord2);
            }
            this.mDAProxy.notifyProcessDied(processRecord2.pid, processRecord2.uid);
            checkTime(startTime, "startProcess: done removing from pids map");
            processRecord2.setPid(0);
            processRecord2.renderThreadTid = 0;
            str2 = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("startProcess: reset pid for ");
            stringBuilder.append(processRecord2);
            Slog.i(str2, stringBuilder.toString());
        }
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES && this.mProcessesOnHold.contains(processRecord2)) {
            str2 = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("startProcessLocked removing on hold: ");
            stringBuilder.append(processRecord2);
            Slog.v(str2, stringBuilder.toString());
        }
        this.mProcessesOnHold.remove(processRecord2);
        checkTime(startTime, "startProcess: starting to update cpu stats");
        updateCpuStats();
        checkTime(startTime, "startProcess: done updating cpu stats");
        try {
            int[] gids;
            int mountExternal;
            int mountExternal2;
            AppGlobals.getPackageManager().checkPackageStartable(processRecord2.info.packageName, UserHandle.getUserId(processRecord2.uid));
            int uid = processRecord2.uid;
            if (processRecord2.isolated) {
                gids = null;
                mountExternal = 0;
            } else {
                int[] permGids = null;
                try {
                    int[] gids2;
                    checkTime(startTime, "startProcess: getting gids from package manager");
                    permGids = AppGlobals.getPackageManager().getPackageGids(processRecord2.info.packageName, 268435456, processRecord2.userId);
                    mountExternal2 = ((StorageManagerInternal) LocalServices.getService(StorageManagerInternal.class)).getExternalStorageMountMode(uid, processRecord2.info.packageName);
                    if (ArrayUtils.isEmpty(permGids)) {
                        gids2 = new int[3];
                    } else {
                        gids2 = new int[(permGids.length + 3)];
                        System.arraycopy(permGids, 0, gids2, 3, permGids.length);
                    }
                    gids2[0] = UserHandle.getSharedAppGid(UserHandle.getAppId(uid));
                    gids2[1] = UserHandle.getCacheAppGid(UserHandle.getAppId(uid));
                    gids2[2] = UserHandle.getUserGid(UserHandle.getUserId(uid));
                    if (gids2[0] == -1) {
                        gids2[0] = gids2[2];
                    }
                    if (gids2[1] == -1) {
                        gids2[1] = gids2[2];
                    }
                    mountExternal = mountExternal2;
                    gids = this.mHwAMSEx.changeGidsIfNeeded(processRecord2, gids2);
                } catch (RemoteException e2) {
                    throw e2.rethrowAsRuntimeException();
                } catch (RuntimeException e3) {
                    e = e3;
                    j = startTime;
                    z = false;
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Failure starting process ");
                    processRecord = app;
                    stringBuilder.append(processRecord.processName);
                    Slog.e(str, stringBuilder.toString(), e);
                    forceStopPackageLocked(processRecord.info.packageName, UserHandle.getAppId(processRecord.uid), false, false, true, false, false, UserHandle.getUserId(processRecord.uid), "start failure");
                    return z;
                } catch (Throwable th) {
                    StrictMode.setThreadPolicy(oldPolicy);
                }
            }
            try {
                int uid2;
                String genDebugInfoProperty;
                String genMiniDebugInfoProperty;
                int policy;
                checkTime(startTime, "startProcess: building args");
                if (this.mFactoryTest != 0) {
                    if (this.mFactoryTest == 1 && this.mTopComponent != null && processRecord2.processName.equals(this.mTopComponent.getPackageName())) {
                        uid = 0;
                    }
                    if (this.mFactoryTest == 2 && (processRecord2.info.flags & 16) != 0) {
                        String wrapperFileName;
                        uid2 = 0;
                        mountExternal2 = 0;
                        if ((processRecord2.info.flags & 2) != 0) {
                            mountExternal2 = ((0 | 1) | 256) | 2;
                        }
                        if ((processRecord2.info.flags & 16384) == 0) {
                        }
                        mountExternal2 |= 8;
                        if ("1".equals(SystemProperties.get("debug.checkjni"))) {
                            mountExternal2 |= 2;
                        }
                        genDebugInfoProperty = SystemProperties.get("debug.generate-debug-info");
                        if (!"1".equals(genDebugInfoProperty)) {
                        }
                        mountExternal2 |= 32;
                        genMiniDebugInfoProperty = SystemProperties.get("dalvik.vm.minidebuginfo");
                        if (!"1".equals(genMiniDebugInfoProperty)) {
                        }
                        mountExternal2 |= 2048;
                        if ("1".equals(SystemProperties.get("debug.jni.logging"))) {
                            mountExternal2 |= 16;
                        }
                        if ("1".equals(SystemProperties.get("debug.assert"))) {
                            mountExternal2 |= 4;
                        }
                        if (this.mNativeDebuggingApp != null) {
                            if (this.mNativeDebuggingApp.equals(processRecord2.processName)) {
                                mountExternal2 = ((mountExternal2 | 64) | 32) | 128;
                                this.mNativeDebuggingApp = null;
                            }
                        }
                        if (processRecord2.info.isPrivilegedApp()) {
                            if (DexManager.isPackageSelectedToRunOob(processRecord2.pkgList.keySet())) {
                                mountExternal2 |= 1024;
                            }
                        }
                        if (!(disableHiddenApiChecks || this.mHiddenApiBlacklist.isDisabled())) {
                            processRecord2.info.maybeUpdateHiddenApiEnforcementPolicy(this.mHiddenApiBlacklist.getPolicyForPrePApps(), this.mHiddenApiBlacklist.getPolicyForPApps());
                            policy = processRecord2.info.getHiddenApiEnforcementPolicy();
                            uid = policy << Zygote.API_ENFORCEMENT_POLICY_SHIFT;
                            if ((uid & 12288) != uid) {
                                mountExternal2 |= uid;
                            } else {
                                StringBuilder stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("Invalid API policy: ");
                                stringBuilder2.append(policy);
                                throw new IllegalStateException(stringBuilder2.toString());
                            }
                        }
                        int runtimeFlags = mountExternal2;
                        str = null;
                        if ((processRecord2.info.flags & 2) != 0) {
                            StringBuilder stringBuilder3 = new StringBuilder();
                            stringBuilder3.append(processRecord2.info.nativeLibraryDir);
                            stringBuilder3.append("/wrap.sh");
                            wrapperFileName = stringBuilder3.toString();
                            oldPolicy = StrictMode.allowThreadDiskReads();
                            if (new File(wrapperFileName).exists()) {
                                stringBuilder3 = new StringBuilder();
                                stringBuilder3.append("/system/bin/logwrapper ");
                                stringBuilder3.append(wrapperFileName);
                                str = stringBuilder3.toString();
                            }
                            StrictMode.setThreadPolicy(oldPolicy);
                        }
                        str2 = str;
                        str = abiOverride != null ? abiOverride : processRecord2.info.primaryCpuAbi;
                        if (str == null) {
                            str = Build.SUPPORTED_ABIS[0];
                        }
                        String requiredAbi = str;
                        str = null;
                        if (processRecord2.info.primaryCpuAbi != null) {
                            str = VMRuntime.getInstructionSet(processRecord2.info.primaryCpuAbi);
                        }
                        String instructionSet = str;
                        processRecord2.gids = gids;
                        processRecord2.requiredAbi = requiredAbi;
                        processRecord2.instructionSet = instructionSet;
                        if (TextUtils.isEmpty(processRecord2.info.seInfoUser)) {
                            str = TAG;
                            wrapperFileName = "SELinux tag not defined";
                            StringBuilder stringBuilder4 = new StringBuilder();
                            try {
                                stringBuilder4.append("SELinux tag not defined for ");
                                stringBuilder4.append(processRecord2.info.packageName);
                                stringBuilder4.append(" (uid ");
                                stringBuilder4.append(processRecord2.uid);
                                stringBuilder4.append(")");
                                Slog.wtf(str, wrapperFileName, new IllegalStateException(stringBuilder4.toString()));
                            } catch (RuntimeException e4) {
                                e = e4;
                                j = startTime;
                                z = false;
                            }
                        }
                        try {
                            StringBuilder stringBuilder5 = new StringBuilder();
                            stringBuilder5.append(processRecord2.info.seInfo);
                            stringBuilder5.append(TextUtils.isEmpty(processRecord2.info.seInfoUser) ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : processRecord2.info.seInfoUser);
                            String entryPoint = "android.app.ActivityThread";
                            z = false;
                            return startProcessLocked(str3, hostingNameStr, "android.app.ActivityThread", processRecord2, uid2, gids, runtimeFlags, mountExternal, stringBuilder5.toString(), requiredAbi, instructionSet, str2, startTime);
                        } catch (RuntimeException e5) {
                            e = e5;
                            j = startTime;
                            z = false;
                            str = TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Failure starting process ");
                            processRecord = app;
                            stringBuilder.append(processRecord.processName);
                            Slog.e(str, stringBuilder.toString(), e);
                            forceStopPackageLocked(processRecord.info.packageName, UserHandle.getAppId(processRecord.uid), false, false, true, false, false, UserHandle.getUserId(processRecord.uid), "start failure");
                            return z;
                        }
                    }
                }
                uid2 = uid;
                mountExternal2 = 0;
                if ((processRecord2.info.flags & 2) != 0) {
                }
                if ((processRecord2.info.flags & 16384) == 0) {
                }
                mountExternal2 |= 8;
                if ("1".equals(SystemProperties.get("debug.checkjni"))) {
                }
                genDebugInfoProperty = SystemProperties.get("debug.generate-debug-info");
                if ("1".equals(genDebugInfoProperty)) {
                }
                mountExternal2 |= 32;
                genMiniDebugInfoProperty = SystemProperties.get("dalvik.vm.minidebuginfo");
                if ("1".equals(genMiniDebugInfoProperty)) {
                }
                mountExternal2 |= 2048;
                if ("1".equals(SystemProperties.get("debug.jni.logging"))) {
                }
                if ("1".equals(SystemProperties.get("debug.assert"))) {
                }
                if (this.mNativeDebuggingApp != null) {
                }
                if (processRecord2.info.isPrivilegedApp()) {
                }
                processRecord2.info.maybeUpdateHiddenApiEnforcementPolicy(this.mHiddenApiBlacklist.getPolicyForPrePApps(), this.mHiddenApiBlacklist.getPolicyForPApps());
                policy = processRecord2.info.getHiddenApiEnforcementPolicy();
                uid = policy << Zygote.API_ENFORCEMENT_POLICY_SHIFT;
                if ((uid & 12288) != uid) {
                }
            } catch (RuntimeException e6) {
                e = e6;
                j = startTime;
                z = false;
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Failure starting process ");
                processRecord = app;
                stringBuilder.append(processRecord.processName);
                Slog.e(str, stringBuilder.toString(), e);
                forceStopPackageLocked(processRecord.info.packageName, UserHandle.getAppId(processRecord.uid), false, false, true, false, false, UserHandle.getUserId(processRecord.uid), "start failure");
                return z;
            }
        } catch (RemoteException e22) {
            j = startTime;
            z = false;
            throw e22.rethrowAsRuntimeException();
        } catch (RuntimeException e7) {
            e = e7;
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Failure starting process ");
            processRecord = app;
            stringBuilder.append(processRecord.processName);
            Slog.e(str, stringBuilder.toString(), e);
            forceStopPackageLocked(processRecord.info.packageName, UserHandle.getAppId(processRecord.uid), false, false, true, false, false, UserHandle.getUserId(processRecord.uid), "start failure");
            return z;
        }
    }

    @GuardedBy("this")
    private boolean startProcessLocked(String hostingType, String hostingNameStr, String entryPoint, ProcessRecord app, int uid, int[] gids, int runtimeFlags, int mountExternal, String seInfo, String requiredAbi, String instructionSet, String invokeWith, long startTime) {
        ProcessRecord processRecord = app;
        processRecord.pendingStart = true;
        boolean z = false;
        processRecord.killedByAm = false;
        processRecord.removed = false;
        processRecord.killed = false;
        long startSeq = 1 + this.mProcStartSeqCounter;
        this.mProcStartSeqCounter = startSeq;
        processRecord.startSeq = startSeq;
        processRecord.setStartParams(uid, hostingType, hostingNameStr, seInfo, startTime);
        if (this.mConstants.FLAG_PROCESS_START_ASYNC) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Posting procStart msg for ");
                stringBuilder.append(app.toShortString());
                Slog.i(str, stringBuilder.toString());
            }
            Handler handler = this.mProcStartHandler;
            -$$Lambda$ActivityManagerService$UgpguyCBuObHjnmry_xkrJGkFi0 -__lambda_activitymanagerservice_ugpguycbuobhjnmry_xkrjgkfi0 = r1;
            -$$Lambda$ActivityManagerService$UgpguyCBuObHjnmry_xkrJGkFi0 -__lambda_activitymanagerservice_ugpguycbuobhjnmry_xkrjgkfi02 = new -$$Lambda$ActivityManagerService$UgpguyCBuObHjnmry_xkrJGkFi0(this, processRecord, startSeq, invokeWith, entryPoint, gids, runtimeFlags, mountExternal, requiredAbi, instructionSet);
            handler.post(-__lambda_activitymanagerservice_ugpguycbuobhjnmry_xkrjgkfi0);
            return true;
        }
        boolean z2 = true;
        ProcessRecord processRecord2 = processRecord;
        try {
            ProcessStartResult startResult = startProcess(hostingType, entryPoint, processRecord, uid, gids, runtimeFlags, mountExternal, seInfo, requiredAbi, instructionSet, invokeWith, startTime);
            handleProcessStartedLocked(processRecord2, startResult.pid, startResult.usingWrapper, startSeq, false);
        } catch (RuntimeException e) {
            String str2 = TAG;
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Failure starting process ");
            stringBuilder2.append(processRecord2.processName);
            Slog.e(str2, stringBuilder2.toString(), e);
            processRecord2.pendingStart = false;
            forceStopPackageLocked(processRecord2.info.packageName, UserHandle.getAppId(processRecord2.uid), false, false, true, false, false, UserHandle.getUserId(processRecord2.userId), "start failure");
        }
        if (processRecord2.pid > 0) {
            z = z2;
        }
        return z;
    }

    private ProcessStartResult startProcess(String hostingType, String entryPoint, ProcessRecord app, int uid, int[] gids, int runtimeFlags, int mountExternal, String seInfo, String requiredAbi, String instructionSet, String invokeWith, long startTime) {
        Throwable th;
        long j;
        long j2;
        ProcessRecord processRecord = app;
        int i = uid;
        long j3 = startTime;
        int i2;
        try {
            String str;
            ProcessStartResult startResult;
            if (Jlog.isPerfTest()) {
                String str2 = "ActivityManagerService";
                str = "startProcess";
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("processname=");
                stringBuilder.append(processRecord.processName);
                stringBuilder.append("&pkg=");
                stringBuilder.append(processRecord.hostingNameStr != null ? processRecord.hostingNameStr : "unknow");
                Jlog.i(3030, Jlog.getMessage(str2, str, stringBuilder.toString()));
            }
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Start proc: ");
            stringBuilder2.append(processRecord.processName);
            Trace.traceBegin(64, stringBuilder2.toString());
            checkTime(j3, "startProcess: asking zygote to start proc");
            IHwActivityManagerServiceEx iHwActivityManagerServiceEx = this.mHwAMSEx;
            String[] strArr = new String[1];
            StringBuilder stringBuilder3 = new StringBuilder();
            stringBuilder3.append("seq=");
            stringBuilder3.append(processRecord.startSeq);
            strArr[0] = stringBuilder3.toString();
            String[] entryPointArgs = iHwActivityManagerServiceEx.updateEntryPointArgsForPCMode(processRecord, strArr);
            if (hostingType.equals("webview_service")) {
                try {
                    startResult = Process.startWebView(entryPoint, processRecord.processName, i, i, gids, runtimeFlags, mountExternal, processRecord.info.targetSdkVersion, seInfo, requiredAbi, instructionSet, processRecord.info.dataDir, null, entryPointArgs);
                    i2 = uid;
                } catch (Throwable th2) {
                    th = th2;
                    i2 = uid;
                    j = 64;
                    j2 = startTime;
                    Trace.traceEnd(j);
                    throw th;
                }
            }
            int effectiveUid = uid;
            if (processRecord == null || !processRecord.processName.startsWith("com.huawei.hbs.framework:HbsWebAppActivity")) {
                i2 = uid;
            } else {
                i2 = uid;
                try {
                    effectiveUid = this.mHwAMSEx.getEffectiveUid(processRecord.hwHbsUid, i2);
                } catch (Throwable th3) {
                    th = th3;
                    j = 64;
                    j2 = startTime;
                    Trace.traceEnd(j);
                    throw th;
                }
            }
            startResult = Process.start(entryPoint, processRecord.processName, effectiveUid, this.mHwAMSEx.changeGidIfRepairMode(i2, processRecord.processName), gids, runtimeFlags, mountExternal, processRecord.info.targetSdkVersion, seInfo, requiredAbi, instructionSet, processRecord.info.dataDir, invokeWith, entryPointArgs);
            if (Jlog.isPerfTest()) {
                str = "ActivityManagerService";
                String str3 = "processname";
                StringBuilder stringBuilder4 = new StringBuilder();
                stringBuilder4.append("pid=");
                stringBuilder4.append(startResult != null ? startResult.pid : 0);
                stringBuilder4.append("&processname=");
                stringBuilder4.append(processRecord.processName);
                Jlog.i(3031, Jlog.getMessage(str, str3, stringBuilder4.toString()));
            }
            if (startResult != null) {
                HwFrameworkFactory.getHwBehaviorCollectManager().sendEvent(3, processRecord.uid, startResult.pid, processRecord.processName, null);
            }
            try {
                checkTime(startTime, "startProcess: returned from zygote!");
                Trace.traceEnd(64);
                return startResult;
            } catch (Throwable th4) {
                th = th4;
                j = 64;
                Trace.traceEnd(j);
                throw th;
            }
        } catch (Throwable th5) {
            th = th5;
            j = 64;
            j2 = j3;
            i2 = i;
            Trace.traceEnd(j);
            throw th;
        }
    }

    @GuardedBy("this")
    private String isProcStartValidLocked(ProcessRecord app, long expectedStartSeq) {
        StringBuilder sb = null;
        if (app.killedByAm) {
            if (null == null) {
                sb = new StringBuilder();
            }
            sb.append("killedByAm=true;");
        }
        if (this.mProcessNames.get(app.processName, app.uid) != app) {
            if (sb == null) {
                sb = new StringBuilder();
            }
            sb.append("No entry in mProcessNames;");
        }
        if (!app.pendingStart) {
            if (sb == null) {
                sb = new StringBuilder();
            }
            sb.append("pendingStart=false;");
        }
        if (app.startSeq > expectedStartSeq) {
            if (sb == null) {
                sb = new StringBuilder();
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("seq=");
            stringBuilder.append(app.startSeq);
            stringBuilder.append(",expected=");
            stringBuilder.append(expectedStartSeq);
            stringBuilder.append(";");
            sb.append(stringBuilder.toString());
        }
        return sb == null ? null : sb.toString();
    }

    @GuardedBy("this")
    private boolean handleProcessStartedLocked(ProcessRecord pending, ProcessStartResult startResult, long expectedStartSeq) {
        if (this.mPendingStarts.get(expectedStartSeq) == null) {
            if (pending.pid == startResult.pid) {
                pending.usingWrapper = startResult.usingWrapper;
            }
            return false;
        }
        return handleProcessStartedLocked(pending, startResult.pid, startResult.usingWrapper, expectedStartSeq, false);
    }

    void updateUsageStats(ActivityRecord component, boolean resumed) {
        int i;
        if (ActivityManagerDebugConfig.DEBUG_SWITCH) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("updateUsageStats: comp=");
            stringBuilder.append(component);
            stringBuilder.append("res=");
            stringBuilder.append(resumed);
            Slog.d(str, stringBuilder.toString());
        }
        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
        int i2 = component.app.uid;
        String packageName = component.realActivity.getPackageName();
        String shortClassName = component.realActivity.getShortClassName();
        if (resumed) {
            i = 1;
        } else {
            i = 0;
        }
        StatsLog.write(42, i2, packageName, shortClassName, i);
        ActivityStack stack = component.getStack();
        if (resumed) {
            if (this.mUsageStatsService != null) {
                if (stack == null || !HwPCUtils.isPcDynamicStack(stack.mStackId)) {
                    this.mUsageStatsService.reportEvent(component.realActivity, component.userId, 1);
                } else {
                    this.mHwAMSEx.updateUsageStatsForPCMode(component, resumed, this.mUsageStatsService);
                }
            }
            synchronized (stats) {
                stats.noteActivityResumedLocked(component.app.uid);
            }
            return;
        }
        if (this.mUsageStatsService != null && (stack == null || !HwPCUtils.isPcDynamicStack(stack.mStackId))) {
            this.mUsageStatsService.reportEvent(component.realActivity, component.userId, 2);
        }
        synchronized (stats) {
            stats.noteActivityPausedLocked(component.app.uid);
        }
    }

    Intent getHomeIntent() {
        Intent intent = new Intent(this.mTopAction, this.mTopData != null ? Uri.parse(this.mTopData) : null);
        intent.setComponent(this.mTopComponent);
        intent.addFlags(256);
        if (this.mFactoryTest != 1) {
            intent.addCategory("android.intent.category.HOME");
            intent.addFlags(512);
        }
        return intent;
    }

    boolean startHomeActivityLocked(int userId, String reason) {
        if (this.mFactoryTest == 1 && this.mTopAction == null) {
            return false;
        }
        Intent intent = getHomeIntent();
        ActivityInfo aInfo = resolveActivityInfo(intent, 1024, userId);
        if (aInfo != null) {
            intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));
            aInfo = new ActivityInfo(aInfo);
            aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);
            ProcessRecord app = getProcessRecordLocked(aInfo.processName, aInfo.applicationInfo.uid, true);
            if (app != null && "moveUserToForeground".equals(reason)) {
                return true;
            }
            if (app == null || app.instr == null) {
                intent.setFlags(intent.getFlags() | 268435456);
                int resolvedUserId = UserHandle.getUserId(aInfo.applicationInfo.uid);
                String myReason = new StringBuilder();
                myReason.append(reason);
                myReason.append(":");
                myReason.append(userId);
                myReason.append(":");
                myReason.append(resolvedUserId);
                this.mActivityStartController.startHomeActivity(intent, aInfo, myReason.toString());
            }
        } else {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("No home screen found for ");
            stringBuilder.append(intent);
            Slog.wtf(str, stringBuilder.toString(), new Throwable());
        }
        return true;
    }

    private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId) {
        ComponentName comp = intent.getComponent();
        if (comp != null) {
            try {
                return AppGlobals.getPackageManager().getActivityInfo(comp, flags, userId);
            } catch (RemoteException e) {
                return null;
            }
        }
        ResolveInfo info = AppGlobals.getPackageManager().resolveIntent(intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), flags, userId);
        if (info != null) {
            return info.activityInfo;
        }
        return null;
    }

    boolean getCheckedForSetup() {
        return this.mCheckedForSetup;
    }

    void setCheckedForSetup(boolean checked) {
        this.mCheckedForSetup = checked;
    }

    CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai) {
        return this.mCompatModePackages.compatibilityInfoForPackageLocked(ai);
    }

    void enforceNotIsolatedCaller(String caller) {
        if (UserHandle.isIsolated(Binder.getCallingUid())) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Isolated process not allowed to call ");
            stringBuilder.append(caller);
            throw new SecurityException(stringBuilder.toString());
        }
    }

    public int getFrontActivityScreenCompatMode() {
        int frontActivityScreenCompatModeLocked;
        enforceNotIsolatedCaller("getFrontActivityScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                frontActivityScreenCompatModeLocked = this.mCompatModePackages.getFrontActivityScreenCompatModeLocked();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return frontActivityScreenCompatModeLocked;
    }

    public void setFrontActivityScreenCompatMode(int mode) {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setFrontActivityScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCompatModePackages.setFrontActivityScreenCompatModeLocked(mode);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public int getPackageScreenCompatMode(String packageName) {
        int packageScreenCompatModeLocked;
        enforceNotIsolatedCaller("getPackageScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                packageScreenCompatModeLocked = this.mCompatModePackages.getPackageScreenCompatModeLocked(packageName);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return packageScreenCompatModeLocked;
    }

    public void setPackageScreenCompatMode(String packageName, int mode) {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCompatModePackages.setPackageScreenCompatModeLocked(packageName, mode);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean getPackageAskScreenCompat(String packageName) {
        boolean packageAskCompatModeLocked;
        enforceNotIsolatedCaller("getPackageAskScreenCompat");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                packageAskCompatModeLocked = this.mCompatModePackages.getPackageAskCompatModeLocked(packageName);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return packageAskCompatModeLocked;
    }

    public void setPackageAskScreenCompat(String packageName, boolean ask) {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageAskScreenCompat");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCompatModePackages.setPackageAskCompatModeLocked(packageName, ask);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private boolean hasUsageStatsPermission(String callingPackage) {
        int mode = this.mAppOpsService.noteOperation(43, Binder.getCallingUid(), callingPackage);
        boolean z = false;
        if (mode == 3) {
            if (checkCallingPermission("android.permission.PACKAGE_USAGE_STATS") == 0) {
                z = true;
            }
            return z;
        }
        if (mode == 0) {
            z = true;
        }
        return z;
    }

    public int getPackageProcessState(String packageName, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        int procState = 19;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord proc = (ProcessRecord) this.mLruProcesses.get(i);
                    if (procState > proc.setProcState && (proc.pkgList.containsKey(packageName) || (proc.pkgDeps != null && proc.pkgDeps.contains(packageName)))) {
                        procState = proc.setProcState;
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return procState;
    }

    public boolean setProcessMemoryTrimLevel(String process, int userId, int level) throws RemoteException {
        return setProcessMemoryTrimLevel(process, userId, level, false);
    }

    public boolean setProcessMemoryTrimLevel(String process, int userId, int level, boolean iAware) throws RemoteException {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = findProcessLocked(process, userId, "setProcessMemoryTrimLevel");
                if (app == null) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unknown process: ");
                    stringBuilder.append(process);
                    throw new IllegalArgumentException(stringBuilder.toString());
                } else if (app.thread != null) {
                    z = app.trimMemoryLevel;
                    if (z >= level) {
                        throw new IllegalArgumentException("Unable to set a higher trim level than current level");
                    } else if (level < 20 || ((iAware && app.curProcState >= 4) || app.curProcState > 5)) {
                        z = true;
                        if (iAware) {
                            app.thread.iawareTrimMemory(level, iAware);
                        } else {
                            app.thread.scheduleTrimMemory(level);
                            app.trimMemoryLevel = level;
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                    } else {
                        throw new IllegalArgumentException("Unable to set a background trim level on a foreground process");
                    }
                } else {
                    throw new IllegalArgumentException("Process has no app thread");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    private void dispatchProcessesChanged() {
        synchronized (this) {
            try {
                int j;
                boostPriorityForLockedSection();
                int N = this.mPendingProcessChanges.size();
                if (this.mActiveProcessChanges.length < N) {
                    this.mActiveProcessChanges = new ProcessChangeItem[N];
                }
                this.mPendingProcessChanges.toArray(this.mActiveProcessChanges);
                this.mPendingProcessChanges.clear();
                if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("*** Delivering ");
                    stringBuilder.append(N);
                    stringBuilder.append(" process changes");
                    Slog.i(str, stringBuilder.toString());
                }
                int i = this.mProcessObservers.beginBroadcast();
                while (true) {
                    j = 0;
                    if (i <= 0) {
                        break;
                    }
                    i--;
                    IProcessObserver observer = (IProcessObserver) this.mProcessObservers.getBroadcastItem(i);
                    if (observer != null) {
                        while (j < N) {
                            try {
                                ProcessChangeItem item = this.mActiveProcessChanges[j];
                                if ((item.changes & 1) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                                        String str2 = TAG;
                                        StringBuilder stringBuilder2 = new StringBuilder();
                                        stringBuilder2.append("ACTIVITIES CHANGED pid=");
                                        stringBuilder2.append(item.pid);
                                        stringBuilder2.append(" uid=");
                                        stringBuilder2.append(item.uid);
                                        stringBuilder2.append(": ");
                                        stringBuilder2.append(item.foregroundActivities);
                                        Slog.i(str2, stringBuilder2.toString());
                                    }
                                    observer.onForegroundActivitiesChanged(item.pid, item.uid, item.foregroundActivities);
                                }
                                j++;
                            } catch (RemoteException e) {
                            }
                        }
                    }
                }
                this.mProcessObservers.finishBroadcast();
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        while (j < N) {
                            this.mAvailProcessChanges.add(this.mActiveProcessChanges[j]);
                            j++;
                        }
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void dispatchProcessDied(int pid, int uid) {
        int i = this.mProcessObservers.beginBroadcast();
        while (i > 0) {
            i--;
            IProcessObserver observer = (IProcessObserver) this.mProcessObservers.getBroadcastItem(i);
            if (observer != null) {
                try {
                    observer.onProcessDied(pid, uid);
                } catch (RemoteException e) {
                }
            }
        }
        this.mProcessObservers.finishBroadcast();
    }

    /* JADX WARNING: Removed duplicated region for block: B:67:? A:{SYNTHETIC, RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:43:0x00fe  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @VisibleForTesting
    void dispatchUidsChanged() {
        long end;
        long start = SystemClock.uptimeMillis();
        synchronized (this) {
            try {
                int i;
                boostPriorityForLockedSection();
                int N = this.mPendingUidChanges.size();
                if (this.mActiveUidChanges.length < N) {
                    this.mActiveUidChanges = new ChangeItem[N];
                }
                int j = 0;
                for (i = 0; i < N; i++) {
                    ChangeItem change = (ChangeItem) this.mPendingUidChanges.get(i);
                    this.mActiveUidChanges[i] = change;
                    if (change.uidRecord != null) {
                        change.uidRecord.pendingChange = null;
                        change.uidRecord = null;
                    }
                }
                this.mPendingUidChanges.clear();
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("*** Delivering ");
                    stringBuilder.append(N);
                    stringBuilder.append(" uid changes");
                    Slog.i(str, stringBuilder.toString());
                }
                this.mUidChangeDispatchCount += N;
                i = this.mUidObservers.beginBroadcast();
                while (i > 0) {
                    i--;
                    dispatchUidsChangedForObserver((IUidObserver) this.mUidObservers.getBroadcastItem(i), (UidObserverRegistration) this.mUidObservers.getBroadcastCookie(i), N);
                }
                this.mUidObservers.finishBroadcast();
                if (this.mUidObservers.getRegisteredCallbackCount() > 0) {
                    for (int j2 = 0; j2 < N; j2++) {
                        ChangeItem item = this.mActiveUidChanges[j2];
                        if ((item.change & 1) != 0) {
                            this.mValidateUids.remove(item.uid);
                        } else {
                            UidRecord validateUid = (UidRecord) this.mValidateUids.get(item.uid);
                            if (validateUid == null) {
                                validateUid = new UidRecord(item.uid);
                                this.mValidateUids.put(item.uid, validateUid);
                            }
                            if ((item.change & 2) != 0) {
                                validateUid.idle = true;
                            } else if ((item.change & 4) != 0) {
                                validateUid.idle = false;
                            }
                            int i2 = item.processState;
                            validateUid.setProcState = i2;
                            validateUid.curProcState = i2;
                            validateUid.lastDispatchedProcStateSeq = item.procStateSeq;
                        }
                    }
                }
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        while (j < N) {
                            this.mAvailUidChanges.add(this.mActiveUidChanges[j]);
                            j++;
                        }
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
                end = SystemClock.uptimeMillis();
                if (end - start <= 1000) {
                    String str2 = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Finishing dispatch all uids changed took ");
                    stringBuilder2.append(end - start);
                    stringBuilder2.append("ms");
                    Slog.w(str2, stringBuilder2.toString());
                    return;
                }
                return;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        end = SystemClock.uptimeMillis();
        if (end - start <= 1000) {
        }
    }

    private void dispatchUidsChangedForObserver(IUidObserver observer, UidObserverRegistration reg, int changesSize) {
        IUidObserver iUidObserver = observer;
        UidObserverRegistration uidObserverRegistration = reg;
        if (iUidObserver != null) {
            try {
                long begin = SystemClock.uptimeMillis();
                boolean z = false;
                int j = 0;
                while (j < changesSize) {
                    try {
                        ChangeItem item = this.mActiveUidChanges[j];
                        int change = item.change;
                        if (change != 0 || (uidObserverRegistration.which & 1) != 0) {
                            String str;
                            StringBuilder stringBuilder;
                            long start = SystemClock.uptimeMillis();
                            if ((change & 2) != 0) {
                                if ((uidObserverRegistration.which & 4) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        str = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("UID idle uid=");
                                        stringBuilder.append(item.uid);
                                        Slog.i(str, stringBuilder.toString());
                                    }
                                    iUidObserver.onUidIdle(item.uid, item.ephemeral);
                                }
                            } else if (!((change & 4) == 0 || (uidObserverRegistration.which & 8) == 0)) {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    str = TAG;
                                    stringBuilder = new StringBuilder();
                                    stringBuilder.append("UID active uid=");
                                    stringBuilder.append(item.uid);
                                    Slog.i(str, stringBuilder.toString());
                                }
                                iUidObserver.onUidActive(item.uid);
                            }
                            if ((uidObserverRegistration.which & 16) != 0) {
                                if ((change & 8) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        str = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("UID cached uid=");
                                        stringBuilder.append(item.uid);
                                        Slog.i(str, stringBuilder.toString());
                                    }
                                    iUidObserver.onUidCachedChanged(item.uid, true);
                                } else if ((change & 16) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        str = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("UID active uid=");
                                        stringBuilder.append(item.uid);
                                        Slog.i(str, stringBuilder.toString());
                                    }
                                    iUidObserver.onUidCachedChanged(item.uid, z);
                                }
                            }
                            if ((change & 1) != 0) {
                                if ((uidObserverRegistration.which & 2) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        str = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("UID gone uid=");
                                        stringBuilder.append(item.uid);
                                        Slog.i(str, stringBuilder.toString());
                                    }
                                    iUidObserver.onUidGone(item.uid, item.ephemeral);
                                }
                                if (uidObserverRegistration.lastProcStates != null) {
                                    uidObserverRegistration.lastProcStates.delete(item.uid);
                                }
                            } else if ((uidObserverRegistration.which & 1) != 0) {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    str = TAG;
                                    stringBuilder = new StringBuilder();
                                    stringBuilder.append("UID CHANGED uid=");
                                    stringBuilder.append(item.uid);
                                    stringBuilder.append(": ");
                                    stringBuilder.append(item.processState);
                                    Slog.i(str, stringBuilder.toString());
                                }
                                boolean doReport = true;
                                if (uidObserverRegistration.cutpoint >= 0) {
                                    int lastState = uidObserverRegistration.lastProcStates.get(item.uid, -1);
                                    if (lastState != -1) {
                                        doReport = (lastState <= uidObserverRegistration.cutpoint) != (item.processState <= uidObserverRegistration.cutpoint);
                                    } else {
                                        doReport = item.processState != 19;
                                    }
                                }
                                if (doReport) {
                                    if (uidObserverRegistration.lastProcStates != null) {
                                        uidObserverRegistration.lastProcStates.put(item.uid, item.processState);
                                    }
                                    iUidObserver.onUidStateChanged(item.uid, item.processState, item.procStateSeq);
                                }
                            }
                            int duration = (int) (SystemClock.uptimeMillis() - start);
                            if (uidObserverRegistration.mMaxDispatchTime < duration) {
                                uidObserverRegistration.mMaxDispatchTime = duration;
                            }
                            if (duration >= 20) {
                                uidObserverRegistration.mSlowDispatchCount++;
                            }
                        }
                        j++;
                        z = false;
                    } catch (RemoteException e) {
                    }
                }
                long end = SystemClock.uptimeMillis();
                if (end - begin > SINGLE_DISPATCH_THRESHOLD_MS) {
                    String str2 = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Dispatch uids changed took ");
                    stringBuilder2.append(end - begin);
                    stringBuilder2.append("ms for observer : ");
                    stringBuilder2.append(iUidObserver);
                    Slog.w(str2, stringBuilder2.toString());
                }
            } catch (RemoteException e2) {
                int i = changesSize;
            }
        }
    }

    void dispatchOomAdjObserver(String msg) {
        OomAdjObserver observer;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                observer = this.mCurOomAdjObserver;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (observer != null) {
            observer.onOomAdjMessage(msg);
        }
    }

    void setOomAdjObserver(int uid, OomAdjObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = uid;
                this.mCurOomAdjObserver = observer;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void clearOomAdjObserver() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = -1;
                this.mCurOomAdjObserver = null;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void reportOomAdjMessageLocked(String tag, String msg) {
        Slog.d(tag, msg);
        if (this.mCurOomAdjObserver != null) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    void reportUidInfoMessageLocked(String tag, String msg, int uid) {
        Slog.i(TAG, msg);
        if (this.mCurOomAdjObserver != null && uid == this.mCurOomAdjUid) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    public final int startActivity(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {
        Intent intent2 = intent;
        if (Jlog.isMicroTest()) {
            Jlog.i(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END, Jlog.getMessage("ActivityManagerService", "startActivity", intent2));
        }
        int ret = startActivityAsUser(caller, callingPackage, intent2, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, UserHandle.getCallingUserId());
        if (Jlog.isMicroTest()) {
            Jlog.i(3091, Jlog.getMessage("ActivityManagerService", "startActivity", intent2));
        }
        return ret;
    }

    public final int startActivityAsUser(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        Intent intent2;
        if (Jlog.isMicroTest()) {
            intent2 = intent;
            Jlog.i(3092, Jlog.getMessage("ActivityManagerService", "startActivityAsUser", intent2));
        } else {
            intent2 = intent;
        }
        return startActivityAsUser(caller, callingPackage, intent2, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId, true);
    }

    public final int startActivityAsUser(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId, boolean validateIncomingUser) {
        Intent intent2 = intent;
        enforceNotIsolatedCaller("startActivity");
        int ret = this.mActivityStartController.obtainStarter(intent2, "startActivityAsUser").setCaller(caller).setCallingPackage(callingPackage).setResolvedType(resolvedType).setResultTo(resultTo).setResultWho(resultWho).setRequestCode(requestCode).setStartFlags(startFlags).setProfilerInfo(profilerInfo).setActivityOptions(bOptions).setMayWait(this.mActivityStartController.checkTargetUser(userId, validateIncomingUser, Binder.getCallingPid(), Binder.getCallingUid(), "startActivityAsUser")).execute();
        if (Jlog.isMicroTest()) {
            Jlog.i(3093, Jlog.getMessage("ActivityManagerService", "startActivityAsUser", intent2));
        }
        return ret;
    }

    /* JADX WARNING: Missing block: B:34:0x00b5, code:
            resetPriorityAfterLockedSection();
            r9 = r29;
     */
    /* JADX WARNING: Missing block: B:35:0x00bc, code:
            if (r9 != -10000) goto L_0x00c7;
     */
    /* JADX WARNING: Missing block: B:36:0x00be, code:
            r9 = android.os.UserHandle.getUserId(r5.app.uid);
     */
    /* JADX WARNING: Missing block: B:53:?, code:
            r0 = r1.mActivityStartController.obtainStarter(r2, "startActivityAsCaller").setCallingUid(r6).setCallingPackage(r7).setResolvedType(r21).setResultTo(r3).setResultWho(r23).setRequestCode(r24).setStartFlags(r25).setActivityOptions(r27).setMayWait(r9).setIgnoreTargetSecurity(r4);
     */
    /* JADX WARNING: Missing block: B:54:0x0102, code:
            if (r8 == false) goto L_0x0106;
     */
    /* JADX WARNING: Missing block: B:55:0x0104, code:
            r15 = 0;
     */
    /* JADX WARNING: Missing block: B:56:0x0106, code:
            r15 = r6;
     */
    /* JADX WARNING: Missing block: B:57:0x0107, code:
            r0 = r0.setFilterCallingUid(r15).execute();
     */
    /* JADX WARNING: Missing block: B:58:0x0113, code:
            if (android.util.Jlog.isMicroTest() == false) goto L_0x0123;
     */
    /* JADX WARNING: Missing block: B:59:0x0115, code:
            android.util.Jlog.i(3095, android.util.Jlog.getMessage("ActivityManagerService", "startActivityAsCaller", r2));
     */
    /* JADX WARNING: Missing block: B:60:0x0123, code:
            return r0;
     */
    /* JADX WARNING: Missing block: B:61:0x0124, code:
            r0 = e;
     */
    /* JADX WARNING: Missing block: B:62:0x0126, code:
            r0 = e;
     */
    /* JADX WARNING: Missing block: B:63:0x0128, code:
            r0 = e;
     */
    /* JADX WARNING: Missing block: B:64:0x012a, code:
            r0 = e;
     */
    /* JADX WARNING: Missing block: B:65:0x012c, code:
            r0 = e;
     */
    /* JADX WARNING: Missing block: B:66:0x012e, code:
            r0 = e;
     */
    /* JADX WARNING: Missing block: B:67:0x012f, code:
            r10 = r21;
     */
    /* JADX WARNING: Missing block: B:68:0x0131, code:
            r11 = r23;
     */
    /* JADX WARNING: Missing block: B:69:0x0133, code:
            r12 = r24;
     */
    /* JADX WARNING: Missing block: B:70:0x0135, code:
            r13 = r25;
     */
    /* JADX WARNING: Missing block: B:71:0x0137, code:
            r14 = r27;
     */
    /* JADX WARNING: Missing block: B:72:0x0139, code:
            throw r0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final int startActivityAsCaller(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, boolean ignoreTargetSecurity, int userId) {
        Throwable th;
        Intent intent2 = intent;
        IBinder iBinder = resultTo;
        boolean z = ignoreTargetSecurity;
        if (Jlog.isMicroTest()) {
            Jlog.i(3094, Jlog.getMessage("ActivityManagerService", "startActivityAsCaller", intent2));
        }
        synchronized (this) {
            String str;
            String str2;
            int i;
            int i2;
            Bundle bundle;
            int i3;
            try {
                boostPriorityForLockedSection();
                if (iBinder != null) {
                    ActivityRecord sourceRecord = this.mStackSupervisor.isInAnyStackLocked(iBinder);
                    if (sourceRecord == null) {
                        str = resolvedType;
                        str2 = resultWho;
                        i = requestCode;
                        i2 = startFlags;
                        bundle = bOptions;
                        i3 = userId;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Called with bad activity token: ");
                        stringBuilder.append(iBinder);
                        throw new SecurityException(stringBuilder.toString());
                    } else if (!sourceRecord.info.packageName.equals(PackageManagerService.PLATFORM_PACKAGE_NAME) && !sourceRecord.info.packageName.equals("com.huawei.android.internal.app")) {
                        throw new SecurityException("Must be called from an activity that is declared in the android package");
                    } else if (sourceRecord.app == null) {
                        str = resolvedType;
                        str2 = resultWho;
                        i = requestCode;
                        i2 = startFlags;
                        bundle = bOptions;
                        i3 = userId;
                        throw new SecurityException("Called without a process attached to activity");
                    } else if (UserHandle.getAppId(sourceRecord.app.uid) == 1000 || sourceRecord.app.uid == sourceRecord.launchedFromUid) {
                        if (z) {
                            if (intent.getComponent() == null) {
                                throw new SecurityException("Component must be specified with ignoreTargetSecurity");
                            } else if (intent.getSelector() != null) {
                                throw new SecurityException("Selector not allowed with ignoreTargetSecurity");
                            }
                        }
                        int targetUid = sourceRecord.launchedFromUid;
                        String targetPackage = sourceRecord.launchedFromPackage;
                        boolean isResolver = sourceRecord.isResolverOrChildActivity();
                    } else {
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Calling activity in uid ");
                        stringBuilder2.append(sourceRecord.app.uid);
                        stringBuilder2.append(" must be system uid or original calling uid ");
                        stringBuilder2.append(sourceRecord.launchedFromUid);
                        throw new SecurityException(stringBuilder2.toString());
                    }
                }
                str = resolvedType;
                str2 = resultWho;
                i = requestCode;
                i2 = startFlags;
                bundle = bOptions;
                i3 = userId;
                throw new SecurityException("Must be called from an activity");
            } catch (Throwable th2) {
                th = th2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final WaitResult startActivityAndWait(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        Intent intent2 = intent;
        if (Jlog.isMicroTest()) {
            Jlog.i(3096, Jlog.getMessage("ActivityManagerService", "startActivityAndWait", intent2));
        }
        enforceNotIsolatedCaller("startActivityAndWait");
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startActivityAndWait", null);
        WaitResult res = new WaitResult();
        this.mActivityStartController.obtainStarter(intent2, "startActivityAndWait").setCaller(caller).setCallingPackage(callingPackage).setResolvedType(resolvedType).setResultTo(resultTo).setResultWho(resultWho).setRequestCode(requestCode).setStartFlags(startFlags).setActivityOptions(bOptions).setMayWait(userId2).setProfilerInfo(profilerInfo).setWaitResult(res).execute();
        if (Jlog.isMicroTest()) {
            Jlog.i(3097, Jlog.getMessage("ActivityManagerService", "startActivityAndWait", intent2));
        }
        return res;
    }

    public final int startActivityWithConfig(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, Configuration config, Bundle bOptions, int userId) {
        Intent intent2 = intent;
        if (Jlog.isMicroTest()) {
            Jlog.i(3098, Jlog.getMessage("ActivityManagerService", "startActivityWithConfig", intent2));
        }
        enforceNotIsolatedCaller("startActivityWithConfig");
        int ret = this.mActivityStartController.obtainStarter(intent2, "startActivityWithConfig").setCaller(caller).setCallingPackage(callingPackage).setResolvedType(resolvedType).setResultTo(resultTo).setResultWho(resultWho).setRequestCode(requestCode).setStartFlags(startFlags).setGlobalConfiguration(config).setActivityOptions(bOptions).setMayWait(this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startActivityWithConfig", null)).execute();
        if (Jlog.isMicroTest()) {
            Jlog.i(3099, Jlog.getMessage("ActivityManagerService", "startActivityWithConfig", intent2));
        }
        return ret;
    }

    public int startVoiceActivity(String callingPackage, int callingPid, int callingUid, Intent intent, String resolvedType, IVoiceInteractionSession session, IVoiceInteractor interactor, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        IVoiceInteractionSession iVoiceInteractionSession = session;
        IVoiceInteractor iVoiceInteractor = interactor;
        enforceCallingPermission("android.permission.BIND_VOICE_INTERACTION", "startVoiceActivity()");
        if (iVoiceInteractionSession == null || iVoiceInteractor == null) {
            String str = callingPackage;
            int i = callingUid;
            Intent intent2 = intent;
            String str2 = resolvedType;
            int i2 = startFlags;
            ProfilerInfo profilerInfo2 = profilerInfo;
            Bundle bundle = bOptions;
            throw new NullPointerException("null session or interactor");
        }
        return this.mActivityStartController.obtainStarter(intent, "startVoiceActivity").setCallingUid(callingUid).setCallingPackage(callingPackage).setResolvedType(resolvedType).setVoiceSession(iVoiceInteractionSession).setVoiceInteractor(iVoiceInteractor).setStartFlags(startFlags).setProfilerInfo(profilerInfo).setActivityOptions(bOptions).setMayWait(this.mUserController.handleIncomingUser(callingPid, callingUid, userId, false, 2, "startVoiceActivity", null)).execute();
    }

    public int startAssistantActivity(String callingPackage, int callingPid, int callingUid, Intent intent, String resolvedType, Bundle bOptions, int userId) {
        enforceCallingPermission("android.permission.BIND_VOICE_INTERACTION", "startAssistantActivity()");
        return this.mActivityStartController.obtainStarter(intent, "startAssistantActivity").setCallingUid(callingUid).setCallingPackage(callingPackage).setResolvedType(resolvedType).setActivityOptions(bOptions).setMayWait(this.mUserController.handleIncomingUser(callingPid, callingUid, userId, false, 2, "startAssistantActivity", null)).execute();
    }

    public void startRecentsActivity(Intent intent, IAssistDataReceiver assistDataReceiver, IRecentsAnimationRunner recentsAnimationRunner) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "startRecentsActivity()");
        int callingPid = Binder.getCallingPid();
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                new RecentsAnimation(this, this.mStackSupervisor, this.mActivityStartController, this.mWindowManager, this.mUserController, callingPid).startRecentsActivity(intent, recentsAnimationRunner, this.mRecentTasks.getRecentsComponent(), this.mRecentTasks.getRecentsComponentUid(), assistDataReceiver);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public void cancelRecentsAnimation(boolean restoreHomeStackPosition) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "cancelRecentsAnimation()");
        long callingUid = (long) Binder.getCallingUid();
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                int i;
                boostPriorityForLockedSection();
                WindowManagerService windowManagerService = this.mWindowManager;
                if (restoreHomeStackPosition) {
                    i = 2;
                } else {
                    i = 0;
                }
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("cancelRecentsAnimation/uid=");
                stringBuilder.append(callingUid);
                windowManagerService.cancelRecentsAnimationSynchronously(i, stringBuilder.toString());
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public void startLocalVoiceInteraction(IBinder callingActivity, Bundle options) throws RemoteException {
        Slog.i(TAG, "Activity tried to startVoiceInteraction");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord activity = getFocusedStack().getTopActivity();
                if (ActivityRecord.forTokenLocked(callingActivity) != activity) {
                    throw new SecurityException("Only focused activity can call startVoiceInteraction");
                } else if (this.mRunningVoice != null || activity.getTask().voiceSession != null || activity.voiceSession != null) {
                    Slog.w(TAG, "Already in a voice interaction, cannot start new voice interaction");
                    resetPriorityAfterLockedSection();
                } else if (activity.pendingVoiceInteractionStart) {
                    Slog.w(TAG, "Pending start of voice interaction already.");
                } else {
                    activity.pendingVoiceInteractionStart = true;
                    resetPriorityAfterLockedSection();
                    ((VoiceInteractionManagerInternal) LocalServices.getService(VoiceInteractionManagerInternal.class)).startLocalVoiceInteraction(callingActivity, options);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void stopLocalVoiceInteraction(IBinder callingActivity) throws RemoteException {
        ((VoiceInteractionManagerInternal) LocalServices.getService(VoiceInteractionManagerInternal.class)).stopLocalVoiceInteraction(callingActivity);
    }

    public boolean supportsLocalVoiceInteraction() throws RemoteException {
        return ((VoiceInteractionManagerInternal) LocalServices.getService(VoiceInteractionManagerInternal.class)).supportsLocalVoiceInteraction();
    }

    @GuardedBy("this")
    void onLocalVoiceInteractionStartedLocked(IBinder activity, IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor) {
        ActivityRecord activityToCallback = ActivityRecord.forTokenLocked(activity);
        if (activityToCallback != null) {
            activityToCallback.setVoiceSessionLocked(voiceSession);
            long token;
            try {
                activityToCallback.app.thread.scheduleLocalVoiceInteractionStarted(activity, voiceInteractor);
                token = Binder.clearCallingIdentity();
                startRunningVoiceLocked(voiceSession, activityToCallback.appInfo.uid);
                Binder.restoreCallingIdentity(token);
            } catch (RemoteException e) {
                activityToCallback.clearVoiceSessionLocked();
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(token);
            }
        }
    }

    public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mRunningVoice != null && this.mRunningVoice.asBinder() == session.asBinder()) {
                    if (keepAwake) {
                        this.mVoiceWakeLock.acquire();
                    } else {
                        this.mVoiceWakeLock.release();
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:55:0x0121 A:{SYNTHETIC, Splitter: B:55:0x0121} */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x0110 A:{SYNTHETIC, Splitter: B:48:0x0110} */
    /* JADX WARNING: Missing block: B:53:0x011d, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:54:0x0120, code:
            return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean startNextMatchingActivity(IBinder callingActivity, Intent intent, Bundle bOptions) {
        boolean z;
        Intent intent2 = intent;
        if (intent2 == null || !intent.hasFileDescriptors()) {
            SafeActivityOptions options = SafeActivityOptions.fromBundle(bOptions);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(callingActivity);
                    z = false;
                    if (r == null) {
                        SafeActivityOptions.abort(options);
                    } else if (r.app == null || r.app.thread == null) {
                        SafeActivityOptions.abort(options);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else {
                        intent2 = new Intent(intent2);
                        intent2.setDataAndType(r.intent.getData(), r.intent.getType());
                        intent2.setComponent(null);
                        boolean debug = (intent2.getFlags() & 8) != 0;
                        ActivityInfo aInfo = null;
                        try {
                            List<ResolveInfo> resolves = AppGlobals.getPackageManager().queryIntentActivities(intent2, r.resolvedType, 66560, UserHandle.getCallingUserId()).getList();
                            int N = resolves != null ? resolves.size() : 0;
                            for (int i = 0; i < N; i++) {
                                ResolveInfo rInfo = (ResolveInfo) resolves.get(i);
                                if (rInfo.activityInfo.packageName.equals(r.packageName) && rInfo.activityInfo.name.equals(r.info.name)) {
                                    i++;
                                    if (i < N) {
                                        aInfo = ((ResolveInfo) resolves.get(i)).activityInfo;
                                    }
                                    if (debug) {
                                        String str;
                                        String str2 = TAG;
                                        StringBuilder stringBuilder = new StringBuilder();
                                        stringBuilder.append("Next matching activity: found current ");
                                        stringBuilder.append(r.packageName);
                                        stringBuilder.append(SliceAuthority.DELIMITER);
                                        stringBuilder.append(r.info.name);
                                        Slog.v(str2, stringBuilder.toString());
                                        str2 = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("Next matching activity: next is ");
                                        if (aInfo == null) {
                                            str = "null";
                                        } else {
                                            StringBuilder stringBuilder2 = new StringBuilder();
                                            stringBuilder2.append(aInfo.packageName);
                                            stringBuilder2.append(SliceAuthority.DELIMITER);
                                            stringBuilder2.append(aInfo.name);
                                            str = stringBuilder2.toString();
                                        }
                                        stringBuilder.append(str);
                                        Slog.v(str2, stringBuilder.toString());
                                    }
                                    if (aInfo != null) {
                                        SafeActivityOptions.abort(options);
                                        if (debug) {
                                            Slog.d(TAG, "Next matching activity: nothing found");
                                        }
                                    } else {
                                        intent2.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));
                                        intent2.setFlags(intent2.getFlags() & -503316481);
                                        boolean wasFinishing = r.finishing;
                                        r.finishing = true;
                                        ActivityRecord resultTo = r.resultTo;
                                        String resultWho = r.resultWho;
                                        i = r.requestCode;
                                        r.resultTo = null;
                                        if (resultTo != null) {
                                            resultTo.removeResultsLocked(r, resultWho, i);
                                        }
                                        long origId = Binder.clearCallingIdentity();
                                        int res = this.mActivityStartController.obtainStarter(intent2, "startNextMatchingActivity").setCaller(r.app.thread).setResolvedType(r.resolvedType).setActivityInfo(aInfo).setResultTo(resultTo != null ? resultTo.appToken : null).setResultWho(resultWho).setRequestCode(i).setCallingPid(-1).setCallingUid(r.launchedFromUid).setCallingPackage(r.launchedFromPackage).setRealCallingPid(-1).setRealCallingUid(r.launchedFromUid).setActivityOptions(options).execute();
                                        Binder.restoreCallingIdentity(origId);
                                        r.finishing = wasFinishing;
                                        if (res != 0) {
                                            resetPriorityAfterLockedSection();
                                            return false;
                                        }
                                        resetPriorityAfterLockedSection();
                                        return true;
                                    }
                                }
                            }
                        } catch (RemoteException e) {
                        }
                        if (aInfo != null) {
                        }
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        return z;
    }

    public final int startActivityFromRecents(int taskId, Bundle bOptions) {
        enforceCallerIsRecentsOrHasPermission("android.permission.START_TASKS_FROM_RECENTS", "startActivityFromRecents()");
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        SafeActivityOptions safeOptions = SafeActivityOptions.fromBundle(bOptions);
        long origId = Binder.clearCallingIdentity();
        try {
            int startActivityFromRecents;
            synchronized (this) {
                boostPriorityForLockedSection();
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("startActivityFromRecents: taskId =");
                stringBuilder.append(taskId);
                Flog.i(101, stringBuilder.toString());
                startActivityFromRecents = this.mStackSupervisor.startActivityFromRecents(callingPid, callingUid, taskId, safeOptions);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            return startActivityFromRecents;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public final int startActivities(IApplicationThread caller, String callingPackage, Intent[] intents, String[] resolvedTypes, IBinder resultTo, Bundle bOptions, int userId) {
        String reason = "startActivities";
        enforceNotIsolatedCaller("startActivities");
        return this.mActivityStartController.startActivities(caller, -1, callingPackage, intents, resolvedTypes, resultTo, SafeActivityOptions.fromBundle(bOptions), this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startActivities", null), "startActivities");
    }

    public void reportActivityFullyDrawn(IBinder token, boolean restoredFromBundle) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                } else {
                    r.reportFullyDrawnLocked(restoredFromBundle);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setRequestedOrientation(IBinder token, int requestedOrientation) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_SETREQUESTEDORIENTATION);
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("setRequestedOrientation r: ");
                stringBuilder.append(r);
                stringBuilder.append(", callingPid: ");
                stringBuilder.append(Binder.getCallingPid());
                stringBuilder.append(", callingUid: ");
                stringBuilder.append(Binder.getCallingUid());
                stringBuilder.append(", requestedOrientation ");
                stringBuilder.append(requestedOrientation);
                Flog.i(101, stringBuilder.toString());
                if (isMaximizedPortraitAppOnPCMode(r)) {
                    String str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("setRequestedOrientation ");
                    stringBuilder.append(r);
                    stringBuilder.append("is Portrait & Maximized.");
                    HwPCUtils.log(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setRequestedOrientation(requestedOrientation);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public int getRequestedOrientation(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    int requestedOrientation = r.getRequestedOrientation();
                    resetPriorityAfterLockedSection();
                    return requestedOrientation;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return -1;
    }

    /* JADX WARNING: Removed duplicated region for block: B:72:0x00ff A:{SYNTHETIC, Splitter: B:72:0x00ff} */
    /* JADX WARNING: Removed duplicated region for block: B:90:0x0153  */
    /* JADX WARNING: Removed duplicated region for block: B:76:0x0127  */
    /* JADX WARNING: Removed duplicated region for block: B:94:0x0161 A:{SYNTHETIC, Splitter: B:94:0x0161} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final boolean finishActivity(IBinder token, int resultCode, Intent resultData, int finishTask) {
        Throwable th;
        long origId;
        int i = finishTask;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_FINISHACTIVITY);
        if (resultData == null || !resultData.hasFileDescriptors()) {
            if (ActivityManagerDebugConfig.HWFLOW) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("finishActivity pid =");
                stringBuilder.append(Binder.getCallingPid());
                Flog.i(101, stringBuilder.toString());
            }
            synchronized (this) {
                IBinder iBinder;
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(token);
                    if (r == null) {
                        resetPriorityAfterLockedSection();
                        return true;
                    }
                    TaskRecord tr = r.getTask();
                    ActivityRecord rootR = tr.getRootActivity();
                    if (rootR == null) {
                        Slog.w(TAG, "Finishing task with all activities already finished");
                    }
                    if (this.mLockTaskController.activityBlockedFromFinish(r)) {
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    boolean z;
                    long origId2;
                    boolean res;
                    if (this.mController != null) {
                        iBinder = token;
                        ActivityRecord next = r.getStack().topRunningActivityLocked(iBinder, 0);
                        if (next != null) {
                            boolean resumeOK = true;
                            try {
                                resumeOK = this.mController.activityResuming(next.packageName);
                            } catch (RemoteException e) {
                                String str = TAG;
                                StringBuilder stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("Error in resuming next:");
                                stringBuilder2.append(next);
                                stringBuilder2.append(" for controller:");
                                stringBuilder2.append(this.mController);
                                Slog.w(str, stringBuilder2.toString());
                                this.mController = null;
                                Watchdog.getInstance().setActivityController(null);
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                            if (!resumeOK) {
                                Slog.i(TAG, "Not finishing activity because controller resumed");
                                resetPriorityAfterLockedSection();
                                return false;
                            }
                        }
                    }
                    iBinder = token;
                    if (HwPCUtils.enabledInPad() && HwPCUtils.isPcCastModeInServer() && tr.getStack() != null && r == rootR) {
                        tr.getStack().resetOtherStacksVisible(true);
                    }
                    long origId3 = Binder.clearCallingIdentity();
                    boolean finishWithRootActivity = i == 1;
                    if (r == rootR) {
                        try {
                            if (r.inSplitScreenPrimaryWindowingMode()) {
                                z = true;
                                this.mShouldFreeze = z;
                                if (this.mShouldFreeze) {
                                    Slog.i(TAG, "startFreezingScreen");
                                    this.mHandler.removeMessages(500);
                                    this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(500), 1000);
                                    this.mWindowManager.mShouldResetTime = true;
                                    this.mWindowManager.startFreezingScreen(0, 0);
                                }
                                if (i != 2) {
                                    origId2 = origId3;
                                } else if (finishWithRootActivity && r == rootR) {
                                    origId2 = origId3;
                                } else {
                                    try {
                                        origId2 = origId3;
                                    } catch (Throwable th3) {
                                        th = th3;
                                        origId = origId3;
                                        Binder.restoreCallingIdentity(origId);
                                        throw th;
                                    }
                                    try {
                                        res = tr.getStack().requestFinishActivityLocked(iBinder, resultCode, resultData, "app-request", true);
                                        if (!res) {
                                            Slog.i(TAG, "Failed to finish by app-request");
                                        }
                                        this.mHwAMSEx.updateUsageStatsForPCMode(r, false, this.mUsageStatsService);
                                        Binder.restoreCallingIdentity(origId2);
                                        resetPriorityAfterLockedSection();
                                        return res;
                                    } catch (Throwable th4) {
                                        th = th4;
                                        origId = origId2;
                                        Binder.restoreCallingIdentity(origId);
                                        throw th;
                                    }
                                }
                                res = this.mStackSupervisor.removeTaskByIdLocked(tr.taskId, false, finishWithRootActivity, "finish-activity");
                                if (!res) {
                                    Slog.i(TAG, "Removing task failed to finish activity");
                                }
                                this.mHwAMSEx.updateUsageStatsForPCMode(r, false, this.mUsageStatsService);
                                Binder.restoreCallingIdentity(origId2);
                                resetPriorityAfterLockedSection();
                                return res;
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            origId = origId3;
                            Binder.restoreCallingIdentity(origId);
                            throw th;
                        }
                    }
                    z = false;
                    try {
                        this.mShouldFreeze = z;
                        if (this.mShouldFreeze) {
                        }
                        if (i != 2) {
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        origId = origId3;
                        Binder.restoreCallingIdentity(origId);
                        throw th;
                    }
                    try {
                        res = this.mStackSupervisor.removeTaskByIdLocked(tr.taskId, false, finishWithRootActivity, "finish-activity");
                        if (res) {
                        }
                        this.mHwAMSEx.updateUsageStatsForPCMode(r, false, this.mUsageStatsService);
                        Binder.restoreCallingIdentity(origId2);
                        resetPriorityAfterLockedSection();
                        return res;
                    } catch (Throwable th7) {
                        th = th7;
                        origId = origId2;
                        Binder.restoreCallingIdentity(origId);
                        throw th;
                    }
                } catch (Throwable th8) {
                    th = th8;
                    iBinder = token;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord proc = this.mHeavyWeightProcess;
                    if (proc == null) {
                    } else {
                        ArrayList<ActivityRecord> activities = new ArrayList(proc.activities);
                        for (int i = 0; i < activities.size(); i++) {
                            ActivityRecord r = (ActivityRecord) activities.get(i);
                            if (!r.finishing && r.isInStackLocked()) {
                                r.getStack().finishActivityLocked(r, 0, null, "finish-heavy", true);
                            }
                        }
                        this.mHandler.sendMessage(this.mHandler.obtainMessage(25, proc.userId, 0));
                        this.mHeavyWeightProcess = null;
                        resetPriorityAfterLockedSection();
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            String msg = new StringBuilder();
            msg.append("Permission Denial: finishHeavyWeightApp() from pid=");
            msg.append(Binder.getCallingPid());
            msg.append(", uid=");
            msg.append(Binder.getCallingUid());
            msg.append(" requires ");
            msg.append("android.permission.FORCE_STOP_PACKAGES");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public void crashApplication(int uid, int initialPid, String packageName, int userId, String message) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mAppErrors.scheduleAppCrashLocked(uid, initialPid, packageName, userId, message);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        String msg = new StringBuilder();
        msg.append("Permission Denial: crashApplication() from pid=");
        msg.append(Binder.getCallingPid());
        msg.append(", uid=");
        msg.append(Binder.getCallingUid());
        msg.append(" requires ");
        msg.append("android.permission.FORCE_STOP_PACKAGES");
        msg = msg.toString();
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public final void finishSubActivity(IBinder token, String resultWho, int requestCode) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long origId = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    r.getStack().finishSubActivityLocked(r, resultWho, requestCode);
                }
                Binder.restoreCallingIdentity(origId);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean finishActivityAffinity(IBinder token) {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return false;
                }
                TaskRecord task = r.getTask();
                if (this.mLockTaskController.activityBlockedFromFinish(r)) {
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return false;
                }
                boolean finishActivityAffinityLocked = task.getStack().finishActivityAffinityLocked(r);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return finishActivityAffinityLocked;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void finishVoiceTask(IVoiceInteractionSession session) {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mStackSupervisor.finishVoiceTask(session);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean releaseActivityInstance(IBinder token) {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return false;
                }
                boolean safelyDestroyActivityLocked = r.getStack().safelyDestroyActivityLocked(r, "app-req");
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return safelyDestroyActivityLocked;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void releaseSomeActivities(IApplicationThread appInt) {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mStackSupervisor.releaseSomeActivitiesLocked(getRecordForAppLocked(appInt), "low-mem");
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean willActivityBeVisible(IBinder token) {
        boolean willActivityBeVisibleLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack stack = ActivityRecord.getStackLocked(token);
                if (stack != null) {
                    willActivityBeVisibleLocked = stack.willActivityBeVisibleLocked(token);
                } else {
                    willActivityBeVisibleLocked = false;
                    resetPriorityAfterLockedSection();
                    return false;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return willActivityBeVisibleLocked;
    }

    public void overridePendingTransition(IBinder token, String packageName, int enterAnim, int exitAnim) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord self = ActivityRecord.isInStackLocked(token);
                if (self == null) {
                } else {
                    long origId = Binder.clearCallingIdentity();
                    if (self.isState(ActivityState.RESUMED, ActivityState.PAUSING)) {
                        this.mWindowManager.overridePendingAppTransition(packageName, enterAnim, exitAnim, null);
                    }
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void releaseFMChannel() {
        Intent intent = new Intent("android.intent.action.FM");
        intent.putExtra(AudioService.CONNECT_INTENT_KEY_STATE, 0);
        this.mContext.sendBroadcast(intent);
    }

    @GuardedBy("this")
    private final void handleAppDiedLocked(ProcessRecord app, boolean restarting, boolean allowRestart) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendEvent(4, app.uid, app.pid, app.processName, null);
        if ("com.huawei.android.hwouc".equals(app.processName)) {
            Secure.putIntForUser(this.mContext.getContentResolver(), "hwouc_keyguard_view_on_top", 0, app.userId > 0 ? app.userId : 0);
        }
        if ("com.huawei.android.FMRadio".equals(app.processName)) {
            releaseFMChannel();
        }
        if ("com.huawei.screenrecorder".equals(app.processName)) {
            UserInfo ui = getCurrentUser();
            System.putIntForUser(this.mContext.getContentResolver(), "show_touches", 0, ui != null ? ui.id : 0);
        }
        if ("com.huawei.vdrive".equals(app.processName)) {
            ((PowerManager) this.mContext.getSystemService("power")).setMirrorLinkPowerStatus(false);
            HwFrameworkFactory.getCoverManager().setCoverForbiddened(false);
        }
        HwAudioServiceManager.setSoundEffectState(true, app.processName, false, null);
        int pid = app.pid;
        if (!(cleanUpApplicationRecordLocked(app, restarting, allowRestart, -1, false) || restarting)) {
            removeLruProcessLocked(app);
            if (pid > 0) {
                ProcessList.remove(pid);
            }
        }
        if (this.mProfileProc == app) {
            clearProfilerLocked();
        }
        boolean hasVisibleActivities = this.mStackSupervisor.handleAppDiedLocked(app);
        app.clearRecentTasks();
        app.activities.clear();
        app.hasClientActivities = false;
        if (app.instr != null) {
            clearBroadcastResource(app);
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Crash of app ");
            stringBuilder.append(app.processName);
            stringBuilder.append(" running instrumentation ");
            stringBuilder.append(app.instr.mClass);
            Slog.w(str, stringBuilder.toString());
            Bundle info = new Bundle();
            info.putString("shortMsg", "Process crashed.");
            finishInstrumentationLocked(app, 0, info);
        }
        this.mWindowManager.deferSurfaceLayout();
        if (!restarting && hasVisibleActivities) {
            try {
                if (!this.mStackSupervisor.resumeFocusedStackTopActivityLocked()) {
                    this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                }
            } catch (Throwable th) {
                this.mWindowManager.continueSurfaceLayout();
            }
        }
        this.mWindowManager.continueSurfaceLayout();
    }

    private final int getLRURecordIndexForAppLocked(IApplicationThread thread) {
        IBinder threadBinder = thread.asBinder();
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord rec = (ProcessRecord) this.mLruProcesses.get(i);
            if (rec != null && rec.thread != null && rec.thread.asBinder() == threadBinder) {
                return i;
            }
        }
        return -1;
    }

    ProcessRecord getRecordForAppLocked(IApplicationThread thread) {
        if (thread == null) {
            return null;
        }
        int appIndex = getLRURecordIndexForAppLocked(thread);
        if (appIndex >= 0) {
            return (ProcessRecord) this.mLruProcesses.get(appIndex);
        }
        IBinder threadBinder = thread.asBinder();
        ArrayMap<String, SparseArray<ProcessRecord>> pmap = this.mProcessNames.getMap();
        for (int i = pmap.size() - 1; i >= 0; i--) {
            SparseArray<ProcessRecord> procs = (SparseArray) pmap.valueAt(i);
            int j = procs.size() - 1;
            while (j >= 0) {
                ProcessRecord proc = (ProcessRecord) procs.valueAt(j);
                if (proc.thread == null || proc.thread.asBinder() != threadBinder) {
                    j--;
                } else {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("getRecordForApp: exists in name list but not in LRU list: ");
                    stringBuilder.append(proc);
                    Slog.wtf(str, stringBuilder.toString());
                    return proc;
                }
            }
        }
        return null;
    }

    final void doLowMemReportIfNeededLocked(ProcessRecord dyingProc) {
        boolean haveBg = false;
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord rec = (ProcessRecord) this.mLruProcesses.get(i);
            if (rec.thread != null && rec.setProcState >= 15) {
                haveBg = true;
                break;
            }
        }
        ProcessRecord processRecord;
        if (haveBg) {
            processRecord = dyingProc;
            return;
        }
        boolean doReport = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
        if (doReport) {
            long now = SystemClock.uptimeMillis();
            if (now < this.mLastMemUsageReportTime + BackupAgentTimeoutParameters.DEFAULT_FULL_BACKUP_AGENT_TIMEOUT_MILLIS) {
                doReport = false;
            } else {
                this.mLastMemUsageReportTime = now;
            }
        }
        ArrayList<ProcessMemInfo> memInfos = doReport ? new ArrayList(this.mLruProcesses.size()) : null;
        EventLog.writeEvent(EventLogTags.AM_LOW_MEMORY, this.mLruProcesses.size());
        long now2 = SystemClock.uptimeMillis();
        for (int i2 = this.mLruProcesses.size() - 1; i2 >= 0; i2--) {
            ProcessRecord rec2 = (ProcessRecord) this.mLruProcesses.get(i2);
            if (!(rec2 == dyingProc || rec2.thread == null)) {
                if (doReport) {
                    memInfos.add(new ProcessMemInfo(rec2.processName, rec2.pid, rec2.setAdj, rec2.setProcState, rec2.adjType, rec2.makeAdjReason()));
                }
                if (rec2.lastLowMemory + this.mConstants.GC_MIN_INTERVAL <= now2) {
                    if (rec2.setAdj <= 400) {
                        rec2.lastRequestedGc = 0;
                    } else {
                        rec2.lastRequestedGc = rec2.lastLowMemory;
                    }
                    rec2.reportLowMemory = true;
                    rec2.lastLowMemory = now2;
                    this.mProcessesToGc.remove(rec2);
                    addProcessToGcListLocked(rec2);
                }
            }
        }
        processRecord = dyingProc;
        if (doReport) {
            this.mHandler.sendMessage(this.mHandler.obtainMessage(33, memInfos));
        }
        scheduleAppGcsLocked();
    }

    @GuardedBy("this")
    final void appDiedLocked(ProcessRecord app) {
        appDiedLocked(app, app.pid, app.thread, false);
    }

    /* JADX WARNING: Missing block: B:9:0x0036, code:
            r1 = r11.mBatteryStatsService.getActiveStatistics();
     */
    /* JADX WARNING: Missing block: B:10:0x003c, code:
            monitor-enter(r1);
     */
    /* JADX WARNING: Missing block: B:12:?, code:
            r1.noteProcessDiedLocked(r12.info.uid, r13);
     */
    /* JADX WARNING: Missing block: B:13:0x0044, code:
            monitor-exit(r1);
     */
    /* JADX WARNING: Missing block: B:15:0x0048, code:
            if (r12.killed != false) goto L_0x0056;
     */
    /* JADX WARNING: Missing block: B:16:0x004a, code:
            if (r15 != false) goto L_0x004f;
     */
    /* JADX WARNING: Missing block: B:17:0x004c, code:
            android.os.Process.killProcessQuiet(r13);
     */
    /* JADX WARNING: Missing block: B:18:0x004f, code:
            killProcessGroup(r12.uid, r13);
            r12.killed = true;
     */
    /* JADX WARNING: Missing block: B:20:0x005d, code:
            if (r12.pid != r13) goto L_0x0168;
     */
    /* JADX WARNING: Missing block: B:22:0x0061, code:
            if (r12.thread == null) goto L_0x0168;
     */
    /* JADX WARNING: Missing block: B:24:0x006d, code:
            if (r12.thread.asBinder() != r14.asBinder()) goto L_0x0168;
     */
    /* JADX WARNING: Missing block: B:26:0x0071, code:
            if (r12.instr != null) goto L_0x0075;
     */
    /* JADX WARNING: Missing block: B:27:0x0073, code:
            r0 = true;
     */
    /* JADX WARNING: Missing block: B:28:0x0075, code:
            r0 = false;
     */
    /* JADX WARNING: Missing block: B:29:0x0076, code:
            r7 = r0;
     */
    /* JADX WARNING: Missing block: B:30:0x0079, code:
            if (r12.killedByAm != false) goto L_0x00ca;
     */
    /* JADX WARNING: Missing block: B:31:0x007b, code:
            r8 = TAG;
            r9 = new java.lang.StringBuilder();
            r9.append("Process ");
            r9.append(r12.processName);
            r9.append(" (pid ");
            r9.append(r13);
            r9.append(") has died: ");
            r9.append(com.android.server.am.ProcessList.makeOomAdjString(r12.setAdj));
            r9.append(com.android.server.am.ProcessList.makeProcStateString(r12.setProcState));
            reportUidInfoMessageLocked(r8, r9.toString(), r12.info.uid);
            r11.mAllowLowerMemLevel = true;
     */
    /* JADX WARNING: Missing block: B:32:0x00c0, code:
            if ("com.huawei.android.launcher".equals(r12.processName) == false) goto L_0x00cd;
     */
    /* JADX WARNING: Missing block: B:33:0x00c2, code:
            android.util.Jlog.d(310, "JLID_LAUNCHER_KILLED");
     */
    /* JADX WARNING: Missing block: B:34:0x00ca, code:
            r11.mAllowLowerMemLevel = false;
            r0 = false;
     */
    /* JADX WARNING: Missing block: B:35:0x00cd, code:
            android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.AM_PROC_DIED, new java.lang.Object[]{java.lang.Integer.valueOf(r12.userId), java.lang.Integer.valueOf(r12.pid), r12.processName, java.lang.Integer.valueOf(r12.setAdj), java.lang.Integer.valueOf(r12.setProcState)});
     */
    /* JADX WARNING: Missing block: B:36:0x00fa, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_CLEANUP == false) goto L_0x0126;
     */
    /* JADX WARNING: Missing block: B:37:0x00fc, code:
            r3 = TAG;
            r4 = new java.lang.StringBuilder();
            r4.append("Dying app: ");
            r4.append(r12);
            r4.append(", pid: ");
            r4.append(r13);
            r4.append(", thread: ");
            r4.append(r14.asBinder());
            android.util.Slog.v(r3, r4.toString());
     */
    /* JADX WARNING: Missing block: B:39:0x012a, code:
            if (android.util.Jlog.isUBMEnable() == false) goto L_0x015a;
     */
    /* JADX WARNING: Missing block: B:40:0x012c, code:
            r4 = new java.lang.StringBuilder();
            r4.append("AE#");
            r4.append(r12.processName);
            r4.append("(");
            r4.append(r12.info.versionCode);
            r4.append(",");
            r4.append(r12.pid);
            android.util.Jlog.d(269, r4.toString());
     */
    /* JADX WARNING: Missing block: B:41:0x015a, code:
            handleAppDiedLocked(r12, false, true);
     */
    /* JADX WARNING: Missing block: B:42:0x015d, code:
            if (r7 == false) goto L_0x0162;
     */
    /* JADX WARNING: Missing block: B:43:0x015f, code:
            updateOomAdjLocked();
     */
    /* JADX WARNING: Missing block: B:44:0x0162, code:
            if (r0 == false) goto L_0x01d7;
     */
    /* JADX WARNING: Missing block: B:45:0x0164, code:
            doLowMemReportIfNeededLocked(r12);
     */
    /* JADX WARNING: Missing block: B:47:0x016a, code:
            if (r12.pid == r13) goto L_0x01b9;
     */
    /* JADX WARNING: Missing block: B:48:0x016c, code:
            r0 = TAG;
            r7 = new java.lang.StringBuilder();
            r7.append("Process ");
            r7.append(r12.processName);
            r7.append(" (pid ");
            r7.append(r13);
            r7.append(") has died and restarted (pid ");
            r7.append(r12.pid);
            r7.append(").");
            reportUidInfoMessageLocked(r0, r7.toString(), r12.info.uid);
            android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.AM_PROC_DIED, new java.lang.Object[]{java.lang.Integer.valueOf(r12.userId), java.lang.Integer.valueOf(r12.pid), r12.processName});
     */
    /* JADX WARNING: Missing block: B:50:0x01bb, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_PROCESSES == false) goto L_0x01d7;
     */
    /* JADX WARNING: Missing block: B:51:0x01bd, code:
            r0 = TAG;
            r2 = new java.lang.StringBuilder();
            r2.append("Received spurious death notification for thread ");
            r2.append(r14.asBinder());
            android.util.Slog.d(r0, r2.toString());
     */
    /* JADX WARNING: Missing block: B:53:0x01db, code:
            if (com.android.server.am.MemoryStatUtil.hasMemcg() != false) goto L_0x01e6;
     */
    /* JADX WARNING: Missing block: B:54:0x01dd, code:
            android.util.StatsLog.write(65, android.os.SystemClock.elapsedRealtime());
     */
    /* JADX WARNING: Missing block: B:55:0x01e6, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    final void appDiedLocked(ProcessRecord app, int pid, IApplicationThread thread, boolean fromBinderDied) {
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord curProc = (ProcessRecord) this.mPidsSelfLocked.get(pid);
            if (curProc != app) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Spurious death for ");
                stringBuilder.append(app);
                stringBuilder.append(", curProc for ");
                stringBuilder.append(pid);
                stringBuilder.append(": ");
                stringBuilder.append(curProc);
                Slog.w(str, stringBuilder.toString());
            }
        }
    }

    public static File dumpStackTraces(ProcessRecord app, boolean clearTraces, ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> arrayList) {
        int i = 0;
        boolean isSystemApp = app == null || app.info == null || (app.info.flags & NetworkConstants.ICMPV6_ECHO_REPLY_TYPE) != 0;
        if (isSystemApp || Log.HWINFO) {
            int[] pids = Process.getPidsForCommands(Watchdog.NATIVE_STACKS_OF_INTEREST);
            ArrayList nativePids = null;
            if (pids != null) {
                nativePids = new ArrayList(pids.length);
                int length = pids.length;
                while (i < length) {
                    nativePids.add(Integer.valueOf(pids[i]));
                    i++;
                }
            }
            if (mAppEyeBinderBlock != null && clearTraces) {
                ZrHungData data = new ZrHungData();
                data.putString("method", "addBinderPid");
                data.putIntegerArrayList("notnativepids", firstPids);
                data.putIntegerArrayList("nativepids", nativePids);
                data.putInt(IZRHungService.PARAM_PID, app.pid);
                data.putInt("tid", app.pid);
                mAppEyeBinderBlock.check(data);
            }
            return dumpStackTraces(true, (ArrayList) firstPids, processCpuTracker, (SparseArray) lastPids, nativePids);
        }
        firstPids.clear();
        firstPids.add(Integer.valueOf(app.pid));
        return dumpStackTraces(true, (ArrayList) firstPids, processCpuTracker, (SparseArray) lastPids, null);
    }

    public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids) {
        File tracesFile;
        ArrayList extraPids = null;
        if (processCpuTracker != null) {
            processCpuTracker.init();
            try {
                Thread.sleep(NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
            } catch (InterruptedException e) {
            }
            processCpuTracker.update();
            int N = processCpuTracker.countWorkingStats();
            extraPids = new ArrayList();
            for (int i = 0; i < N && extraPids.size() < 5; i++) {
                Stats stats = processCpuTracker.getWorkingStats(i);
                if (lastPids.indexOfKey(stats.pid) >= 0) {
                    extraPids.add(Integer.valueOf(stats.pid));
                }
            }
        }
        boolean useTombstonedForJavaTraces = false;
        String tracesDirProp = SystemProperties.get("dalvik.vm.stack-trace-dir", BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
        if (tracesDirProp.isEmpty()) {
            String globalTracesPath = SystemProperties.get("dalvik.vm.stack-trace-file", null);
            if (globalTracesPath.isEmpty()) {
                Slog.w(TAG, "dumpStackTraces: no trace path configured");
                return null;
            }
            tracesFile = new File(globalTracesPath);
            if (clearTraces) {
                try {
                    if (tracesFile.exists()) {
                        tracesFile.delete();
                    }
                } catch (IOException e2) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unable to prepare ANR traces file: ");
                    stringBuilder.append(tracesFile);
                    Slog.w(str, stringBuilder.toString(), e2);
                    return null;
                }
            }
            tracesFile.createNewFile();
            FileUtils.setPermissions(globalTracesPath, 438, -1, -1);
        } else {
            File tracesDir = new File(tracesDirProp);
            maybePruneOldTraces(tracesDir);
            tracesFile = createAnrDumpFile(tracesDir);
            if (tracesFile == null) {
                return null;
            }
            useTombstonedForJavaTraces = true;
        }
        dumpStackTraces(tracesFile.getAbsolutePath(), (ArrayList) firstPids, (ArrayList) nativePids, extraPids, useTombstonedForJavaTraces);
        return tracesFile;
    }

    private static synchronized File createAnrDumpFile(File tracesDir) {
        synchronized (ActivityManagerService.class) {
            boostPriorityForLockedSection();
            if (sAnrFileDateFormat == null) {
                sAnrFileDateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
            }
            String formattedDate = sAnrFileDateFormat.format(new Date());
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("anr_");
            stringBuilder.append(formattedDate);
            File anrFile = new File(tracesDir, stringBuilder.toString());
            try {
                if (anrFile.createNewFile()) {
                    FileUtils.setPermissions(anrFile.getAbsolutePath(), 384, -1, -1);
                    resetPriorityAfterLockedSection();
                    return anrFile;
                }
                Slog.w(TAG, "Unable to create ANR dump file: createNewFile failed");
                resetPriorityAfterLockedSection();
                return null;
            } catch (IOException ioe) {
                Slog.w(TAG, "Exception creating ANR dump file:", ioe);
            }
        }
    }

    private static void maybePruneOldTraces(File tracesDir) {
        long now = System.currentTimeMillis();
        File[] traceFiles = tracesDir.listFiles();
        if (traceFiles != null) {
            for (File file : traceFiles) {
                if (now - file.lastModified() > 86400000 && !file.delete()) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unable to prune stale trace file: ");
                    stringBuilder.append(file);
                    Slog.w(str, stringBuilder.toString());
                }
            }
        }
    }

    private static long dumpJavaTracesTombstoned(int pid, String fileName, long timeoutMs) {
        long timeStart = SystemClock.elapsedRealtime();
        if (!Debug.dumpJavaBacktraceToFileTimeout(pid, fileName, (int) (timeoutMs / 1000))) {
            Debug.dumpNativeBacktraceToFileTimeout(pid, fileName, 2);
        }
        return SystemClock.elapsedRealtime() - timeStart;
    }

    private static void dumpStackTraces(String tracesFile, ArrayList<Integer> firstPids, ArrayList<Integer> nativePids, ArrayList<Integer> extraPids, boolean useTombstonedForJavaTraces) {
        ZrHungData data;
        DumpStackFileObserver observer;
        long timeTaken;
        StringBuilder stringBuilder;
        Iterator it;
        String str;
        String str2 = tracesFile;
        ArrayList<Integer> arrayList = firstPids;
        if (mAppEyeBinderBlock != null) {
            data = new ZrHungData();
            data.putString("method", "readTransactionInSubThread");
            mAppEyeBinderBlock.check(data);
        }
        if (useTombstonedForJavaTraces) {
            observer = null;
        } else {
            observer = new DumpStackFileObserver(str2);
        }
        DumpStackFileObserver observer2 = observer;
        long remainingTime = 20000;
        if (observer2 != null) {
            try {
                observer2.startWatching();
            } catch (Throwable th) {
                if (observer2 != null) {
                    observer2.stopWatching();
                }
            }
        }
        if (arrayList != null) {
            int num = firstPids.size();
            for (int i = 0; i < num; i++) {
                if (useTombstonedForJavaTraces) {
                    timeTaken = dumpJavaTracesTombstoned(((Integer) arrayList.get(i)).intValue(), str2, remainingTime);
                } else {
                    timeTaken = observer2.dumpWithTimeout(((Integer) arrayList.get(i)).intValue(), remainingTime);
                }
                remainingTime -= timeTaken;
                if (remainingTime <= 0) {
                    String str3 = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Aborting stack trace dump (current firstPid=");
                    stringBuilder.append(arrayList.get(i));
                    stringBuilder.append("); deadline exceeded.");
                    Slog.e(str3, stringBuilder.toString());
                    if (observer2 != null) {
                        observer2.stopWatching();
                    }
                    return;
                }
            }
        }
        if (nativePids != null) {
            it = nativePids.iterator();
            while (it.hasNext()) {
                int pid = ((Integer) it.next()).intValue();
                long nativeDumpTimeoutMs = Math.min(2000, remainingTime);
                long start = SystemClock.elapsedRealtime();
                Debug.dumpNativeBacktraceToFileTimeout(pid, str2, (int) (nativeDumpTimeoutMs / 1000));
                remainingTime -= SystemClock.elapsedRealtime() - start;
                if (remainingTime <= 0) {
                    str = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Aborting stack trace dump (current native pid=");
                    stringBuilder2.append(pid);
                    stringBuilder2.append("); deadline exceeded.");
                    Slog.e(str, stringBuilder2.toString());
                    if (observer2 != null) {
                        observer2.stopWatching();
                    }
                    return;
                }
                arrayList = firstPids;
            }
        }
        if (extraPids != null) {
            it = extraPids.iterator();
            while (it.hasNext()) {
                int pid2 = ((Integer) it.next()).intValue();
                if (useTombstonedForJavaTraces) {
                    timeTaken = dumpJavaTracesTombstoned(pid2, str2, remainingTime);
                } else {
                    timeTaken = observer2.dumpWithTimeout(pid2, remainingTime);
                }
                remainingTime -= timeTaken;
                if (remainingTime <= 0) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Aborting stack trace dump (current extra pid=");
                    stringBuilder.append(pid2);
                    stringBuilder.append("); deadline exceeded.");
                    Slog.e(str, stringBuilder.toString());
                    if (observer2 != null) {
                        observer2.stopWatching();
                    }
                    return;
                }
            }
        }
        if (mAppEyeBinderBlock != null) {
            data = new ZrHungData();
            data.putString("method", "writeTransactionToTrace");
            data.putString("path", str2);
            mAppEyeBinderBlock.check(data);
        }
        if (observer2 != null) {
            observer2.stopWatching();
        }
    }

    final void logAppTooSlow(ProcessRecord app, long startTime, String msg) {
    }

    @GuardedBy("this")
    final void showLaunchWarningLocked(final ActivityRecord cur, final ActivityRecord next) {
        if (!this.mLaunchWarningShown) {
            this.mLaunchWarningShown = true;
            this.mUiHandler.post(new Runnable() {
                public void run() {
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            final Dialog d = new LaunchWarningWindow(ActivityManagerService.this.mContext, cur, next);
                            d.show();
                            ActivityManagerService.this.mUiHandler.postDelayed(new Runnable() {
                                public void run() {
                                    synchronized (ActivityManagerService.this) {
                                        try {
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            d.dismiss();
                                            ActivityManagerService.this.mLaunchWarningShown = false;
                                        } finally {
                                            while (true) {
                                            }
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                        }
                                    }
                                }
                            }, 4000);
                        } finally {
                            while (true) {
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                }
            });
        }
    }

    /* JADX WARNING: Missing block: B:35:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:36:0x010b, code:
            r7 = r16 + 1;
            r8 = r17;
            r9 = r23;
     */
    /* JADX WARNING: Missing block: B:44:0x011e, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:45:0x011f, code:
            r1 = r23;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void killBackgroundProcesses(String packageName, int userId) {
        Throwable th;
        long callingId;
        String str = packageName;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_KILLBACKGROUNDPROCESSES);
        String str2;
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0 || checkCallingPermission("android.permission.RESTART_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "killBackgroundProcesses", null);
            str2 = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("killBackgroundProcesses() from pid=");
            stringBuilder.append(Binder.getCallingPid());
            stringBuilder.append(", uid=");
            stringBuilder.append(Binder.getCallingUid());
            Slog.i(str2, stringBuilder.toString());
            int[] userIds = this.mUserController.expandUserId(userId2);
            long callingId2 = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                int length = userIds.length;
                int i = 0;
                while (i < length) {
                    try {
                        int appId;
                        int targetUserId = userIds[i];
                        try {
                            appId = UserHandle.getAppId(pm.getPackageUid(str, 268435456, targetUserId));
                        } catch (RemoteException e) {
                            appId = -1;
                        }
                        if (appId == -1) {
                            try {
                                str2 = TAG;
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("Invalid packageName: ");
                                stringBuilder.append(str);
                                Slog.w(str2, stringBuilder.toString());
                                Binder.restoreCallingIdentity(callingId2);
                                return;
                            } catch (Throwable th2) {
                                th = th2;
                                callingId = callingId2;
                                Binder.restoreCallingIdentity(callingId);
                                throw th;
                            }
                        }
                        synchronized (this) {
                            long callingId3;
                            try {
                                boostPriorityForLockedSection();
                                int i2 = i;
                                int i3 = length;
                                callingId3 = callingId2;
                                try {
                                    killPackageProcessesLocked(str, appId, targetUserId, 500, false, true, true, false, REASON_BACKGROUND);
                                } catch (Throwable th3) {
                                    th = th3;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th4) {
                                th = th4;
                                int i4 = appId;
                                int i5 = targetUserId;
                                callingId3 = callingId2;
                            }
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        callingId = callingId2;
                    }
                }
                Binder.restoreCallingIdentity(callingId2);
                return;
            } catch (Throwable th6) {
                th = th6;
                callingId = callingId2;
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        }
        str2 = new StringBuilder();
        str2.append("Permission Denial: killBackgroundProcesses() from pid=");
        str2.append(Binder.getCallingPid());
        str2.append(", uid=");
        str2.append(Binder.getCallingUid());
        str2.append(" requires ");
        str2.append("android.permission.KILL_BACKGROUND_PROCESSES");
        str2 = str2.toString();
        Slog.w(TAG, str2);
        throw new SecurityException(str2);
    }

    public void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    int ip;
                    boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList();
                    int NP = this.mProcessNames.getMap().size();
                    for (ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = (ProcessRecord) apps.valueAt(ia);
                            if (!app.persistent) {
                                if (app.removed) {
                                    procs.add(app);
                                } else if (app.setAdj >= 900) {
                                    app.removed = true;
                                    procs.add(app);
                                }
                            }
                        }
                    }
                    ip = procs.size();
                    for (int i = 0; i < ip; i++) {
                        removeProcessLocked((ProcessRecord) procs.get(i), false, true, "kill all background");
                    }
                    this.mAllowLowerMemLevel = true;
                    updateOomAdjLocked();
                    doLowMemReportIfNeededLocked(null);
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(callingId);
            }
        } else {
            String msg = new StringBuilder();
            msg.append("Permission Denial: killAllBackgroundProcesses() from pid=");
            msg.append(Binder.getCallingPid());
            msg.append(", uid=");
            msg.append(Binder.getCallingUid());
            msg.append(" requires ");
            msg.append("android.permission.KILL_BACKGROUND_PROCESSES");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
        int i = minTargetSdk;
        int i2 = maxProcState;
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            int i3 = 0;
            int isResolutionChanging = Global.getInt(this.mContext.getContentResolver(), APS_DISPLAY_RESOLUTION_CHANGING, 0);
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList();
                    int NP = this.mProcessNames.getMap().size();
                    int ip = 0;
                    while (true) {
                        int i4 = 1;
                        if (ip >= NP) {
                            break;
                        }
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        int ia = i3;
                        while (ia < NA) {
                            ProcessRecord app = (ProcessRecord) apps.valueAt(ia);
                            if (app.processName != null && (app.processName.contains("WebViewLoader") || (i4 == isResolutionChanging && ("com.android.deskclock".equals(app.processName) || "com.huawei.aod".equals(app.processName) || "com.huawei.android.thememanager".equals(app.processName) || "com.huawei.security:SERVICE".equals(app.processName))))) {
                                String str = TAG;
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("ROG is changing, and do not kill process: ");
                                stringBuilder.append(app.processName);
                                Slog.d(str, stringBuilder.toString());
                            } else if (app.removed) {
                                procs.add(app);
                            } else if (((i < 0 || app.info.targetSdkVersion < i) && (i2 < 0 || app.setProcState > i2)) || "com.tencent.mm".equals(app.processName) || ("com.huawei.android.launcher".equals(app.processName) && 1 == isResolutionChanging)) {
                                app.removed = true;
                                procs.add(app);
                            }
                            ia++;
                            i4 = 1;
                        }
                        ip++;
                        i3 = 0;
                    }
                    i3 = procs.size();
                    for (ip = 0; ip < i3; ip++) {
                        removeProcessLocked((ProcessRecord) procs.get(ip), false, true, "kill all background except");
                    }
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(callingId);
            }
        } else {
            String msg = new StringBuilder();
            msg.append("Permission Denial: killAllBackgroundProcessesExcept() from pid=");
            msg.append(Binder.getCallingPid());
            msg.append(", uid=");
            msg.append(Binder.getCallingUid());
            msg.append(" requires ");
            msg.append("android.permission.KILL_BACKGROUND_PROCESSES");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public void forceStopPackage(String packageName, int userId) {
        Throwable th;
        int i;
        String str = packageName;
        String str2;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int callingPid = Binder.getCallingPid();
            int userId2 = this.mUserController.handleIncomingUser(callingPid, Binder.getCallingUid(), userId, true, 2, "forceStopPackage", null);
            long callingId = Binder.clearCallingIdentity();
            try {
                StringBuilder stringBuilder;
                if (HwDeviceManager.disallowOp(3, str)) {
                    try {
                        str2 = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("[");
                        stringBuilder.append(str);
                        stringBuilder.append("] is Persistent app,won't be killed");
                        Slog.i(str2, stringBuilder.toString());
                        Binder.restoreCallingIdentity(callingId);
                        return;
                    } catch (Throwable th2) {
                        th = th2;
                        i = callingPid;
                        Binder.restoreCallingIdentity(callingId);
                        throw th;
                    }
                }
                IPackageManager pm = AppGlobals.getPackageManager();
                synchronized (this) {
                    IPackageManager iPackageManager;
                    try {
                        int[] users;
                        boostPriorityForLockedSection();
                        boolean z = true;
                        int i2 = -1;
                        if (userId2 == -1) {
                            try {
                                users = this.mUserController.getUsers();
                            } catch (RemoteException e) {
                            } catch (IllegalArgumentException e2) {
                                IllegalArgumentException illegalArgumentException = e2;
                                String str3 = TAG;
                                StringBuilder stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("Failed trying to unstop package ");
                                stringBuilder2.append(str);
                                stringBuilder2.append(": ");
                                stringBuilder2.append(e2);
                                Slog.w(str3, stringBuilder2.toString());
                            } catch (Throwable th3) {
                                th = th3;
                                iPackageManager = pm;
                                pm = callingPid;
                            }
                        } else {
                            users = new int[]{userId2};
                        }
                        int[] users2 = users;
                        int length = users2.length;
                        int i3 = 0;
                        while (i3 < length) {
                            int user = users2[i3];
                            if (getPackageManagerInternalLocked().isPackageStateProtected(str, user)) {
                                str2 = TAG;
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("Ignoring request to force stop protected package ");
                                stringBuilder.append(str);
                                stringBuilder.append(" u");
                                stringBuilder.append(user);
                                Slog.w(str2, stringBuilder.toString());
                                resetPriorityAfterLockedSection();
                                Binder.restoreCallingIdentity(callingId);
                                return;
                            }
                            int i4;
                            int i5;
                            int[] users3;
                            int i6;
                            int pkgUid = i2;
                            try {
                                pkgUid = pm.getPackageUid(str, 268435456, user);
                            } catch (RemoteException e3) {
                            }
                            if (pkgUid == i2) {
                                str2 = TAG;
                                StringBuilder stringBuilder3 = new StringBuilder();
                                stringBuilder3.append("Invalid packageName: ");
                                stringBuilder3.append(str);
                                Slog.w(str2, stringBuilder3.toString());
                                i4 = i3;
                                i5 = length;
                                users3 = users2;
                                iPackageManager = pm;
                                i6 = -1;
                                pm = callingPid;
                            } else {
                                pm.setPackageStoppedState(str, z, user);
                                if (this.mUserController.isUserRunning(user, 0)) {
                                    int pkgUid2 = pkgUid;
                                    i4 = i3;
                                    i5 = length;
                                    users3 = users2;
                                    i6 = -1;
                                    iPackageManager = pm;
                                    pm = callingPid;
                                    try {
                                        String str4;
                                        StringBuilder stringBuilder4;
                                        this.mDAProxy.notifyProcessWillDie(true, false, false, str, -1, -1);
                                        str2 = (String) this.mLocalStopReason.get();
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("from pid ");
                                        stringBuilder.append(pm);
                                        if (str2 == null) {
                                            str4 = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                                        } else {
                                            stringBuilder4 = new StringBuilder();
                                            stringBuilder4.append(" ");
                                            stringBuilder4.append(str2);
                                            str4 = stringBuilder4.toString();
                                        }
                                        stringBuilder.append(str4);
                                        stringBuilder.append(pm == Process.myPid() ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : REASON_STOP_BY_APP);
                                        forceStopPackageLocked(str, pkgUid2, stringBuilder.toString());
                                        this.mLocalStopReason.set(null);
                                        finishForceStopPackageLocked(str, pkgUid2);
                                        IHwActivityManagerServiceEx iHwActivityManagerServiceEx = this.mHwAMSEx;
                                        stringBuilder4 = new StringBuilder();
                                        stringBuilder4.append("forceStop");
                                        stringBuilder4.append(str2);
                                        iHwActivityManagerServiceEx.reportAppDiedMsg(userId2, str, pm, stringBuilder4.toString());
                                    } catch (Throwable th4) {
                                        th = th4;
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                                i4 = i3;
                                i5 = length;
                                users3 = users2;
                                iPackageManager = pm;
                                i6 = -1;
                                pm = callingPid;
                            }
                            i3 = i4 + 1;
                            callingPid = pm;
                            length = i5;
                            users2 = users3;
                            i2 = i6;
                            pm = iPackageManager;
                            z = true;
                        }
                        pm = callingPid;
                        try {
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(callingId);
                            return;
                        } catch (Throwable th5) {
                            th = th5;
                            Binder.restoreCallingIdentity(callingId);
                            throw th;
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        iPackageManager = pm;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } catch (Throwable th7) {
                th = th7;
                i = callingPid;
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        }
        str2 = new StringBuilder();
        str2.append("Permission Denial: forceStopPackage() from pid=");
        str2.append(Binder.getCallingPid());
        str2.append(", uid=");
        str2.append(Binder.getCallingUid());
        str2.append(" requires ");
        str2.append("android.permission.FORCE_STOP_PACKAGES");
        str2 = str2.toString();
        Slog.w(TAG, str2);
        throw new SecurityException(str2);
    }

    /* JADX WARNING: Missing block: B:20:0x0037, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:21:0x003a, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void addPackageDependency(String packageName) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (Binder.getCallingPid() == Process.myPid()) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                ProcessRecord proc;
                synchronized (this.mPidsSelfLocked) {
                    proc = (ProcessRecord) this.mPidsSelfLocked.get(Binder.getCallingPid());
                }
                if (proc != null) {
                    if (proc.pkgDeps == null) {
                        proc.pkgDeps = new ArraySet(1);
                    }
                    proc.pkgDeps.add(packageName);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void killApplication(String pkg, int appId, int userId, String reason) {
        if (pkg != null) {
            if ("vold reset".equals(reason) && "com.android.providers.media".equals(pkg)) {
                this.mHwAMSEx.killApplication(pkg, appId, userId, reason);
            } else if (appId < 0) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Invalid appid specified for pkg : ");
                stringBuilder.append(pkg);
                Slog.w(str, stringBuilder.toString());
            } else {
                int callerUid = Binder.getCallingUid();
                if (UserHandle.getAppId(callerUid) == 1000) {
                    Message msg = this.mHandler.obtainMessage(22);
                    msg.arg1 = appId;
                    msg.arg2 = userId;
                    Bundle bundle = new Bundle();
                    bundle.putString(AbsLocationManagerService.DEL_PKG, pkg);
                    bundle.putString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, reason);
                    msg.obj = bundle;
                    this.mHandler.sendMessage(msg);
                    return;
                }
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append(callerUid);
                stringBuilder2.append(" cannot kill pkg: ");
                stringBuilder2.append(pkg);
                throw new SecurityException(stringBuilder2.toString());
            }
        }
    }

    /* JADX WARNING: Missing block: B:25:?, code:
            resetPriorityAfterLockedSection();
            r8.mWindowManager.closeSystemDialogs(r9);
     */
    /* JADX WARNING: Missing block: B:26:0x0066, code:
            monitor-enter(r8);
     */
    /* JADX WARNING: Missing block: B:28:?, code:
            boostPriorityForLockedSection();
            closeSystemDialogsLocked(r9);
     */
    /* JADX WARNING: Missing block: B:29:0x006d, code:
            monitor-exit(r8);
     */
    /* JADX WARNING: Missing block: B:31:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:32:0x0071, code:
            android.os.Binder.restoreCallingIdentity(r2);
     */
    /* JADX WARNING: Missing block: B:33:0x0075, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void closeSystemDialogs(String reason) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_CLOSESYSTEMDIALOGS);
        enforceNotIsolatedCaller("closeSystemDialogs");
        int pid = Binder.getCallingPid();
        int uid = Binder.getCallingUid();
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (uid >= 10000) {
                        ProcessRecord proc;
                        synchronized (this.mPidsSelfLocked) {
                            proc = (ProcessRecord) this.mPidsSelfLocked.get(pid);
                        }
                        if (proc.curRawAdj > 200) {
                            String str = TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("Ignoring closeSystemDialogs ");
                            stringBuilder.append(reason);
                            stringBuilder.append(" from background process ");
                            stringBuilder.append(proc);
                            Slog.w(str, stringBuilder.toString());
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(origId);
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                    }
                }
            }
        } catch (Throwable th2) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    @GuardedBy("this")
    void closeSystemDialogsLocked(String reason) {
        String str = reason;
        Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
        intent.addFlags(1342177280);
        if (str != null) {
            intent.putExtra(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, str);
        }
        this.mStackSupervisor.closeSystemDialogsLocked();
        broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, -1);
    }

    /* JADX WARNING: Missing block: B:21:0x003b, code:
            resetPriorityAfterLockedSection();
            r3[r4] = new android.os.Debug.MemoryInfo();
            r8 = android.os.SystemClock.currentThreadTimeMillis();
            android.os.Debug.getMemoryInfo(r2[r4], r3[r4]);
            r10 = android.os.SystemClock.currentThreadTimeMillis();
     */
    /* JADX WARNING: Missing block: B:22:0x0054, code:
            if (r6 == null) goto L_0x00a9;
     */
    /* JADX WARNING: Missing block: B:23:0x0056, code:
            monitor-enter(r25);
     */
    /* JADX WARNING: Missing block: B:25:?, code:
            boostPriorityForLockedSection();
     */
    /* JADX WARNING: Missing block: B:26:0x005c, code:
            if (r6.thread == null) goto L_0x0096;
     */
    /* JADX WARNING: Missing block: B:28:0x0060, code:
            if (r6.setAdj != r7) goto L_0x0096;
     */
    /* JADX WARNING: Missing block: B:33:0x0078, code:
            r24 = r3;
     */
    /* JADX WARNING: Missing block: B:35:?, code:
            r6.baseProcessTracker.addPss((long) r3[r4].getTotalPss(), (long) r3[r4].getTotalUss(), (long) r3[r4].getTotalRss(), false, 4, r10 - r8, r6.pkgList);
     */
    /* JADX WARNING: Missing block: B:36:0x008c, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:37:0x008d, code:
            r1 = r25;
     */
    /* JADX WARNING: Missing block: B:38:0x0090, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:39:0x0091, code:
            r24 = r3;
            r1 = r25;
     */
    /* JADX WARNING: Missing block: B:40:0x0096, code:
            r24 = r3;
     */
    /* JADX WARNING: Missing block: B:41:0x0098, code:
            r1 = r25;
     */
    /* JADX WARNING: Missing block: B:43:?, code:
            monitor-exit(r25);
     */
    /* JADX WARNING: Missing block: B:44:0x009b, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:45:0x009f, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:46:0x00a0, code:
            r24 = r3;
     */
    /* JADX WARNING: Missing block: B:48:?, code:
            monitor-exit(r25);
     */
    /* JADX WARNING: Missing block: B:49:0x00a3, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:50:0x00a6, code:
            throw r0;
     */
    /* JADX WARNING: Missing block: B:51:0x00a7, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:52:0x00a9, code:
            r24 = r3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public MemoryInfo[] getProcessMemoryInfo(int[] pids) {
        Throwable th;
        ActivityManagerService activityManagerService = this;
        int[] iArr = pids;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_GETPROCESSMEMORYINFO);
        activityManagerService.enforceNotIsolatedCaller("getProcessMemoryInfo");
        MemoryInfo[] infos = new MemoryInfo[iArr.length];
        int i = iArr.length - 1;
        while (true) {
            MemoryInfo[] memoryInfoArr;
            int i2 = i;
            if (i2 < 0) {
                return infos;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (activityManagerService.mPidsSelfLocked) {
                        try {
                            ProcessRecord proc = (ProcessRecord) activityManagerService.mPidsSelfLocked.get(iArr[i2]);
                            if (proc != null) {
                                try {
                                    i = proc.setAdj;
                                } catch (Throwable th2) {
                                    th = th2;
                                    memoryInfoArr = infos;
                                }
                            } else {
                                i = 0;
                            }
                            int oomAdj = i;
                        } catch (Throwable th3) {
                            th = th3;
                            memoryInfoArr = infos;
                        }
                    }
                } catch (Throwable th4) {
                    th = th4;
                    memoryInfoArr = infos;
                }
            }
            i = i2 - 1;
            infos = memoryInfoArr;
            iArr = pids;
        }
        while (true) {
            try {
                break;
            } catch (Throwable th5) {
                th = th5;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        throw th;
    }

    public long[] getProcessPss(int[] pids) {
        int[] iArr = pids;
        enforceNotIsolatedCaller("getProcessPss");
        long[] pss = new long[iArr.length];
        int i = iArr.length - 1;
        while (true) {
            int i2 = i;
            if (i2 < 0) {
                return pss;
            }
            ProcessRecord proc;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = (ProcessRecord) this.mPidsSelfLocked.get(iArr[i2]);
                        int oomAdj = proc != null ? proc.setAdj : 0;
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            long[] tmpUss = new long[3];
            long startTime = SystemClock.currentThreadTimeMillis();
            pss[i2] = Debug.getPss(iArr[i2], tmpUss, null);
            long endTime = SystemClock.currentThreadTimeMillis();
            if (proc != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (proc.thread != null && proc.setAdj == oomAdj) {
                            proc.baseProcessTracker.addPss(pss[i2], tmpUss[0], tmpUss[2], false, 3, endTime - startTime, proc.pkgList);
                        }
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
            }
            i = i2 - 1;
        }
        while (true) {
        }
    }

    public void killApplicationProcess(String processName, int uid) {
        if (processName != null) {
            int callerUid = Binder.getCallingUid();
            if (callerUid == 1000) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        ProcessRecord app = getProcessRecordLocked(processName, uid, true);
                        if (app == null || app.thread == null) {
                            String str = TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("Process/uid not found attempting kill of ");
                            stringBuilder.append(processName);
                            stringBuilder.append(" / ");
                            stringBuilder.append(uid);
                            Slog.w(str, stringBuilder.toString());
                        } else {
                            try {
                                app.thread.scheduleSuicide();
                            } catch (RemoteException e) {
                            }
                        }
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
                return;
            }
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append(callerUid);
            stringBuilder2.append(" cannot kill app process: ");
            stringBuilder2.append(processName);
            throw new SecurityException(stringBuilder2.toString());
        }
    }

    @GuardedBy("this")
    private void forceStopPackageLocked(String packageName, int uid, String reason) {
        forceStopPackageLocked(packageName, UserHandle.getAppId(uid), false, false, true, false, false, UserHandle.getUserId(uid), reason);
    }

    @GuardedBy("this")
    protected void finishForceStopPackageLocked(String packageName, int uid) {
        Intent intent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", packageName, null));
        if (!this.mProcessesReady) {
            intent.addFlags(1342177280);
        }
        intent.putExtra("android.intent.extra.UID", uid);
        intent.putExtra("android.intent.extra.user_handle", UserHandle.getUserId(uid));
        broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, UserHandle.getUserId(uid));
    }

    /* JADX WARNING: Removed duplicated region for block: B:32:0x00a4  */
    /* JADX WARNING: Removed duplicated region for block: B:30:0x009e  */
    /* JADX WARNING: Missing block: B:46:0x00f7, code:
            if (r11.userId != r4) goto L_0x0072;
     */
    /* JADX WARNING: Missing block: B:49:0x0103, code:
            if (android.os.UserHandle.getAppId(r11.uid) != r3) goto L_0x0072;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    final boolean killPackageProcessesLocked(String packageName, int appId, int userId, int minOomAdj, boolean callerWillRestart, boolean allowRestart, boolean doit, boolean evenPersistent, String reason) {
        String str = packageName;
        int i = appId;
        int i2 = userId;
        int i3 = minOomAdj;
        String str2 = reason;
        ArrayList<ProcessRecord> procs = new ArrayList();
        int NP = this.mProcessNames.getMap().size();
        int ip = 0;
        while (true) {
            int ip2 = ip;
            if (ip2 < NP) {
                SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip2);
                int NA = apps.size();
                ip = 0;
                while (true) {
                    int ia = ip;
                    if (ia >= NA) {
                        break;
                    }
                    int NP2;
                    ProcessRecord app = (ProcessRecord) apps.valueAt(ia);
                    String str3;
                    if (REASON_BACKGROUND.equals(str2) && HwDeviceManager.disallowOp(22, app.info.packageName)) {
                        str3 = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        NP2 = NP;
                        stringBuilder.append("[");
                        stringBuilder.append(app.info.packageName);
                        stringBuilder.append("] is super-whitelist app,won't be killed background");
                        Slog.i(str3, stringBuilder.toString());
                    } else {
                        NP2 = NP;
                        try {
                            if (str2.endsWith(REASON_SYS_REPLACE) && app.info.packageName.equals(str)) {
                                try {
                                    app.persistent = false;
                                } catch (Exception e) {
                                }
                                if (!app.removed) {
                                }
                            } else if (!app.persistent || evenPersistent) {
                                if (!app.removed) {
                                    if (app.setAdj < i3) {
                                        if (HwPCUtils.isPcCastModeInServer() && "relaunchIME".equals(str2) && str != null && str.equals(app.info.packageName)) {
                                            str3 = TAG;
                                            NP = new StringBuilder();
                                            NP.append("relaunchIME:");
                                            NP.append(app.info.packageName);
                                            NP.append(",");
                                            NP.append(app.setAdj);
                                            NP.append("-");
                                            NP.append(i3);
                                            Slog.i(str3, NP.toString());
                                        }
                                    }
                                    if (str == null) {
                                        if (i2 != -1) {
                                        }
                                        if (i >= 0) {
                                        }
                                    } else {
                                        NP = (app.pkgDeps == 0 || app.pkgDeps.contains(str) == 0) ? 0 : 1;
                                        if ((NP != 0 || UserHandle.getAppId(app.uid) == i) && ((i2 == -1 || app.userId == i2) && (app.pkgList.containsKey(str) || NP != 0))) {
                                            if (app == this.mHomeProcess && NP != 0 && (str2.endsWith(REASON_STOP_BY_APP) || MTM_THREAD_NAME.equals(Thread.currentThread().getName()))) {
                                                Slog.i(TAG, "Don't kill current launcher!");
                                            } else if (HwPCUtils.isPcCastModeInServer() && str2.endsWith("relaunch due to in diff display") && str != null && NP != 0 && ("com.huawei.desktop.systemui".equals(app.processName) || str.equals("com.google.android.gms"))) {
                                                Slog.i(TAG, "Don't kill pc systemui or com.google.android.gms when relaunch in diff display!");
                                            } else if (HwPCUtils.isPcCastModeInServer() && str2.endsWith("relaunchIME") && str != null && ("com.huawei.desktop.systemui".equals(app.processName) || "com.huawei.desktop.systemui".equals(app.processName))) {
                                                Slog.i(TAG, "Don't kill pc systemui when relaunch IME");
                                            } else if (HwPCUtils.isPcCastModeInServer() && str2.startsWith("stop") && !"com.huawei.desktop.systemui".equals(str) && NP != 0 && "com.huawei.desktop.systemui".equals(app.processName)) {
                                                Slog.i(TAG, "Don't kill pc systemui who is in the same process grop as packageName!");
                                            }
                                        }
                                    }
                                    if (!doit) {
                                        return true;
                                    }
                                    app.removed = true;
                                    procs.add(app);
                                    ip = ia + 1;
                                    NP = NP2;
                                } else if (doit) {
                                    procs.add(app);
                                }
                            }
                        } catch (Exception e2) {
                        }
                    }
                    ip = ia + 1;
                    NP = NP2;
                }
            } else {
                boolean z = true;
                ip = procs.size();
                for (int i4 = 0; i4 < ip; i4++) {
                    removeProcessLocked((ProcessRecord) procs.get(i4), callerWillRestart, allowRestart, str2);
                }
                boolean z2 = callerWillRestart;
                boolean z3 = allowRestart;
                updateOomAdjLocked();
                if (ip <= 0) {
                    z = false;
                }
                return z;
            }
            ip = ip2 + 1;
        }
    }

    private void cleanupDisabledPackageComponentsLocked(String packageName, int userId, boolean killProcess, String[] changedClasses) {
        String str = packageName;
        int i = userId;
        String[] strArr = changedClasses;
        IPackageManager pm = AppGlobals.getPackageManager();
        if (strArr != null) {
            Set<String> disabledClasses;
            int enabled = 0;
            boolean packageDisabled = false;
            Set<String> disabledClasses2 = null;
            for (int i2 = strArr.length - 1; i2 >= 0; i2--) {
                String changedClass = strArr[i2];
                int i3 = 0;
                if (changedClass.equals(str)) {
                    try {
                        boolean z;
                        enabled = pm.getApplicationEnabledSetting(str, i != -1 ? i : 0);
                        if (!(enabled == 1 || enabled == 0)) {
                            z = true;
                        }
                        packageDisabled = z;
                        if (packageDisabled) {
                            disabledClasses = null;
                            break;
                        }
                    } catch (Exception e) {
                        Exception exception = e;
                        return;
                    }
                }
                try {
                    int enabled2 = new ComponentName(str, changedClass);
                    if (i != -1) {
                        i3 = i;
                    }
                    enabled2 = pm.getComponentEnabledSetting(enabled2, i3);
                    if (!(enabled2 == 1 || enabled2 == 0)) {
                        if (disabledClasses2 == null) {
                            disabledClasses2 = new ArraySet(strArr.length);
                        }
                        disabledClasses2.add(changedClass);
                    }
                    enabled = enabled2;
                } catch (Exception e2) {
                    return;
                }
            }
            disabledClasses = disabledClasses2;
            if (packageDisabled || disabledClasses != null) {
                if (this.mStackSupervisor.finishDisabledPackageActivitiesLocked(str, disabledClasses, true, false, i) && this.mBooted) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                    this.mStackSupervisor.scheduleIdleLocked();
                }
                this.mRecentTasks.cleanupDisabledPackageTasksLocked(str, disabledClasses, i);
                String str2 = str;
                Set set = disabledClasses;
                this.mServices.bringDownDisabledPackageServicesLocked(str2, set, i, false, killProcess, true);
                ArrayList providers = new ArrayList();
                ArrayList<ContentProviderRecord> providers2 = providers;
                this.mProviderMap.collectPackageProvidersLocked(str2, set, true, false, i, providers);
                ArrayList<ContentProviderRecord> providers3 = providers2;
                for (enabled = providers3.size() - 1; enabled >= 0; enabled--) {
                    removeDyingProviderLocked(null, (ContentProviderRecord) providers3.get(enabled), true);
                }
                for (enabled = this.mBroadcastQueues.length - 1; enabled >= 0; enabled--) {
                    this.mBroadcastQueues[enabled].cleanupDisabledPackageReceiversLocked(str, disabledClasses, i, true);
                }
            }
        }
    }

    final boolean clearBroadcastQueueForUserLocked(int userId) {
        boolean didSomething = false;
        for (int i = this.mBroadcastQueues.length - 1; i >= 0; i--) {
            didSomething |= this.mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(null, null, userId, true);
        }
        return didSomething;
    }

    /* JADX WARNING: Removed duplicated region for block: B:13:0x0042  */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x00b8  */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x00a0  */
    /* JADX WARNING: Removed duplicated region for block: B:32:0x00f4  */
    /* JADX WARNING: Removed duplicated region for block: B:28:0x00ed  */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x010a  */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x0109 A:{RETURN} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    final boolean forceStopPackageLocked(String packageName, int appId, boolean callerWillRestart, boolean purgeCache, boolean doit, boolean evenPersistent, boolean uninstalling, int userId, String reason) {
        int appId2;
        boolean bDisableService;
        StringBuilder stringBuilder;
        int i;
        boolean didSomething;
        boolean didSomething2;
        String str = packageName;
        boolean z = doit;
        int i2 = userId;
        String str2 = reason;
        if (i2 == -1 && str == null) {
            Slog.w(TAG, "Can't force stop all processes of all users, that is insane!");
        }
        if (appId < 0 && str != null) {
            boolean z2;
            int i3;
            try {
                appId2 = UserHandle.getAppId(AppGlobals.getPackageManager().getPackageUid(str, 268435456, 0));
            } catch (RemoteException e) {
            }
            bDisableService = this.mHwAMSEx.isApplyPersistAppPatch(str, appId2, i2, callerWillRestart, evenPersistent, str2, null) ^ 1;
            if (z) {
                String str3;
                StringBuilder stringBuilder2;
                if (str != null) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Force stopping ");
                    stringBuilder2.append(str);
                    stringBuilder2.append(" appid=");
                    stringBuilder2.append(appId2);
                    stringBuilder2.append(" user=");
                    stringBuilder2.append(i2);
                    stringBuilder2.append(": ");
                    stringBuilder2.append(str2);
                    Slog.i(str3, stringBuilder2.toString());
                } else {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Force stopping u");
                    stringBuilder2.append(i2);
                    stringBuilder2.append(": ");
                    stringBuilder2.append(str2);
                    Slog.i(str3, stringBuilder2.toString());
                }
                this.mAppErrors.resetProcessCrashTimeLocked(str == null, appId2, i2);
            }
            if (str != null) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("stop user ");
                stringBuilder.append(i2);
            } else {
                stringBuilder = new StringBuilder();
                stringBuilder.append("stop ");
                stringBuilder.append(str);
            }
            stringBuilder.append(str2);
            i = -1;
            didSomething = killPackageProcessesLocked(str, appId2, i2, -10000, callerWillRestart, true, z, evenPersistent, stringBuilder.toString()) | this.mActivityStartController.clearPendingActivityLaunches(str);
            if (this.mStackSupervisor.finishDisabledPackageActivitiesLocked(str, null, z, evenPersistent, i2)) {
                z2 = true;
            } else if (!z) {
                return true;
            } else {
                z2 = true;
                didSomething = true;
            }
            didSomething2 = didSomething;
            if (bDisableService && this.mServices.bringDownDisabledPackageServicesLocked(str, null, i2, evenPersistent, true, z)) {
                if (z) {
                    return z2;
                }
                didSomething2 = true;
            }
            if (str == null) {
                this.mStickyBroadcasts.remove(i2);
            }
            ArrayList<ContentProviderRecord> providers = new ArrayList();
            if (this.mProviderMap.collectPackageProvidersLocked(str, null, z, evenPersistent, i2, (ArrayList) providers)) {
                if (!z) {
                    return z2;
                }
                didSomething2 = true;
            }
            for (i3 = providers.size() - z2; i3 >= 0; i3--) {
                removeDyingProviderLocked(null, (ContentProviderRecord) providers.get(i3), z2);
            }
            removeUriPermissionsForPackageLocked(str, i2, false, false);
            if (z) {
                for (i3 = this.mBroadcastQueues.length - z2; i3 >= 0; i3--) {
                    didSomething2 |= this.mBroadcastQueues[i3].cleanupDisabledPackageReceiversLocked(str, null, i2, z);
                }
            }
            if ((str == null || uninstalling) && this.mIntentSenderRecords.size() > 0) {
                Iterator<WeakReference<PendingIntentRecord>> it = this.mIntentSenderRecords.values().iterator();
                while (it.hasNext()) {
                    WeakReference<PendingIntentRecord> wpir = (WeakReference) it.next();
                    if (wpir == null) {
                        it.remove();
                    } else {
                        PendingIntentRecord pir = (PendingIntentRecord) wpir.get();
                        if (pir == null) {
                            it.remove();
                        } else {
                            if (str == null) {
                                if (pir.key.userId != i2) {
                                }
                            } else if (UserHandle.getAppId(pir.uid) == appId2) {
                                if (i2 == i || pir.key.userId == i2) {
                                    if (!str.equals(pir.key.packageName)) {
                                    }
                                }
                            }
                            if (!z) {
                                return z2;
                            }
                            didSomething2 = true;
                            it.remove();
                            makeIntentSenderCanceledLocked(pir);
                            if (!(pir.key.activity == null || pir.key.activity.pendingResults == null)) {
                                pir.key.activity.pendingResults.remove(pir.ref);
                            }
                        }
                    }
                }
            }
            if (z) {
                if (purgeCache && str != null) {
                    AttributeCache ac = AttributeCache.instance();
                    if (ac != null) {
                        ac.removePackage(str);
                    }
                }
                if (this.mBooted) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                    this.mStackSupervisor.scheduleIdleLocked();
                }
            }
            return didSomething2;
        }
        appId2 = appId;
        bDisableService = this.mHwAMSEx.isApplyPersistAppPatch(str, appId2, i2, callerWillRestart, evenPersistent, str2, null) ^ 1;
        if (z) {
        }
        if (str != null) {
        }
        stringBuilder.append(str2);
        i = -1;
        didSomething = killPackageProcessesLocked(str, appId2, i2, -10000, callerWillRestart, true, z, evenPersistent, stringBuilder.toString()) | this.mActivityStartController.clearPendingActivityLaunches(str);
        if (this.mStackSupervisor.finishDisabledPackageActivitiesLocked(str, null, z, evenPersistent, i2)) {
        }
        didSomething2 = didSomething;
        if (z) {
        }
    }

    private final ProcessRecord removeProcessNameLocked(String name, int uid) {
        return removeProcessNameLocked(name, uid, null);
    }

    private final ProcessRecord removeProcessNameLocked(String name, int uid, ProcessRecord expecting) {
        ProcessRecord old = (ProcessRecord) this.mProcessNames.get(name, uid);
        if (expecting == null || old == expecting) {
            this.mProcessNames.remove(name, uid);
        }
        if (!(old == null || old.uidRecord == null)) {
            UidRecord uidRecord = old.uidRecord;
            uidRecord.numProcs--;
            if (old.uidRecord.numProcs == 0) {
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("No more processes in ");
                    stringBuilder.append(old.uidRecord);
                    Slog.i(str, stringBuilder.toString());
                }
                enqueueUidChangeLocked(old.uidRecord, -1, 1);
                EventLogTags.writeAmUidStopped(uid);
                this.mActiveUids.remove(uid);
                noteUidProcessState(uid, 19);
            }
            old.uidRecord = null;
        }
        this.mIsolatedProcesses.remove(uid);
        return old;
    }

    private final void addProcessNameLocked(ProcessRecord proc) {
        ProcessRecord old = removeProcessNameLocked(proc.processName, proc.uid);
        String str;
        StringBuilder stringBuilder;
        if (old == proc && proc.persistent) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Re-adding persistent process ");
            stringBuilder.append(proc);
            Slog.w(str, stringBuilder.toString());
        } else if (old != null) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Already have existing proc ");
            stringBuilder.append(old);
            stringBuilder.append(" when adding ");
            stringBuilder.append(proc);
            Slog.wtf(str, stringBuilder.toString());
        }
        UidRecord uidRec = (UidRecord) this.mActiveUids.get(proc.uid);
        if (uidRec == null) {
            uidRec = new UidRecord(proc.uid);
            if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                String str2 = TAG;
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Creating new process uid: ");
                stringBuilder2.append(uidRec);
                Slog.i(str2, stringBuilder2.toString());
            }
            if (Arrays.binarySearch(this.mDeviceIdleTempWhitelist, UserHandle.getAppId(proc.uid)) >= 0 || this.mPendingTempWhitelist.indexOfKey(proc.uid) >= 0) {
                uidRec.curWhitelist = true;
                uidRec.setWhitelist = true;
            }
            uidRec.updateHasInternetPermission();
            this.mActiveUids.put(proc.uid, uidRec);
            EventLogTags.writeAmUidRunning(uidRec.uid);
            noteUidProcessState(uidRec.uid, uidRec.curProcState);
        }
        proc.uidRecord = uidRec;
        proc.renderThreadTid = 0;
        uidRec.numProcs++;
        this.mProcessNames.put(proc.processName, proc.uid, proc);
        if (this.mCustAms != null && this.mCustAms.isIQIEnable()) {
            proc.maxAdj = this.mCustAms.addProcesstoPersitList(proc);
        }
        if (proc.isolated) {
            this.mIsolatedProcesses.put(proc.uid, proc);
        }
    }

    @GuardedBy("this")
    protected boolean removeProcessLocked(ProcessRecord app, boolean callerWillRestart, boolean allowRestart, String reason) {
        String name = app.processName;
        int uid = app.uid;
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Force removing proc ");
            stringBuilder.append(app.toShortString());
            stringBuilder.append(" (");
            stringBuilder.append(name);
            stringBuilder.append(SliceAuthority.DELIMITER);
            stringBuilder.append(uid);
            stringBuilder.append(")");
            Slog.d(str, stringBuilder.toString());
        }
        if (((ProcessRecord) this.mProcessNames.get(name, uid)) != app) {
            String str2 = TAG;
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Ignoring remove of inactive process: ");
            stringBuilder2.append(app);
            Slog.w(str2, stringBuilder2.toString());
            return false;
        }
        removeProcessNameLocked(name, uid);
        if (this.mHeavyWeightProcess == app) {
            this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
            this.mHeavyWeightProcess = null;
        }
        boolean needRestart = false;
        if ((app.pid <= 0 || app.pid == MY_PID) && !(app.pid == 0 && app.pendingStart)) {
            this.mRemovedProcesses.add(app);
        } else {
            int pid = app.pid;
            if (pid > 0) {
                synchronized (this.mPidsSelfLocked) {
                    this.mPidsSelfLocked.remove(pid);
                    this.mHandler.removeMessages(20, app);
                }
                this.mDAProxy.notifyProcessDied(app.pid, app.uid);
                this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
                if (app.isolated) {
                    this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
                    getPackageManagerInternalLocked().removeIsolatedUid(app.uid);
                }
            }
            boolean willRestart = false;
            if (app.persistent && !app.isolated) {
                if (callerWillRestart) {
                    needRestart = true;
                } else {
                    willRestart = true;
                }
            }
            app.kill(reason, true);
            handleAppDiedLocked(app, willRestart, allowRestart);
            if (willRestart) {
                removeLruProcessLocked(app);
                addAppLocked(app.info, null, false, null);
            }
        }
        return needRestart;
    }

    @GuardedBy("this")
    private final void processContentProviderPublishTimedOutLocked(ProcessRecord app) {
        cleanupAppInLaunchingProvidersLocked(app, true);
        removeProcessLocked(app, false, true, "timeout publishing content providers");
    }

    private final void processStartTimedOutLocked(final ProcessRecord app) {
        int pid = app.pid;
        boolean gone = false;
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord knownApp = (ProcessRecord) this.mPidsSelfLocked.get(pid);
            if (knownApp != null && knownApp.thread == null) {
                this.mPidsSelfLocked.remove(pid);
                gone = true;
            }
        }
        String str;
        StringBuilder stringBuilder;
        if (gone) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Process ");
            stringBuilder.append(app);
            stringBuilder.append(" failed to attach");
            Slog.w(str, stringBuilder.toString());
            EventLog.writeEvent(EventLogTags.AM_PROCESS_START_TIMEOUT, new Object[]{Integer.valueOf(app.userId), Integer.valueOf(pid), Integer.valueOf(app.uid), app.processName});
            this.mDAProxy.notifyProcessDied(app.pid, app.uid);
            removeProcessNameLocked(app.processName, app.uid);
            if (this.mHeavyWeightProcess == app) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
                this.mHeavyWeightProcess = null;
            }
            this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
            cleanupAppInLaunchingProvidersLocked(app, true);
            this.mServices.processStartTimedOutLocked(app);
            app.kill("start timeout", true);
            if (app.isolated) {
                this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
            }
            removeLruProcessLocked(app);
            if (this.mBackupTarget != null && this.mBackupTarget.app.pid == pid) {
                Slog.w(TAG, "Unattached app died before backup, skipping");
                this.mHandler.post(new Runnable() {
                    public void run() {
                        try {
                            IBackupManager.Stub.asInterface(ServiceManager.getService(HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnected(app.info.packageName);
                        } catch (RemoteException e) {
                        }
                    }
                });
            }
            if (isPendingBroadcastProcessLocked(pid)) {
                Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
                skipPendingBroadcastLocked(pid);
                return;
            }
            return;
        }
        str = TAG;
        stringBuilder = new StringBuilder();
        stringBuilder.append("Spurious process start timeout - pid not known for ");
        stringBuilder.append(app);
        Slog.w(str, stringBuilder.toString());
    }

    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:196:0x0377 A:{SYNTHETIC, Splitter: B:196:0x0377} */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0409 A:{Catch:{ Exception -> 0x040d }} */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x041f A:{SYNTHETIC, Splitter: B:238:0x041f} */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x064b  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:188:0x0361 A:{SYNTHETIC, Splitter: B:188:0x0361} */
    /* JADX WARNING: Removed duplicated region for block: B:196:0x0377 A:{SYNTHETIC, Splitter: B:196:0x0377} */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0409 A:{Catch:{ Exception -> 0x040d }} */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x041f A:{SYNTHETIC, Splitter: B:238:0x041f} */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x064b  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:188:0x0361 A:{SYNTHETIC, Splitter: B:188:0x0361} */
    /* JADX WARNING: Removed duplicated region for block: B:196:0x0377 A:{SYNTHETIC, Splitter: B:196:0x0377} */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0409 A:{Catch:{ Exception -> 0x040d }} */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x041f A:{SYNTHETIC, Splitter: B:238:0x041f} */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x064b  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:163:0x02e5 A:{SYNTHETIC, Splitter: B:163:0x02e5} */
    /* JADX WARNING: Removed duplicated region for block: B:188:0x0361 A:{SYNTHETIC, Splitter: B:188:0x0361} */
    /* JADX WARNING: Removed duplicated region for block: B:196:0x0377 A:{SYNTHETIC, Splitter: B:196:0x0377} */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0409 A:{Catch:{ Exception -> 0x040d }} */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x041f A:{SYNTHETIC, Splitter: B:238:0x041f} */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x064b  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:163:0x02e5 A:{SYNTHETIC, Splitter: B:163:0x02e5} */
    /* JADX WARNING: Removed duplicated region for block: B:188:0x0361 A:{SYNTHETIC, Splitter: B:188:0x0361} */
    /* JADX WARNING: Removed duplicated region for block: B:196:0x0377 A:{SYNTHETIC, Splitter: B:196:0x0377} */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0409 A:{Catch:{ Exception -> 0x040d }} */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x041f A:{SYNTHETIC, Splitter: B:238:0x041f} */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x064b  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:163:0x02e5 A:{SYNTHETIC, Splitter: B:163:0x02e5} */
    /* JADX WARNING: Removed duplicated region for block: B:188:0x0361 A:{SYNTHETIC, Splitter: B:188:0x0361} */
    /* JADX WARNING: Removed duplicated region for block: B:196:0x0377 A:{SYNTHETIC, Splitter: B:196:0x0377} */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0409 A:{Catch:{ Exception -> 0x040d }} */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x041f A:{SYNTHETIC, Splitter: B:238:0x041f} */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x064b  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:96:0x01fa A:{SYNTHETIC, Splitter: B:96:0x01fa} */
    /* JADX WARNING: Removed duplicated region for block: B:114:0x0227 A:{SYNTHETIC, Splitter: B:114:0x0227} */
    /* JADX WARNING: Removed duplicated region for block: B:119:0x0237 A:{SYNTHETIC, Splitter: B:119:0x0237} */
    /* JADX WARNING: Removed duplicated region for block: B:126:0x0262 A:{SYNTHETIC, Splitter: B:126:0x0262} */
    /* JADX WARNING: Removed duplicated region for block: B:124:0x025d A:{SYNTHETIC, Splitter: B:124:0x025d} */
    /* JADX WARNING: Removed duplicated region for block: B:130:0x0270 A:{SYNTHETIC, Splitter: B:130:0x0270} */
    /* JADX WARNING: Removed duplicated region for block: B:154:0x02bd A:{SYNTHETIC, Splitter: B:154:0x02bd} */
    /* JADX WARNING: Removed duplicated region for block: B:163:0x02e5 A:{SYNTHETIC, Splitter: B:163:0x02e5} */
    /* JADX WARNING: Removed duplicated region for block: B:188:0x0361 A:{SYNTHETIC, Splitter: B:188:0x0361} */
    /* JADX WARNING: Removed duplicated region for block: B:196:0x0377 A:{SYNTHETIC, Splitter: B:196:0x0377} */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0409 A:{Catch:{ Exception -> 0x040d }} */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x041f A:{SYNTHETIC, Splitter: B:238:0x041f} */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0449 A:{SYNTHETIC, Splitter: B:247:0x0449} */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0483 A:{SYNTHETIC, Splitter: B:254:0x0483} */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0494 A:{SYNTHETIC, Splitter: B:257:0x0494} */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x055c  */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x05b9 A:{SYNTHETIC, Splitter: B:305:0x05b9} */
    /* JADX WARNING: Removed duplicated region for block: B:312:0x05de A:{SYNTHETIC, Splitter: B:312:0x05de} */
    /* JADX WARNING: Removed duplicated region for block: B:317:0x061b  */
    /* JADX WARNING: Removed duplicated region for block: B:323:0x0647  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x064b  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:346:0x06bb  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x06b0  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    private final boolean attachApplicationLocked(IApplicationThread thread, int pid, int callingUid, long startSeq) {
        ProcessRecord app;
        Exception e;
        int i;
        IApplicationThread iApplicationThread;
        String str;
        long startTime;
        StringBuilder stringBuilder;
        IApplicationThread iApplicationThread2 = thread;
        int i2 = pid;
        long j = startSeq;
        long startTime2 = SystemClock.uptimeMillis();
        if (i2 == MY_PID || i2 < 0) {
            app = null;
        } else {
            synchronized (this.mPidsSelfLocked) {
                app = (ProcessRecord) this.mPidsSelfLocked.get(i2);
            }
        }
        if (app == null && j > 0) {
            ProcessRecord pending = (ProcessRecord) this.mPendingStarts.get(j);
            if (pending != null && pending.startUid == callingUid) {
                ProcessRecord pending2 = pending;
                if (handleProcessStartedLocked(pending, i2, pending.usingWrapper, j, 1)) {
                    app = pending2;
                }
            }
        }
        ProcessRecord app2 = app;
        String str2;
        StringBuilder stringBuilder2;
        if (app2 == null) {
            str2 = TAG;
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append("No pending application record for pid ");
            stringBuilder2.append(i2);
            stringBuilder2.append(" (IApplicationThread ");
            stringBuilder2.append(iApplicationThread2);
            stringBuilder2.append("); dropping process");
            Slog.w(str2, stringBuilder2.toString());
            EventLog.writeEvent(EventLogTags.AM_DROP_PROCESS, i2);
            if (i2 <= 0 || i2 == MY_PID) {
                try {
                    thread.scheduleExit();
                } catch (Exception e2) {
                }
            } else {
                Process.killProcessQuiet(pid);
            }
            return false;
        }
        if (app2.thread != null) {
            handleAppDiedLocked(app2, true, true);
        }
        if (ActivityManagerDebugConfig.DEBUG_ALL) {
            str2 = TAG;
            StringBuilder stringBuilder3 = new StringBuilder();
            stringBuilder3.append("Binding process pid ");
            stringBuilder3.append(i2);
            stringBuilder3.append(" to record ");
            stringBuilder3.append(app2);
            Slog.v(str2, stringBuilder3.toString());
        }
        String processName = app2.processName;
        String processName2;
        long j2;
        try {
            String processName3;
            boolean enableTrackAllocation;
            boolean isRestrictedBackupMode;
            ApplicationInfo appInfo;
            ProfilerInfo profilerInfo;
            String preBindAgent;
            ProfilerInfo profilerInfo2;
            String preBindAgent2;
            boolean enableTrackAllocation2;
            ProfilerInfo profilerInfo3;
            String str3;
            String buildSerial;
            int testMode;
            ProfilerInfo profilerInfo4;
            List<ProviderInfo> providers;
            boolean z;
            String preBindAgent3;
            long uptimeMillis;
            AppDeathRecipient adr = new AppDeathRecipient(app2, i2, iApplicationThread2);
            thread.asBinder().linkToDeath(adr, 0);
            app2.deathRecipient = adr;
            EventLog.writeEvent(EventLogTags.AM_PROC_BOUND, new Object[]{Integer.valueOf(app2.userId), Integer.valueOf(app2.pid), app2.processName});
            app2.makeActive(iApplicationThread2, this.mProcessStats);
            app2.verifiedAdj = -10000;
            app2.setAdj = -10000;
            app2.curAdj = -10000;
            app2.setSchedGroup = 2;
            app2.curSchedGroup = 2;
            app2.forcingToImportant = null;
            updateProcessForegroundLocked(app2, false, false);
            app2.hasShownUi = false;
            app2.debugging = false;
            app2.cached = false;
            app2.killedByAm = false;
            app2.killed = false;
            app2.unlocked = StorageManager.isUserKeyUnlocked(app2.userId);
            this.mHandler.removeMessages(20, app2);
            boolean z2 = this.mProcessesReady || isAllowedWhileBooting(app2.info);
            boolean normalMode = z2;
            List<ProviderInfo> providers2 = normalMode ? generateApplicationProvidersLocked(app2) : null;
            if (providers2 == null || !checkAppInLaunchingProvidersLocked(app2)) {
                processName3 = processName;
            } else {
                Message msg = this.mHandler.obtainMessage(57);
                msg.obj = app2;
                processName3 = processName;
                this.mHandler.sendMessageDelayed(msg, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("sendMessage CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG for ");
                stringBuilder2.append(app2);
                Flog.i(103, stringBuilder2.toString());
            }
            checkTime(startTime2, "attachApplicationLocked: before bindApplication");
            if (!normalMode) {
                str2 = TAG;
                StringBuilder stringBuilder4 = new StringBuilder();
                stringBuilder4.append("Launching preboot mode app: ");
                stringBuilder4.append(app2);
                Slog.i(str2, stringBuilder4.toString());
            }
            StringBuilder stringBuilder5 = new StringBuilder();
            stringBuilder5.append("Binding process pid:");
            stringBuilder5.append(i2);
            stringBuilder5.append(" to procname:");
            processName2 = processName3;
            stringBuilder5.append(processName2);
            stringBuilder5.append(" providers.size=");
            stringBuilder5.append(providers2 == null ? 0 : providers2.size());
            Flog.i(102, stringBuilder5.toString());
            int testMode2 = 0;
            if (this.mDebugApp != null) {
                try {
                    if (this.mDebugApp.equals(processName2)) {
                        testMode2 = this.mWaitForDebugger ? 2 : 1;
                        app2.debugging = true;
                        if (this.mDebugTransient) {
                            this.mDebugApp = this.mOrigDebugApp;
                            this.mWaitForDebugger = this.mOrigWaitForDebugger;
                        }
                    }
                } catch (Exception e3) {
                    e = e3;
                }
            }
            if (this.mTrackAllocationApp != null) {
                if (this.mTrackAllocationApp.equals(processName2)) {
                    String str4;
                    StringBuilder stringBuilder6;
                    enableTrackAllocation = true;
                    this.mTrackAllocationApp = null;
                    isRestrictedBackupMode = false;
                    if (this.mBackupTarget != null) {
                        if (this.mBackupAppName.equals(processName2)) {
                            boolean z3 = this.mBackupTarget.appInfo.uid >= 10000 && (this.mBackupTarget.backupMode == 2 || this.mBackupTarget.backupMode == 3 || this.mBackupTarget.backupMode == 1);
                            isRestrictedBackupMode = z3;
                        }
                    }
                    if (app2.instr != null) {
                        notifyPackageUse(app2.instr.mClass.getPackageName(), 7);
                    }
                    if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                        str4 = TAG_CONFIGURATION;
                        stringBuilder6 = new StringBuilder();
                        stringBuilder6.append("Binding proc ");
                        stringBuilder6.append(processName2);
                        stringBuilder6.append(" with config ");
                        stringBuilder6.append(getGlobalConfiguration());
                        Slog.v(str4, stringBuilder6.toString());
                    }
                    appInfo = app2.instr == null ? app2.instr.mTargetInfo : app2.info;
                    app2.compat = compatibilityInfoForPackageLocked(appInfo);
                    if (this.mProfileApp != null) {
                        if (this.mProfileApp.equals(processName2)) {
                            this.mProfileProc = app2;
                            if (this.mProfilerInfo != null) {
                                String preBindAgent4;
                                boolean needsInfo = this.mProfilerInfo.profileFile != null || this.mProfilerInfo.attachAgentDuringBind;
                                if (needsInfo) {
                                    profilerInfo = null;
                                    preBindAgent = null;
                                    profilerInfo2 = new ProfilerInfo(this.mProfilerInfo);
                                } else {
                                    profilerInfo = null;
                                    preBindAgent = null;
                                    profilerInfo2 = null;
                                }
                                if (this.mProfilerInfo.agent != null) {
                                    preBindAgent4 = this.mProfilerInfo.agent;
                                } else {
                                    preBindAgent4 = preBindAgent;
                                }
                                preBindAgent2 = preBindAgent4;
                                if (this.mAppAgentMap != null) {
                                    if (this.mAppAgentMap.containsKey(processName2) && (app2.info.flags & 2) != 0) {
                                        preBindAgent4 = (String) this.mAppAgentMap.get(processName2);
                                        if (profilerInfo2 == null) {
                                            profilerInfo2 = new ProfilerInfo(null, null, 0, false, false, (String) this.mAppAgentMap.get(processName2), true);
                                            enableTrackAllocation2 = enableTrackAllocation;
                                            profilerInfo3 = profilerInfo2;
                                            if (!(profilerInfo3 == null || profilerInfo3.profileFd == null)) {
                                                profilerInfo3.profileFd = profilerInfo3.profileFd.dup();
                                                if (TextUtils.equals(this.mProfileApp, processName2) && this.mProfilerInfo != null) {
                                                    clearProfilerLocked();
                                                }
                                            }
                                            if (appInfo.targetSandboxVersion < 2) {
                                                if (appInfo.targetSdkVersion < 28) {
                                                    str3 = sTheRealBuildSerial;
                                                    buildSerial = str3;
                                                    if (this.mActiveInstrumentation.size() > 0) {
                                                        try {
                                                            if (app2.instr == null) {
                                                                int i3 = this.mActiveInstrumentation.size() - 1;
                                                                while (i3 >= 0 && app2.instr == null) {
                                                                    ActiveInstrumentation aInstr = (ActiveInstrumentation) this.mActiveInstrumentation.get(i3);
                                                                    testMode = testMode2;
                                                                    if (aInstr.mFinished == 0) {
                                                                        profilerInfo4 = profilerInfo3;
                                                                        if (aInstr.mTargetInfo.uid != app2.uid) {
                                                                            providers = providers2;
                                                                        } else if (aInstr.mTargetProcesses.length == 0) {
                                                                            if (aInstr.mTargetInfo.packageName.equals(app2.info.packageName)) {
                                                                                app2.instr = aInstr;
                                                                                aInstr.mRunningProcesses.add(app2);
                                                                            }
                                                                            providers = providers2;
                                                                        } else {
                                                                            String[] strArr = aInstr.mTargetProcesses;
                                                                            profilerInfo3 = strArr.length;
                                                                            providers = providers2;
                                                                            int providers3 = 0;
                                                                            while (providers3 < profilerInfo3) {
                                                                                try {
                                                                                    String[] strArr2 = strArr;
                                                                                    ProfilerInfo profilerInfo5 = profilerInfo3;
                                                                                    if (strArr[providers3].equals(app2.processName)) {
                                                                                        app2.instr = aInstr;
                                                                                        aInstr.mRunningProcesses.add(app2);
                                                                                        break;
                                                                                    }
                                                                                    providers3++;
                                                                                    strArr = strArr2;
                                                                                    profilerInfo3 = profilerInfo5;
                                                                                } catch (Exception e4) {
                                                                                    e = e4;
                                                                                    z = normalMode;
                                                                                    normalMode = startTime2;
                                                                                    i = i2;
                                                                                    iApplicationThread = iApplicationThread2;
                                                                                    str = TAG;
                                                                                    processName = new StringBuilder();
                                                                                    processName.append("Exception thrown during bind of ");
                                                                                    processName.append(app2);
                                                                                    Slog.wtf(str, processName.toString(), e);
                                                                                    app2.resetPackageList(this.mProcessStats);
                                                                                    app2.unlinkDeathRecipient();
                                                                                    startProcessLocked(app2, "bind fail", processName2);
                                                                                    return false;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    profilerInfo4 = profilerInfo3;
                                                                    providers = providers2;
                                                                    i3--;
                                                                    testMode2 = testMode;
                                                                    profilerInfo3 = profilerInfo4;
                                                                    providers2 = providers;
                                                                }
                                                            }
                                                        } catch (Exception e5) {
                                                            e = e5;
                                                            providers = providers2;
                                                            z = normalMode;
                                                            normalMode = startTime2;
                                                            i = i2;
                                                            iApplicationThread = iApplicationThread2;
                                                        }
                                                    }
                                                    testMode = testMode2;
                                                    profilerInfo4 = profilerInfo3;
                                                    providers = providers2;
                                                    if (preBindAgent2 != null) {
                                                        iApplicationThread2.attachAgent(preBindAgent2);
                                                    }
                                                    z2 = false;
                                                    if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                                        AutofillManagerInternal afm = (AutofillManagerInternal) LocalServices.getService(AutofillManagerInternal.class);
                                                        if (afm != null) {
                                                            preBindAgent3 = preBindAgent2;
                                                            z2 = afm.isCompatibilityModeRequested(app2.info.packageName, (long) app2.info.versionCode, app2.userId);
                                                            checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                                            if (Jlog.isPerfTest()) {
                                                                if (Jlog.isPerfTest()) {
                                                                    StringBuilder stringBuilder7 = new StringBuilder();
                                                                    stringBuilder7.append("pid=");
                                                                    stringBuilder7.append(i2);
                                                                    stringBuilder7.append("&processname=");
                                                                    stringBuilder7.append(processName2);
                                                                    Jlog.i(3034, Jlog.getMessage("ActivityManagerService", "attachApplicationLocked", stringBuilder7.toString()));
                                                                }
                                                            }
                                                            this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                                            boolean z4;
                                                            if (app2.isolatedEntryPoint != null) {
                                                                iApplicationThread2.runIsolatedEntryPoint(app2.isolatedEntryPoint, app2.isolatedEntryPointArgs);
                                                                z4 = isRestrictedBackupMode;
                                                                z = normalMode;
                                                                startTime = startTime2;
                                                                preBindAgent = preBindAgent3;
                                                            } else if (app2.instr != null) {
                                                                ComponentName componentName;
                                                                Bundle bundle;
                                                                IInstrumentationWatcher iInstrumentationWatcher;
                                                                IUiAutomationConnection iUiAutomationConnection;
                                                                boolean z5;
                                                                boolean z6;
                                                                try {
                                                                    componentName = app2.instr.mClass;
                                                                    bundle = app2.instr.mArguments;
                                                                    iInstrumentationWatcher = app2.instr.mWatcher;
                                                                    iUiAutomationConnection = app2.instr.mUiAutomationConnection;
                                                                    z5 = this.mBinderTransactionTrackingEnabled;
                                                                    z6 = isRestrictedBackupMode || !normalMode;
                                                                    z = normalMode;
                                                                } catch (Exception e6) {
                                                                    e = e6;
                                                                    z = normalMode;
                                                                    normalMode = startTime2;
                                                                    i = i2;
                                                                    iApplicationThread = thread;
                                                                    str = TAG;
                                                                    processName = new StringBuilder();
                                                                    processName.append("Exception thrown during bind of ");
                                                                    processName.append(app2);
                                                                    Slog.wtf(str, processName.toString(), e);
                                                                    app2.resetPackageList(this.mProcessStats);
                                                                    app2.unlinkDeathRecipient();
                                                                    startProcessLocked(app2, "bind fail", processName2);
                                                                    return false;
                                                                }
                                                                try {
                                                                    startTime = startTime2;
                                                                    preBindAgent = preBindAgent3;
                                                                } catch (Exception e7) {
                                                                    e = e7;
                                                                    j2 = startTime2;
                                                                    i = i2;
                                                                    iApplicationThread = thread;
                                                                    str = TAG;
                                                                    processName = new StringBuilder();
                                                                    processName.append("Exception thrown during bind of ");
                                                                    processName.append(app2);
                                                                    Slog.wtf(str, processName.toString(), e);
                                                                    app2.resetPackageList(this.mProcessStats);
                                                                    app2.unlinkDeathRecipient();
                                                                    startProcessLocked(app2, "bind fail", processName2);
                                                                    return false;
                                                                }
                                                                try {
                                                                    iApplicationThread2.bindApplication(processName2, appInfo, providers, componentName, profilerInfo4, bundle, iInstrumentationWatcher, iUiAutomationConnection, testMode, z5, enableTrackAllocation2, z6, app2.persistent, new Configuration(getGlobalConfiguration()), app2.compat, getCommonServicesLocked(app2.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked(), buildSerial, z2);
                                                                } catch (Exception e8) {
                                                                    e = e8;
                                                                    iApplicationThread = thread;
                                                                }
                                                            } else {
                                                                z4 = isRestrictedBackupMode;
                                                                z = normalMode;
                                                                startTime = startTime2;
                                                                preBindAgent = preBindAgent3;
                                                                try {
                                                                    enableTrackAllocation = this.mBinderTransactionTrackingEnabled;
                                                                    boolean z7 = z4 || !z;
                                                                    thread.bindApplication(processName2, appInfo, providers, null, profilerInfo4, null, null, null, testMode, enableTrackAllocation, enableTrackAllocation2, z7, app2.persistent, new Configuration(getGlobalConfiguration()), app2.compat, getCommonServicesLocked(app2.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked(), buildSerial, z2);
                                                                } catch (Exception e9) {
                                                                    e = e9;
                                                                    iApplicationThread = thread;
                                                                    normalMode = startTime;
                                                                    i = pid;
                                                                    str = TAG;
                                                                    processName = new StringBuilder();
                                                                    processName.append("Exception thrown during bind of ");
                                                                    processName.append(app2);
                                                                    Slog.wtf(str, processName.toString(), e);
                                                                    app2.resetPackageList(this.mProcessStats);
                                                                    app2.unlinkDeathRecipient();
                                                                    startProcessLocked(app2, "bind fail", processName2);
                                                                    return false;
                                                                }
                                                            }
                                                            if (profilerInfo4 != null) {
                                                                profilerInfo4.closeFd();
                                                                profilerInfo2 = null;
                                                            } else {
                                                                profilerInfo2 = profilerInfo4;
                                                            }
                                                            j2 = startTime;
                                                            checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                                                            updateLruProcessLocked(app2, false, null);
                                                            checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                                                            uptimeMillis = SystemClock.uptimeMillis();
                                                            app2.lastLowMemory = uptimeMillis;
                                                            app2.lastRequestedGc = uptimeMillis;
                                                            this.mPersistentStartingProcesses.remove(app2);
                                                            if (ActivityManagerDebugConfig.DEBUG_PROCESSES && this.mProcessesOnHold.contains(app2)) {
                                                                str2 = TAG;
                                                                stringBuilder2 = new StringBuilder();
                                                                stringBuilder2.append("Attach application locked removing on hold: ");
                                                                stringBuilder2.append(app2);
                                                                Slog.v(str2, stringBuilder2.toString());
                                                            }
                                                            this.mProcessesOnHold.remove(app2);
                                                            enableTrackAllocation = false;
                                                            isRestrictedBackupMode = false;
                                                            if (z) {
                                                                try {
                                                                    if (this.mStackSupervisor.attachApplicationLocked(app2)) {
                                                                        isRestrictedBackupMode = true;
                                                                    }
                                                                } catch (Exception e10) {
                                                                    str4 = TAG;
                                                                    stringBuilder6 = new StringBuilder();
                                                                    stringBuilder6.append("Exception thrown launching activities in ");
                                                                    stringBuilder6.append(app2);
                                                                    Slog.wtf(str4, stringBuilder6.toString(), e10);
                                                                    enableTrackAllocation = true;
                                                                }
                                                            }
                                                            if (!enableTrackAllocation) {
                                                                try {
                                                                    isRestrictedBackupMode |= this.mServices.attachApplicationLocked(app2, processName2);
                                                                    checkTime(j2, "attachApplicationLocked: after mServices.attachApplicationLocked");
                                                                } catch (Exception e102) {
                                                                    StringBuilder stringBuilder8 = new StringBuilder();
                                                                    stringBuilder8.append("Exception thrown starting services in ");
                                                                    stringBuilder8.append(app2);
                                                                    Flog.w(102, stringBuilder8.toString(), e102);
                                                                    str4 = TAG;
                                                                    stringBuilder6 = new StringBuilder();
                                                                    stringBuilder6.append("Exception thrown starting services in ");
                                                                    stringBuilder6.append(app2);
                                                                    Slog.wtf(str4, stringBuilder6.toString(), e102);
                                                                    enableTrackAllocation = true;
                                                                }
                                                            }
                                                            if (enableTrackAllocation) {
                                                                i = pid;
                                                            } else if (isPendingBroadcastProcessLocked(pid)) {
                                                                try {
                                                                    isRestrictedBackupMode |= sendPendingBroadcastsLocked(app2);
                                                                    checkTime(j2, "attachApplicationLocked: after sendPendingBroadcastsLocked");
                                                                } catch (Exception e1022) {
                                                                    str3 = TAG;
                                                                    stringBuilder = new StringBuilder();
                                                                    stringBuilder.append("Exception thrown dispatching broadcasts in ");
                                                                    stringBuilder.append(app2);
                                                                    Slog.wtf(str3, stringBuilder.toString(), e1022);
                                                                    enableTrackAllocation = true;
                                                                }
                                                            }
                                                            if (enableTrackAllocation && this.mBackupTarget != null && this.mBackupTarget.app == app2) {
                                                                if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                                                    str2 = TAG;
                                                                    stringBuilder6 = new StringBuilder();
                                                                    stringBuilder6.append("New app is backup target, launching agent for ");
                                                                    stringBuilder6.append(app2);
                                                                    Slog.v(str2, stringBuilder6.toString());
                                                                }
                                                                notifyPackageUse(this.mBackupTarget.appInfo.packageName, 5);
                                                                try {
                                                                    try {
                                                                        thread.scheduleCreateBackupAgent(this.mBackupTarget.appInfo, compatibilityInfoForPackageLocked(this.mBackupTarget.appInfo), this.mBackupTarget.backupMode);
                                                                    } catch (Exception e11) {
                                                                        e1022 = e11;
                                                                    }
                                                                } catch (Exception e12) {
                                                                    e1022 = e12;
                                                                    iApplicationThread = thread;
                                                                    str3 = TAG;
                                                                    stringBuilder = new StringBuilder();
                                                                    stringBuilder.append("Exception thrown creating backup agent in ");
                                                                    stringBuilder.append(app2);
                                                                    Slog.wtf(str3, stringBuilder.toString(), e1022);
                                                                    enableTrackAllocation = true;
                                                                    if (enableTrackAllocation) {
                                                                    }
                                                                }
                                                            } else {
                                                                iApplicationThread = thread;
                                                            }
                                                            if (enableTrackAllocation) {
                                                                app2.kill("error during init", true);
                                                                handleAppDiedLocked(app2, false, true);
                                                                return false;
                                                            }
                                                            if (!isRestrictedBackupMode) {
                                                                updateOomAdjLocked();
                                                                checkTime(j2, "attachApplicationLocked: after updateOomAdjLocked");
                                                            }
                                                            return true;
                                                        }
                                                    }
                                                    preBindAgent3 = preBindAgent2;
                                                    checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                                    if (Jlog.isPerfTest()) {
                                                    }
                                                    this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                                    if (app2.isolatedEntryPoint != null) {
                                                    }
                                                    if (profilerInfo4 != null) {
                                                    }
                                                    j2 = startTime;
                                                    checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                                                    updateLruProcessLocked(app2, false, null);
                                                    checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                                                    uptimeMillis = SystemClock.uptimeMillis();
                                                    app2.lastLowMemory = uptimeMillis;
                                                    app2.lastRequestedGc = uptimeMillis;
                                                    this.mPersistentStartingProcesses.remove(app2);
                                                    str2 = TAG;
                                                    stringBuilder2 = new StringBuilder();
                                                    stringBuilder2.append("Attach application locked removing on hold: ");
                                                    stringBuilder2.append(app2);
                                                    Slog.v(str2, stringBuilder2.toString());
                                                    this.mProcessesOnHold.remove(app2);
                                                    enableTrackAllocation = false;
                                                    isRestrictedBackupMode = false;
                                                    if (z) {
                                                    }
                                                    if (enableTrackAllocation) {
                                                    }
                                                    if (enableTrackAllocation) {
                                                    }
                                                    if (enableTrackAllocation) {
                                                    }
                                                    iApplicationThread = thread;
                                                    if (enableTrackAllocation) {
                                                    }
                                                }
                                            }
                                            str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
                                            buildSerial = str3;
                                            if (this.mActiveInstrumentation.size() > 0) {
                                            }
                                            testMode = testMode2;
                                            profilerInfo4 = profilerInfo3;
                                            providers = providers2;
                                            if (preBindAgent2 != null) {
                                            }
                                            z2 = false;
                                            if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                            }
                                            preBindAgent3 = preBindAgent2;
                                            checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                            if (Jlog.isPerfTest()) {
                                            }
                                            this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                            if (app2.isolatedEntryPoint != null) {
                                            }
                                            if (profilerInfo4 != null) {
                                            }
                                            j2 = startTime;
                                            checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                                            updateLruProcessLocked(app2, false, null);
                                            checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                                            uptimeMillis = SystemClock.uptimeMillis();
                                            app2.lastLowMemory = uptimeMillis;
                                            app2.lastRequestedGc = uptimeMillis;
                                            this.mPersistentStartingProcesses.remove(app2);
                                            str2 = TAG;
                                            stringBuilder2 = new StringBuilder();
                                            stringBuilder2.append("Attach application locked removing on hold: ");
                                            stringBuilder2.append(app2);
                                            Slog.v(str2, stringBuilder2.toString());
                                            this.mProcessesOnHold.remove(app2);
                                            enableTrackAllocation = false;
                                            isRestrictedBackupMode = false;
                                            if (z) {
                                            }
                                            if (enableTrackAllocation) {
                                            }
                                            if (enableTrackAllocation) {
                                            }
                                            if (enableTrackAllocation) {
                                            }
                                            iApplicationThread = thread;
                                            if (enableTrackAllocation) {
                                            }
                                        } else {
                                            if (profilerInfo2.agent == null) {
                                                enableTrackAllocation2 = enableTrackAllocation;
                                                profilerInfo3 = profilerInfo2.setAgent((String) this.mAppAgentMap.get(processName2), true);
                                                profilerInfo3.profileFd = profilerInfo3.profileFd.dup();
                                                clearProfilerLocked();
                                                if (appInfo.targetSandboxVersion < 2) {
                                                }
                                                str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
                                                buildSerial = str3;
                                                if (this.mActiveInstrumentation.size() > 0) {
                                                }
                                                testMode = testMode2;
                                                profilerInfo4 = profilerInfo3;
                                                providers = providers2;
                                                if (preBindAgent2 != null) {
                                                }
                                                z2 = false;
                                                if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                                }
                                                preBindAgent3 = preBindAgent2;
                                                checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                                if (Jlog.isPerfTest()) {
                                                }
                                                this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                                if (app2.isolatedEntryPoint != null) {
                                                }
                                                if (profilerInfo4 != null) {
                                                }
                                                j2 = startTime;
                                                checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                                                updateLruProcessLocked(app2, false, null);
                                                checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                                                uptimeMillis = SystemClock.uptimeMillis();
                                                app2.lastLowMemory = uptimeMillis;
                                                app2.lastRequestedGc = uptimeMillis;
                                                this.mPersistentStartingProcesses.remove(app2);
                                                str2 = TAG;
                                                stringBuilder2 = new StringBuilder();
                                                stringBuilder2.append("Attach application locked removing on hold: ");
                                                stringBuilder2.append(app2);
                                                Slog.v(str2, stringBuilder2.toString());
                                                this.mProcessesOnHold.remove(app2);
                                                enableTrackAllocation = false;
                                                isRestrictedBackupMode = false;
                                                if (z) {
                                                }
                                                if (enableTrackAllocation) {
                                                }
                                                if (enableTrackAllocation) {
                                                }
                                                if (enableTrackAllocation) {
                                                }
                                                iApplicationThread = thread;
                                                if (enableTrackAllocation) {
                                                }
                                            }
                                        }
                                    }
                                }
                                enableTrackAllocation2 = enableTrackAllocation;
                                profilerInfo3 = profilerInfo2;
                                profilerInfo3.profileFd = profilerInfo3.profileFd.dup();
                                clearProfilerLocked();
                                if (appInfo.targetSandboxVersion < 2) {
                                }
                                str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
                                buildSerial = str3;
                                if (this.mActiveInstrumentation.size() > 0) {
                                }
                                testMode = testMode2;
                                profilerInfo4 = profilerInfo3;
                                providers = providers2;
                                if (preBindAgent2 != null) {
                                }
                                z2 = false;
                                if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                }
                                preBindAgent3 = preBindAgent2;
                                checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                if (Jlog.isPerfTest()) {
                                }
                                this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                if (app2.isolatedEntryPoint != null) {
                                }
                                if (profilerInfo4 != null) {
                                }
                                j2 = startTime;
                                checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                                updateLruProcessLocked(app2, false, null);
                                checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                                uptimeMillis = SystemClock.uptimeMillis();
                                app2.lastLowMemory = uptimeMillis;
                                app2.lastRequestedGc = uptimeMillis;
                                this.mPersistentStartingProcesses.remove(app2);
                                str2 = TAG;
                                stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("Attach application locked removing on hold: ");
                                stringBuilder2.append(app2);
                                Slog.v(str2, stringBuilder2.toString());
                                this.mProcessesOnHold.remove(app2);
                                enableTrackAllocation = false;
                                isRestrictedBackupMode = false;
                                if (z) {
                                }
                                if (enableTrackAllocation) {
                                }
                                if (enableTrackAllocation) {
                                }
                                if (enableTrackAllocation) {
                                }
                                iApplicationThread = thread;
                                if (enableTrackAllocation) {
                                }
                            } else {
                                profilerInfo = null;
                                preBindAgent = null;
                                profilerInfo2 = profilerInfo;
                                preBindAgent2 = preBindAgent;
                                if (this.mAppAgentMap != null) {
                                }
                                enableTrackAllocation2 = enableTrackAllocation;
                                profilerInfo3 = profilerInfo2;
                                profilerInfo3.profileFd = profilerInfo3.profileFd.dup();
                                clearProfilerLocked();
                                if (appInfo.targetSandboxVersion < 2) {
                                }
                                str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
                                buildSerial = str3;
                                if (this.mActiveInstrumentation.size() > 0) {
                                }
                                testMode = testMode2;
                                profilerInfo4 = profilerInfo3;
                                providers = providers2;
                                if (preBindAgent2 != null) {
                                }
                                z2 = false;
                                if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                }
                                preBindAgent3 = preBindAgent2;
                                checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                if (Jlog.isPerfTest()) {
                                }
                                this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                if (app2.isolatedEntryPoint != null) {
                                }
                                if (profilerInfo4 != null) {
                                }
                                j2 = startTime;
                                checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                                updateLruProcessLocked(app2, false, null);
                                checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                                uptimeMillis = SystemClock.uptimeMillis();
                                app2.lastLowMemory = uptimeMillis;
                                app2.lastRequestedGc = uptimeMillis;
                                this.mPersistentStartingProcesses.remove(app2);
                                str2 = TAG;
                                stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("Attach application locked removing on hold: ");
                                stringBuilder2.append(app2);
                                Slog.v(str2, stringBuilder2.toString());
                                this.mProcessesOnHold.remove(app2);
                                enableTrackAllocation = false;
                                isRestrictedBackupMode = false;
                                if (z) {
                                }
                                if (enableTrackAllocation) {
                                }
                                if (enableTrackAllocation) {
                                }
                                if (enableTrackAllocation) {
                                }
                                iApplicationThread = thread;
                                if (enableTrackAllocation) {
                                }
                            }
                        }
                    }
                    profilerInfo = null;
                    preBindAgent = null;
                    if (app2.instr != null) {
                        if (app2.instr.mProfileFile != null) {
                            ProfilerInfo profilerInfo6 = new ProfilerInfo(app2.instr.mProfileFile, null, 0, false, false, null, false);
                            preBindAgent2 = preBindAgent;
                            if (this.mAppAgentMap != null) {
                            }
                            enableTrackAllocation2 = enableTrackAllocation;
                            profilerInfo3 = profilerInfo2;
                            profilerInfo3.profileFd = profilerInfo3.profileFd.dup();
                            clearProfilerLocked();
                            if (appInfo.targetSandboxVersion < 2) {
                            }
                            str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
                            buildSerial = str3;
                            if (this.mActiveInstrumentation.size() > 0) {
                            }
                            testMode = testMode2;
                            profilerInfo4 = profilerInfo3;
                            providers = providers2;
                            if (preBindAgent2 != null) {
                            }
                            z2 = false;
                            if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                            }
                            preBindAgent3 = preBindAgent2;
                            checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                            if (Jlog.isPerfTest()) {
                            }
                            this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                            if (app2.isolatedEntryPoint != null) {
                            }
                            if (profilerInfo4 != null) {
                            }
                            j2 = startTime;
                            checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                            updateLruProcessLocked(app2, false, null);
                            checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                            uptimeMillis = SystemClock.uptimeMillis();
                            app2.lastLowMemory = uptimeMillis;
                            app2.lastRequestedGc = uptimeMillis;
                            this.mPersistentStartingProcesses.remove(app2);
                            str2 = TAG;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("Attach application locked removing on hold: ");
                            stringBuilder2.append(app2);
                            Slog.v(str2, stringBuilder2.toString());
                            this.mProcessesOnHold.remove(app2);
                            enableTrackAllocation = false;
                            isRestrictedBackupMode = false;
                            if (z) {
                            }
                            if (enableTrackAllocation) {
                            }
                            if (enableTrackAllocation) {
                            }
                            if (enableTrackAllocation) {
                            }
                            iApplicationThread = thread;
                            if (enableTrackAllocation) {
                            }
                        }
                    }
                    profilerInfo2 = profilerInfo;
                    preBindAgent2 = preBindAgent;
                    if (this.mAppAgentMap != null) {
                    }
                    enableTrackAllocation2 = enableTrackAllocation;
                    profilerInfo3 = profilerInfo2;
                    profilerInfo3.profileFd = profilerInfo3.profileFd.dup();
                    clearProfilerLocked();
                    if (appInfo.targetSandboxVersion < 2) {
                    }
                    str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
                    buildSerial = str3;
                    if (this.mActiveInstrumentation.size() > 0) {
                    }
                    testMode = testMode2;
                    profilerInfo4 = profilerInfo3;
                    providers = providers2;
                    if (preBindAgent2 != null) {
                    }
                    z2 = false;
                    if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                    }
                    preBindAgent3 = preBindAgent2;
                    try {
                        checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                        if (Jlog.isPerfTest()) {
                        }
                        this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                        if (app2.isolatedEntryPoint != null) {
                        }
                        if (profilerInfo4 != null) {
                        }
                        j2 = startTime;
                    } catch (Exception e13) {
                        e1022 = e13;
                        z = normalMode;
                        normalMode = startTime2;
                        i = i2;
                        iApplicationThread = iApplicationThread2;
                        str = TAG;
                        processName = new StringBuilder();
                        processName.append("Exception thrown during bind of ");
                        processName.append(app2);
                        Slog.wtf(str, processName.toString(), e1022);
                        app2.resetPackageList(this.mProcessStats);
                        app2.unlinkDeathRecipient();
                        startProcessLocked(app2, "bind fail", processName2);
                        return false;
                    }
                    try {
                        checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                        updateLruProcessLocked(app2, false, null);
                        checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                        uptimeMillis = SystemClock.uptimeMillis();
                        app2.lastLowMemory = uptimeMillis;
                        app2.lastRequestedGc = uptimeMillis;
                        this.mPersistentStartingProcesses.remove(app2);
                        str2 = TAG;
                        stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Attach application locked removing on hold: ");
                        stringBuilder2.append(app2);
                        Slog.v(str2, stringBuilder2.toString());
                        this.mProcessesOnHold.remove(app2);
                        enableTrackAllocation = false;
                        isRestrictedBackupMode = false;
                        if (z) {
                        }
                        if (enableTrackAllocation) {
                        }
                        if (enableTrackAllocation) {
                        }
                        if (enableTrackAllocation) {
                        }
                        iApplicationThread = thread;
                        if (enableTrackAllocation) {
                        }
                    } catch (Exception e14) {
                        e1022 = e14;
                        iApplicationThread = thread;
                        i = pid;
                        str = TAG;
                        processName = new StringBuilder();
                        processName.append("Exception thrown during bind of ");
                        processName.append(app2);
                        Slog.wtf(str, processName.toString(), e1022);
                        app2.resetPackageList(this.mProcessStats);
                        app2.unlinkDeathRecipient();
                        startProcessLocked(app2, "bind fail", processName2);
                        return false;
                    }
                }
            }
            enableTrackAllocation = false;
            isRestrictedBackupMode = false;
            if (this.mBackupTarget != null) {
            }
            try {
                if (app2.instr != null) {
                }
                if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                }
                if (app2.instr == null) {
                }
                app2.compat = compatibilityInfoForPackageLocked(appInfo);
                if (this.mProfileApp != null) {
                }
                profilerInfo = null;
                preBindAgent = null;
                if (app2.instr != null) {
                }
                profilerInfo2 = profilerInfo;
                preBindAgent2 = preBindAgent;
                if (this.mAppAgentMap != null) {
                }
                enableTrackAllocation2 = enableTrackAllocation;
                profilerInfo3 = profilerInfo2;
                profilerInfo3.profileFd = profilerInfo3.profileFd.dup();
                clearProfilerLocked();
                if (appInfo.targetSandboxVersion < 2) {
                }
                str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
                buildSerial = str3;
                if (this.mActiveInstrumentation.size() > 0) {
                }
                testMode = testMode2;
                profilerInfo4 = profilerInfo3;
                providers = providers2;
                if (preBindAgent2 != null) {
                }
                z2 = false;
                if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                }
                preBindAgent3 = preBindAgent2;
                checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                if (Jlog.isPerfTest()) {
                }
                this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                if (app2.isolatedEntryPoint != null) {
                }
                if (profilerInfo4 != null) {
                }
                j2 = startTime;
                checkTime(j2, "attachApplicationLocked: immediately after bindApplication");
                updateLruProcessLocked(app2, false, null);
                checkTime(j2, "attachApplicationLocked: after updateLruProcessLocked");
                uptimeMillis = SystemClock.uptimeMillis();
                app2.lastLowMemory = uptimeMillis;
                app2.lastRequestedGc = uptimeMillis;
                this.mPersistentStartingProcesses.remove(app2);
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Attach application locked removing on hold: ");
                stringBuilder2.append(app2);
                Slog.v(str2, stringBuilder2.toString());
                this.mProcessesOnHold.remove(app2);
                enableTrackAllocation = false;
                isRestrictedBackupMode = false;
                if (z) {
                }
                if (enableTrackAllocation) {
                }
                if (enableTrackAllocation) {
                }
                if (enableTrackAllocation) {
                }
                iApplicationThread = thread;
                if (enableTrackAllocation) {
                }
            } catch (Exception e15) {
                e1022 = e15;
                z = normalMode;
                providers = providers2;
                i = i2;
                iApplicationThread = iApplicationThread2;
                str = TAG;
                processName = new StringBuilder();
                processName.append("Exception thrown during bind of ");
                processName.append(app2);
                Slog.wtf(str, processName.toString(), e1022);
                app2.resetPackageList(this.mProcessStats);
                app2.unlinkDeathRecipient();
                startProcessLocked(app2, "bind fail", processName2);
                return false;
            }
        } catch (RemoteException e16) {
            processName2 = processName;
            j2 = startTime2;
            i = i2;
            iApplicationThread = iApplicationThread2;
            app2.resetPackageList(this.mProcessStats);
            startProcessLocked(app2, "link fail", processName2);
            return false;
        }
    }

    /* JADX WARNING: Missing block: B:13:0x0058, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:14:0x005d, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY == false) goto L_0x0062;
     */
    /* JADX WARNING: Missing block: B:15:0x005f, code:
            android.os.Trace.traceEnd(64);
     */
    /* JADX WARNING: Missing block: B:16:0x0062, code:
            return;
     */
    /* JADX WARNING: Missing block: B:22:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:23:0x009a, code:
            if (android.util.Jlog.isMicroTest() == false) goto L_0x00a9;
     */
    /* JADX WARNING: Missing block: B:24:0x009c, code:
            android.util.Jlog.i(3103, android.util.Jlog.getMessage("ActivityManagerService", "attachApplication", r7));
     */
    /* JADX WARNING: Missing block: B:26:0x00ab, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY == false) goto L_0x00b0;
     */
    /* JADX WARNING: Missing block: B:27:0x00ad, code:
            android.os.Trace.traceEnd(64);
     */
    /* JADX WARNING: Missing block: B:28:0x00b0, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void attachApplication(IApplicationThread thread, long startSeq) {
        IApplicationThread iApplicationThread = thread;
        if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
            Trace.traceBegin(64, "attachApplication");
        }
        try {
            if (Jlog.isMicroTest()) {
                Jlog.i(3102, Jlog.getMessage("ActivityManagerService", "attachApplication", iApplicationThread));
            }
            synchronized (this) {
                boostPriorityForLockedSection();
                long start = SystemClock.uptimeMillis();
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                long origId = Binder.clearCallingIdentity();
                StringBuilder stringBuilder;
                if (iApplicationThread == null) {
                    String str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("attachApplicationLocked thread is null, return! callingPid: ");
                    stringBuilder.append(callingPid);
                    stringBuilder.append(", callingUid: ");
                    stringBuilder.append(callingUid);
                    Slog.e(str, stringBuilder.toString());
                } else {
                    attachApplicationLocked(iApplicationThread, callingPid, callingUid, startSeq);
                    Binder.restoreCallingIdentity(origId);
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Attach thread to application:");
                    stringBuilder.append(callingPid);
                    stringBuilder.append(" cost ");
                    stringBuilder.append(SystemClock.uptimeMillis() - start);
                    Flog.i(101, stringBuilder.toString());
                }
            }
        } catch (Throwable th) {
            if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
                Trace.traceEnd(64);
            }
        }
    }

    public final void activityIdle(IBinder token, Configuration config, boolean stopProfiling) {
        long origId = Binder.clearCallingIdentity();
        if (!this.mActivityIdle) {
            this.mActivityIdle = true;
            HwBootFail.notifyBootSuccess();
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityRecord.getStackLocked(token) != null) {
                    ActivityRecord r = this.mStackSupervisor.activityIdleInternalLocked(token, false, false, config);
                    if (stopProfiling && this.mProfileProc == r.app && this.mProfilerInfo != null) {
                        clearProfilerLocked();
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        Binder.restoreCallingIdentity(origId);
    }

    void postFinishBooting(boolean finishBooting, boolean enableScreen) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(45, finishBooting, enableScreen));
    }

    void enableScreenAfterBoot() {
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_ENABLE_SCREEN, SystemClock.uptimeMillis());
        Jlog.d(34, "JL_BOOT_PROGRESS_ENABLE_SCREEN");
        this.mWindowManager.enableScreenAfterBoot();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                updateEventDispatchingLocked();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (this.mIsHwLowRam) {
            Message nmsg = this.mHandler.obtainMessage(98);
            Log.i(TAG, "smartshrink send msg to trim service");
            this.mHandler.sendMessageDelayed(nmsg, this.mConstants.GC_MIN_INTERVAL);
        }
    }

    public void showBootMessage(CharSequence msg, boolean always) {
        if (Binder.getCallingUid() == Process.myUid()) {
            this.mWindowManager.showBootMessage(msg, always);
            return;
        }
        throw new SecurityException();
    }

    public void keyguardGoingAway(int flags) {
        enforceNotIsolatedCaller("keyguardGoingAway");
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("setKeyguardGoingAway flags: ");
        stringBuilder.append(flags);
        stringBuilder.append(" by pid:");
        stringBuilder.append(Binder.getCallingPid());
        Flog.i(107, stringBuilder.toString());
        long token = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mKeyguardController.keyguardGoingAway(flags);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(token);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(token);
        }
    }

    boolean isKeyguardLocked() {
        return this.mKeyguardController.isKeyguardLocked();
    }

    /* JADX WARNING: Missing block: B:11:0x0014, code:
            resetPriorityAfterLockedSection();
            r12.mAppOpsService.systemReady();
            r2 = new android.util.ArraySet();
            r3 = android.os.Build.SUPPORTED_ABIS;
            r4 = r3.length;
            r5 = 0;
     */
    /* JADX WARNING: Missing block: B:12:0x0025, code:
            if (r5 >= r4) goto L_0x0070;
     */
    /* JADX WARNING: Missing block: B:13:0x0027, code:
            r6 = r3[r5];
            android.os.Process.zygoteProcess.establishZygoteConnectionForAbi(r6);
            r7 = dalvik.system.VMRuntime.getInstructionSet(r6);
     */
    /* JADX WARNING: Missing block: B:14:0x0036, code:
            if (r2.contains(r7) != false) goto L_0x006d;
     */
    /* JADX WARNING: Missing block: B:16:?, code:
            r12.mInstaller.markBootComplete(dalvik.system.VMRuntime.getInstructionSet(r6));
     */
    /* JADX WARNING: Missing block: B:17:0x0042, code:
            r8 = move-exception;
     */
    /* JADX WARNING: Missing block: B:18:0x0043, code:
            r9 = TAG;
            r10 = new java.lang.StringBuilder();
            r10.append("Unable to mark boot complete for abi: ");
            r10.append(r6);
            r10.append(" (");
            r10.append(r8.getMessage());
            r10.append(")");
            android.util.Slog.w(r9, r10.toString());
     */
    /* JADX WARNING: Missing block: B:21:0x0070, code:
            r3 = new android.content.IntentFilter();
            r3.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
            r3.addDataScheme("package");
            r12.mContext.registerReceiver(new com.android.server.am.ActivityManagerService.AnonymousClass9(r12), r3);
            r4 = new android.content.IntentFilter();
            r4.addAction("com.android.server.am.DELETE_DUMPHEAP");
            r12.mContext.registerReceiver(new com.android.server.am.ActivityManagerService.AnonymousClass10(r12), r4);
            r12.mSystemServiceManager.startBootPhase(1000);
     */
    /* JADX WARNING: Missing block: B:22:0x00a5, code:
            monitor-enter(r12);
     */
    /* JADX WARNING: Missing block: B:24:?, code:
            boostPriorityForLockedSection();
            r5 = r12.mProcessesOnHold.size();
     */
    /* JADX WARNING: Missing block: B:25:0x00af, code:
            if (r5 <= 0) goto L_0x00e9;
     */
    /* JADX WARNING: Missing block: B:26:0x00b1, code:
            r6 = new java.util.ArrayList(r12.mProcessesOnHold);
     */
    /* JADX WARNING: Missing block: B:27:0x00b9, code:
            if (r0 >= r5) goto L_0x00e9;
     */
    /* JADX WARNING: Missing block: B:29:0x00bd, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_PROCESSES == false) goto L_0x00d9;
     */
    /* JADX WARNING: Missing block: B:30:0x00bf, code:
            r7 = TAG;
            r8 = new java.lang.StringBuilder();
            r8.append("Starting process on hold: ");
            r8.append(r6.get(r0));
            android.util.Slog.v(r7, r8.toString());
     */
    /* JADX WARNING: Missing block: B:31:0x00d9, code:
            startProcessLocked((com.android.server.am.ProcessRecord) r6.get(r0), "on-hold", null);
            r0 = r0 + 1;
     */
    /* JADX WARNING: Missing block: B:33:0x00eb, code:
            if (r12.mFactoryTest != 1) goto L_0x00f2;
     */
    /* JADX WARNING: Missing block: B:34:0x00ed, code:
            monitor-exit(r12);
     */
    /* JADX WARNING: Missing block: B:37:?, code:
            r12.mHandler.sendMessageDelayed(r12.mHandler.obtainMessage(CHECK_EXCESSIVE_POWER_USE_MSG), r12.mConstants.POWER_CHECK_INTERVAL);
            android.os.SystemProperties.set("sys.boot_completed", "1");
     */
    /* JADX WARNING: Missing block: B:38:0x0119, code:
            if ("trigger_restart_min_framework".equals(android.os.SystemProperties.get("vold.decrypt")) == false) goto L_0x012a;
     */
    /* JADX WARNING: Missing block: B:40:0x0128, code:
            if (com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS.equals(android.os.SystemProperties.get("vold.encrypt_progress")) == false) goto L_0x0131;
     */
    /* JADX WARNING: Missing block: B:41:0x012a, code:
            android.os.SystemProperties.set("dev.bootcomplete", "1");
     */
    /* JADX WARNING: Missing block: B:42:0x0131, code:
            r12.mUserController.sendBootCompleted(new com.android.server.am.ActivityManagerService.AnonymousClass11(r12));
            r12.mUserController.scheduleStartProfiles();
            initBroadcastResourceLocked();
            initAppAndAppServiceResourceLocked();
     */
    /* JADX WARNING: Missing block: B:43:0x0146, code:
            monitor-exit(r12);
     */
    /* JADX WARNING: Missing block: B:44:0x0147, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:45:0x014a, code:
            return;
     */
    /* JADX WARNING: Missing block: B:49:0x014d, code:
            resetPriorityAfterLockedSection();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    final void finishBooting() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mBootAnimationComplete) {
                    int ip = 0;
                    this.mCallFinishBooting = false;
                } else {
                    this.mCallFinishBooting = true;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return;
        completedIsas.add(instructionSet);
        int i++;
    }

    public void bootAnimationComplete() {
        boolean callFinishBooting;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                callFinishBooting = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (callFinishBooting) {
            Trace.traceBegin(64, "FinishBooting");
            finishBooting();
            Trace.traceEnd(64);
        }
        sDisableForceGC = SystemProperties.getBoolean("persist.disable.force.gc", false);
        if (sDisableForceGC) {
            Log.i(TAG, "forceGCAfterRebooting has been disabled by property persist.disable.force.gc = true");
            return;
        }
        Log.i(TAG, "Send Force-gc message to schedule forceGCAfterRebooting after delay 210000 ms");
        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(FORCE_GC_ALL_MSG), 210000);
    }

    final void ensureBootCompleted() {
        boolean booting;
        boolean enableScreen;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                booting = this.mBooting;
                this.mBooting = false;
                enableScreen = this.mBooted ^ true;
                this.mBooted = true;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (booting) {
            Trace.traceBegin(64, "FinishBooting");
            finishBooting();
            Trace.traceEnd(64);
        }
        if (enableScreen) {
            enableScreenAfterBoot();
        }
    }

    public final void activityResumed(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord.activityResumedLocked(token);
                this.mWindowManager.notifyAppResumedFinished(token);
                dispatchActivityResumed(token);
                this.mHwAMSEx.dispatchActivityLifeState(ActivityRecord.forToken(token), "onResume");
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        Binder.restoreCallingIdentity(origId);
    }

    public final void activityPaused(IBinder token) {
        if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
            Trace.traceBegin(64, "activityPaused");
        }
        try {
            if (Jlog.isMicroTest()) {
                Jlog.i(3104, Jlog.getMessage("ActivityManagerService", "activityPaused", token));
            }
            long origId = Binder.clearCallingIdentity();
            synchronized (this) {
                boostPriorityForLockedSection();
                long start = SystemClock.uptimeMillis();
                ActivityStack stack = ActivityRecord.getStackLocked(token);
                if (stack != null) {
                    stack.activityPausedLocked(token, false);
                    dispatchActivityPaused(token);
                    this.mHwAMSEx.dispatchActivityLifeState(ActivityRecord.forToken(token), "onPause");
                }
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("activityPaused cost ");
                stringBuilder.append(SystemClock.uptimeMillis() - start);
                Flog.i(101, stringBuilder.toString());
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            if (Jlog.isMicroTest()) {
                Jlog.i(3105, Jlog.getMessage("ActivityManagerService", "activityPaused", token));
            }
            if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
                Trace.traceEnd(64);
            }
        } catch (Throwable th) {
            if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
                Trace.traceEnd(64);
            }
        }
    }

    public final void activityStopped(IBinder token, Bundle icicle, PersistableBundle persistentState, CharSequence description) {
        if (ActivityManagerDebugConfig.DEBUG_ALL) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Activity stopped: token=");
            stringBuilder.append(token);
            Slog.v(str, stringBuilder.toString());
        }
        if (icicle == null || !icicle.hasFileDescriptors()) {
            long origId = Binder.clearCallingIdentity();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(token);
                    if (r != null) {
                        r.activityStoppedLocked(icicle, persistentState, description);
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            trimApplications();
            Binder.restoreCallingIdentity(origId);
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Bundle");
    }

    public final void activityDestroyed(IBinder token) {
        boolean z;
        if (ActivityManagerDebugConfig.DEBUG_SWITCH) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            z = "ACTIVITY DESTROYED: ";
            stringBuilder.append(z);
            stringBuilder.append(token);
            Slog.v(str, stringBuilder.toString());
        }
        boolean isPrimary = false;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack stack = ActivityRecord.getStackLocked(token);
                z = false;
                if (stack != null) {
                    isPrimary = stack.getWindowConfiguration().getWindowingMode() == 3;
                    stack.activityDestroyedLocked(token, "activityDestroyed");
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        long orig = Binder.clearCallingIdentity();
        try {
            if (this.mShouldFreeze && isPrimary) {
                Slog.i(TAG, "stopFreezingScreen");
                this.mShouldFreeze = z;
                this.mHandler.removeMessages(500);
                this.mWindowManager.stopFreezingScreen();
            }
            Binder.restoreCallingIdentity(orig);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(orig);
        }
    }

    public final void activityRelaunched(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mStackSupervisor.activityRelaunchedLocked(token);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        Binder.restoreCallingIdentity(origId);
    }

    public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration, int[] verticalSizeConfigurations, int[] smallestSizeConfigurations) {
        if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Report configuration: ");
            stringBuilder.append(token);
            stringBuilder.append(" ");
            stringBuilder.append(horizontalSizeConfiguration);
            stringBuilder.append(" ");
            stringBuilder.append(verticalSizeConfigurations);
            Slog.v(str, stringBuilder.toString());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord record = ActivityRecord.isInStackLocked(token);
                if (record != null) {
                    record.setSizeConfigurations(horizontalSizeConfiguration, verticalSizeConfigurations, smallestSizeConfigurations);
                } else {
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("reportSizeConfigurations: ActivityRecord not found for: ");
                    stringBuilder2.append(token);
                    throw new IllegalArgumentException(stringBuilder2.toString());
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void notifyLaunchTaskBehindComplete(IBinder token) {
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("notifyLaunchTaskBehindComplete, token=");
        stringBuilder.append(token);
        HwSlog.d(str, stringBuilder.toString());
        this.mStackSupervisor.scheduleLaunchTaskBehindComplete(token);
    }

    public final void notifyEnterAnimationComplete(IBinder token) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(44, token));
    }

    public String getCallingPackage(IBinder token) {
        String str;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = getCallingRecordLocked(token);
                str = r != null ? r.info.packageName : null;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return str;
    }

    public ComponentName getCallingActivity(IBinder token) {
        ComponentName component;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = getCallingRecordLocked(token);
                component = r != null ? r.intent.getComponent() : null;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return component;
    }

    private ActivityRecord getCallingRecordLocked(IBinder token) {
        ActivityRecord r = ActivityRecord.isInStackLocked(token);
        if (r == null) {
            return null;
        }
        return r.resultTo;
    }

    public ComponentName getActivityClassForToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    ComponentName component = r.intent.getComponent();
                    resetPriorityAfterLockedSection();
                    return component;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return null;
    }

    public String getPackageForToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    String str = r.packageName;
                    resetPriorityAfterLockedSection();
                    return str;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return null;
    }

    public boolean isRootVoiceInteraction(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    boolean z = r.rootVoiceInteraction;
                    resetPriorityAfterLockedSection();
                    return z;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return false;
    }

    public IIntentSender getIntentSender(int type, String packageName, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions, int userId) {
        int i;
        RemoteException e;
        Throwable th;
        int i2 = type;
        String str = packageName;
        Intent[] intentArr = intents;
        String[] strArr = resolvedTypes;
        enforceNotIsolatedCaller("getIntentSender");
        if (intentArr != null) {
            if (intentArr.length >= 1) {
                for (i = 0; i < intentArr.length; i++) {
                    Intent intent = intentArr[i];
                    if (intent != null) {
                        if (intent.hasFileDescriptors()) {
                            throw new IllegalArgumentException("File descriptors passed in Intent");
                        } else if (i2 != 1 || (intent.getFlags() & DumpState.DUMP_HANDLE) == 0) {
                            intentArr[i] = new Intent(intent);
                        } else {
                            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                        }
                    }
                }
                if (!(strArr == null || strArr.length == intentArr.length)) {
                    throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
                }
            }
            throw new IllegalArgumentException("Intents array length must be >= 1");
        }
        if (bOptions == null || !bOptions.hasFileDescriptors()) {
            synchronized (this) {
                int userId2;
                try {
                    boostPriorityForLockedSection();
                    i = Binder.getCallingUid();
                    int origUserId = userId;
                    int userId3 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), i, userId, i2 == 1, 0, "getIntentSender", null);
                    if (origUserId == -2) {
                        userId3 = -2;
                    }
                    userId2 = userId3;
                    if (!(i == 0 || i == 1000)) {
                        try {
                            userId3 = AppGlobals.getPackageManager().getPackageUid(str, 268435456, UserHandle.getUserId(i));
                            if (!UserHandle.isSameApp(i, userId3)) {
                                String msg = new StringBuilder();
                                msg.append("Permission Denial: getIntentSender() from pid=");
                                msg.append(Binder.getCallingPid());
                                msg.append(", uid=");
                                msg.append(Binder.getCallingUid());
                                msg.append(", (need uid=");
                                msg.append(userId3);
                                msg.append(") is not allowed to send as package ");
                                msg.append(str);
                                msg = msg.toString();
                                Slog.w(TAG, msg);
                                throw new SecurityException(msg);
                            }
                        } catch (RemoteException e2) {
                            e = e2;
                            int i3 = origUserId;
                            int i4 = i;
                            throw new SecurityException(e);
                        }
                    }
                    try {
                        IIntentSender intentSenderLocked = getIntentSenderLocked(i2, str, i, userId2, token, resultWho, requestCode, intentArr, strArr, flags, bOptions);
                        resetPriorityAfterLockedSection();
                        return intentSenderLocked;
                    } catch (RemoteException e3) {
                        e = e3;
                        throw new SecurityException(e);
                    }
                } catch (Throwable th2) {
                    th = th2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        throw new IllegalArgumentException("File descriptors passed in options");
    }

    IIntentSender getIntentSenderLocked(int type, String packageName, int callingUid, int userId, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions) {
        Intent intent;
        int i = type;
        int i2 = callingUid;
        Intent[] intentArr = intents;
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            String str = TAG_MU;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("getIntentSenderLocked(): uid=");
            stringBuilder.append(i2);
            Slog.v(str, stringBuilder.toString());
        }
        ActivityRecord activity = null;
        IBinder iBinder;
        if (i == 3) {
            activity = ActivityRecord.isInStackLocked(token);
            String str2;
            StringBuilder stringBuilder2;
            if (activity == null) {
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Failed createPendingResult: activity ");
                stringBuilder2.append(token);
                stringBuilder2.append(" not in any stack");
                Slog.w(str2, stringBuilder2.toString());
                return null;
            }
            iBinder = token;
            if (activity.finishing) {
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Failed createPendingResult: activity ");
                stringBuilder2.append(activity);
                stringBuilder2.append(" is finishing");
                Slog.w(str2, stringBuilder2.toString());
                return null;
            }
        }
        iBinder = token;
        ActivityRecord activity2 = activity;
        boolean z = false;
        if (intentArr != null) {
            for (Intent intent2 : intentArr) {
                intent2.setDefusable(true);
            }
        }
        Bundle.setDefusable(bOptions, true);
        boolean noCreate = (flags & 536870912) != 0;
        boolean cancelCurrent = (flags & 268435456) != 0;
        if ((flags & 134217728) != 0) {
            z = true;
        }
        boolean updateCurrent = z;
        boolean z2 = true;
        ActivityRecord activity3 = activity2;
        Object[] objArr = null;
        Key key = new Key(i, packageName, activity2, resultWho, requestCode, intentArr, resolvedTypes, flags & -939524097, SafeActivityOptions.fromBundle(bOptions), userId);
        WeakReference<PendingIntentRecord> ref = (WeakReference) this.mIntentSenderRecords.get(key);
        PendingIntentRecord rec = ref != null ? (PendingIntentRecord) ref.get() : objArr;
        String[] strArr;
        if (rec == null) {
            strArr = resolvedTypes;
        } else if (cancelCurrent) {
            strArr = resolvedTypes;
            makeIntentSenderCanceledLocked(rec);
            this.mIntentSenderRecords.remove(key);
        } else {
            if (updateCurrent) {
                if (rec.key.requestIntent != null) {
                    Intent intent3;
                    intent2 = rec.key.requestIntent;
                    if (intentArr != null) {
                        intent3 = intentArr[intentArr.length - 1];
                    } else {
                        intent3 = objArr;
                    }
                    intent2.replaceExtras(intent3);
                }
                if (intentArr != null) {
                    intentArr[intentArr.length - 1] = rec.key.requestIntent;
                    rec.key.allIntents = intentArr;
                    rec.key.allResolvedTypes = resolvedTypes;
                } else {
                    strArr = resolvedTypes;
                    rec.key.allIntents = objArr;
                    rec.key.allResolvedTypes = objArr;
                }
            } else {
                strArr = resolvedTypes;
            }
            return rec;
        }
        if (noCreate) {
            return rec;
        }
        rec = new PendingIntentRecord(this, key, i2);
        this.mIntentSenderRecords.put(key, rec.ref);
        if (i == 3) {
            ActivityRecord activity4 = activity3;
            if (activity4.pendingResults == null) {
                activity4.pendingResults = new HashSet();
            }
            activity4.pendingResults.add(rec.ref);
        }
        return rec;
    }

    public int sendIntentSender(IIntentSender target, IBinder whitelistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options) {
        IIntentSender iIntentSender = target;
        if (iIntentSender instanceof PendingIntentRecord) {
            return ((PendingIntentRecord) iIntentSender).sendWithResult(code, intent, resolvedType, whitelistToken, finishedReceiver, requiredPermission, options);
        }
        Intent intent2;
        if (intent == null) {
            Slog.wtf(TAG, "Can't use null intent with direct IIntentSender call");
            intent2 = new Intent("android.intent.action.MAIN");
        } else {
            intent2 = intent;
        }
        try {
            iIntentSender.send(code, intent2, resolvedType, whitelistToken, null, requiredPermission, options);
        } catch (RemoteException e) {
        }
        if (finishedReceiver != null) {
            try {
                finishedReceiver.performReceive(intent2, 0, null, null, false, false, UserHandle.getCallingUserId());
            } catch (RemoteException e2) {
            }
        }
        return 0;
    }

    public void cancelIntentSender(IIntentSender sender) {
        if (sender instanceof PendingIntentRecord) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    PendingIntentRecord rec = (PendingIntentRecord) sender;
                    if (UserHandle.isSameApp(AppGlobals.getPackageManager().getPackageUid(rec.key.packageName, 268435456, UserHandle.getCallingUserId()), Binder.getCallingUid())) {
                        cancelIntentSenderLocked(rec, true);
                    } else {
                        String msg = new StringBuilder();
                        msg.append("Permission Denial: cancelIntentSender() from pid=");
                        msg.append(Binder.getCallingPid());
                        msg.append(", uid=");
                        msg.append(Binder.getCallingUid());
                        msg.append(" is not allowed to cancel package ");
                        msg.append(rec.key.packageName);
                        msg = msg.toString();
                        Slog.w(TAG, msg);
                        throw new SecurityException(msg);
                    }
                } catch (RemoteException e) {
                    throw new SecurityException(e);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity) {
        makeIntentSenderCanceledLocked(rec);
        this.mIntentSenderRecords.remove(rec.key);
        if (cleanActivity && rec.key.activity != null) {
            rec.key.activity.pendingResults.remove(rec.ref);
        }
    }

    void makeIntentSenderCanceledLocked(PendingIntentRecord rec) {
        rec.canceled = true;
        RemoteCallbackList<IResultReceiver> callbacks = rec.detachCancelListenersLocked();
        if (callbacks != null) {
            this.mHandler.obtainMessage(67, callbacks).sendToTarget();
        }
    }

    public String getPackageForIntentSender(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            return ((PendingIntentRecord) pendingResult).key.packageName;
        } catch (ClassCastException e) {
            return null;
        }
    }

    public void registerIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        if (sender instanceof PendingIntentRecord) {
            boolean isCancelled;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    PendingIntentRecord pendingIntent = (PendingIntentRecord) sender;
                    isCancelled = pendingIntent.canceled;
                    if (!isCancelled) {
                        pendingIntent.registerCancelListenerLocked(receiver);
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            if (isCancelled) {
                try {
                    receiver.send(0, null);
                } catch (RemoteException e) {
                }
            }
        }
    }

    public void unregisterIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        if (sender instanceof PendingIntentRecord) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ((PendingIntentRecord) sender).unregisterCancelListenerLocked(receiver);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        }
    }

    public int getUidForIntentSender(IIntentSender sender) {
        if (sender instanceof PendingIntentRecord) {
            try {
                return ((PendingIntentRecord) sender).uid;
            } catch (ClassCastException e) {
            }
        }
        return -1;
    }

    public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.allIntents == null) {
                return false;
            }
            for (Intent intent : res.key.allIntents) {
                if (intent.getPackage() != null && intent.getComponent() != null) {
                    return false;
                }
            }
            return true;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAnActivity(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            if (((PendingIntentRecord) pendingResult).key.type == 2) {
                return true;
            }
            return false;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAForegroundService(IIntentSender pendingResult) {
        boolean z = false;
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        if (((PendingIntentRecord) pendingResult).key.type == 5) {
            z = true;
        }
        return z;
    }

    public Intent getIntentForIntentSender(IIntentSender pendingResult) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        Intent intent = null;
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.requestIntent != null) {
                intent = new Intent(res.key.requestIntent);
            }
            return intent;
        } catch (ClassCastException e) {
            return null;
        }
    }

    public String getTagForIntentSender(IIntentSender pendingResult, String prefix) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            String tagForIntentSenderLocked;
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            synchronized (this) {
                boostPriorityForLockedSection();
                tagForIntentSenderLocked = getTagForIntentSenderLocked(res, prefix);
            }
            resetPriorityAfterLockedSection();
            return tagForIntentSenderLocked;
        } catch (ClassCastException e) {
            return null;
        } catch (Throwable th) {
            while (true) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix) {
        Intent intent = res.key.requestIntent;
        if (intent == null) {
            return null;
        }
        if (res.lastTag != null && res.lastTagPrefix == prefix && (res.lastTagPrefix == null || res.lastTagPrefix.equals(prefix))) {
            return res.lastTag;
        }
        res.lastTagPrefix = prefix;
        StringBuilder sb = new StringBuilder(128);
        if (prefix != null) {
            sb.append(prefix);
        }
        if (intent.getAction() != null) {
            sb.append(intent.getAction());
        } else if (intent.getComponent() != null) {
            intent.getComponent().appendShortString(sb);
        } else {
            sb.append("?");
        }
        String stringBuilder = sb.toString();
        res.lastTag = stringBuilder;
        return stringBuilder;
    }

    public void setProcessLimit(int max) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mConstants.setOverrideMaxCachedProcesses(max);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        trimApplications();
    }

    public int getProcessLimit() {
        int overrideMaxCachedProcesses;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                overrideMaxCachedProcesses = this.mConstants.getOverrideMaxCachedProcesses();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return overrideMaxCachedProcesses;
    }

    void importanceTokenDied(ImportanceToken token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    if (((ImportanceToken) this.mImportantProcesses.get(token.pid)) != token) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mImportantProcesses.remove(token.pid);
                    ProcessRecord pr = (ProcessRecord) this.mPidsSelfLocked.get(token.pid);
                    if (pr == null) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    pr.forcingToImportant = null;
                    updateProcessForegroundLocked(pr, false, false);
                    updateOomAdjLocked();
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* JADX WARNING: Missing block: B:31:0x006b, code:
            if (r0 == false) goto L_0x0070;
     */
    /* JADX WARNING: Missing block: B:33:?, code:
            updateOomAdjLocked();
     */
    /* JADX WARNING: Missing block: B:35:0x0071, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:36:0x0074, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setProcessImportant(IBinder token, int pid, boolean isForeground, String reason) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessImportant()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean changed = false;
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord pr = (ProcessRecord) this.mPidsSelfLocked.get(pid);
                    if (pr == null && isForeground) {
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("setProcessForeground called on unknown pid: ");
                        stringBuilder.append(pid);
                        Slog.w(str, stringBuilder.toString());
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    ImportanceToken oldToken = (ImportanceToken) this.mImportantProcesses.get(pid);
                    if (oldToken != null) {
                        oldToken.token.unlinkToDeath(oldToken, 0);
                        this.mImportantProcesses.remove(pid);
                        if (pr != null) {
                            pr.forcingToImportant = null;
                        }
                        changed = true;
                    }
                    if (isForeground && token != null) {
                        ImportanceToken newToken = new ImportanceToken(pid, token, reason) {
                            public void binderDied() {
                                ActivityManagerService.this.importanceTokenDied(this);
                            }
                        };
                        try {
                            token.linkToDeath(newToken, 0);
                            this.mImportantProcesses.put(pid, newToken);
                            pr.forcingToImportant = newToken;
                            changed = true;
                        } catch (RemoteException e) {
                        }
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean isAppForeground(int uid) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = (UidRecord) this.mActiveUids.get(uid);
                z = false;
                if (uidRec == null || uidRec.idle) {
                    resetPriorityAfterLockedSection();
                    return false;
                } else if (uidRec.curProcState <= 5) {
                    z = true;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    int getUidState(int uid) {
        int uidStateLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                uidStateLocked = getUidStateLocked(uid);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return uidStateLocked;
    }

    int getUidStateLocked(int uid) {
        UidRecord uidRec = (UidRecord) this.mActiveUids.get(uid);
        return uidRec == null ? 19 : uidRec.curProcState;
    }

    public boolean isInMultiWindowMode(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                } else if (this.mHwAMSEx.isSpecialVideoForPCMode(r)) {
                    HwPCUtils.log(TAG, "isInMultiWindowMode video running on PC modere turn");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                } else {
                    boolean inMultiWindowMode = r.inMultiWindowMode();
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return inMultiWindowMode;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public boolean isInPictureInPictureMode(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        try {
            boolean isInPictureInPictureMode;
            synchronized (this) {
                boostPriorityForLockedSection();
                isInPictureInPictureMode = isInPictureInPictureMode(ActivityRecord.forTokenLocked(token));
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            return isInPictureInPictureMode;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    private boolean isInPictureInPictureMode(ActivityRecord r) {
        return (r == null || r.getStack() == null || !r.inPinnedWindowingMode() || r.getStack().isInStackLocked(r) == null) ? false : ((PinnedStackWindowController) ((PinnedActivityStack) r.getStack()).getWindowContainerController()).isAnimatingBoundsToFullscreen() ^ 1;
    }

    public void setExitInfo(float pivotX, float pivotY, int iconWidth, int iconHeight, Bitmap iconBitmap, int flag) {
        this.mWindowManager.setExitInfo(pivotX, pivotY, iconWidth, iconHeight, iconBitmap, flag);
    }

    public boolean enterPictureInPictureMode(IBinder token, PictureInPictureParams params) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                if (HwPCUtils.enabledInPad() && HwPCUtils.isPcCastModeInServer()) {
                    HwPCUtils.log(TAG, "ignore enterPictureInPictureMode in pad pc mode");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                }
                ActivityRecord r = ensureValidPictureInPictureActivityParamsLocked("enterPictureInPictureMode", token, params);
                if (isInPictureInPictureMode(r)) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return true;
                } else if (r.checkEnterPictureInPictureState("enterPictureInPictureMode", false)) {
                    final Runnable enterPipRunnable = new -$$Lambda$ActivityManagerService$nLON5M4YCRoJpSNB1Y_UERhbBKo(this, r, params);
                    if (isKeyguardLocked()) {
                        try {
                            dismissKeyguard(token, new KeyguardDismissCallback() {
                                public void onDismissSucceeded() throws RemoteException {
                                    ActivityManagerService.this.mHandler.post(enterPipRunnable);
                                }
                            }, null);
                        } catch (RemoteException e) {
                        }
                    } else {
                        enterPipRunnable.run();
                    }
                } else {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                }
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            return true;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public static /* synthetic */ void lambda$enterPictureInPictureMode$1(ActivityManagerService activityManagerService, ActivityRecord r, PictureInPictureParams params) {
        r.pictureInPictureArgs.copyOnlySet(params);
        float aspectRatio = r.pictureInPictureArgs.getAspectRatio();
        List<RemoteAction> actions = r.pictureInPictureArgs.getActions();
        activityManagerService.mStackSupervisor.moveActivityToPinnedStackLocked(r, new Rect(r.pictureInPictureArgs.getSourceRectHint()), aspectRatio, "enterPictureInPictureMode");
        PinnedActivityStack stack = (PinnedActivityStack) r.getStack();
        stack.setPictureInPictureAspectRatio(aspectRatio);
        stack.setPictureInPictureActions(actions);
        MetricsLoggerWrapper.logPictureInPictureEnter(activityManagerService.mContext, r.appInfo.uid, r.shortComponentName, r.supportsEnterPipOnTaskSwitch);
        activityManagerService.logPictureInPictureArgs(params);
    }

    public void setPictureInPictureParams(IBinder token, PictureInPictureParams params) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ensureValidPictureInPictureActivityParamsLocked("setPictureInPictureParams", token, params);
                r.pictureInPictureArgs.copyOnlySet(params);
                if (r.inPinnedWindowingMode()) {
                    PinnedActivityStack stack = (PinnedActivityStack) r.getStack();
                    if (!stack.isAnimatingBoundsToFullscreen()) {
                        stack.setPictureInPictureAspectRatio(r.pictureInPictureArgs.getAspectRatio());
                        stack.setPictureInPictureActions(r.pictureInPictureArgs.getActions());
                    }
                }
                logPictureInPictureArgs(params);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public int getMaxNumPictureInPictureActions(IBinder token) {
        return 3;
    }

    private void logPictureInPictureArgs(PictureInPictureParams params) {
        if (params.hasSetActions()) {
            MetricsLogger.histogram(this.mContext, "tron_varz_picture_in_picture_actions_count", params.getActions().size());
        }
        if (params.hasSetAspectRatio()) {
            LogMaker lm = new LogMaker(824);
            lm.addTaggedData(825, Float.valueOf(params.getAspectRatio()));
            MetricsLogger.action(lm);
        }
    }

    private ActivityRecord ensureValidPictureInPictureActivityParamsLocked(String caller, IBinder token, PictureInPictureParams params) {
        if (this.mSupportsPictureInPicture) {
            ActivityRecord r = ActivityRecord.forTokenLocked(token);
            StringBuilder stringBuilder;
            if (r == null) {
                stringBuilder = new StringBuilder();
                stringBuilder.append(caller);
                stringBuilder.append(": Can't find activity for token=");
                stringBuilder.append(token);
                throw new IllegalStateException(stringBuilder.toString());
            } else if (!r.supportsPictureInPicture()) {
                stringBuilder = new StringBuilder();
                stringBuilder.append(caller);
                stringBuilder.append(": Current activity does not support picture-in-picture.");
                throw new IllegalStateException(stringBuilder.toString());
            } else if (!params.hasSetAspectRatio() || this.mWindowManager.isValidPictureInPictureAspectRatio(r.getStack().mDisplayId, params.getAspectRatio())) {
                params.truncateActions(getMaxNumPictureInPictureActions(token));
                return r;
            } else {
                float minAspectRatio = this.mContext.getResources().getFloat(17104971);
                float maxAspectRatio = this.mContext.getResources().getFloat(17104970);
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append(caller);
                stringBuilder2.append(": Aspect ratio is too extreme (must be between %f and %f).");
                throw new IllegalArgumentException(String.format(stringBuilder2.toString(), new Object[]{Float.valueOf(minAspectRatio), Float.valueOf(maxAspectRatio)}));
            }
        }
        StringBuilder stringBuilder3 = new StringBuilder();
        stringBuilder3.append(caller);
        stringBuilder3.append(": Device doesn't support picture-in-picture mode.");
        throw new IllegalStateException(stringBuilder3.toString());
    }

    public void getProcessStatesAndOomScoresForPIDs(int[] pids, int[] states, int[] scores) {
        if (scores != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (pids == null) {
            throw new NullPointerException("pids");
        } else if (states == null) {
            throw new NullPointerException("states");
        } else if (pids.length != states.length) {
            throw new IllegalArgumentException("pids and states arrays have different lengths!");
        } else if (scores == null || pids.length == scores.length) {
            synchronized (this.mPidsSelfLocked) {
                for (int i = 0; i < pids.length; i++) {
                    int i2;
                    ProcessRecord pr = (ProcessRecord) this.mPidsSelfLocked.get(pids[i]);
                    if (pr == null) {
                        i2 = 19;
                    } else {
                        i2 = pr.curProcState;
                    }
                    states[i] = i2;
                    if (scores != null) {
                        scores[i] = pr == null ? -10000 : pr.curAdj;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("pids and scores arrays have different lengths!");
        }
    }

    int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
        if (pid == MY_PID) {
            return 0;
        }
        return ActivityManager.checkComponentPermission(permission, uid, owningUid, exported);
    }

    public int checkPermission(String permission, int pid, int uid) {
        if (permission == null) {
            return -1;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken) {
        if (permission == null) {
            return -1;
        }
        Identity tlsIdentity = (Identity) sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("checkComponentPermission() adjusting {pid,uid} to {");
            stringBuilder.append(tlsIdentity.pid);
            stringBuilder.append(",");
            stringBuilder.append(tlsIdentity.uid);
            stringBuilder.append("}");
            Slog.d(str, stringBuilder.toString());
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    int checkCallingPermission(String permission) {
        return checkPermission(permission, Binder.getCallingPid(), UserHandle.getAppId(Binder.getCallingUid()));
    }

    void enforceCallingPermission(String permission, String func) {
        if (checkCallingPermission(permission) != 0) {
            String msg = new StringBuilder();
            msg.append("Permission Denial: ");
            msg.append(func);
            msg.append(" from pid=");
            msg.append(Binder.getCallingPid());
            msg.append(", uid=");
            msg.append(Binder.getCallingUid());
            msg.append(" requires ");
            msg.append(permission);
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    void enforcePermission(String permission, int pid, int uid, String func) {
        if (checkPermission(permission, pid, uid) != 0) {
            String msg = new StringBuilder();
            msg.append("Permission Denial: ");
            msg.append(func);
            msg.append(" from pid=");
            msg.append(pid);
            msg.append(", uid=");
            msg.append(uid);
            msg.append(" requires ");
            msg.append(permission);
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    void enforceCallerIsRecentsOrHasPermission(String permission, String func) {
        if (!this.mRecentTasks.isCallerRecents(Binder.getCallingUid())) {
            enforceCallingPermission(permission, func);
        }
    }

    private final boolean checkHoldingPermissionsLocked(IPackageManager pm, ProviderInfo pi, GrantUri grantUri, int uid, int modeFlags) {
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("checkHoldingPermissionsLocked: uri=");
            stringBuilder.append(grantUri);
            stringBuilder.append(" uid=");
            stringBuilder.append(uid);
            Slog.v(str, stringBuilder.toString());
        }
        if (UserHandle.getUserId(uid) == grantUri.sourceUserId || ActivityManager.checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", uid, -1, true) == 0) {
            return checkHoldingPermissionsInternalLocked(pm, pi, grantUri, uid, modeFlags, true);
        }
        return false;
    }

    /* JADX WARNING: Removed duplicated region for block: B:75:0x0132  */
    /* JADX WARNING: Removed duplicated region for block: B:65:0x00dd A:{Catch:{ RemoteException -> 0x0144 }} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final boolean checkHoldingPermissionsInternalLocked(IPackageManager pm, ProviderInfo pi, GrantUri grantUri, int uid, int modeFlags, boolean considerUidPermissions) {
        GrantUri grantUri2;
        IPackageManager iPackageManager = pm;
        ProviderInfo providerInfo = pi;
        int i = uid;
        if (providerInfo.applicationInfo.uid == i) {
            return true;
        }
        if (!providerInfo.exported) {
            return false;
        }
        boolean readMet = (modeFlags & 1) == 0;
        boolean writeMet = (modeFlags & 2) == 0;
        if (!readMet) {
            try {
                if (providerInfo.readPermission != null && considerUidPermissions && iPackageManager.checkUidPermission(providerInfo.readPermission, i) == 0) {
                    readMet = true;
                }
            } catch (RemoteException e) {
                grantUri2 = grantUri;
                return false;
            }
        }
        if (!writeMet && providerInfo.writePermission != null && considerUidPermissions && iPackageManager.checkUidPermission(providerInfo.writePermission, i) == 0) {
            writeMet = true;
        }
        RemoteException allowDefaultRead = providerInfo.readPermission == null;
        boolean allowDefaultWrite = providerInfo.writePermission == null;
        PathPermission[] pps = providerInfo.pathPermissions;
        if (pps != null) {
            try {
                boolean allowDefaultRead2;
                boolean allowDefaultRead3;
                String path = grantUri.uri.getPath();
                int i2 = pps.length;
                while (i2 > 0) {
                    if (readMet && writeMet) {
                        allowDefaultRead2 = allowDefaultRead3;
                        break;
                    }
                    i2--;
                    PathPermission pp = pps[i2];
                    if (pp.match(path)) {
                        boolean z;
                        if (readMet) {
                            allowDefaultRead2 = allowDefaultRead3;
                        } else {
                            String str;
                            StringBuilder stringBuilder;
                            String pprperm;
                            String pprperm2 = pp.getReadPermission();
                            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                                str = TAG;
                                stringBuilder = new StringBuilder();
                                allowDefaultRead2 = allowDefaultRead3;
                                stringBuilder.append("Checking read perm for ");
                                pprperm = pprperm2;
                                stringBuilder.append(pprperm);
                                stringBuilder.append(" for ");
                                stringBuilder.append(pp.getPath());
                                stringBuilder.append(": match=");
                                stringBuilder.append(pp.match(path));
                                stringBuilder.append(" check=");
                                stringBuilder.append(iPackageManager.checkUidPermission(pprperm, i));
                                Slog.v(str, stringBuilder.toString());
                            } else {
                                allowDefaultRead2 = allowDefaultRead3;
                                pprperm = pprperm2;
                            }
                            if (pprperm != null) {
                                if (considerUidPermissions && iPackageManager.checkUidPermission(pprperm, i) == 0) {
                                    readMet = true;
                                } else {
                                    allowDefaultRead3 = false;
                                    if (writeMet) {
                                        String ppwperm = pp.getWritePermission();
                                        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                                            str = TAG;
                                            stringBuilder = new StringBuilder();
                                            z = allowDefaultRead3;
                                            stringBuilder.append("Checking write perm ");
                                            stringBuilder.append(ppwperm);
                                            stringBuilder.append(" for ");
                                            stringBuilder.append(pp.getPath());
                                            stringBuilder.append(": match=");
                                            stringBuilder.append(pp.match(path));
                                            stringBuilder.append(" check=");
                                            stringBuilder.append(iPackageManager.checkUidPermission(ppwperm, i));
                                            Slog.v(str, stringBuilder.toString());
                                        } else {
                                            z = allowDefaultRead3;
                                        }
                                        if (ppwperm != null) {
                                            if (considerUidPermissions && iPackageManager.checkUidPermission(ppwperm, i) == 0) {
                                                writeMet = true;
                                            } else {
                                                allowDefaultWrite = false;
                                            }
                                        }
                                    } else {
                                        z = allowDefaultRead3;
                                    }
                                    allowDefaultRead3 = z;
                                }
                            }
                        }
                        allowDefaultRead3 = allowDefaultRead2;
                        if (writeMet) {
                        }
                        allowDefaultRead3 = z;
                    } else {
                        allowDefaultRead2 = allowDefaultRead3;
                    }
                    providerInfo = pi;
                }
                allowDefaultRead2 = allowDefaultRead3;
                allowDefaultRead = allowDefaultRead2;
            } catch (RemoteException e2) {
                return false;
            }
        }
        grantUri2 = grantUri;
        if (allowDefaultRead != null) {
            readMet = true;
        }
        if (allowDefaultWrite) {
            writeMet = true;
        }
        boolean z2 = readMet && writeMet;
        return z2;
    }

    public boolean isAppStartModeDisabled(int uid, String packageName) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                z = getAppStartModeLocked(uid, packageName, 0, -1, false, true, false) == 3;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    int appRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        StringBuilder stringBuilder;
        String str;
        if (isOnDeviceIdleWhitelistLocked(uid, false) && (this.mCustAms == null || !this.mCustAms.isAddRestrictedForCust(packageName))) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                String str2 = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("App ");
                stringBuilder.append(uid);
                stringBuilder.append(SliceAuthority.DELIMITER);
                stringBuilder.append(packageName);
                stringBuilder.append(" on idle whitelist; not restricted in background");
                Slog.i(str2, stringBuilder.toString());
            }
            return 0;
        } else if (packageTargetSdk >= 26) {
            str = TAG;
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("App ");
            stringBuilder2.append(uid);
            stringBuilder2.append(SliceAuthority.DELIMITER);
            stringBuilder2.append(packageName);
            stringBuilder2.append(" targets O+, restricted");
            Slog.i(str, stringBuilder2.toString());
            return 2;
        } else {
            int appop = this.mAppOpsService.noteOperation(HANDLE_TRUST_STORAGE_UPDATE_MSG, uid, packageName);
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                String str3 = TAG;
                StringBuilder stringBuilder3 = new StringBuilder();
                stringBuilder3.append("Legacy app ");
                stringBuilder3.append(uid);
                stringBuilder3.append(SliceAuthority.DELIMITER);
                stringBuilder3.append(packageName);
                stringBuilder3.append(" bg appop ");
                stringBuilder3.append(appop);
                Slog.i(str3, stringBuilder3.toString());
            }
            switch (appop) {
                case 0:
                    if (!this.mForceBackgroundCheck || UserHandle.isCore(uid) || isOnDeviceIdleWhitelistLocked(uid, true)) {
                        return 0;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Force background check: ");
                        stringBuilder.append(uid);
                        stringBuilder.append(SliceAuthority.DELIMITER);
                        stringBuilder.append(packageName);
                        stringBuilder.append(" restricted");
                        Slog.i(str, stringBuilder.toString());
                    }
                    return 1;
                case 1:
                    return 1;
                default:
                    return 2;
            }
        }
    }

    int appServicesRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        String str;
        StringBuilder stringBuilder;
        if (getPackageManagerInternalLocked().isPackagePersistent(packageName)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("App ");
                stringBuilder.append(uid);
                stringBuilder.append(SliceAuthority.DELIMITER);
                stringBuilder.append(packageName);
                stringBuilder.append(" is persistent; not restricted in background");
                Slog.i(str, stringBuilder.toString());
            }
            return 0;
        } else if (!uidOnBackgroundWhitelist(uid)) {
            return appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        } else {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("App ");
                stringBuilder.append(uid);
                stringBuilder.append(SliceAuthority.DELIMITER);
                stringBuilder.append(packageName);
                stringBuilder.append(" on background whitelist; not restricted in background");
                Slog.i(str, stringBuilder.toString());
            }
            return 0;
        }
    }

    int getAppStartModeLocked(int uid, String packageName, int packageTargetSdk, int callingPid, boolean alwaysRestrict, boolean disabledOnly, boolean forcedStandby) {
        UidRecord uidRec = (UidRecord) this.mActiveUids.get(uid);
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("checkAllowBackground: uid=");
            stringBuilder.append(uid);
            stringBuilder.append(" pkg=");
            stringBuilder.append(packageName);
            stringBuilder.append(" rec=");
            stringBuilder.append(uidRec);
            stringBuilder.append(" always=");
            stringBuilder.append(alwaysRestrict);
            stringBuilder.append(" idle=");
            stringBuilder.append(uidRec != null ? uidRec.idle : false);
            Slog.d(str, stringBuilder.toString());
        }
        if (uidRec != null && !alwaysRestrict && !forcedStandby && !uidRec.idle) {
            return 0;
        }
        boolean ephemeral;
        if (uidRec == null) {
            ephemeral = getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packageName);
        } else {
            ephemeral = uidRec.ephemeral;
        }
        if (ephemeral) {
            return 3;
        }
        if (disabledOnly) {
            return 0;
        }
        int startMode;
        if (alwaysRestrict) {
            startMode = appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        } else {
            startMode = appServicesRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        }
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            String str2 = TAG;
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("checkAllowBackground: uid=");
            stringBuilder2.append(uid);
            stringBuilder2.append(" pkg=");
            stringBuilder2.append(packageName);
            stringBuilder2.append(" startMode=");
            stringBuilder2.append(startMode);
            stringBuilder2.append(" onwhitelist=");
            stringBuilder2.append(isOnDeviceIdleWhitelistLocked(uid, false));
            stringBuilder2.append(" onwhitelist(ei)=");
            stringBuilder2.append(isOnDeviceIdleWhitelistLocked(uid, true));
            Slog.d(str2, stringBuilder2.toString());
        }
        if (startMode == 1 && callingPid >= 0) {
            ProcessRecord proc;
            synchronized (this.mPidsSelfLocked) {
                proc = (ProcessRecord) this.mPidsSelfLocked.get(callingPid);
            }
            if (proc == null || ActivityManager.isProcStateBackground(proc.curProcState)) {
                return startMode;
            }
            return 0;
        }
        return startMode;
    }

    boolean isOnDeviceIdleWhitelistLocked(int uid, boolean allowExceptIdleToo) {
        int[] whitelist;
        int appId = UserHandle.getAppId(uid);
        if (allowExceptIdleToo) {
            whitelist = this.mDeviceIdleExceptIdleWhitelist;
        } else {
            whitelist = this.mDeviceIdleWhitelist;
        }
        return Arrays.binarySearch(whitelist, appId) >= 0 || Arrays.binarySearch(this.mDeviceIdleTempWhitelist, appId) >= 0 || this.mPendingTempWhitelist.indexOfKey(uid) >= 0;
    }

    private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags) {
        ContentProviderRecord cpr = this.mProviderMap.getProviderByName(authority, userHandle);
        if (cpr != null) {
            return cpr.info;
        }
        try {
            return AppGlobals.getPackageManager().resolveContentProvider(authority, 2048 | pmFlags, userHandle);
        } catch (RemoteException e) {
            return null;
        }
    }

    void grantEphemeralAccessLocked(int userId, Intent intent, int targetAppId, int ephemeralAppId) {
        getPackageManagerInternalLocked().grantEphemeralAccess(userId, intent, targetAppId, ephemeralAppId);
    }

    @GuardedBy("this")
    private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri) {
        ArrayMap<GrantUri, UriPermission> targetUris = (ArrayMap) this.mGrantedUriPermissions.get(targetUid);
        if (targetUris != null) {
            return (UriPermission) targetUris.get(grantUri);
        }
        return null;
    }

    @GuardedBy("this")
    private UriPermission findOrCreateUriPermissionLocked(String sourcePkg, String targetPkg, int targetUid, GrantUri grantUri) {
        ArrayMap<GrantUri, UriPermission> targetUris = (ArrayMap) this.mGrantedUriPermissions.get(targetUid);
        if (targetUris == null) {
            targetUris = Maps.newArrayMap();
            this.mGrantedUriPermissions.put(targetUid, targetUris);
        }
        UriPermission perm = (UriPermission) targetUris.get(grantUri);
        if (perm != null) {
            return perm;
        }
        perm = new UriPermission(sourcePkg, targetPkg, targetUid, grantUri);
        targetUris.put(grantUri, perm);
        return perm;
    }

    @GuardedBy("this")
    protected boolean checkUriPermissionLocked(GrantUri grantUri, int uid, int modeFlags) {
        int minStrength;
        if ((modeFlags & 64) != 0) {
            minStrength = 3;
        } else {
            minStrength = 1;
        }
        if (uid == 0) {
            return true;
        }
        ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.get(uid);
        if (perms == null) {
            return false;
        }
        UriPermission exactPerm = (UriPermission) perms.get(grantUri);
        if (exactPerm != null && exactPerm.getStrength(modeFlags) >= minStrength) {
            return true;
        }
        int N = perms.size();
        for (int i = 0; i < N; i++) {
            UriPermission perm = (UriPermission) perms.valueAt(i);
            if (perm.uri.prefix && grantUri.uri.isPathPrefixMatch(perm.uri.uri) && perm.getStrength(modeFlags) >= minStrength) {
                return true;
            }
        }
        return false;
    }

    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, int userId, IBinder callerToken) {
        enforceNotIsolatedCaller("checkUriPermission");
        Identity tlsIdentity = (Identity) sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        int i = false;
        if (pid == MY_PID) {
            return 0;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!checkUriPermissionLocked(new GrantUri(userId, uri, false), uid, modeFlags)) {
                    i = true;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return i;
    }

    /* JADX WARNING: Removed duplicated region for block: B:91:0x01a3  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri, int modeFlags, int lastTargetUid) {
        int i = callingUid;
        String str = targetPkg;
        GrantUri grantUri2 = grantUri;
        int i2 = modeFlags;
        int allowedResult = -1;
        if (!Intent.isAccessUriMode(modeFlags)) {
            return -1;
        }
        String str2;
        StringBuilder stringBuilder;
        if (str != null && ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            str2 = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Checking grant ");
            stringBuilder.append(str);
            stringBuilder.append(" permission to ");
            stringBuilder.append(grantUri2);
            Slog.v(str2, stringBuilder.toString());
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        if (grantUri2 == null || grantUri2.uri == null) {
            return -1;
        }
        if ("content".equals(grantUri2.uri.getScheme())) {
            int callingAppId = UserHandle.getAppId(callingUid);
            if ((callingAppId != 1000 && callingAppId != 0) || "com.android.settings.files".equals(grantUri2.uri.getAuthority()) || this.mHwAMSEx.isExemptedAuthority(grantUri2.uri)) {
                ProviderInfo pi = getProviderInfoLocked(grantUri2.uri.getAuthority(), grantUri2.sourceUserId, 268435456);
                if (pi == null) {
                    str2 = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("No content provider found for permission check: ");
                    stringBuilder.append(grantUri2.uri.toSafeString());
                    Slog.w(str2, stringBuilder.toString());
                    return -1;
                }
                boolean allowed;
                ProviderInfo pi2;
                int targetUid = lastTargetUid;
                if (targetUid < 0 && str != null) {
                    try {
                        targetUid = pm.getPackageUid(str, 268435456, UserHandle.getUserId(callingUid));
                        if (targetUid < 0) {
                            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                                str2 = TAG;
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("Can't grant URI permission no uid for: ");
                                stringBuilder.append(str);
                                Slog.v(str2, stringBuilder.toString());
                            }
                            return -1;
                        }
                    } catch (RemoteException e) {
                        return -1;
                    }
                }
                int targetUid2 = targetUid;
                if ((i2 & 64) != 0) {
                    allowedResult = targetUid2;
                }
                int allowedResult2 = allowedResult;
                int i3 = 0;
                if (targetUid2 < 0) {
                    allowed = pi.exported;
                    if (!((i2 & 1) == 0 || pi.readPermission == null)) {
                        allowed = false;
                    }
                    if (!((i2 & 2) == 0 || pi.writePermission == null)) {
                        allowed = false;
                    }
                    if (pi.pathPermissions != null) {
                        int N = pi.pathPermissions.length;
                        targetUid = 0;
                        while (targetUid < N) {
                            if (pi.pathPermissions[targetUid] == null || !pi.pathPermissions[targetUid].match(grantUri2.uri.getPath())) {
                                targetUid++;
                            } else {
                                if (!((i2 & 1) == 0 || pi.pathPermissions[targetUid].getReadPermission() == null)) {
                                    allowed = false;
                                }
                                if (!((i2 & 2) == 0 || pi.pathPermissions[targetUid].getWritePermission() == null)) {
                                    allowed = false;
                                }
                            }
                        }
                    }
                    if (allowed) {
                        return allowedResult2;
                    }
                } else if (checkHoldingPermissionsLocked(pm, pi, grantUri2, targetUid2, i2)) {
                    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                        String str3 = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Target ");
                        stringBuilder.append(str);
                        stringBuilder.append(" already has full permission to ");
                        stringBuilder.append(grantUri2);
                        Slog.v(str3, stringBuilder.toString());
                    }
                    return allowedResult2;
                }
                if (UserHandle.getUserId(targetUid2) != grantUri2.sourceUserId) {
                    pi2 = pi;
                    if (checkHoldingPermissionsInternalLocked(pm, pi, grantUri2, i, i2, null)) {
                        allowed = true;
                        if (!allowed) {
                            if (!pi2.grantUriPermissions) {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("Provider ");
                                stringBuilder.append(pi2.packageName);
                                stringBuilder.append(SliceAuthority.DELIMITER);
                                stringBuilder.append(pi2.name);
                                stringBuilder.append(" does not allow granting of Uri permissions (uri ");
                                stringBuilder.append(grantUri2);
                                stringBuilder.append(")");
                                throw new SecurityException(stringBuilder.toString());
                            } else if (pi2.uriPermissionPatterns != null) {
                                allowedResult = pi2.uriPermissionPatterns.length;
                                boolean allowed2 = false;
                                while (true) {
                                    targetUid = i3;
                                    if (targetUid < allowedResult) {
                                        if (pi2.uriPermissionPatterns[targetUid] != null && pi2.uriPermissionPatterns[targetUid].match(grantUri2.uri.getPath())) {
                                            allowed2 = true;
                                            break;
                                        }
                                        i3 = targetUid + 1;
                                    } else {
                                        break;
                                    }
                                }
                                if (!allowed2) {
                                    StringBuilder stringBuilder2 = new StringBuilder();
                                    stringBuilder2.append("Provider ");
                                    stringBuilder2.append(pi2.packageName);
                                    stringBuilder2.append(SliceAuthority.DELIMITER);
                                    stringBuilder2.append(pi2.name);
                                    stringBuilder2.append(" does not allow granting of permission to path of Uri ");
                                    stringBuilder2.append(grantUri2);
                                    throw new SecurityException(stringBuilder2.toString());
                                }
                            }
                        }
                        if (!checkHoldingPermissionsLocked(pm, pi2, grantUri2, i, i2) || checkUriPermissionLocked(grantUri2, i, i2)) {
                            return targetUid2;
                        }
                        if ("android.permission.MANAGE_DOCUMENTS".equals(pi2.readPermission)) {
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("UID ");
                            stringBuilder.append(i);
                            stringBuilder.append(" does not have permission to ");
                            stringBuilder.append(grantUri2);
                            stringBuilder.append("; you could obtain access using ACTION_OPEN_DOCUMENT or related APIs");
                            throw new SecurityException(stringBuilder.toString());
                        }
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("UID ");
                        stringBuilder.append(i);
                        stringBuilder.append(" does not have permission to ");
                        stringBuilder.append(grantUri2);
                        throw new SecurityException(stringBuilder.toString());
                    }
                }
                pi2 = pi;
                allowed = false;
                if (allowed) {
                }
                if (!checkHoldingPermissionsLocked(pm, pi2, grantUri2, i, i2)) {
                }
                return targetUid2;
            }
            str2 = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("For security reasons, the system cannot issue a Uri permission grant to ");
            stringBuilder.append(grantUri2);
            stringBuilder.append("; use startActivityAsCaller() instead");
            Slog.w(str2, stringBuilder.toString());
            return -1;
        }
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            str2 = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Can't grant URI permission for non-content URI: ");
            stringBuilder.append(grantUri2);
            Slog.v(str2, stringBuilder.toString());
        }
        return -1;
    }

    public int checkGrantUriPermission(int callingUid, String targetPkg, Uri uri, int modeFlags, int userId) {
        int checkGrantUriPermissionLocked;
        enforceNotIsolatedCaller("checkGrantUriPermission");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                checkGrantUriPermissionLocked = checkGrantUriPermissionLocked(callingUid, targetPkg, new GrantUri(userId, uri, false), modeFlags, -1);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return checkGrantUriPermissionLocked;
    }

    @GuardedBy("this")
    void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri, int modeFlags, UriPermissionOwner owner) {
        if (Intent.isAccessUriMode(modeFlags)) {
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Granting ");
                stringBuilder.append(targetPkg);
                stringBuilder.append(SliceAuthority.DELIMITER);
                stringBuilder.append(targetUid);
                stringBuilder.append(" permission to ");
                stringBuilder.append(grantUri);
                Slog.v(str, stringBuilder.toString());
            }
            ProviderInfo pi = getProviderInfoLocked(grantUri.uri.getAuthority(), grantUri.sourceUserId, 268435456);
            if (pi == null) {
                String str2 = TAG;
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("No content provider found for grant: ");
                stringBuilder2.append(grantUri.toSafeString());
                Slog.w(str2, stringBuilder2.toString());
                return;
            }
            if ((modeFlags & 128) != 0) {
                grantUri.prefix = true;
            }
            findOrCreateUriPermissionLocked(pi.packageName, targetPkg, targetUid, grantUri).grantModes(modeFlags, owner);
        }
    }

    @GuardedBy("this")
    void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri, int modeFlags, UriPermissionOwner owner, int targetUserId) {
        if (targetPkg != null) {
            try {
                int targetUid = checkGrantUriPermissionLocked(callingUid, targetPkg, grantUri, modeFlags, AppGlobals.getPackageManager().getPackageUid(targetPkg, 268435456, targetUserId));
                if (targetUid >= 0) {
                    grantUriPermissionUncheckedLocked(targetUid, targetPkg, grantUri, modeFlags, owner);
                    return;
                }
                return;
            } catch (RemoteException e) {
                return;
            }
        }
        throw new NullPointerException(ATTR_TARGET_PKG);
    }

    @GuardedBy("this")
    NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid, String targetPkg, Intent intent, int mode, NeededUriGrants needed, int targetUserId) {
        String str = targetPkg;
        Intent intent2 = intent;
        int i = mode;
        NeededUriGrants needed2 = needed;
        int i2 = targetUserId;
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            String str2 = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Checking URI perm to data=");
            stringBuilder.append(intent2 != null ? intent.getData() : null);
            stringBuilder.append(" clip=");
            stringBuilder.append(intent2 != null ? intent.getClipData() : null);
            stringBuilder.append(" from ");
            stringBuilder.append(intent2);
            stringBuilder.append("; flags=0x");
            stringBuilder.append(Integer.toHexString(intent2 != null ? intent.getFlags() : 0));
            Slog.v(str2, stringBuilder.toString());
        }
        if (str == null) {
            throw new NullPointerException(ATTR_TARGET_PKG);
        } else if (intent2 == null) {
            return null;
        } else {
            Uri data = intent.getData();
            ClipData clip = intent.getClipData();
            if (data == null && clip == null) {
                return null;
            }
            GrantUri grantUri;
            int contentUserHint = intent.getContentUserHint();
            if (contentUserHint == -2) {
                contentUserHint = UserHandle.getUserId(callingUid);
            }
            int contentUserHint2 = contentUserHint;
            IPackageManager pm = AppGlobals.getPackageManager();
            if (needed2 != null) {
                contentUserHint = needed2.targetUid;
            } else {
                try {
                    contentUserHint = pm.getPackageUid(str, 268435456, i2);
                    if (contentUserHint < 0) {
                        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                            String str3 = TAG;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("Can't grant URI permission no uid for: ");
                            stringBuilder2.append(str);
                            stringBuilder2.append(" on user ");
                            stringBuilder2.append(i2);
                            Slog.v(str3, stringBuilder2.toString());
                        }
                        return null;
                    }
                } catch (RemoteException ex) {
                    IPackageManager iPackageManager = pm;
                    RemoteException remoteException = ex;
                    return null;
                }
            }
            if (data != null) {
                grantUri = GrantUri.resolve(contentUserHint2, data);
                GrantUri grantUri2 = grantUri;
                contentUserHint = checkGrantUriPermissionLocked(callingUid, str, grantUri, i, contentUserHint);
                if (contentUserHint > 0) {
                    if (needed2 == null) {
                        needed2 = new NeededUriGrants(str, contentUserHint, i);
                    }
                    needed2.add(grantUri2);
                }
            }
            if (clip != null) {
                int targetUid = contentUserHint;
                contentUserHint = needed2;
                int i3 = 0;
                while (true) {
                    int i4 = i3;
                    if (i4 >= clip.getItemCount()) {
                        break;
                    }
                    int i5;
                    Uri uri = clip.getItemAt(i4).getUri();
                    if (uri != null) {
                        grantUri = GrantUri.resolve(contentUserHint2, uri);
                        GrantUri grantUri3 = grantUri;
                        targetUid = checkGrantUriPermissionLocked(callingUid, str, grantUri, i, targetUid);
                        if (targetUid > 0) {
                            if (contentUserHint == 0) {
                                contentUserHint = new NeededUriGrants(str, targetUid, i);
                            }
                            contentUserHint.add(grantUri3);
                        }
                        i5 = i4;
                    } else {
                        intent2 = clip.getItemAt(i4).getIntent();
                        if (intent2 != null) {
                            i5 = i4;
                            NeededUriGrants newNeeded = checkGrantUriPermissionFromIntentLocked(callingUid, str, intent2, i, contentUserHint, i2);
                            if (newNeeded != null) {
                                contentUserHint = newNeeded;
                            }
                        } else {
                            i5 = i4;
                        }
                    }
                    i3 = i5 + 1;
                    intent2 = intent;
                }
                needed2 = contentUserHint;
            }
            return needed2;
        }
    }

    @GuardedBy("this")
    void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed, UriPermissionOwner owner) {
        if (needed != null) {
            for (int i = 0; i < needed.size(); i++) {
                grantUriPermissionUncheckedLocked(needed.targetUid, needed.targetPkg, (GrantUri) needed.get(i), needed.flags, owner);
            }
        }
    }

    @GuardedBy("this")
    void grantUriPermissionFromIntentLocked(int callingUid, String targetPkg, Intent intent, UriPermissionOwner owner, int targetUserId) {
        NeededUriGrants needed = checkGrantUriPermissionFromIntentLocked(callingUid, targetPkg, intent, intent != null ? intent.getFlags() : 0, null, targetUserId);
        if (needed != null) {
            grantUriPermissionUncheckedFromIntentLocked(needed, owner);
        }
    }

    public void grantUriPermission(IApplicationThread caller, String targetPkg, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("grantUriPermission");
        GrantUri grantUri = new GrantUri(userId, uri, false);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unable to find app for caller ");
                    stringBuilder.append(caller);
                    stringBuilder.append(" when granting permission to uri ");
                    stringBuilder.append(grantUri);
                    throw new SecurityException(stringBuilder.toString());
                } else if (targetPkg != null) {
                    Preconditions.checkFlagsArgument(modeFlags, HdmiCecKeycode.UI_SOUND_PRESENTATION_TREBLE_STEP_MINUS);
                    grantUriPermissionLocked(r.uid, targetPkg, grantUri, modeFlags, null, UserHandle.getUserId(r.uid));
                } else {
                    throw new IllegalArgumentException("null target");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy("this")
    void removeUriPermissionIfNeededLocked(UriPermission perm) {
        if (perm.modeFlags == 0) {
            ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.get(perm.targetUid);
            if (perms != null) {
                if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Removing ");
                    stringBuilder.append(perm.targetUid);
                    stringBuilder.append(" permission to ");
                    stringBuilder.append(perm.uri);
                    Slog.v(str, stringBuilder.toString());
                }
                perms.remove(perm.uri);
                if (perms.isEmpty()) {
                    this.mGrantedUriPermissions.remove(perm.targetUid);
                }
            }
        }
    }

    @GuardedBy("this")
    private void revokeUriPermissionLocked(String targetPackage, int callingUid, GrantUri grantUri, int modeFlags) {
        String str;
        StringBuilder stringBuilder;
        String str2 = targetPackage;
        int i = callingUid;
        GrantUri grantUri2 = grantUri;
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Revoking all granted permissions to ");
            stringBuilder.append(grantUri2);
            Slog.v(str, stringBuilder.toString());
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        ProviderInfo pi = getProviderInfoLocked(grantUri2.uri.getAuthority(), grantUri2.sourceUserId, 786432);
        if (pi == null) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("No content provider found for permission revoke: ");
            stringBuilder.append(grantUri.toSafeString());
            Slog.w(str, stringBuilder.toString());
            return;
        }
        int i2 = 1;
        int targetUid;
        if (checkHoldingPermissionsLocked(pm, pi, grantUri2, i, modeFlags)) {
            boolean persistChanged = false;
            int i3 = this.mGrantedUriPermissions.size() - 1;
            while (i3 >= 0) {
                targetUid = this.mGrantedUriPermissions.keyAt(i3);
                ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.valueAt(i3);
                int j = perms.size() - i2;
                while (j >= 0) {
                    int targetUid2;
                    UriPermission perm = (UriPermission) perms.valueAt(j);
                    if (str2 != null && !str2.equals(perm.targetPkg)) {
                        targetUid2 = targetUid;
                    } else if (perm.uri.sourceUserId == grantUri2.sourceUserId && perm.uri.uri.isPathPrefixMatch(grantUri2.uri)) {
                        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                            String str3 = TAG;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            targetUid2 = targetUid;
                            stringBuilder2.append("Revoking ");
                            stringBuilder2.append(perm.targetUid);
                            stringBuilder2.append(" permission to ");
                            stringBuilder2.append(perm.uri);
                            Slog.v(str3, stringBuilder2.toString());
                        } else {
                            targetUid2 = targetUid;
                        }
                        persistChanged |= perm.revokeModes(modeFlags | 64, str2 == null);
                        if (perm.modeFlags == 0) {
                            perms.removeAt(j);
                        }
                    } else {
                        targetUid2 = targetUid;
                    }
                    j--;
                    targetUid = targetUid2;
                }
                if (perms.isEmpty()) {
                    this.mGrantedUriPermissions.removeAt(i3);
                }
                i3--;
                i2 = 1;
            }
            if (persistChanged) {
                schedulePersistUriGrants();
            }
            return;
        }
        ArrayMap<GrantUri, UriPermission> perms2 = (ArrayMap) this.mGrantedUriPermissions.get(i);
        if (perms2 != null) {
            boolean persistChanged2 = false;
            targetUid = perms2.size() - 1;
            while (true) {
                i2 = targetUid;
                if (i2 < 0) {
                    break;
                }
                UriPermission perm2 = (UriPermission) perms2.valueAt(i2);
                if ((str2 == null || str2.equals(perm2.targetPkg)) && perm2.uri.sourceUserId == grantUri2.sourceUserId && perm2.uri.uri.isPathPrefixMatch(grantUri2.uri)) {
                    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                        String str4 = TAG;
                        StringBuilder stringBuilder3 = new StringBuilder();
                        stringBuilder3.append("Revoking non-owned ");
                        stringBuilder3.append(perm2.targetUid);
                        stringBuilder3.append(" permission to ");
                        stringBuilder3.append(perm2.uri);
                        Slog.v(str4, stringBuilder3.toString());
                    }
                    persistChanged2 |= perm2.revokeModes(modeFlags | 64, false);
                    if (perm2.modeFlags == 0) {
                        perms2.removeAt(i2);
                    }
                }
                targetUid = i2 - 1;
            }
            if (perms2.isEmpty()) {
                this.mGrantedUriPermissions.remove(i);
            }
            if (persistChanged2) {
                schedulePersistUriGrants();
            }
        }
    }

    public void revokeUriPermission(IApplicationThread caller, String targetPackage, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("revokeUriPermission");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unable to find app for caller ");
                    stringBuilder.append(caller);
                    stringBuilder.append(" when revoking permission to uri ");
                    stringBuilder.append(uri);
                    throw new SecurityException(stringBuilder.toString());
                } else if (uri == null) {
                    Slog.w(TAG, "revokeUriPermission: null uri");
                } else if (!Intent.isAccessUriMode(modeFlags)) {
                    resetPriorityAfterLockedSection();
                } else if (getProviderInfoLocked(uri.getAuthority(), userId, 786432) == null) {
                    String str = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("No content provider found for permission revoke: ");
                    stringBuilder2.append(uri.toSafeString());
                    Slog.w(str, stringBuilder2.toString());
                    resetPriorityAfterLockedSection();
                } else {
                    revokeUriPermissionLocked(targetPackage, r.uid, new GrantUri(userId, uri, false), modeFlags);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy("this")
    private void removeUriPermissionsForPackageLocked(String packageName, int userHandle, boolean persistable, boolean targetOnly) {
        if (userHandle == -1 && packageName == null) {
            throw new IllegalArgumentException("Must narrow by either package or user");
        }
        boolean persistChanged = false;
        int N = this.mGrantedUriPermissions.size();
        int i = 0;
        while (i < N) {
            int targetUid = this.mGrantedUriPermissions.keyAt(i);
            ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.valueAt(i);
            if (userHandle == -1 || userHandle == UserHandle.getUserId(targetUid)) {
                Iterator<UriPermission> it = perms.values().iterator();
                while (it.hasNext()) {
                    UriPermission perm = (UriPermission) it.next();
                    if (packageName == null || ((!targetOnly && perm.sourcePkg.equals(packageName)) || perm.targetPkg.equals(packageName))) {
                        if (!"downloads".equals(perm.uri.uri.getAuthority()) || persistable) {
                            persistChanged |= perm.revokeModes(persistable ? -1 : -65, true);
                            if (perm.modeFlags == 0) {
                                it.remove();
                            }
                        }
                    }
                }
                if (perms.isEmpty()) {
                    this.mGrantedUriPermissions.remove(targetUid);
                    N--;
                    i--;
                }
            }
            i++;
        }
        if (persistChanged) {
            schedulePersistUriGrants();
        }
    }

    public IBinder newUriPermissionOwner(String name) {
        IBinder externalTokenLocked;
        enforceNotIsolatedCaller("newUriPermissionOwner");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                externalTokenLocked = new UriPermissionOwner(this, name).getExternalTokenLocked();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return externalTokenLocked;
    }

    public IBinder getUriPermissionOwnerForActivity(IBinder activityToken) {
        IBinder externalTokenLocked;
        enforceNotIsolatedCaller("getUriPermissionOwnerForActivity");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(activityToken);
                if (r != null) {
                    externalTokenLocked = r.getUriPermissionsLocked().getExternalTokenLocked();
                } else {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Activity does not exist; token=");
                    stringBuilder.append(activityToken);
                    throw new IllegalArgumentException(stringBuilder.toString());
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return externalTokenLocked;
    }

    public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri, int modeFlags, int sourceUserId, int targetUserId) {
        Throwable th;
        IBinder iBinder;
        int i;
        Uri uri2 = uri;
        int targetUserId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), targetUserId, false, 2, "grantUriPermissionFromOwner", null);
        synchronized (this) {
            int i2;
            try {
                boostPriorityForLockedSection();
                UriPermissionOwner owner = UriPermissionOwner.fromExternalToken(token);
                if (owner != null) {
                    try {
                        i2 = fromUid;
                        if (i2 != Binder.getCallingUid()) {
                            try {
                                if (Binder.getCallingUid() != Process.myUid()) {
                                    throw new SecurityException("nice try");
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                iBinder = token;
                                i = sourceUserId;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        if (targetPkg == null) {
                            i = sourceUserId;
                            throw new IllegalArgumentException("null target");
                        } else if (uri2 != null) {
                            try {
                                grantUriPermissionLocked(i2, targetPkg, new GrantUri(sourceUserId, uri2, false), modeFlags, owner, targetUserId2);
                                resetPriorityAfterLockedSection();
                                return;
                            } catch (Throwable th3) {
                                th = th3;
                                i = sourceUserId;
                                iBinder = token;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } else {
                            i = sourceUserId;
                            throw new IllegalArgumentException("null uri");
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        iBinder = token;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                i2 = fromUid;
                i = sourceUserId;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unknown owner: ");
                stringBuilder.append(token);
                throw new IllegalArgumentException(stringBuilder.toString());
            } catch (Throwable th5) {
                th = th5;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UriPermissionOwner owner = UriPermissionOwner.fromExternalToken(token);
                if (owner != null) {
                    if (uri == null) {
                        owner.removeUriPermissionsLocked(mode);
                    } else {
                        owner.removeUriPermissionLocked(new GrantUri(userId, uri, (mode & 128) != 0), mode);
                    }
                } else {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unknown owner: ");
                    stringBuilder.append(token);
                    throw new IllegalArgumentException(stringBuilder.toString());
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void schedulePersistUriGrants() {
        if (!this.mHandler.hasMessages(38)) {
            this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(38), JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
        }
    }

    private void writeGrantedUriPermissions() {
        Iterator it;
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG, "writeGrantedUriPermissions()");
        }
        long startTime = SystemClock.uptimeMillis();
        ArrayList<Snapshot> persist = Lists.newArrayList();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int size = this.mGrantedUriPermissions.size();
                for (int i = 0; i < size; i++) {
                    for (UriPermission perm : ((ArrayMap) this.mGrantedUriPermissions.valueAt(i)).values()) {
                        if (perm.persistedModeFlags != 0) {
                            persist.add(perm.snapshot());
                        }
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        FileOutputStream fos = null;
        try {
            fos = this.mGrantFile.startWrite(startTime);
            XmlSerializer out = new FastXmlSerializer();
            out.setOutput(fos, StandardCharsets.UTF_8.name());
            out.startDocument(null, Boolean.valueOf(true));
            out.startTag(null, TAG_URI_GRANTS);
            it = persist.iterator();
            while (it.hasNext()) {
                Snapshot perm2 = (Snapshot) it.next();
                out.startTag(null, TAG_URI_GRANT);
                XmlUtils.writeIntAttribute(out, ATTR_SOURCE_USER_ID, perm2.uri.sourceUserId);
                XmlUtils.writeIntAttribute(out, ATTR_TARGET_USER_ID, perm2.targetUserId);
                out.attribute(null, ATTR_SOURCE_PKG, perm2.sourcePkg);
                out.attribute(null, ATTR_TARGET_PKG, perm2.targetPkg);
                out.attribute(null, ATTR_URI, String.valueOf(perm2.uri.uri));
                XmlUtils.writeBooleanAttribute(out, ATTR_PREFIX, perm2.uri.prefix);
                XmlUtils.writeIntAttribute(out, ATTR_MODE_FLAGS, perm2.persistedModeFlags);
                XmlUtils.writeLongAttribute(out, ATTR_CREATED_TIME, perm2.persistedCreateTime);
                out.endTag(null, TAG_URI_GRANT);
            }
            out.endTag(null, TAG_URI_GRANTS);
            out.endDocument();
            this.mGrantFile.finishWrite(fos);
        } catch (IOException e) {
            if (fos != null) {
                this.mGrantFile.failWrite(fos);
            }
        }
    }

    @GuardedBy("this")
    private void readGrantedUriPermissionsLocked() {
        IOException e;
        XmlPullParserException e2;
        Throwable th;
        ActivityManagerService activityManagerService = this;
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG, "readGrantedUriPermissions()");
        }
        long now = System.currentTimeMillis();
        String str = null;
        FileInputStream fis = null;
        long now2;
        try {
            fis = activityManagerService.mGrantFile.openRead();
            XmlPullParser in = Xml.newPullParser();
            in.setInput(fis, StandardCharsets.UTF_8.name());
            while (true) {
                int next = in.next();
                int type = next;
                if (next == 1) {
                    break;
                }
                XmlPullParser in2;
                String tag = in.getName();
                int i;
                if (type == 2 && TAG_URI_GRANT.equals(tag)) {
                    int targetUserId;
                    int userHandle = XmlUtils.readIntAttribute(in, ATTR_USER_HANDLE, -10000);
                    if (userHandle != -10000) {
                        next = userHandle;
                        targetUserId = userHandle;
                    } else {
                        next = XmlUtils.readIntAttribute(in, ATTR_SOURCE_USER_ID);
                        targetUserId = XmlUtils.readIntAttribute(in, ATTR_TARGET_USER_ID);
                    }
                    int sourceUserId = next;
                    String sourcePkg = in.getAttributeValue(str, ATTR_SOURCE_PKG);
                    String targetPkg = in.getAttributeValue(str, ATTR_TARGET_PKG);
                    Uri uri = Uri.parse(in.getAttributeValue(str, ATTR_URI));
                    boolean prefix = XmlUtils.readBooleanAttribute(in, ATTR_PREFIX);
                    int modeFlags = XmlUtils.readIntAttribute(in, ATTR_MODE_FLAGS);
                    long createdTime = XmlUtils.readLongAttribute(in, ATTR_CREATED_TIME, now);
                    ProviderInfo pi = activityManagerService.getProviderInfoLocked(uri.getAuthority(), sourceUserId, 786432);
                    if (pi == null || !sourcePkg.equals(pi.packageName)) {
                        now2 = now;
                        in2 = in;
                        i = type;
                        now = modeFlags;
                        in = createdTime;
                        String str2 = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Persisted grant for ");
                        stringBuilder.append(uri);
                        stringBuilder.append(" had source ");
                        stringBuilder.append(sourcePkg);
                        stringBuilder.append(" but instead found ");
                        stringBuilder.append(pi);
                        Slog.w(str2, stringBuilder.toString());
                    } else {
                        now2 = now;
                        int targetUid = -1;
                        try {
                            targetUid = AppGlobals.getPackageManager().getPackageUid(targetPkg, 8192, targetUserId);
                        } catch (RemoteException e3) {
                        }
                        if (targetUid != -1) {
                            try {
                                in2 = in;
                                activityManagerService.findOrCreateUriPermissionLocked(sourcePkg, targetPkg, targetUid, new GrantUri(sourceUserId, uri, prefix)).initPersistedModes(modeFlags, createdTime);
                            } catch (FileNotFoundException e4) {
                            } catch (IOException e5) {
                                e = e5;
                                Slog.wtf(TAG, "Failed reading Uri grants", e);
                                IoUtils.closeQuietly(fis);
                            } catch (XmlPullParserException e6) {
                                e2 = e6;
                                Slog.wtf(TAG, "Failed reading Uri grants", e2);
                                IoUtils.closeQuietly(fis);
                            }
                        }
                        in2 = in;
                        i = type;
                        now = modeFlags;
                        in = createdTime;
                    }
                } else {
                    now2 = now;
                    in2 = in;
                    i = type;
                }
                now = now2;
                in = in2;
                activityManagerService = this;
                str = null;
            }
        } catch (FileNotFoundException e7) {
            now2 = now;
        } catch (IOException e8) {
            e = e8;
            now2 = now;
            Slog.wtf(TAG, "Failed reading Uri grants", e);
        } catch (XmlPullParserException e9) {
            e2 = e9;
            now2 = now;
            Slog.wtf(TAG, "Failed reading Uri grants", e2);
        } catch (Throwable th2) {
            th = th2;
            IoUtils.closeQuietly(fis);
            throw th;
        }
        IoUtils.closeQuietly(fis);
    }

    public void takePersistableUriPermission(Uri uri, int modeFlags, String toPackage, int userId) {
        int uid;
        boolean prefixValid = false;
        if (toPackage != null) {
            enforceCallingPermission("android.permission.FORCE_PERSISTABLE_URI_PERMISSIONS", "takePersistableUriPermission");
            uid = this.mPackageManagerInt.getPackageUid(toPackage, 0, userId);
        } else {
            enforceNotIsolatedCaller("takePersistableUriPermission");
            uid = Binder.getCallingUid();
        }
        Preconditions.checkFlagsArgument(modeFlags, 3);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean persistChanged = false;
                GrantUri grantUri = new GrantUri(userId, uri, false);
                UriPermission exactPerm = findUriPermissionLocked(uid, grantUri);
                UriPermission prefixPerm = findUriPermissionLocked(uid, new GrantUri(userId, uri, true));
                boolean exactValid = exactPerm != null && (exactPerm.persistableModeFlags & modeFlags) == modeFlags;
                if (prefixPerm != null && (prefixPerm.persistableModeFlags & modeFlags) == modeFlags) {
                    prefixValid = true;
                }
                if (exactValid || prefixValid) {
                    if (exactValid) {
                        persistChanged = false | exactPerm.takePersistableModes(modeFlags);
                    }
                    if (prefixValid) {
                        persistChanged |= prefixPerm.takePersistableModes(modeFlags);
                    }
                    if (persistChanged | maybePrunePersistedUriGrantsLocked(uid)) {
                        schedulePersistUriGrants();
                    }
                } else {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("No persistable permission grants found for UID ");
                    stringBuilder.append(uid);
                    stringBuilder.append(" and Uri ");
                    stringBuilder.append(grantUri.toSafeString());
                    throw new SecurityException(stringBuilder.toString());
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void releasePersistableUriPermission(Uri uri, int modeFlags, String toPackage, int userId) {
        int uid;
        if (toPackage != null) {
            enforceCallingPermission("android.permission.FORCE_PERSISTABLE_URI_PERMISSIONS", "releasePersistableUriPermission");
            uid = this.mPackageManagerInt.getPackageUid(toPackage, 0, userId);
        } else {
            enforceNotIsolatedCaller("releasePersistableUriPermission");
            uid = Binder.getCallingUid();
        }
        Preconditions.checkFlagsArgument(modeFlags, 3);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean persistChanged = false;
                UriPermission exactPerm = findUriPermissionLocked(uid, new GrantUri(userId, uri, false));
                UriPermission prefixPerm = findUriPermissionLocked(uid, new GrantUri(userId, uri, true));
                if (exactPerm == null && prefixPerm == null && toPackage == null) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("No permission grants found for UID ");
                    stringBuilder.append(uid);
                    stringBuilder.append(" and Uri ");
                    stringBuilder.append(uri.toSafeString());
                    throw new SecurityException(stringBuilder.toString());
                }
                if (exactPerm != null) {
                    persistChanged = false | exactPerm.releasePersistableModes(modeFlags);
                    removeUriPermissionIfNeededLocked(exactPerm);
                }
                if (prefixPerm != null) {
                    persistChanged |= prefixPerm.releasePersistableModes(modeFlags);
                    removeUriPermissionIfNeededLocked(prefixPerm);
                }
                if (persistChanged) {
                    schedulePersistUriGrants();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy("this")
    private boolean maybePrunePersistedUriGrantsLocked(int uid) {
        ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.get(uid);
        int i = 0;
        if (perms == null || perms.size() < 128) {
            return false;
        }
        ArrayList<UriPermission> persisted = Lists.newArrayList();
        for (UriPermission perm : perms.values()) {
            if (perm.persistedModeFlags != 0) {
                persisted.add(perm);
            }
        }
        int trimCount = persisted.size() - 128;
        if (trimCount <= 0) {
            return false;
        }
        Collections.sort(persisted, new PersistedTimeComparator());
        while (i < trimCount) {
            UriPermission perm2 = (UriPermission) persisted.get(i);
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Trimming grant created at ");
                stringBuilder.append(perm2.persistedCreateTime);
                Slog.v(str, stringBuilder.toString());
            }
            perm2.releasePersistableModes(-1);
            removeUriPermissionIfNeededLocked(perm2);
            i++;
        }
        return true;
    }

    public ParceledListSlice<UriPermission> getPersistedUriPermissions(String packageName, boolean incoming) {
        enforceNotIsolatedCaller("getPersistedUriPermissions");
        Preconditions.checkNotNull(packageName, "packageName");
        int callingUid = Binder.getCallingUid();
        try {
            if (AppGlobals.getPackageManager().getPackageUid(packageName, 786432, UserHandle.getUserId(callingUid)) == callingUid) {
                ArrayList<UriPermission> result = Lists.newArrayList();
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        int j = 0;
                        if (incoming) {
                            ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.get(callingUid);
                            if (perms == null) {
                                j = TAG;
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("No permission grants found for ");
                                stringBuilder.append(packageName);
                                Slog.w(j, stringBuilder.toString());
                            } else {
                                while (j < perms.size()) {
                                    UriPermission perm = (UriPermission) perms.valueAt(j);
                                    if (packageName.equals(perm.targetPkg) && perm.persistedModeFlags != 0) {
                                        result.add(perm.buildPersistedPublicApiObject());
                                    }
                                    j++;
                                }
                            }
                        } else {
                            int size = this.mGrantedUriPermissions.size();
                            for (int i = 0; i < size; i++) {
                                ArrayMap<GrantUri, UriPermission> perms2 = (ArrayMap) this.mGrantedUriPermissions.valueAt(i);
                                for (int j2 = 0; j2 < perms2.size(); j2++) {
                                    UriPermission perm2 = (UriPermission) perms2.valueAt(j2);
                                    if (packageName.equals(perm2.sourcePkg) && perm2.persistedModeFlags != 0) {
                                        result.add(perm2.buildPersistedPublicApiObject());
                                    }
                                }
                            }
                        }
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
                return new ParceledListSlice(result);
            }
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Package ");
            stringBuilder2.append(packageName);
            stringBuilder2.append(" does not belong to calling UID ");
            stringBuilder2.append(callingUid);
            throw new SecurityException(stringBuilder2.toString());
        } catch (RemoteException e) {
            throw new SecurityException("Failed to verify package name ownership");
        }
    }

    public ParceledListSlice<GrantedUriPermission> getGrantedUriPermissions(String packageName, int userId) {
        enforceCallingPermission("android.permission.GET_APP_GRANTED_URI_PERMISSIONS", "getGrantedUriPermissions");
        List<GrantedUriPermission> result = new ArrayList();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int size = this.mGrantedUriPermissions.size();
                for (int i = 0; i < size; i++) {
                    ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.valueAt(i);
                    for (int j = 0; j < perms.size(); j++) {
                        UriPermission perm = (UriPermission) perms.valueAt(j);
                        if ((packageName == null || packageName.equals(perm.targetPkg)) && perm.targetUserId == userId && perm.persistedModeFlags != 0) {
                            result.add(perm.buildGrantedUriPermission());
                        }
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return new ParceledListSlice(result);
    }

    public void clearGrantedUriPermissions(String packageName, int userId) {
        enforceCallingPermission("android.permission.CLEAR_APP_GRANTED_URI_PERMISSIONS", "clearGrantedUriPermissions");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                removeUriPermissionsForPackageLocked(packageName, userId, true, true);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void showWaitingForDebugger(IApplicationThread who, boolean waiting) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = who != null ? getRecordForAppLocked(who) : null;
                if (app == null) {
                } else {
                    Message msg = Message.obtain();
                    msg.what = 6;
                    msg.obj = app;
                    msg.arg1 = waiting;
                    this.mUiHandler.sendMessage(msg);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void getMemoryInfo(ActivityManager.MemoryInfo outInfo) {
        long homeAppMem = this.mProcessList.getMemLevel(600);
        long cachedAppMem = this.mProcessList.getMemLevel(900);
        outInfo.availMem = Process.getFreeMemory();
        outInfo.totalMem = Process.getTotalMemory();
        outInfo.threshold = homeAppMem;
        outInfo.lowMemory = outInfo.availMem < ((cachedAppMem - homeAppMem) / 2) + homeAppMem;
        outInfo.hiddenAppThreshold = cachedAppMem;
        outInfo.secondaryServerThreshold = this.mProcessList.getMemLevel(500);
        outInfo.visibleAppThreshold = this.mProcessList.getMemLevel(100);
        outInfo.foregroundAppThreshold = this.mProcessList.getMemLevel(0);
    }

    public List<IBinder> getAppTasks(String callingPackage) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_GETAPPTASKS);
        int callingUid = Binder.getCallingUid();
        long ident = Binder.clearCallingIdentity();
        try {
            List appTasksList;
            synchronized (this) {
                boostPriorityForLockedSection();
                appTasksList = this.mRecentTasks.getAppTasksList(callingUid, callingPackage);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
            return appTasksList;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public List<RunningTaskInfo> getTasks(int maxNum) {
        return getFilteredTasks(maxNum, 0, 0);
    }

    public List<RunningTaskInfo> getFilteredTasks(int maxNum, @ActivityType int ignoreActivityType, @WindowingMode int ignoreWindowingMode) {
        int callingUid = Binder.getCallingUid();
        ArrayList<RunningTaskInfo> list = new ArrayList();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_ALL) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("getTasks: max=");
                    stringBuilder.append(maxNum);
                    Slog.v(str, stringBuilder.toString());
                }
                this.mStackSupervisor.getRunningTasks(maxNum, list, ignoreActivityType, ignoreWindowingMode, callingUid, isGetTasksAllowed("getTasks", Binder.getCallingPid(), callingUid));
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return list;
    }

    private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid) {
        boolean z = true;
        if (this.mRecentTasks.isCallerRecents(callingUid)) {
            return true;
        }
        String str;
        StringBuilder stringBuilder;
        if (checkPermission("android.permission.REAL_GET_TASKS", callingPid, callingUid) != 0) {
            z = false;
        }
        boolean allowed = z;
        if (!allowed && checkPermission("android.permission.GET_TASKS", callingPid, callingUid) == 0) {
            try {
                if (AppGlobals.getPackageManager().isUidPrivileged(callingUid)) {
                    allowed = true;
                    if (ActivityManagerDebugConfig.DEBUG_TASKS) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append(caller);
                        stringBuilder.append(": caller ");
                        stringBuilder.append(callingUid);
                        stringBuilder.append(" is using old GET_TASKS but privileged; allowing");
                        Slog.w(str, stringBuilder.toString());
                    }
                }
            } catch (RemoteException e) {
                String str2 = TAG;
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append(caller);
                stringBuilder2.append(": caller ");
                stringBuilder2.append(callingUid);
                stringBuilder2.append(" check allowed ex:");
                Slog.w(str2, stringBuilder2.toString(), e);
            }
        }
        if (!allowed && ActivityManagerDebugConfig.DEBUG_TASKS) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append(caller);
            stringBuilder.append(": caller ");
            stringBuilder.append(callingUid);
            stringBuilder.append(" does not hold REAL_GET_TASKS; limiting output");
            Slog.w(str, stringBuilder.toString());
        }
        return allowed;
    }

    public ParceledListSlice<RecentTaskInfo> getRecentTasks(int maxNum, int flags, int userId) {
        ParceledListSlice<RecentTaskInfo> recentTasks;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_GETRECENTTASKS);
        int callingUid = Binder.getCallingUid();
        userId = this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, userId, false, 2, "getRecentTasks", null);
        boolean allowed = isGetTasksAllowed("getRecentTasks", Binder.getCallingPid(), callingUid);
        boolean detailed = checkCallingPermission("android.permission.GET_DETAILED_TASKS") == 0;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                recentTasks = this.mRecentTasks.getRecentTasks(maxNum, flags, allowed, detailed, userId, callingUid);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return recentTasks;
    }

    public TaskDescription getTaskDescription(int id) {
        TaskDescription taskDescription;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getTaskDescription()");
                taskDescription = true;
                TaskRecord tr = this.mStackSupervisor.anyTaskForIdLocked(id, 1);
                if (tr != null) {
                    taskDescription = tr.lastTaskDescription;
                } else {
                    resetPriorityAfterLockedSection();
                    return null;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return taskDescription;
    }

    public int addAppTask(IBinder activityToken, Intent intent, TaskDescription description, Bitmap thumbnail) throws RemoteException {
        Throwable th;
        IBinder iBinder;
        Intent intent2 = intent;
        int callingUid = Binder.getCallingUid();
        long callingIdent = Binder.clearCallingIdentity();
        TaskDescription taskDescription;
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(activityToken);
                    StringBuilder stringBuilder;
                    if (r != null) {
                        ComponentName comp = intent.getComponent();
                        if (comp == null) {
                            taskDescription = description;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Intent ");
                            stringBuilder.append(intent2);
                            stringBuilder.append(" must specify explicit component");
                            throw new IllegalArgumentException(stringBuilder.toString());
                        } else if (thumbnail.getWidth() == this.mThumbnailWidth && thumbnail.getHeight() == this.mThumbnailHeight) {
                            if (intent.getSelector() != null) {
                                intent2.setSelector(null);
                            }
                            try {
                                if (intent.getSourceBounds() != null) {
                                    intent2.setSourceBounds(null);
                                }
                                if ((intent.getFlags() & DumpState.DUMP_FROZEN) != 0) {
                                    if ((intent.getFlags() & 8192) == 0) {
                                        intent2.addFlags(8192);
                                    }
                                }
                                ActivityInfo ainfo = AppGlobals.getPackageManager().getActivityInfo(comp, 1024, UserHandle.getUserId(callingUid));
                                if (ainfo != null) {
                                    if (ainfo.applicationInfo.uid != callingUid) {
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("Can't add task for another application: target uid=");
                                        stringBuilder.append(ainfo.applicationInfo.uid);
                                        stringBuilder.append(", calling uid=");
                                        stringBuilder.append(callingUid);
                                        throw new SecurityException(stringBuilder.toString());
                                    }
                                }
                                ConfigurationContainer stack = r.getStack();
                                TaskRecord task = stack.createTaskRecord(this.mStackSupervisor.getNextTaskIdForUserLocked(r.userId), ainfo, intent2, null, null, false);
                                if (this.mRecentTasks.addToBottom(task)) {
                                    task.lastTaskDescription.copyFrom(description);
                                    int i = task.taskId;
                                    resetPriorityAfterLockedSection();
                                    Binder.restoreCallingIdentity(callingIdent);
                                    return i;
                                }
                                stack.removeTask(task, "addAppTask", 0);
                                resetPriorityAfterLockedSection();
                                Binder.restoreCallingIdentity(callingIdent);
                                return -1;
                            } catch (Throwable th2) {
                                th = th2;
                                iBinder = activityToken;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } else {
                            taskDescription = description;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Bad thumbnail size: got ");
                            stringBuilder.append(thumbnail.getWidth());
                            stringBuilder.append("x");
                            stringBuilder.append(thumbnail.getHeight());
                            stringBuilder.append(", require ");
                            stringBuilder.append(this.mThumbnailWidth);
                            stringBuilder.append("x");
                            stringBuilder.append(this.mThumbnailHeight);
                            throw new IllegalArgumentException(stringBuilder.toString());
                        }
                    }
                    taskDescription = description;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Activity does not exist; token=");
                    stringBuilder.append(activityToken);
                    throw new IllegalArgumentException(stringBuilder.toString());
                } catch (Throwable th3) {
                    th = th3;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } catch (Throwable th4) {
            th = th4;
            iBinder = activityToken;
            taskDescription = description;
            Binder.restoreCallingIdentity(callingIdent);
            throw th;
        }
    }

    public Point getAppTaskThumbnailSize() {
        Point point;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                point = new Point(this.mThumbnailWidth, this.mThumbnailHeight);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return point;
    }

    public void setTaskDescription(IBinder token, TaskDescription td) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_SETTASKDESCRIPTION);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    r.setTaskDescription(td);
                    TaskRecord task = r.getTask();
                    task.updateTaskDescription();
                    this.mTaskChangeNotificationController.notifyTaskDescriptionChanged(task.taskId, td);
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setTaskResizeable(int taskId, int resizeableMode) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                if (task == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("setTaskResizeable: taskId=");
                    stringBuilder.append(taskId);
                    stringBuilder.append(" not found");
                    Slog.w(str, stringBuilder.toString());
                } else {
                    task.setResizeMode(resizeableMode);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    protected boolean isTaskNotResizeableEx(TaskRecord task, Rect bounds) {
        return false;
    }

    public void resizeTask(int taskId, Rect bounds, int resizeMode) {
        int i = taskId;
        Rect rect = bounds;
        int i2 = resizeMode;
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeTask()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(i);
                if (task == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("resizeTask: taskId=");
                    stringBuilder.append(i);
                    stringBuilder.append(" not found");
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                ActivityStack stack = task.getStack();
                if (task.getWindowConfiguration().canResizeTask()) {
                    boolean z = true;
                    if (!HwPCUtils.isExtDynamicStack(task.getStackId())) {
                        if (rect == null) {
                            if (stack.getWindowingMode() == 5) {
                                stack = stack.getDisplay().getOrCreateStack(1, stack.getActivityType(), true);
                            }
                        }
                        if (!(rect == null || stack.getWindowingMode() == 5)) {
                            stack = stack.getDisplay().getOrCreateStack(5, stack.getActivityType(), true);
                        }
                    } else if (isTaskNotResizeableEx(task, rect)) {
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(ident);
                        return;
                    }
                    ActivityStack stack2 = stack;
                    if ((i2 & 1) == 0) {
                        z = false;
                    }
                    boolean preserveWindow = z;
                    if (stack2 != task.getStack()) {
                        task.reparent(stack2, true, 1, true, true, "resizeTask");
                        preserveWindow = false;
                    }
                    task.resize(rect, i2, preserveWindow, false);
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("resizeTask not allowed on task=");
                stringBuilder2.append(task);
                throw new IllegalArgumentException(stringBuilder2.toString());
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    /* JADX WARNING: Missing block: B:22:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:23:0x0065, code:
            android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Missing block: B:24:0x0069, code:
            return r2;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public Rect getTaskBounds(int taskId) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getTaskBounds()");
        long ident = Binder.clearCallingIdentity();
        Rect rect = new Rect();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                if (task == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("getTaskBounds: taskId=");
                    stringBuilder.append(taskId);
                    stringBuilder.append(" not found");
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return rect;
                } else if (task.getStack() != null) {
                    task.getWindowContainerBounds(rect);
                } else if (!task.matchParentBounds()) {
                    rect.set(task.getBounds());
                } else if (task.mLastNonFullscreenBounds != null) {
                    rect.set(task.mLastNonFullscreenBounds);
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void cancelTaskWindowTransition(int taskId) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "cancelTaskWindowTransition()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 0);
                if (task == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("cancelTaskWindowTransition: taskId=");
                    stringBuilder.append(taskId);
                    stringBuilder.append(" not found");
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                task.cancelWindowTransition();
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(ident);
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public TaskSnapshot getTaskSnapshot(int taskId, boolean reducedResolution) {
        enforceCallerIsRecentsOrHasPermission("android.permission.READ_FRAME_BUFFER", "getTaskSnapshot()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                if (task == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("getTaskSnapshot: taskId=");
                    stringBuilder.append(taskId);
                    stringBuilder.append(" not found");
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return null;
                }
                resetPriorityAfterLockedSection();
                TaskSnapshot snapshot = task.getSnapshot(reducedResolution);
                Binder.restoreCallingIdentity(ident);
                return snapshot;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public Bitmap getTaskDescriptionIcon(String filePath, int userId) {
        userId = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "getTaskDescriptionIcon", null);
        if (new File(TaskPersister.getUserImagesDir(userId), new File(filePath).getName()).getPath().equals(filePath) && filePath.contains("_activity_icon_")) {
            return this.mRecentTasks.getTaskDescriptionIcon(filePath);
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Bad file path: ");
        stringBuilder.append(filePath);
        stringBuilder.append(" passed for userId ");
        stringBuilder.append(userId);
        throw new IllegalArgumentException(stringBuilder.toString());
    }

    public void startInPlaceAnimationOnFrontMostApplication(Bundle opts) throws RemoteException {
        ActivityOptions activityOptions;
        SafeActivityOptions safeOptions = SafeActivityOptions.fromBundle(opts);
        if (safeOptions != null) {
            activityOptions = safeOptions.getOptions(this.mStackSupervisor);
        } else {
            activityOptions = null;
        }
        if (activityOptions == null || activityOptions.getAnimationType() != 10 || activityOptions.getCustomInPlaceResId() == 0) {
            throw new IllegalArgumentException("Expected in-place ActivityOption with valid animation");
        }
        this.mWindowManager.prepareAppTransition(17, false);
        this.mWindowManager.overridePendingAppTransitionInPlace(activityOptions.getPackageName(), activityOptions.getCustomInPlaceResId());
        this.mWindowManager.executeAppTransition();
    }

    public void removeStack(int stackId) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "removeStack()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                if (stack == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("removeStack: No stack with id=");
                    stringBuilder.append(stackId);
                    Slog.w(str, stringBuilder.toString());
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                } else if (stack.isActivityTypeStandardOrUndefined()) {
                    this.mStackSupervisor.removeStack(stack);
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                } else {
                    throw new IllegalArgumentException("Removing non-standard stack is not allowed.");
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void removeStacksInWindowingModes(int[] windowingModes) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "removeStacksInWindowingModes()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                this.mStackSupervisor.removeStacksInWindowingModes(windowingModes);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void removeStacksWithActivityTypes(int[] activityTypes) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "removeStacksWithActivityTypes()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                this.mStackSupervisor.removeStacksWithActivityTypes(activityTypes);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void moveStackToDisplay(int stackId, int displayId) {
        enforceCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW", "moveStackToDisplay()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                if (ActivityManagerDebugConfig.DEBUG_STACK) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("moveStackToDisplay: moving stackId=");
                    stringBuilder.append(stackId);
                    stringBuilder.append(" to displayId=");
                    stringBuilder.append(displayId);
                    Slog.d(str, stringBuilder.toString());
                }
                this.mStackSupervisor.moveStackToDisplayLocked(stackId, displayId, true);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean removeTask(int taskId) {
        boolean removeTaskByIdLocked;
        enforceCallerIsRecentsOrHasPermission("android.permission.REMOVE_TASKS", "removeTask()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                if (HwPCUtils.isPcCastModeInServer()) {
                    TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                    if (task != null) {
                        this.mHwAMSEx.updateUsageStatsForPCMode(task.getTopActivity(), false, this.mUsageStatsService);
                    }
                }
                removeTaskByIdLocked = this.mStackSupervisor.removeTaskByIdLocked(taskId, true, true, "remove-task");
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        return removeTaskByIdLocked;
    }

    public void moveTaskToFront(int taskId, int flags, Bundle bOptions) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_MOVETASKTOFRONT);
        enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskToFront()");
        if (ActivityManagerDebugConfig.DEBUG_STACK) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("moveTaskToFront: moving taskId=");
            stringBuilder.append(taskId);
            Slog.d(str, stringBuilder.toString());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                moveTaskToFrontLocked(taskId, flags, SafeActivityOptions.fromBundle(bOptions), false);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void moveTaskToFrontLocked(int taskId, int flags, SafeActivityOptions options, boolean fromRecents) {
        if (checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), -1, -1, "Task to front")) {
            long origId = Binder.clearCallingIdentity();
            try {
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                if (task == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Could not find task for id: ");
                    stringBuilder.append(taskId);
                    Slog.d(str, stringBuilder.toString());
                } else if (this.mLockTaskController.isLockTaskModeViolation(task)) {
                    Slog.e(TAG, "moveTaskToFront: Attempt to violate Lock Task Mode");
                    Binder.restoreCallingIdentity(origId);
                } else {
                    ActivityOptions realOptions;
                    if (options != null) {
                        realOptions = options.getOptions(this.mStackSupervisor);
                    } else {
                        realOptions = null;
                    }
                    this.mStackSupervisor.findTaskToMoveToFront(task, flags, realOptions, "moveTaskToFront", false);
                    ActivityRecord topActivity = task.getTopActivity();
                    if (topActivity != null) {
                        topActivity.showStartingWindow(null, false, true, fromRecents);
                    }
                    Binder.restoreCallingIdentity(origId);
                    SafeActivityOptions.abort(options);
                }
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
        } else {
            SafeActivityOptions.abort(options);
        }
    }

    public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) {
        enforceNotIsolatedCaller("moveActivityTaskToBack");
        if (ActivityManagerDebugConfig.HWFLOW) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("moveActivityTaskToBack pid =");
            stringBuilder.append(Binder.getCallingPid());
            Flog.i(101, stringBuilder.toString());
        }
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                int taskId = ActivityRecord.getTaskForActivityLocked(token, nonRoot ^ 1);
                if (this.mStackSupervisor.anyTaskForIdLocked(taskId) != null) {
                    boolean moveTaskToBackLocked = ActivityRecord.getStackLocked(token).moveTaskToBackLocked(taskId);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return moveTaskToBackLocked;
                }
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void moveTaskBackwards(int task) {
        enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskBackwards()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), -1, -1, "Task backwards")) {
                    long origId = Binder.clearCallingIdentity();
                    moveTaskBackwardsLocked(task);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private final void moveTaskBackwardsLocked(int task) {
        Slog.e(TAG, "moveTaskBackwards not yet implemented!");
    }

    /* JADX WARNING: Missing block: B:13:0x0025, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:14:0x0028, code:
            return r1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int createStackOnDisplay(int displayId) throws RemoteException {
        int i = "createStackOnDisplay()";
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", i);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityDisplay display = this.mStackSupervisor.getActivityDisplayOrCreateLocked(displayId);
                i = -1;
                if (display == null) {
                } else {
                    ActivityStack stack = display.createStack(4, 1, true);
                    if (stack != null) {
                        i = stack.mStackId;
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return i;
    }

    public int getActivityDisplayId(IBinder activityToken) throws RemoteException {
        int i;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack stack = ActivityRecord.getStackLocked(activityToken);
                if (stack == null || stack.mDisplayId == -1) {
                    i = 0;
                    resetPriorityAfterLockedSection();
                    return 0;
                }
                i = stack.mDisplayId;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return i;
    }

    public void exitFreeformMode(IBinder token) throws RemoteException {
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r != null) {
                    ActivityStack stack = r.getStack();
                    if (stack == null || !(stack.inFreeformWindowingMode() || HwPCUtils.isExtDynamicStack(stack.mStackId))) {
                        throw new IllegalStateException("exitFreeformMode: You can only go fullscreen from freeform.");
                    } else if (HwPCUtils.isPcCastModeInServer() && HwPCUtils.isPcDynamicStack(stack.mStackId)) {
                        HwPCUtils.log(TAG, "the task want exitFreeformMode on pc statck  so return");
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                        return;
                    } else {
                        stack.setWindowingMode(1);
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                }
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("exitFreeformMode: No activity record matching token=");
                stringBuilder.append(token);
                throw new IllegalArgumentException(stringBuilder.toString());
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setTaskWindowingMode(int taskId, int windowingMode, boolean toTop) {
        if (windowingMode == 3) {
            setTaskWindowingModeSplitScreenPrimary(taskId, 0, toTop, true, null, true);
            return;
        }
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setTaskWindowingMode()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("moveTaskToStack: moving task=");
                stringBuilder.append(taskId);
                Flog.i(101, stringBuilder.toString());
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                String str;
                StringBuilder stringBuilder2;
                if (task == null) {
                    str = TAG;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("setTaskWindowingMode: No task for id=");
                    stringBuilder2.append(taskId);
                    Slog.w(str, stringBuilder2.toString());
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (ActivityManagerDebugConfig.DEBUG_STACK) {
                    str = TAG;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("setTaskWindowingMode: moving task=");
                    stringBuilder2.append(taskId);
                    stringBuilder2.append(" to windowingMode=");
                    stringBuilder2.append(windowingMode);
                    stringBuilder2.append(" toTop=");
                    stringBuilder2.append(toTop);
                    Slog.d(str, stringBuilder2.toString());
                }
                if (task.isActivityTypeStandardOrUndefined()) {
                    ActivityStack stack = task.getStack();
                    if (toTop) {
                        stack.moveToFront("setTaskWindowingMode", task);
                    }
                    stack.setWindowingMode(windowingMode);
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("setTaskWindowingMode: Attempt to move non-standard task ");
                stringBuilder2.append(taskId);
                stringBuilder2.append(" to windowing mode=");
                stringBuilder2.append(windowingMode);
                throw new IllegalArgumentException(stringBuilder2.toString());
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean setTaskWindowingModeSplitScreenPrimary(int taskId, int createMode, boolean toTop, boolean animate, Rect initialBounds, boolean showRecents) {
        Throwable th;
        int i = taskId;
        int i2 = createMode;
        boolean z = toTop;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setTaskWindowingModeSplitScreenPrimary()");
        synchronized (this) {
            Rect rect;
            try {
                boostPriorityForLockedSection();
                long ident = Binder.clearCallingIdentity();
                try {
                    TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(i);
                    boolean z2 = false;
                    String str;
                    StringBuilder stringBuilder;
                    if (task == null) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("setTaskWindowingModeSplitScreenPrimary: No task for id=");
                        stringBuilder.append(i);
                        Slog.w(str, stringBuilder.toString());
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_STACK) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("setTaskWindowingModeSplitScreenPrimary: moving task=");
                        stringBuilder.append(i);
                        stringBuilder.append(" to createMode=");
                        stringBuilder.append(i2);
                        stringBuilder.append(" toTop=");
                        stringBuilder.append(z);
                        Slog.d(str, stringBuilder.toString());
                    }
                    if (task.isActivityTypeStandardOrUndefined()) {
                        try {
                            this.mWindowManager.setDockedStackCreateState(i2, initialBounds);
                            int windowingMode = task.getWindowingMode();
                            ActivityStack stack = task.getStack();
                            if (z) {
                                stack.moveToFront("setTaskWindowingModeSplitScreenPrimary", task);
                            }
                            stack.setWindowingMode(3, animate, showRecents, false, false);
                            if (windowingMode != task.getWindowingMode()) {
                                z2 = true;
                            }
                            Binder.restoreCallingIdentity(ident);
                            resetPriorityAfterLockedSection();
                            return z2;
                        } catch (Throwable th2) {
                            th = th2;
                            Binder.restoreCallingIdentity(ident);
                            throw th;
                        }
                    }
                    rect = initialBounds;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("setTaskWindowingMode: Attempt to move non-standard task ");
                    stringBuilder2.append(i);
                    stringBuilder2.append(" to split-screen windowing mode");
                    throw new IllegalArgumentException(stringBuilder2.toString());
                } catch (Throwable th3) {
                    th = th3;
                    rect = initialBounds;
                    Binder.restoreCallingIdentity(ident);
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void moveTaskToStack(int taskId, int stackId, boolean toTop) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "moveTaskToStack()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                String str;
                StringBuilder stringBuilder;
                if (task == null) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("moveTaskToStack: No task for id=");
                    stringBuilder.append(taskId);
                    Slog.w(str, stringBuilder.toString());
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (ActivityManagerDebugConfig.DEBUG_STACK) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("moveTaskToStack: moving task=");
                    stringBuilder.append(taskId);
                    stringBuilder.append(" to stackId=");
                    stringBuilder.append(stackId);
                    stringBuilder.append(" toTop=");
                    stringBuilder.append(toTop);
                    Slog.d(str, stringBuilder.toString());
                }
                ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                if (stack == null) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("moveTaskToStack: No stack for stackId=");
                    stringBuilder.append(stackId);
                    throw new IllegalStateException(stringBuilder.toString());
                } else if (stack.isActivityTypeStandardOrUndefined()) {
                    if (stack.inSplitScreenPrimaryWindowingMode()) {
                        this.mWindowManager.setDockedStackCreateState(0, null);
                    }
                    task.reparent(stack, toTop, 1, true, false, "moveTaskToStack");
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                } else {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("moveTaskToStack: Attempt to move task ");
                    stringBuilder.append(taskId);
                    stringBuilder.append(" to stack ");
                    stringBuilder.append(stackId);
                    throw new IllegalArgumentException(stringBuilder.toString());
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void dismissSplitScreenMode(boolean toTop) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "dismissSplitScreenMode()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityStack stack = this.mStackSupervisor.getDefaultDisplay().getSplitScreenPrimaryStack();
                if (stack == null) {
                    Slog.w(TAG, "dismissSplitScreenMode: primary split-screen stack not found.");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                if (toTop) {
                    stack.moveToFront("dismissSplitScreenMode");
                } else if (this.mStackSupervisor.isFocusedStack(stack)) {
                    ActivityStack otherStack = stack.getDisplay().getTopStackInWindowingMode(4);
                    if (otherStack != null) {
                        otherStack.moveToFront("dismissSplitScreenMode_other");
                    }
                }
                stack.setWindowingMode(1);
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(ident);
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    /* JADX WARNING: Missing block: B:18:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:19:0x0043, code:
            android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Missing block: B:20:0x0047, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void dismissPip(boolean animate, int animationDuration) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "dismissPip()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                PinnedActivityStack stack = this.mStackSupervisor.getDefaultDisplay().getPinnedStack();
                if (stack == null) {
                    Slog.w(TAG, "dismissPip: pinned stack not found.");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                } else if (stack.getWindowingMode() != 2) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Stack: ");
                    stringBuilder.append(stack);
                    stringBuilder.append(" doesn't support animated resize.");
                    throw new IllegalArgumentException(stringBuilder.toString());
                } else if (animate) {
                    stack.animateResizePinnedStack(null, null, animationDuration, false);
                } else {
                    this.mStackSupervisor.moveTasksToFullscreenStackLocked(stack, true);
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds) {
        boolean moveTopStackActivityToPinnedStackLocked;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "moveTopActivityToPinnedStack()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                if (this.mSupportsPictureInPicture) {
                    ident = Binder.clearCallingIdentity();
                    moveTopStackActivityToPinnedStackLocked = this.mStackSupervisor.moveTopStackActivityToPinnedStackLocked(stackId, bounds);
                    Binder.restoreCallingIdentity(ident);
                } else {
                    throw new IllegalStateException("moveTopActivityToPinnedStack:Device doesn't support picture-in-picture mode");
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        return moveTopStackActivityToPinnedStackLocked;
    }

    /* JADX WARNING: Missing block: B:39:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:40:0x00ee, code:
            android.os.Binder.restoreCallingIdentity(r12);
     */
    /* JADX WARNING: Missing block: B:41:0x00f2, code:
            return;
     */
    /* JADX WARNING: Missing block: B:49:0x00fb, code:
            r0 = th;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void resizeStack(int stackId, Rect destBounds, boolean allowResizeInDockedMode, boolean preserveWindows, boolean animate, int animationDuration) {
        Throwable th;
        int i = stackId;
        Rect rect = destBounds;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeStack()");
        long ident = Binder.clearCallingIdentity();
        int i2;
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    String str;
                    StringBuilder stringBuilder;
                    if (animate) {
                        PinnedActivityStack stack = (PinnedActivityStack) this.mStackSupervisor.getStack(i);
                        if (stack == null) {
                            str = TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("resizeStack: stackId ");
                            stringBuilder.append(i);
                            stringBuilder.append(" not found.");
                            Slog.w(str, stringBuilder.toString());
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(ident);
                            return;
                        } else if (stack.getWindowingMode() != 2) {
                            i2 = animationDuration;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Stack: ");
                            stringBuilder.append(i);
                            stringBuilder.append(" doesn't support animated resize.");
                            throw new IllegalArgumentException(stringBuilder.toString());
                        } else if (HwPCUtils.enabledInPad() && HwPCUtils.isPcCastModeInServer()) {
                            HwPCUtils.log(TAG, "ignore resizeStack PINNED_STACK_ID in pad pc mode");
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(ident);
                            return;
                        } else {
                            try {
                                stack.animateResizePinnedStack(null, rect, animationDuration, false);
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    }
                    i2 = animationDuration;
                    ActivityStack stack2 = this.mStackSupervisor.getStack(i);
                    if (stack2 == null) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("resizeStack: stackId ");
                        stringBuilder.append(i);
                        stringBuilder.append(" not found.");
                        Slog.w(str, stringBuilder.toString());
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(ident);
                        return;
                    }
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("resizeStack, stackId: ");
                    stringBuilder.append(i);
                    stringBuilder.append(", destBounds = ");
                    stringBuilder.append(rect);
                    Flog.i(101, stringBuilder.toString());
                    this.mStackSupervisor.resizeStackLocked(stack2, rect, null, null, preserveWindows, allowResizeInDockedMode, false);
                } catch (Throwable th3) {
                    th = th3;
                    i2 = animationDuration;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } catch (Throwable th4) {
            th = th4;
            i2 = animationDuration;
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds, Rect tempDockedTaskInsetBounds, Rect tempOtherTaskBounds, Rect tempOtherTaskInsetBounds) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeDockedStack()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mStackSupervisor.resizeDockedStackLocked(dockedBounds, tempDockedTaskBounds, tempDockedTaskInsetBounds, tempOtherTaskBounds, tempOtherTaskInsetBounds, true);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void setSplitScreenResizing(boolean resizing) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setSplitScreenResizing()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mStackSupervisor.setSplitScreenResizing(resizing);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizePinnedStack()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mStackSupervisor.resizePinnedStackLocked(pinnedBounds, tempPinnedTaskBounds);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void positionTaskInStack(int taskId, int stackId, int position) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "positionTaskInStack()");
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                if (ActivityManagerDebugConfig.DEBUG_STACK) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("positionTaskInStack: positioning task=");
                    stringBuilder.append(taskId);
                    stringBuilder.append(" in stackId=");
                    stringBuilder.append(stackId);
                    stringBuilder.append(" at position=");
                    stringBuilder.append(position);
                    Slog.d(str, stringBuilder.toString());
                }
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                StringBuilder stringBuilder2;
                if (task != null) {
                    ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                    if (stack == null) {
                        stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("positionTaskInStack: no stack for id=");
                        stringBuilder2.append(stackId);
                        throw new IllegalArgumentException(stringBuilder2.toString());
                    } else if (stack.isActivityTypeStandardOrUndefined()) {
                        if (task.getStack() == stack) {
                            stack.positionChildAt(task, position);
                        } else {
                            task.reparent(stack, position, 2, false, false, "positionTaskInStack");
                        }
                        Binder.restoreCallingIdentity(ident);
                    } else {
                        stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("positionTaskInStack: Attempt to change the position of task ");
                        stringBuilder2.append(taskId);
                        stringBuilder2.append(" in/to non-standard stack");
                        throw new IllegalArgumentException(stringBuilder2.toString());
                    }
                }
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("positionTaskInStack: no task for id=");
                stringBuilder2.append(taskId);
                throw new IllegalArgumentException(stringBuilder2.toString());
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public List<StackInfo> getAllStackInfos() {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getAllStackInfos()");
        long ident = Binder.clearCallingIdentity();
        try {
            List allStackInfosLocked;
            synchronized (this) {
                boostPriorityForLockedSection();
                allStackInfosLocked = this.mStackSupervisor.getAllStackInfosLocked();
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
            return allStackInfosLocked;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public StackInfo getStackInfo(int windowingMode, int activityType) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getStackInfo()");
        long ident = Binder.clearCallingIdentity();
        try {
            StackInfo stackInfo;
            synchronized (this) {
                boostPriorityForLockedSection();
                stackInfo = this.mStackSupervisor.getStackInfo(windowingMode, activityType);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
            return stackInfo;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public int getTaskForActivity(IBinder token, boolean onlyRoot) {
        int taskForActivityLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                taskForActivityLocked = ActivityRecord.getTaskForActivityLocked(token, onlyRoot);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return taskForActivityLocked;
    }

    public void updateDeviceOwner(String packageName) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0 || callingUid == 1000) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mDeviceOwnerName = packageName;
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("updateDeviceOwner called from non-system process");
    }

    public void updateLockTaskPackages(int userId, String[] packages) {
        int callingUid = Binder.getCallingUid();
        if (!(callingUid == 0 || callingUid == 1000)) {
            enforceCallingPermission("android.permission.UPDATE_LOCK_TASK_PACKAGES", "updateLockTaskPackages()");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Whitelisting ");
                    stringBuilder.append(userId);
                    stringBuilder.append(":");
                    stringBuilder.append(Arrays.toString(packages));
                    Slog.w(str, stringBuilder.toString());
                }
                this.mLockTaskController.updateLockTaskPackages(userId, packages);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void updateLockTaskFeatures(int userId, int flags) {
        int callingUid = Binder.getCallingUid();
        if (!(callingUid == 0 || callingUid == 1000)) {
            enforceCallingPermission("android.permission.UPDATE_LOCK_TASK_PACKAGES", "updateLockTaskFeatures()");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Allowing features ");
                    stringBuilder.append(userId);
                    stringBuilder.append(":0x");
                    stringBuilder.append(Integer.toHexString(flags));
                    Slog.w(str, stringBuilder.toString());
                }
                this.mLockTaskController.updateLockTaskFeatures(userId, flags);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void startLockTaskModeLocked(TaskRecord task, boolean isSystemCaller) {
        if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("startLockTaskModeLocked: ");
            stringBuilder.append(task);
            Slog.w(str, stringBuilder.toString());
        }
        if (task != null && task.mLockTaskAuth != 0) {
            ActivityStack stack = this.mStackSupervisor.getFocusedStack();
            if (stack == null || task != stack.topTask()) {
                throw new IllegalArgumentException("Invalid task, not in foreground");
            }
            int callingUid = Binder.getCallingUid();
            long ident = Binder.clearCallingIdentity();
            try {
                this.mStackSupervisor.removeStacksInWindowingModes(2);
                this.mLockTaskController.startLockTaskMode(task, isSystemCaller, callingUid);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
    }

    public void startLockTaskModeByToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r == null) {
                } else {
                    startLockTaskModeLocked(r.getTask(), false);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void startSystemLockTaskMode(int taskId) throws RemoteException {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "startSystemLockTaskMode");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                task.getStack().moveToFront("startSystemLockTaskMode");
                startLockTaskModeLocked(task, true);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void stopLockTaskModeByToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r == null) {
                } else {
                    stopLockTaskModeInternal(r.getTask(), false);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void stopSystemLockTaskMode() throws RemoteException {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "stopSystemLockTaskMode");
        stopLockTaskModeInternal(null, true);
    }

    private void stopLockTaskModeInternal(TaskRecord task, boolean isSystemCaller) {
        int callingUid = Binder.getCallingUid();
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mLockTaskController.stopLockTaskMode(task, isSystemCaller, callingUid);
            }
            resetPriorityAfterLockedSection();
            TelecomManager tm = (TelecomManager) this.mContext.getSystemService("telecom");
            if (tm != null) {
                tm.showInCallScreen(false);
            }
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public boolean isInLockTaskMode() {
        return getLockTaskModeState() != 0;
    }

    public int getLockTaskModeState() {
        int lockTaskModeState;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                lockTaskModeState = this.mLockTaskController.getLockTaskModeState();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return lockTaskModeState;
    }

    public void showLockTaskEscapeMessage(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityRecord.forTokenLocked(token) == null) {
                } else {
                    this.mLockTaskController.showLockTaskToast();
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setDisablePreviewScreenshots(IBinder token, boolean disable) throws RemoteException {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("setDisablePreviewScreenshots: Unable to find activity for token=");
                    stringBuilder.append(token);
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setDisablePreviewScreenshots(disable);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private final List<ProviderInfo> generateApplicationProvidersLocked(ProcessRecord app) {
        List<ProviderInfo> providers;
        String str;
        StringBuilder stringBuilder;
        ProcessRecord processRecord = app;
        List<ProviderInfo> providers2 = null;
        try {
            providers = AppGlobals.getPackageManager().queryContentProviders(processRecord.processName, processRecord.uid, 268438528, null).getList();
        } catch (RemoteException e) {
            providers = providers2;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            str = TAG_MU;
            stringBuilder = new StringBuilder();
            stringBuilder.append("generateApplicationProvidersLocked, app.info.uid = ");
            stringBuilder.append(processRecord.uid);
            Slog.v(str, stringBuilder.toString());
        }
        int userId = processRecord.userId;
        if (providers != null) {
            int N = providers.size();
            processRecord.pubProviders.ensureCapacity(processRecord.pubProviders.size() + N);
            int i = 0;
            int N2 = N;
            while (true) {
                int i2 = i;
                if (i2 >= N2) {
                    break;
                }
                ProviderInfo cpi = (ProviderInfo) providers.get(i2);
                boolean singleton = isSingleton(cpi.processName, cpi.applicationInfo, cpi.name, cpi.flags);
                if (!singleton || UserHandle.getUserId(processRecord.uid) == 0) {
                    ComponentName comp = new ComponentName(cpi.packageName, cpi.name);
                    ContentProviderRecord cpr = this.mProviderMap.getProviderByClass(comp, userId);
                    if (cpr == null) {
                        cpr = new ContentProviderRecord(this, cpi, processRecord.info, comp, singleton);
                        this.mProviderMap.putProviderByClass(comp, cpr);
                    }
                    if (ActivityManagerDebugConfig.DEBUG_MU) {
                        str = TAG_MU;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("generateApplicationProvidersLocked, cpi.uid = ");
                        stringBuilder.append(cpr.uid);
                        Slog.v(str, stringBuilder.toString());
                    }
                    processRecord.pubProviders.put(cpi.name, cpr);
                    if (!(cpi.multiprocess && PackageManagerService.PLATFORM_PACKAGE_NAME.equals(cpi.packageName))) {
                        processRecord.addPackage(cpi.applicationInfo.packageName, (long) cpi.applicationInfo.versionCode, this.mProcessStats);
                    }
                    notifyPackageUse(cpi.applicationInfo.packageName, 4);
                } else {
                    providers.remove(i2);
                    N2--;
                    i2--;
                }
                i = i2 + 1;
            }
        }
        return providers;
    }

    public String checkContentProviderAccess(String authority, int userId) {
        if (userId == -1) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", TAG);
            userId = UserHandle.getCallingUserId();
        }
        ProviderInfo cpi = null;
        try {
            cpi = AppGlobals.getPackageManager().resolveContentProvider(authority, 790016, userId);
        } catch (RemoteException e) {
        }
        if (cpi == null) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Failed to find provider ");
            stringBuilder.append(authority);
            stringBuilder.append(" for user ");
            stringBuilder.append(userId);
            stringBuilder.append("; expected to find a valid ContentProvider for this authority");
            return stringBuilder.toString();
        }
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = (ProcessRecord) this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        if (r == null) {
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Failed to find PID ");
            stringBuilder2.append(Binder.getCallingPid());
            return stringBuilder2.toString();
        }
        String checkContentProviderPermissionLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                checkContentProviderPermissionLocked = checkContentProviderPermissionLocked(cpi, r, userId, true);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return checkContentProviderPermissionLocked;
    }

    private final String checkContentProviderPermissionLocked(ProviderInfo cpi, ProcessRecord r, int userId, boolean checkUser) {
        int i;
        int userId2;
        ProviderInfo providerInfo = cpi;
        ProcessRecord processRecord = r;
        boolean z = checkUser;
        int callingPid = processRecord != null ? processRecord.pid : Binder.getCallingPid();
        int callingUid = processRecord != null ? processRecord.uid : Binder.getCallingUid();
        boolean checkedGrants = false;
        if (z) {
            i = userId;
            int tmpTargetUserId = this.mUserController.unsafeConvertIncomingUser(i);
            if (tmpTargetUserId != UserHandle.getUserId(callingUid)) {
                if (checkAuthorityGrants(callingUid, providerInfo, tmpTargetUserId, z)) {
                    return null;
                }
                checkedGrants = true;
            }
            if (!(checkedGrants && providerInfo.authority != null && providerInfo.authority.contains("com.huawei.android.launcher.settings"))) {
                userId2 = this.mUserController;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("checkContentProviderPermissionLocked ");
                stringBuilder.append(providerInfo.authority);
                i = userId2.handleIncomingUser(callingPid, callingUid, i, false, 0, stringBuilder.toString(), null);
            }
            if (i != tmpTargetUserId) {
                checkedGrants = false;
            }
        } else {
            i = userId;
        }
        boolean checkedGrants2 = checkedGrants;
        userId2 = i;
        int callingUid2 = callingUid;
        int callingPid2 = callingPid;
        if (checkComponentPermission(providerInfo.readPermission, callingPid, callingUid, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
            return null;
        }
        if (checkComponentPermission(providerInfo.writePermission, callingPid2, callingUid2, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
            return null;
        }
        PathPermission[] pps = providerInfo.pathPermissions;
        if (pps != null) {
            int i2 = pps.length;
            while (i2 > 0) {
                PathPermission[] pps2;
                PathPermission pp;
                int i3 = i2 - 1;
                PathPermission pp2 = pps[i3];
                String pprperm = pp2.getReadPermission();
                if (pprperm != null) {
                    pps2 = pps;
                    pp = pp2;
                    if (checkComponentPermission(pprperm, callingPid2, callingUid2, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
                        return null;
                    }
                }
                pps2 = pps;
                pp = pp2;
                String ppwperm = pp.getWritePermission();
                if (ppwperm != null) {
                    if (checkComponentPermission(ppwperm, callingPid2, callingUid2, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
                        return null;
                    }
                }
                i2 = i3;
                pps = pps2;
            }
        }
        if (!checkedGrants2 && checkAuthorityGrants(callingUid2, providerInfo, userId2, z)) {
            return null;
        }
        String suffix;
        if (!providerInfo.exported) {
            suffix = new StringBuilder();
            suffix.append(" that is not exported from UID ");
            suffix.append(providerInfo.applicationInfo.uid);
            suffix = suffix.toString();
        } else if ("android.permission.MANAGE_DOCUMENTS".equals(providerInfo.readPermission)) {
            suffix = " requires that you obtain access using ACTION_OPEN_DOCUMENT or related APIs";
        } else {
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append(" requires ");
            stringBuilder2.append(providerInfo.readPermission);
            stringBuilder2.append(" or ");
            stringBuilder2.append(providerInfo.writePermission);
            suffix = stringBuilder2.toString();
        }
        String msg = new StringBuilder();
        msg.append("Permission Denial: opening provider ");
        msg.append(providerInfo.name);
        msg.append(" from ");
        msg.append(processRecord != null ? processRecord : "(null)");
        msg.append(" (pid=");
        msg.append(callingPid2);
        msg.append(", uid=");
        msg.append(callingUid2);
        msg.append(")");
        msg.append(suffix);
        msg = msg.toString();
        Slog.w(TAG, msg);
        return msg;
    }

    boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser) {
        ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.get(callingUid);
        if (perms != null) {
            for (int i = perms.size() - 1; i >= 0; i--) {
                GrantUri grantUri = (GrantUri) perms.keyAt(i);
                if ((grantUri.sourceUserId == userId || !checkUser) && matchesProvider(grantUri.uri, cpi)) {
                    return true;
                }
            }
        }
        return false;
    }

    boolean matchesProvider(Uri uri, ProviderInfo cpi) {
        String uriAuth = uri.getAuthority();
        String cpiAuth = cpi.authority;
        if (cpiAuth.indexOf(59) == -1) {
            return cpiAuth.equals(uriAuth);
        }
        for (String equals : cpiAuth.split(";")) {
            if (equals.equals(uriAuth)) {
                return true;
            }
        }
        return false;
    }

    ContentProviderConnection incProviderCountLocked(ProcessRecord r, ContentProviderRecord cpr, IBinder externalProcessToken, boolean stable) {
        if (r != null) {
            for (int i = 0; i < r.conProviders.size(); i++) {
                ContentProviderConnection conn = (ContentProviderConnection) r.conProviders.get(i);
                if (conn.provider == cpr) {
                    if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Adding provider requested by ");
                        stringBuilder.append(r.processName);
                        stringBuilder.append(" from process ");
                        stringBuilder.append(cpr.info.processName);
                        stringBuilder.append(": ");
                        stringBuilder.append(cpr.name.flattenToShortString());
                        stringBuilder.append(" scnt=");
                        stringBuilder.append(conn.stableCount);
                        stringBuilder.append(" uscnt=");
                        stringBuilder.append(conn.unstableCount);
                        Slog.v(str, stringBuilder.toString());
                    }
                    if (stable) {
                        conn.stableCount++;
                        conn.numStableIncs++;
                    } else {
                        conn.unstableCount++;
                        conn.numUnstableIncs++;
                    }
                    return conn;
                }
            }
            ContentProviderConnection conn2 = new ContentProviderConnection(cpr, r);
            if (stable) {
                conn2.stableCount = 1;
                conn2.numStableIncs = 1;
            } else {
                conn2.unstableCount = 1;
                conn2.numUnstableIncs = 1;
            }
            cpr.connections.add(conn2);
            r.conProviders.add(conn2);
            startAssociationLocked(r.uid, r.processName, r.curProcState, cpr.uid, cpr.name, cpr.info.processName);
            this.mHwAMSEx.reportServiceRelationIAware(2, cpr, r);
            return conn2;
        }
        cpr.addExternalProcessHandleLocked(externalProcessToken);
        return null;
    }

    boolean decProviderCountLocked(ContentProviderConnection conn, ContentProviderRecord cpr, IBinder externalProcessToken, boolean stable) {
        if (conn != null) {
            cpr = conn.provider;
            if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Removing provider requested by ");
                stringBuilder.append(conn.client.processName);
                stringBuilder.append(" from process ");
                stringBuilder.append(cpr.info.processName);
                stringBuilder.append(": ");
                stringBuilder.append(cpr.name.flattenToShortString());
                stringBuilder.append(" scnt=");
                stringBuilder.append(conn.stableCount);
                stringBuilder.append(" uscnt=");
                stringBuilder.append(conn.unstableCount);
                Slog.v(str, stringBuilder.toString());
            }
            if (stable) {
                conn.stableCount--;
            } else {
                conn.unstableCount--;
            }
            if (conn.stableCount != 0 || conn.unstableCount != 0) {
                return false;
            }
            cpr.connections.remove(conn);
            conn.client.conProviders.remove(conn);
            if (conn.client.setProcState < 14 && cpr.proc != null) {
                cpr.proc.lastProviderTime = SystemClock.uptimeMillis();
            }
            stopAssociationLocked(conn.client.uid, conn.client.processName, cpr.uid, cpr.name);
            return true;
        }
        cpr.removeExternalProcessHandleLocked(externalProcessToken);
        return false;
    }

    private void checkTime(long startTime, String where) {
        long now = SystemClock.uptimeMillis();
        if (now - startTime > 50) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Slow operation: ");
            stringBuilder.append(now - startTime);
            stringBuilder.append("ms so far, now at ");
            stringBuilder.append(where);
            Slog.w(str, stringBuilder.toString());
        }
    }

    private boolean isProcessAliveLocked(ProcessRecord proc) {
        boolean z = false;
        String str;
        StringBuilder stringBuilder;
        if (proc.pid <= 0) {
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Process hasn't started yet: ");
                stringBuilder.append(proc);
                Slog.d(str, stringBuilder.toString());
            }
            return false;
        }
        if (proc.procStatFile == null) {
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("/proc/");
            stringBuilder2.append(proc.pid);
            stringBuilder2.append("/stat");
            proc.procStatFile = stringBuilder2.toString();
        }
        this.mProcessStateStatsLongs[0] = 0;
        if (Process.readProcFile(proc.procStatFile, PROCESS_STATE_STATS_FORMAT, null, this.mProcessStateStatsLongs, null)) {
            long state = this.mProcessStateStatsLongs[0];
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                str = TAG;
                StringBuilder stringBuilder3 = new StringBuilder();
                stringBuilder3.append("RETRIEVED STATE FOR ");
                stringBuilder3.append(proc.procStatFile);
                stringBuilder3.append(": ");
                stringBuilder3.append((char) ((int) state));
                Slog.d(str, stringBuilder3.toString());
            }
            if (!(state == 90 || state == 88 || state == 120 || state == 75)) {
                z = true;
            }
            return z;
        }
        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("UNABLE TO RETRIEVE STATE FOR ");
            stringBuilder.append(proc.procStatFile);
            Slog.d(str, stringBuilder.toString());
        }
        return false;
    }

    /*  JADX ERROR: JadxRuntimeException in pass: RegionMakerVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Exception block dominator not found, method:com.android.server.am.ActivityManagerService.getContentProviderImpl(android.app.IApplicationThread, java.lang.String, android.os.IBinder, boolean, int):android.app.ContentProviderHolder, dom blocks: [B:445:0x07ae, B:454:0x07c2]
        	at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.searchTryCatchDominators(ProcessTryCatchRegions.java:89)
        	at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.process(ProcessTryCatchRegions.java:45)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.postProcessRegions(RegionMakerVisitor.java:63)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:58)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    /* JADX WARNING: Removed duplicated region for block: B:216:0x0355  */
    /* JADX WARNING: Removed duplicated region for block: B:215:0x0352  */
    /* JADX WARNING: Removed duplicated region for block: B:221:0x036c A:{Catch:{ all -> 0x0895 }} */
    /* JADX WARNING: Removed duplicated region for block: B:220:0x036a A:{Catch:{ all -> 0x0895 }} */
    /* JADX WARNING: Removed duplicated region for block: B:498:0x0878  */
    /* JADX WARNING: Removed duplicated region for block: B:224:0x0374 A:{Catch:{ all -> 0x0895 }} */
    /* JADX WARNING: Removed duplicated region for block: B:170:0x02ca  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x00ef A:{SYNTHETIC, Splitter: B:54:0x00ef} */
    /* JADX WARNING: Removed duplicated region for block: B:509:0x08b3  */
    /* JADX WARNING: Removed duplicated region for block: B:194:0x030e A:{SYNTHETIC, Splitter: B:194:0x030e} */
    /* JADX WARNING: Removed duplicated region for block: B:43:0x00d4 A:{SYNTHETIC, Splitter: B:43:0x00d4} */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x00ef A:{SYNTHETIC, Splitter: B:54:0x00ef} */
    /* JADX WARNING: Removed duplicated region for block: B:170:0x02ca  */
    /* JADX WARNING: Removed duplicated region for block: B:194:0x030e A:{SYNTHETIC, Splitter: B:194:0x030e} */
    /* JADX WARNING: Removed duplicated region for block: B:509:0x08b3  */
    /* JADX WARNING: Removed duplicated region for block: B:374:0x059a A:{SYNTHETIC, Splitter: B:374:0x059a} */
    /* JADX WARNING: Removed duplicated region for block: B:385:0x05af A:{SYNTHETIC, Splitter: B:385:0x05af} */
    /* JADX WARNING: Removed duplicated region for block: B:570:0x060b A:{SYNTHETIC, EDGE_INSN: B:570:0x060b->B:400:0x060b ?: BREAK  , EDGE_INSN: B:570:0x060b->B:400:0x060b ?: BREAK  } */
    /* JADX WARNING: Removed duplicated region for block: B:396:0x05ff A:{SYNTHETIC, Splitter: B:396:0x05ff} */
    /* JADX WARNING: Removed duplicated region for block: B:469:0x0807  */
    /* JADX WARNING: Removed duplicated region for block: B:401:0x060d A:{SYNTHETIC, Splitter: B:401:0x060d} */
    /* JADX WARNING: Removed duplicated region for block: B:477:0x082e  */
    /* JADX WARNING: Removed duplicated region for block: B:473:0x081a A:{SYNTHETIC, Splitter: B:473:0x081a} */
    /* JADX WARNING: Removed duplicated region for block: B:485:0x0843  */
    /* JADX WARNING: Removed duplicated region for block: B:374:0x059a A:{SYNTHETIC, Splitter: B:374:0x059a} */
    /* JADX WARNING: Removed duplicated region for block: B:385:0x05af A:{SYNTHETIC, Splitter: B:385:0x05af} */
    /* JADX WARNING: Removed duplicated region for block: B:396:0x05ff A:{SYNTHETIC, Splitter: B:396:0x05ff} */
    /* JADX WARNING: Removed duplicated region for block: B:570:0x060b A:{SYNTHETIC, EDGE_INSN: B:570:0x060b->B:400:0x060b ?: BREAK  , EDGE_INSN: B:570:0x060b->B:400:0x060b ?: BREAK  , EDGE_INSN: B:570:0x060b->B:400:0x060b ?: BREAK  } */
    /* JADX WARNING: Removed duplicated region for block: B:401:0x060d A:{SYNTHETIC, Splitter: B:401:0x060d} */
    /* JADX WARNING: Removed duplicated region for block: B:469:0x0807  */
    /* JADX WARNING: Removed duplicated region for block: B:473:0x081a A:{SYNTHETIC, Splitter: B:473:0x081a} */
    /* JADX WARNING: Removed duplicated region for block: B:477:0x082e  */
    /* JADX WARNING: Removed duplicated region for block: B:485:0x0843  */
    /* JADX WARNING: Removed duplicated region for block: B:515:0x08d8 A:{LOOP_START, SYNTHETIC, LOOP:1: B:515:0x08d8->B:571:0x08d8} */
    /* JADX WARNING: Removed duplicated region for block: B:546:0x09e9 A:{Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }} */
    /* JADX WARNING: Removed duplicated region for block: B:545:0x09e5 A:{Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }} */
    /* JADX WARNING: Removed duplicated region for block: B:537:0x09ae A:{Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }, Splitter: B:523:0x0941, ExcHandler: all (th java.lang.Throwable)} */
    protected android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread r44, java.lang.String r45, android.os.IBinder r46, boolean r47, int r48) {
        /*
        r43 = this;
        r11 = r43;
        r12 = r44;
        r13 = r45;
        r0 = r46;
        r14 = r47;
        r1 = r48;
        r7 = 0;
        r2 = 0;
        r3 = 0;
        r4 = 0;
        r5 = 0;
        if (r0 == 0) goto L_0x0021;
    L_0x0013:
        r6 = r0 instanceof android.rms.iaware.AwareAppStartBinder;
        if (r6 == 0) goto L_0x0021;
    L_0x0017:
        r6 = r0;
        r6 = (android.rms.iaware.AwareAppStartBinder) r6;
        r3 = r6.callingPid;
        r4 = r6.callingUid;
        r0 = r6.tokenRaw;
        r5 = 1;
    L_0x0021:
        r15 = r0;
        r8 = r3;
        r9 = r4;
        r16 = r5;
        monitor-enter(r43);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x0a2b }
        r3 = android.os.SystemClock.uptimeMillis();	 Catch:{ all -> 0x0a2b }
        r5 = r3;
        r0 = 0;
        if (r12 == 0) goto L_0x006a;
    L_0x0032:
        r3 = r43.getRecordForAppLocked(r44);	 Catch:{ all -> 0x0065 }
        r0 = r3;	 Catch:{ all -> 0x0065 }
        if (r0 == 0) goto L_0x003a;	 Catch:{ all -> 0x0065 }
    L_0x0039:
        goto L_0x006a;	 Catch:{ all -> 0x0065 }
    L_0x003a:
        r3 = new java.lang.SecurityException;	 Catch:{ all -> 0x0065 }
        r4 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0065 }
        r4.<init>();	 Catch:{ all -> 0x0065 }
        r10 = "Unable to find app for caller ";	 Catch:{ all -> 0x0065 }
        r4.append(r10);	 Catch:{ all -> 0x0065 }
        r4.append(r12);	 Catch:{ all -> 0x0065 }
        r10 = " (pid=";	 Catch:{ all -> 0x0065 }
        r4.append(r10);	 Catch:{ all -> 0x0065 }
        r10 = android.os.Binder.getCallingPid();	 Catch:{ all -> 0x0065 }
        r4.append(r10);	 Catch:{ all -> 0x0065 }
        r10 = ") when getting content provider ";	 Catch:{ all -> 0x0065 }
        r4.append(r10);	 Catch:{ all -> 0x0065 }
        r4.append(r13);	 Catch:{ all -> 0x0065 }
        r4 = r4.toString();	 Catch:{ all -> 0x0065 }
        r3.<init>(r4);	 Catch:{ all -> 0x0065 }
        throw r3;	 Catch:{ all -> 0x0065 }
    L_0x0065:
        r0 = move-exception;
        r5 = r14;
        r10 = r15;
        goto L_0x0a35;
    L_0x006a:
        r10 = r0;
        r0 = 1;
        r3 = "getContentProviderImpl: getProviderByName";	 Catch:{ all -> 0x0a2b }
        r11.checkTime(r5, r3);	 Catch:{ all -> 0x0a2b }
        r3 = r11.mProviderMap;	 Catch:{ all -> 0x0a2b }
        r3 = r3.getProviderByName(r13, r1);	 Catch:{ all -> 0x0a2b }
        if (r3 != 0) goto L_0x00c9;
    L_0x0079:
        if (r1 == 0) goto L_0x00c9;
    L_0x007b:
        r4 = r11.mProviderMap;	 Catch:{ all -> 0x00c0 }
        r18 = r7;
        r7 = 0;
        r4 = r4.getProviderByName(r13, r7);	 Catch:{ all -> 0x00b7 }
        r3 = r4;	 Catch:{ all -> 0x00b7 }
        if (r3 == 0) goto L_0x00af;	 Catch:{ all -> 0x00b7 }
    L_0x0087:
        r4 = r3.info;	 Catch:{ all -> 0x00b7 }
        r2 = r4;	 Catch:{ all -> 0x00b7 }
        r4 = r2.processName;	 Catch:{ all -> 0x00b7 }
        r7 = r2.applicationInfo;	 Catch:{ all -> 0x00b7 }
        r20 = r0;	 Catch:{ all -> 0x00b7 }
        r0 = r2.name;	 Catch:{ all -> 0x00b7 }
        r1 = r2.flags;	 Catch:{ all -> 0x00b7 }
        r0 = r11.isSingleton(r4, r7, r0, r1);	 Catch:{ all -> 0x00b7 }
        if (r0 == 0) goto L_0x00ac;	 Catch:{ all -> 0x00b7 }
    L_0x009a:
        r0 = r10.uid;	 Catch:{ all -> 0x00b7 }
        r1 = r2.applicationInfo;	 Catch:{ all -> 0x00b7 }
        r1 = r1.uid;	 Catch:{ all -> 0x00b7 }
        r0 = r11.isValidSingletonCall(r0, r1);	 Catch:{ all -> 0x00b7 }
        if (r0 == 0) goto L_0x00ac;
    L_0x00a6:
        r0 = 0;
        r1 = 0;
        r4 = r1;
        r7 = r3;
        r3 = r0;
        goto L_0x00d2;
    L_0x00ac:
        r3 = 0;
        r2 = 0;
        goto L_0x00cd;
    L_0x00af:
        r20 = r0;
        r7 = r3;
        r4 = r20;
        r3 = r48;
        goto L_0x00d2;
    L_0x00b7:
        r0 = move-exception;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r1 = r48;
        goto L_0x0a35;
    L_0x00c0:
        r0 = move-exception;
        r18 = r7;
        r5 = r14;
        r10 = r15;
        r1 = r48;
        goto L_0x0a35;
    L_0x00c9:
        r20 = r0;
        r18 = r7;
    L_0x00cd:
        r7 = r3;
        r4 = r20;
        r3 = r48;
    L_0x00d2:
        if (r7 == 0) goto L_0x00e8;
    L_0x00d4:
        r0 = r7.proc;	 Catch:{ all -> 0x00e0 }
        if (r0 == 0) goto L_0x00e8;	 Catch:{ all -> 0x00e0 }
    L_0x00d8:
        r0 = r7.proc;	 Catch:{ all -> 0x00e0 }
        r0 = r0.killed;	 Catch:{ all -> 0x00e0 }
        if (r0 != 0) goto L_0x00e8;
    L_0x00de:
        r0 = 1;
        goto L_0x00e9;
    L_0x00e0:
        r0 = move-exception;
        r1 = r3;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        goto L_0x0a35;
    L_0x00e8:
        r0 = 0;
    L_0x00e9:
        r17 = r0;
        r22 = r9;
        if (r17 == 0) goto L_0x02ca;
    L_0x00ef:
        r0 = r7.info;	 Catch:{ all -> 0x02be }
        r2 = r0;
        r0 = "getContentProviderImpl: before checkContentProviderPermission";	 Catch:{ all -> 0x02b0 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x02b0 }
        if (r2 == 0) goto L_0x0112;
    L_0x00f9:
        r0 = r11.checkContentProviderPermissionLocked(r2, r10, r3, r4);	 Catch:{ all -> 0x010a }
        r23 = r0;	 Catch:{ all -> 0x010a }
        if (r0 != 0) goto L_0x0102;	 Catch:{ all -> 0x010a }
    L_0x0101:
        goto L_0x0112;	 Catch:{ all -> 0x010a }
    L_0x0102:
        r0 = new java.lang.SecurityException;	 Catch:{ all -> 0x010a }
        r1 = r23;	 Catch:{ all -> 0x010a }
        r0.<init>(r1);	 Catch:{ all -> 0x010a }
        throw r0;	 Catch:{ all -> 0x010a }
    L_0x010a:
        r0 = move-exception;
        r1 = r3;
    L_0x010c:
        r5 = r14;
        r10 = r15;
        r7 = r18;
        goto L_0x0a28;
    L_0x0112:
        r0 = "getContentProviderImpl: after checkContentProviderPermission";	 Catch:{ all -> 0x02b0 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x02b0 }
        if (r2 == 0) goto L_0x0158;
    L_0x0119:
        if (r10 == 0) goto L_0x0158;
    L_0x011b:
        r0 = r10.uid;	 Catch:{ all -> 0x0149 }
        r9 = r10.pid;	 Catch:{ all -> 0x0149 }
        r1 = r10.info;	 Catch:{ all -> 0x0149 }
        r1 = r1.packageName;	 Catch:{ all -> 0x0149 }
        r20 = r1;
        r12 = 1;
        r1 = r11;
        r21 = r2;
        r26 = r3;
        r3 = r0;
        r19 = r4;
        r12 = 0;
        r4 = r9;
        r27 = r5;
        r5 = r20;
        r6 = r26;
        r0 = r1.shouldPreventStartProvider(r2, r3, r4, r5, r6);	 Catch:{ all -> 0x0175 }
        if (r0 == 0) goto L_0x0161;
    L_0x013c:
        r2 = 0;
        monitor-exit(r43);	 Catch:{ all -> 0x0143 }
        resetPriorityAfterLockedSection();
        r1 = 0;
        return r1;
    L_0x0143:
        r0 = move-exception;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        goto L_0x017c;
    L_0x0149:
        r0 = move-exception;
        r21 = r2;
        r26 = r3;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r9 = r22;
        r1 = r26;
        goto L_0x0a35;
    L_0x0158:
        r21 = r2;
        r26 = r3;
        r19 = r4;
        r27 = r5;
        r12 = 0;
    L_0x0161:
        if (r10 == 0) goto L_0x0182;
    L_0x0163:
        r0 = r7.canRunHere(r10);	 Catch:{ all -> 0x0175 }
        if (r0 == 0) goto L_0x0182;	 Catch:{ all -> 0x0175 }
    L_0x0169:
        r1 = 0;	 Catch:{ all -> 0x0175 }
        r0 = r7.newHolder(r1);	 Catch:{ all -> 0x0175 }
        r0.provider = r1;	 Catch:{ all -> 0x0175 }
        monitor-exit(r43);	 Catch:{ all -> 0x0175 }
        resetPriorityAfterLockedSection();
        return r0;
    L_0x0175:
        r0 = move-exception;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r2 = r21;
    L_0x017c:
        r9 = r22;
        r1 = r26;
        goto L_0x0a35;
    L_0x0182:
        r0 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x01ad, all -> 0x01a0 }
        r1 = r26;
        r0 = r0.resolveContentProvider(r13, r12, r1);	 Catch:{ RemoteException -> 0x019e }
        if (r0 != 0) goto L_0x0194;
    L_0x018e:
        monitor-exit(r43);	 Catch:{ all -> 0x0195 }
        resetPriorityAfterLockedSection();
        r2 = 0;
        return r2;
    L_0x0194:
        goto L_0x01b0;
    L_0x0195:
        r0 = move-exception;
        r5 = r14;
        r10 = r15;
        r7 = r18;
    L_0x019a:
        r2 = r21;
        goto L_0x0a28;
    L_0x019e:
        r0 = move-exception;
        goto L_0x01b0;
    L_0x01a0:
        r0 = move-exception;
        r1 = r26;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r2 = r21;
        r9 = r22;
        goto L_0x0a35;
    L_0x01ad:
        r0 = move-exception;
        r1 = r26;
    L_0x01b0:
        r2 = android.os.Binder.clearCallingIdentity();	 Catch:{ all -> 0x02a3 }
        r0 = "getContentProviderImpl: incProviderCountLocked";	 Catch:{ all -> 0x02a3 }
        r5 = r27;	 Catch:{ all -> 0x02a3 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x02a3 }
        r0 = r11.incProviderCountLocked(r10, r7, r15, r14);	 Catch:{ all -> 0x02a3 }
        r4 = r0;
        if (r4 == 0) goto L_0x01ea;
    L_0x01c2:
        r0 = r4.stableCount;	 Catch:{ all -> 0x01e5 }
        r9 = r4.unstableCount;	 Catch:{ all -> 0x01e5 }
        r0 = r0 + r9;	 Catch:{ all -> 0x01e5 }
        r9 = 1;	 Catch:{ all -> 0x01e5 }
        if (r0 != r9) goto L_0x01ea;	 Catch:{ all -> 0x01e5 }
    L_0x01ca:
        r0 = r7.proc;	 Catch:{ all -> 0x01e5 }
        if (r0 == 0) goto L_0x01ea;	 Catch:{ all -> 0x01e5 }
    L_0x01ce:
        r0 = r10.setAdj;	 Catch:{ all -> 0x01e5 }
        r9 = 200; // 0xc8 float:2.8E-43 double:9.9E-322;	 Catch:{ all -> 0x01e5 }
        if (r0 > r9) goto L_0x01ea;	 Catch:{ all -> 0x01e5 }
    L_0x01d4:
        r0 = "getContentProviderImpl: before updateLruProcess";	 Catch:{ all -> 0x01e5 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x01e5 }
        r0 = r7.proc;	 Catch:{ all -> 0x01e5 }
        r9 = 0;	 Catch:{ all -> 0x01e5 }
        r11.updateLruProcessLocked(r0, r12, r9);	 Catch:{ all -> 0x01e5 }
        r0 = "getContentProviderImpl: after updateLruProcess";	 Catch:{ all -> 0x01e5 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x01e5 }
        goto L_0x01ea;
    L_0x01e5:
        r0 = move-exception;
        r7 = r4;
        r5 = r14;
        r10 = r15;
        goto L_0x019a;
    L_0x01ea:
        r0 = "getContentProviderImpl: before updateOomAdj";	 Catch:{ all -> 0x029c }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x029c }
        r0 = r7.proc;	 Catch:{ all -> 0x029c }
        r0 = r0.verifiedAdj;	 Catch:{ all -> 0x029c }
        r9 = r7.proc;	 Catch:{ all -> 0x029c }
        r12 = 1;	 Catch:{ all -> 0x029c }
        r9 = r11.updateOomAdjLocked(r9, r12);	 Catch:{ all -> 0x029c }
        if (r9 == 0) goto L_0x020b;
    L_0x01fc:
        r12 = r7.proc;	 Catch:{ all -> 0x01e5 }
        r12 = r12.setAdj;	 Catch:{ all -> 0x01e5 }
        if (r0 == r12) goto L_0x020b;	 Catch:{ all -> 0x01e5 }
    L_0x0202:
        r12 = r7.proc;	 Catch:{ all -> 0x01e5 }
        r12 = r11.isProcessAliveLocked(r12);	 Catch:{ all -> 0x01e5 }
        if (r12 != 0) goto L_0x020b;
    L_0x020a:
        r9 = 0;
    L_0x020b:
        r12 = r7.info;	 Catch:{ all -> 0x029c }
        r12 = r12.packageName;	 Catch:{ all -> 0x029c }
        r11.maybeUpdateProviderUsageStatsLocked(r10, r12, r13);	 Catch:{ all -> 0x029c }
        r12 = "getContentProviderImpl: after updateOomAdj";	 Catch:{ all -> 0x029c }
        r11.checkTime(r5, r12);	 Catch:{ all -> 0x029c }
        r12 = com.android.server.am.ActivityManagerDebugConfig.DEBUG_PROVIDER;	 Catch:{ all -> 0x029c }
        if (r12 == 0) goto L_0x0236;	 Catch:{ all -> 0x029c }
    L_0x021b:
        r12 = "ActivityManager";	 Catch:{ all -> 0x029c }
        r29 = r0;	 Catch:{ all -> 0x029c }
        r0 = new java.lang.StringBuilder;	 Catch:{ all -> 0x029c }
        r0.<init>();	 Catch:{ all -> 0x029c }
        r30 = r8;
        r8 = "Adjust success: ";	 Catch:{ all -> 0x0282 }
        r0.append(r8);	 Catch:{ all -> 0x0282 }
        r0.append(r9);	 Catch:{ all -> 0x0282 }
        r0 = r0.toString();	 Catch:{ all -> 0x0282 }
        android.util.Slog.i(r12, r0);	 Catch:{ all -> 0x0282 }
        goto L_0x023a;	 Catch:{ all -> 0x0282 }
    L_0x0236:
        r29 = r0;	 Catch:{ all -> 0x0282 }
        r30 = r8;	 Catch:{ all -> 0x0282 }
    L_0x023a:
        if (r9 != 0) goto L_0x028a;	 Catch:{ all -> 0x0282 }
    L_0x023c:
        r0 = "ActivityManager";	 Catch:{ all -> 0x0282 }
        r8 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0282 }
        r8.<init>();	 Catch:{ all -> 0x0282 }
        r12 = "Existing provider ";	 Catch:{ all -> 0x0282 }
        r8.append(r12);	 Catch:{ all -> 0x0282 }
        r12 = r7.name;	 Catch:{ all -> 0x0282 }
        r12 = r12.flattenToShortString();	 Catch:{ all -> 0x0282 }
        r8.append(r12);	 Catch:{ all -> 0x0282 }
        r12 = " is crashing; detaching ";	 Catch:{ all -> 0x0282 }
        r8.append(r12);	 Catch:{ all -> 0x0282 }
        r8.append(r10);	 Catch:{ all -> 0x0282 }
        r8 = r8.toString();	 Catch:{ all -> 0x0282 }
        android.util.Slog.i(r0, r8);	 Catch:{ all -> 0x0282 }
        r0 = r11.decProviderCountLocked(r4, r7, r15, r14);	 Catch:{ all -> 0x0282 }
        r8 = "getContentProviderImpl: before appDied";	 Catch:{ all -> 0x0282 }
        r11.checkTime(r5, r8);	 Catch:{ all -> 0x0282 }
        r8 = r7.proc;	 Catch:{ all -> 0x0282 }
        r11.appDiedLocked(r8);	 Catch:{ all -> 0x0282 }
        r8 = "getContentProviderImpl: after appDied";	 Catch:{ all -> 0x0282 }
        r11.checkTime(r5, r8);	 Catch:{ all -> 0x0282 }
        if (r0 != 0) goto L_0x027b;	 Catch:{ all -> 0x0282 }
    L_0x0275:
        monitor-exit(r43);	 Catch:{ all -> 0x0282 }
        resetPriorityAfterLockedSection();
        r8 = 0;
        return r8;
    L_0x027b:
        r8 = 0;
        r0 = 0;
        r4 = r0;
        r17 = r8;
        goto L_0x0292;
    L_0x0282:
        r0 = move-exception;
        r7 = r4;
        r5 = r14;
        r10 = r15;
        r2 = r21;
        goto L_0x0306;
    L_0x028a:
        r0 = r7.proc;	 Catch:{ all -> 0x0282 }
        r8 = r7.proc;	 Catch:{ all -> 0x0282 }
        r8 = r8.setAdj;	 Catch:{ all -> 0x0282 }
        r0.verifiedAdj = r8;	 Catch:{ all -> 0x0282 }
    L_0x0292:
        android.os.Binder.restoreCallingIdentity(r2);	 Catch:{ all -> 0x0282 }
        r18 = r4;
        r2 = r21;
        goto L_0x030c;
    L_0x029c:
        r0 = move-exception;
        r30 = r8;
        r7 = r4;
        r5 = r14;
        r10 = r15;
        goto L_0x02aa;
    L_0x02a3:
        r0 = move-exception;
        r30 = r8;
        r5 = r14;
        r10 = r15;
        r7 = r18;
    L_0x02aa:
        r2 = r21;
        r9 = r22;
        goto L_0x0a35;
    L_0x02b0:
        r0 = move-exception;
        r21 = r2;
        r1 = r3;
        r30 = r8;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r9 = r22;
        goto L_0x0a35;
    L_0x02be:
        r0 = move-exception;
        r1 = r3;
        r30 = r8;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r9 = r22;
        goto L_0x0a35;
    L_0x02ca:
        r1 = r3;
        r19 = r4;
        r30 = r8;
        if (r7 == 0) goto L_0x030c;
    L_0x02d1:
        r0 = r7.proc;	 Catch:{ all -> 0x0301 }
        if (r0 == 0) goto L_0x030c;	 Catch:{ all -> 0x0301 }
    L_0x02d5:
        r0 = r7.proc;	 Catch:{ all -> 0x0301 }
        r0 = r0.killed;	 Catch:{ all -> 0x0301 }
        if (r0 == 0) goto L_0x030c;	 Catch:{ all -> 0x0301 }
    L_0x02db:
        r0 = "ActivityManager";	 Catch:{ all -> 0x0301 }
        r3 = "appDied, remove old cpr";	 Catch:{ all -> 0x0301 }
        android.util.Slog.e(r0, r3);	 Catch:{ all -> 0x0301 }
        r3 = android.os.Binder.clearCallingIdentity();	 Catch:{ all -> 0x0301 }
        r0 = r7.proc;	 Catch:{ Exception -> 0x02f1 }
        r11.appDiedLocked(r0);	 Catch:{ Exception -> 0x02f1 }
        android.os.Binder.restoreCallingIdentity(r3);	 Catch:{ all -> 0x0301 }
    L_0x02ee:
        goto L_0x030c;
    L_0x02ef:
        r0 = move-exception;
        goto L_0x02fd;
    L_0x02f1:
        r0 = move-exception;
        r8 = "ActivityManager";	 Catch:{ all -> 0x02ef }
        r9 = "appDied";	 Catch:{ all -> 0x02ef }
        android.util.Slog.e(r8, r9, r0);	 Catch:{ all -> 0x02ef }
        android.os.Binder.restoreCallingIdentity(r3);	 Catch:{ all -> 0x0301 }
        goto L_0x02ee;	 Catch:{ all -> 0x0301 }
    L_0x02fd:
        android.os.Binder.restoreCallingIdentity(r3);	 Catch:{ all -> 0x0301 }
        throw r0;	 Catch:{ all -> 0x0301 }
    L_0x0301:
        r0 = move-exception;
    L_0x0302:
        r5 = r14;
        r10 = r15;
        r7 = r18;
    L_0x0306:
        r9 = r22;
        r8 = r30;
        goto L_0x0a35;
    L_0x030c:
        if (r17 != 0) goto L_0x08b3;
    L_0x030e:
        r0 = "getContentProviderImpl: before resolveContentProvider";	 Catch:{ RemoteException -> 0x0324 }
        r11.checkTime(r5, r0);	 Catch:{ RemoteException -> 0x0324 }
        r0 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x0324 }
        r3 = 3072; // 0xc00 float:4.305E-42 double:1.518E-320;	 Catch:{ RemoteException -> 0x0324 }
        r0 = r0.resolveContentProvider(r13, r3, r1);	 Catch:{ RemoteException -> 0x0324 }
        r2 = r0;	 Catch:{ RemoteException -> 0x0324 }
        r0 = "getContentProviderImpl: after resolveContentProvider";	 Catch:{ RemoteException -> 0x0324 }
        r11.checkTime(r5, r0);	 Catch:{ RemoteException -> 0x0324 }
        goto L_0x0325;
    L_0x0324:
        r0 = move-exception;
    L_0x0325:
        r12 = r2;
        if (r12 != 0) goto L_0x0331;
    L_0x0328:
        monitor-exit(r43);	 Catch:{ all -> 0x032e }
        resetPriorityAfterLockedSection();
        r2 = 0;
        return r2;
    L_0x032e:
        r0 = move-exception;
        r2 = r12;
        goto L_0x0302;
    L_0x0331:
        r0 = r12.processName;	 Catch:{ all -> 0x08a6 }
        r2 = r12.applicationInfo;	 Catch:{ all -> 0x08a6 }
        r3 = r12.name;	 Catch:{ all -> 0x08a6 }
        r4 = r12.flags;	 Catch:{ all -> 0x08a6 }
        r0 = r11.isSingleton(r0, r2, r3, r4);	 Catch:{ all -> 0x08a6 }
        if (r0 == 0) goto L_0x034d;
    L_0x033f:
        r0 = r10.uid;	 Catch:{ all -> 0x032e }
        r2 = r12.applicationInfo;	 Catch:{ all -> 0x032e }
        r2 = r2.uid;	 Catch:{ all -> 0x032e }
        r0 = r11.isValidSingletonCall(r0, r2);	 Catch:{ all -> 0x032e }
        if (r0 == 0) goto L_0x034d;
    L_0x034b:
        r0 = 1;
        goto L_0x034e;
    L_0x034d:
        r0 = 0;
    L_0x034e:
        r20 = r0;
        if (r20 == 0) goto L_0x0355;
    L_0x0352:
        r0 = 0;
        r9 = r0;
        goto L_0x0356;
    L_0x0355:
        r9 = r1;
    L_0x0356:
        r0 = r12.applicationInfo;	 Catch:{ all -> 0x0895 }
        r0 = r11.getAppInfoForUser(r0, r9);	 Catch:{ all -> 0x0895 }
        r12.applicationInfo = r0;	 Catch:{ all -> 0x0895 }
        r0 = "getContentProviderImpl: got app info for user";	 Catch:{ all -> 0x0895 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x0895 }
        r0 = "getContentProviderImpl: before checkContentProviderPermission";	 Catch:{ all -> 0x0895 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x0895 }
        if (r20 != 0) goto L_0x036c;	 Catch:{ all -> 0x0895 }
    L_0x036a:
        r0 = 1;	 Catch:{ all -> 0x0895 }
        goto L_0x036d;	 Catch:{ all -> 0x0895 }
    L_0x036c:
        r0 = 0;	 Catch:{ all -> 0x0895 }
    L_0x036d:
        r0 = r11.checkContentProviderPermissionLocked(r12, r10, r9, r0);	 Catch:{ all -> 0x0895 }
        r8 = r0;	 Catch:{ all -> 0x0895 }
        if (r0 != 0) goto L_0x0878;	 Catch:{ all -> 0x0895 }
    L_0x0374:
        r0 = "getContentProviderImpl: after checkContentProviderPermission";	 Catch:{ all -> 0x0895 }
        r11.checkTime(r5, r0);	 Catch:{ all -> 0x0895 }
        if (r12 == 0) goto L_0x03ee;
    L_0x037b:
        r1 = r10;
        if (r16 == 0) goto L_0x03a7;
    L_0x037e:
        r2 = r11.mPidsSelfLocked;	 Catch:{ all -> 0x0399 }
        monitor-enter(r2);	 Catch:{ all -> 0x0399 }
        r0 = r11.mPidsSelfLocked;	 Catch:{ all -> 0x0394 }
        r3 = r30;
        r0 = r0.get(r3);	 Catch:{ all -> 0x0392 }
        r0 = (com.android.server.am.ProcessRecord) r0;	 Catch:{ all -> 0x0392 }
        r1 = r0;	 Catch:{ all -> 0x0392 }
        monitor-exit(r2);	 Catch:{ all -> 0x0392 }
        r0 = r1;	 Catch:{ all -> 0x0392 }
        r2 = r3;	 Catch:{ all -> 0x0392 }
        r1 = r22;	 Catch:{ all -> 0x0392 }
        goto L_0x03ca;	 Catch:{ all -> 0x0392 }
    L_0x0392:
        r0 = move-exception;	 Catch:{ all -> 0x0392 }
        goto L_0x0397;	 Catch:{ all -> 0x0392 }
    L_0x0394:
        r0 = move-exception;	 Catch:{ all -> 0x0392 }
        r3 = r30;	 Catch:{ all -> 0x0392 }
    L_0x0397:
        monitor-exit(r2);	 Catch:{ all -> 0x0392 }
        throw r0;	 Catch:{ all -> 0x03ae }
    L_0x0399:
        r0 = move-exception;	 Catch:{ all -> 0x03ae }
        r3 = r30;	 Catch:{ all -> 0x03ae }
        r8 = r3;	 Catch:{ all -> 0x03ae }
        r1 = r9;	 Catch:{ all -> 0x03ae }
        r2 = r12;	 Catch:{ all -> 0x03ae }
        r5 = r14;	 Catch:{ all -> 0x03ae }
        r10 = r15;	 Catch:{ all -> 0x03ae }
        r7 = r18;	 Catch:{ all -> 0x03ae }
        r9 = r22;	 Catch:{ all -> 0x03ae }
        goto L_0x0a35;	 Catch:{ all -> 0x03ae }
    L_0x03a7:
        r3 = r30;	 Catch:{ all -> 0x03ae }
        if (r10 == 0) goto L_0x03b4;	 Catch:{ all -> 0x03ae }
    L_0x03ab:
        r0 = r10.pid;	 Catch:{ all -> 0x03ae }
        goto L_0x03b8;	 Catch:{ all -> 0x03ae }
    L_0x03ae:
        r0 = move-exception;	 Catch:{ all -> 0x03ae }
        r8 = r3;	 Catch:{ all -> 0x03ae }
    L_0x03b0:
        r1 = r9;	 Catch:{ all -> 0x03ae }
        r2 = r12;	 Catch:{ all -> 0x03ae }
        goto L_0x010c;	 Catch:{ all -> 0x03ae }
    L_0x03b4:
        r0 = android.os.Binder.getCallingPid();	 Catch:{ all -> 0x03ae }
    L_0x03b8:
        r2 = r0;
        if (r10 == 0) goto L_0x03c1;
    L_0x03bb:
        r0 = r10.uid;	 Catch:{ all -> 0x03be }
        goto L_0x03c5;	 Catch:{ all -> 0x03be }
    L_0x03be:
        r0 = move-exception;	 Catch:{ all -> 0x03be }
        r8 = r2;	 Catch:{ all -> 0x03be }
        goto L_0x03b0;	 Catch:{ all -> 0x03be }
    L_0x03c1:
        r0 = android.os.Binder.getCallingUid();	 Catch:{ all -> 0x03be }
    L_0x03c5:
        r42 = r1;
        r1 = r0;
        r0 = r42;
    L_0x03ca:
        r3 = r11.shouldPreventStartProvider(r12, r2, r1, r0);	 Catch:{ all -> 0x03e0 }
        if (r3 == 0) goto L_0x03db;
    L_0x03d0:
        r3 = 0;
        monitor-exit(r43);	 Catch:{ all -> 0x03d7 }
        resetPriorityAfterLockedSection();
        r4 = 0;
        return r4;
    L_0x03d7:
        r0 = move-exception;
        r8 = r2;
        r2 = r3;
        goto L_0x03e3;
    L_0x03db:
        r22 = r1;
        r21 = r2;
        goto L_0x03f2;
    L_0x03e0:
        r0 = move-exception;
        r8 = r2;
        r2 = r12;
    L_0x03e3:
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r42 = r9;
        r9 = r1;
        r1 = r42;
        goto L_0x0a35;
    L_0x03ee:
        r3 = r30;
        r21 = r3;
    L_0x03f2:
        if (r12 == 0) goto L_0x0422;
    L_0x03f4:
        if (r10 == 0) goto L_0x0422;
    L_0x03f6:
        r3 = r10.uid;	 Catch:{ all -> 0x0415 }
        r4 = r10.pid;	 Catch:{ all -> 0x0415 }
        r0 = r10.info;	 Catch:{ all -> 0x0415 }
        r0 = r0.packageName;	 Catch:{ all -> 0x0415 }
        r1 = r11;
        r2 = r12;
        r31 = r15;
        r14 = r5;
        r5 = r0;
        r6 = r9;
        r0 = r1.shouldPreventStartProvider(r2, r3, r4, r5, r6);	 Catch:{ all -> 0x043d }
        if (r0 == 0) goto L_0x0425;
    L_0x040b:
        r2 = 0;
        monitor-exit(r43);	 Catch:{ all -> 0x0412 }
        resetPriorityAfterLockedSection();
        r1 = 0;
        return r1;
    L_0x0412:
        r0 = move-exception;
        r1 = r9;
        goto L_0x0440;
    L_0x0415:
        r0 = move-exception;
        r1 = r9;
        r2 = r12;
        r5 = r14;
        r10 = r15;
        r7 = r18;
        r8 = r21;
        r9 = r22;
        goto L_0x0a35;
    L_0x0422:
        r31 = r15;
        r14 = r5;
    L_0x0425:
        r0 = r11.mProcessesReady;	 Catch:{ all -> 0x0866 }
        if (r0 != 0) goto L_0x044c;
    L_0x0429:
        r0 = r12.processName;	 Catch:{ all -> 0x043d }
        r1 = "system";	 Catch:{ all -> 0x043d }
        r0 = r0.equals(r1);	 Catch:{ all -> 0x043d }
        if (r0 == 0) goto L_0x0435;	 Catch:{ all -> 0x043d }
    L_0x0434:
        goto L_0x044c;	 Catch:{ all -> 0x043d }
    L_0x0435:
        r0 = new java.lang.IllegalArgumentException;	 Catch:{ all -> 0x043d }
        r1 = "Attempt to launch content provider before system ready";	 Catch:{ all -> 0x043d }
        r0.<init>(r1);	 Catch:{ all -> 0x043d }
        throw r0;	 Catch:{ all -> 0x043d }
    L_0x043d:
        r0 = move-exception;
        r1 = r9;
        r2 = r12;
    L_0x0440:
        r7 = r18;
        r8 = r21;
        r9 = r22;
    L_0x0446:
        r10 = r31;
        r5 = r47;
        goto L_0x0a35;
    L_0x044c:
        r0 = r11.mSystemProvidersInstalled;	 Catch:{ all -> 0x0866 }
        if (r0 != 0) goto L_0x0482;
    L_0x0450:
        r0 = r12.applicationInfo;	 Catch:{ all -> 0x043d }
        r0 = r0.isSystemApp();	 Catch:{ all -> 0x043d }
        if (r0 == 0) goto L_0x0482;	 Catch:{ all -> 0x043d }
    L_0x0458:
        r0 = "system";	 Catch:{ all -> 0x043d }
        r1 = r12.processName;	 Catch:{ all -> 0x043d }
        r0 = r0.equals(r1);	 Catch:{ all -> 0x043d }
        if (r0 != 0) goto L_0x0464;	 Catch:{ all -> 0x043d }
    L_0x0463:
        goto L_0x0482;	 Catch:{ all -> 0x043d }
    L_0x0464:
        r0 = new java.lang.IllegalStateException;	 Catch:{ all -> 0x043d }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x043d }
        r1.<init>();	 Catch:{ all -> 0x043d }
        r2 = "Cannot access system provider: '";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = r12.authority;	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = "' before system providers are installed!";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r1 = r1.toString();	 Catch:{ all -> 0x043d }
        r0.<init>(r1);	 Catch:{ all -> 0x043d }
        throw r0;	 Catch:{ all -> 0x043d }
    L_0x0482:
        r0 = r11.mUserController;	 Catch:{ all -> 0x0866 }
        r1 = 0;	 Catch:{ all -> 0x0866 }
        r0 = r0.isUserRunning(r9, r1);	 Catch:{ all -> 0x0866 }
        if (r0 != 0) goto L_0x04cc;
    L_0x048b:
        r0 = "ActivityManager";	 Catch:{ all -> 0x043d }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x043d }
        r1.<init>();	 Catch:{ all -> 0x043d }
        r2 = "Unable to launch app ";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = r12.applicationInfo;	 Catch:{ all -> 0x043d }
        r2 = r2.packageName;	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = "/";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = r12.applicationInfo;	 Catch:{ all -> 0x043d }
        r2 = r2.uid;	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = " for provider ";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r1.append(r13);	 Catch:{ all -> 0x043d }
        r2 = ": user ";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r1.append(r9);	 Catch:{ all -> 0x043d }
        r2 = " is stopped";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r1 = r1.toString();	 Catch:{ all -> 0x043d }
        android.util.Slog.w(r0, r1);	 Catch:{ all -> 0x043d }
        monitor-exit(r43);	 Catch:{ all -> 0x043d }
        resetPriorityAfterLockedSection();
        r1 = 0;
        return r1;
    L_0x04cc:
        r0 = new android.content.ComponentName;	 Catch:{ all -> 0x0866 }
        r1 = r12.packageName;	 Catch:{ all -> 0x0866 }
        r2 = r12.name;	 Catch:{ all -> 0x0866 }
        r0.<init>(r1, r2);	 Catch:{ all -> 0x0866 }
        r6 = r0;	 Catch:{ all -> 0x0866 }
        r0 = "getContentProviderImpl: before getProviderByClass";	 Catch:{ all -> 0x0866 }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x0866 }
        r0 = r11.mProviderMap;	 Catch:{ all -> 0x0866 }
        r0 = r0.getProviderByClass(r6, r9);	 Catch:{ all -> 0x0866 }
        r7 = r0;	 Catch:{ all -> 0x0866 }
        r0 = "getContentProviderImpl: after getProviderByClass";	 Catch:{ all -> 0x0866 }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x0866 }
        if (r7 != 0) goto L_0x04eb;
    L_0x04e9:
        r0 = 1;
        goto L_0x04ec;
    L_0x04eb:
        r0 = 0;
    L_0x04ec:
        r23 = r0;
        if (r23 == 0) goto L_0x058b;
    L_0x04f0:
        r0 = android.os.Binder.clearCallingIdentity();	 Catch:{ all -> 0x043d }
        r2 = r0;	 Catch:{ all -> 0x043d }
        r0 = r11.mPermissionReviewRequired;	 Catch:{ all -> 0x043d }
        if (r0 == 0) goto L_0x0505;	 Catch:{ all -> 0x043d }
    L_0x04f9:
        r0 = r11.requestTargetProviderPermissionsReviewIfNeededLocked(r12, r10, r9);	 Catch:{ all -> 0x043d }
        if (r0 != 0) goto L_0x0505;	 Catch:{ all -> 0x043d }
    L_0x04ff:
        monitor-exit(r43);	 Catch:{ all -> 0x043d }
        resetPriorityAfterLockedSection();
        r1 = 0;
        return r1;
    L_0x0505:
        r0 = "getContentProviderImpl: before getApplicationInfo";	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r11.checkTime(r14, r0);	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r0 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r1 = r12.applicationInfo;	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r1 = r1.packageName;	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r4 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r0 = r0.getApplicationInfo(r1, r4, r9);	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r1 = "getContentProviderImpl: after getApplicationInfo";	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r11.checkTime(r14, r1);	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        if (r0 != 0) goto L_0x0553;
    L_0x051f:
        r1 = "ActivityManager";	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        r4 = new java.lang.StringBuilder;	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        r4.<init>();	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        r5 = "No package info for content provider ";	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        r4.append(r5);	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        r5 = r12.name;	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        r4.append(r5);	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        r4 = r4.toString();	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        android.util.Slog.w(r1, r4);	 Catch:{ RemoteException -> 0x054a, all -> 0x0541 }
        android.os.Binder.restoreCallingIdentity(r2);	 Catch:{ all -> 0x043d }
        monitor-exit(r43);	 Catch:{ all -> 0x043d }
        resetPriorityAfterLockedSection();
        r1 = 0;
        return r1;
    L_0x0541:
        r0 = move-exception;
        r34 = r6;
        r33 = r7;
        r32 = r8;
        r7 = r2;
        goto L_0x057b;
    L_0x054a:
        r0 = move-exception;
        r34 = r6;
        r33 = r7;
        r32 = r8;
        r7 = r2;
        goto L_0x0587;
    L_0x0553:
        r4 = r11.getAppInfoForUser(r0, r9);	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r0 = new com.android.server.am.ContentProviderRecord;	 Catch:{ RemoteException -> 0x057f, all -> 0x0573 }
        r1 = r0;
        r33 = r7;
        r32 = r8;
        r7 = r2;
        r2 = r11;
        r3 = r12;
        r5 = r6;
        r34 = r6;
        r6 = r20;
        r1.<init>(r2, r3, r4, r5, r6);	 Catch:{ RemoteException -> 0x0571, all -> 0x056f }
        android.os.Binder.restoreCallingIdentity(r7);	 Catch:{ all -> 0x043d }
        r8 = r0;	 Catch:{ all -> 0x043d }
        goto L_0x0593;	 Catch:{ all -> 0x043d }
    L_0x056f:
        r0 = move-exception;	 Catch:{ all -> 0x043d }
        goto L_0x057b;	 Catch:{ all -> 0x043d }
    L_0x0571:
        r0 = move-exception;	 Catch:{ all -> 0x043d }
        goto L_0x0587;	 Catch:{ all -> 0x043d }
    L_0x0573:
        r0 = move-exception;	 Catch:{ all -> 0x043d }
        r34 = r6;	 Catch:{ all -> 0x043d }
        r33 = r7;	 Catch:{ all -> 0x043d }
        r32 = r8;	 Catch:{ all -> 0x043d }
        r7 = r2;	 Catch:{ all -> 0x043d }
    L_0x057b:
        android.os.Binder.restoreCallingIdentity(r7);	 Catch:{ all -> 0x043d }
        throw r0;	 Catch:{ all -> 0x043d }
    L_0x057f:
        r0 = move-exception;	 Catch:{ all -> 0x043d }
        r34 = r6;	 Catch:{ all -> 0x043d }
        r33 = r7;	 Catch:{ all -> 0x043d }
        r32 = r8;	 Catch:{ all -> 0x043d }
        r7 = r2;	 Catch:{ all -> 0x043d }
    L_0x0587:
        android.os.Binder.restoreCallingIdentity(r7);	 Catch:{ all -> 0x043d }
        goto L_0x0591;
    L_0x058b:
        r34 = r6;
        r33 = r7;
        r32 = r8;
    L_0x0591:
        r8 = r33;
    L_0x0593:
        r0 = "getContentProviderImpl: now have ContentProviderRecord";	 Catch:{ all -> 0x0866 }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x0866 }
        if (r10 == 0) goto L_0x05aa;
    L_0x059a:
        r0 = r8.canRunHere(r10);	 Catch:{ all -> 0x043d }
        if (r0 == 0) goto L_0x05aa;	 Catch:{ all -> 0x043d }
    L_0x05a0:
        r7 = 0;	 Catch:{ all -> 0x043d }
        r0 = r8.newHolder(r7);	 Catch:{ all -> 0x043d }
        monitor-exit(r43);	 Catch:{ all -> 0x043d }
        resetPriorityAfterLockedSection();
        return r0;
    L_0x05aa:
        r7 = 0;
        r0 = com.android.server.am.ActivityManagerDebugConfig.DEBUG_PROVIDER;	 Catch:{ all -> 0x0866 }
        if (r0 == 0) goto L_0x05f4;
    L_0x05af:
        r0 = "ActivityManager";	 Catch:{ all -> 0x043d }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x043d }
        r1.<init>();	 Catch:{ all -> 0x043d }
        r2 = "LAUNCHING REMOTE PROVIDER (myuid ";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        if (r10 == 0) goto L_0x05c4;	 Catch:{ all -> 0x043d }
    L_0x05bd:
        r2 = r10.uid;	 Catch:{ all -> 0x043d }
        r2 = java.lang.Integer.valueOf(r2);	 Catch:{ all -> 0x043d }
        goto L_0x05c5;	 Catch:{ all -> 0x043d }
    L_0x05c4:
        r2 = r7;	 Catch:{ all -> 0x043d }
    L_0x05c5:
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = " pruid ";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = r8.appInfo;	 Catch:{ all -> 0x043d }
        r2 = r2.uid;	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = "): ";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = r8.info;	 Catch:{ all -> 0x043d }
        r2 = r2.name;	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = " callers=";	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r2 = 6;	 Catch:{ all -> 0x043d }
        r2 = android.os.Debug.getCallers(r2);	 Catch:{ all -> 0x043d }
        r1.append(r2);	 Catch:{ all -> 0x043d }
        r1 = r1.toString();	 Catch:{ all -> 0x043d }
        android.util.Slog.w(r0, r1);	 Catch:{ all -> 0x043d }
    L_0x05f4:
        r0 = r11.mLaunchingProviders;	 Catch:{ all -> 0x0866 }
        r0 = r0.size();	 Catch:{ all -> 0x0866 }
        r6 = r0;
        r0 = 0;
    L_0x05fc:
        r5 = r0;
        if (r5 >= r6) goto L_0x060b;
    L_0x05ff:
        r0 = r11.mLaunchingProviders;	 Catch:{ all -> 0x043d }
        r0 = r0.get(r5);	 Catch:{ all -> 0x043d }
        if (r0 != r8) goto L_0x0608;
    L_0x0607:
        goto L_0x060b;
    L_0x0608:
        r0 = r5 + 1;
        goto L_0x05fc;
    L_0x060b:
        if (r5 < r6) goto L_0x0807;
    L_0x060d:
        r0 = android.os.Binder.clearCallingIdentity();	 Catch:{ all -> 0x07f5 }
        r3 = r0;
        r0 = "getContentProviderImpl: before set stopped state";	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r11.checkTime(r14, r0);	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r0 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r1 = r8.appInfo;	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r1 = r1.packageName;	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r2 = 0;	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r0.setPackageStoppedState(r1, r2, r9);	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r0 = "getContentProviderImpl: after set stopped state";	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        r11.checkTime(r14, r0);	 Catch:{ RemoteException -> 0x065c, IllegalArgumentException -> 0x0638 }
        goto L_0x065d;
    L_0x0629:
        r0 = move-exception;
        r1 = r3;
        r28 = r5;
        r29 = r6;
        r3 = r8;
        r27 = r9;
        r41 = r10;
        r39 = r32;
        goto L_0x07f1;
    L_0x0638:
        r0 = move-exception;
        r1 = "ActivityManager";	 Catch:{ all -> 0x0629 }
        r2 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0629 }
        r2.<init>();	 Catch:{ all -> 0x0629 }
        r7 = "Failed trying to unstop package ";	 Catch:{ all -> 0x0629 }
        r2.append(r7);	 Catch:{ all -> 0x0629 }
        r7 = r8.appInfo;	 Catch:{ all -> 0x0629 }
        r7 = r7.packageName;	 Catch:{ all -> 0x0629 }
        r2.append(r7);	 Catch:{ all -> 0x0629 }
        r7 = ": ";	 Catch:{ all -> 0x0629 }
        r2.append(r7);	 Catch:{ all -> 0x0629 }
        r2.append(r0);	 Catch:{ all -> 0x0629 }
        r2 = r2.toString();	 Catch:{ all -> 0x0629 }
        android.util.Slog.w(r1, r2);	 Catch:{ all -> 0x0629 }
        goto L_0x065e;
    L_0x065c:
        r0 = move-exception;
    L_0x065e:
        r0 = "getContentProviderImpl: looking for process record";	 Catch:{ all -> 0x07e4 }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x07e4 }
        r0 = r12.processName;	 Catch:{ all -> 0x07e4 }
        r1 = r8.appInfo;	 Catch:{ all -> 0x07e4 }
        r1 = r1.uid;	 Catch:{ all -> 0x07e4 }
        r2 = 0;	 Catch:{ all -> 0x07e4 }
        r0 = r11.getProcessRecordLocked(r0, r1, r2);	 Catch:{ all -> 0x07e4 }
        r7 = r0;
        if (r7 == 0) goto L_0x0707;
    L_0x0671:
        r0 = r7.thread;	 Catch:{ all -> 0x06f8 }
        if (r0 == 0) goto L_0x0707;	 Catch:{ all -> 0x06f8 }
    L_0x0675:
        r0 = r7.killed;	 Catch:{ all -> 0x06f8 }
        if (r0 != 0) goto L_0x0707;	 Catch:{ all -> 0x06f8 }
    L_0x0679:
        r0 = "ActivityManager";	 Catch:{ all -> 0x06f8 }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x06f8 }
        r1.<init>();	 Catch:{ all -> 0x06f8 }
        r2 = "Installing in existing process ";	 Catch:{ all -> 0x06f8 }
        r1.append(r2);	 Catch:{ all -> 0x06f8 }
        r1.append(r7);	 Catch:{ all -> 0x06f8 }
        r2 = ", pubProviders.size():";	 Catch:{ all -> 0x06f8 }
        r1.append(r2);	 Catch:{ all -> 0x06f8 }
        r2 = r7.pubProviders;	 Catch:{ all -> 0x06f8 }
        r2 = r2.size();	 Catch:{ all -> 0x06f8 }
        r1.append(r2);	 Catch:{ all -> 0x06f8 }
        r2 = ", pubProviders.containsKey(";	 Catch:{ all -> 0x06f8 }
        r1.append(r2);	 Catch:{ all -> 0x06f8 }
        r2 = r12.name;	 Catch:{ all -> 0x06f8 }
        r1.append(r2);	 Catch:{ all -> 0x06f8 }
        r2 = "):";	 Catch:{ all -> 0x06f8 }
        r1.append(r2);	 Catch:{ all -> 0x06f8 }
        r2 = r7.pubProviders;	 Catch:{ all -> 0x06f8 }
        r35 = r3;
        r3 = r12.name;	 Catch:{ all -> 0x06e8 }
        r2 = r2.containsKey(r3);	 Catch:{ all -> 0x06e8 }
        r1.append(r2);	 Catch:{ all -> 0x06e8 }
        r1 = r1.toString();	 Catch:{ all -> 0x06e8 }
        android.util.Slog.d(r0, r1);	 Catch:{ all -> 0x06e8 }
        r0 = r7.pubProviders;	 Catch:{ all -> 0x06e8 }
        r1 = r12.name;	 Catch:{ all -> 0x06e8 }
        r0 = r0.containsKey(r1);	 Catch:{ all -> 0x06e8 }
        if (r0 != 0) goto L_0x06d7;	 Catch:{ all -> 0x06e8 }
    L_0x06c3:
        r0 = "getContentProviderImpl: scheduling install";	 Catch:{ all -> 0x06e8 }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x06e8 }
        r0 = r7.pubProviders;	 Catch:{ all -> 0x06e8 }
        r1 = r12.name;	 Catch:{ all -> 0x06e8 }
        r0.put(r1, r8);	 Catch:{ all -> 0x06e8 }
        r0 = r7.thread;	 Catch:{ RemoteException -> 0x06d5 }
        r0.scheduleInstallProvider(r12);	 Catch:{ RemoteException -> 0x06d5 }
        goto L_0x06d6;
    L_0x06d5:
        r0 = move-exception;
    L_0x06d7:
        r28 = r5;
        r29 = r6;
        r40 = r8;
        r27 = r9;
        r41 = r10;
        r39 = r32;
        r1 = r35;
        r4 = 0;
        goto L_0x07c0;
    L_0x06e8:
        r0 = move-exception;
        r28 = r5;
        r29 = r6;
        r3 = r8;
        r27 = r9;
        r41 = r10;
        r39 = r32;
        r1 = r35;
        goto L_0x07f1;
    L_0x06f8:
        r0 = move-exception;
        r1 = r3;
        r28 = r5;
        r29 = r6;
        r3 = r8;
        r27 = r9;
        r41 = r10;
        r39 = r32;
        goto L_0x07f1;
    L_0x0707:
        r35 = r3;
        r0 = "ActivityManager";	 Catch:{ all -> 0x07d5 }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x07d5 }
        r1.<init>();	 Catch:{ all -> 0x07d5 }
        r2 = "Need to start process ";	 Catch:{ all -> 0x07d5 }
        r1.append(r2);	 Catch:{ all -> 0x07d5 }
        r2 = r12.processName;	 Catch:{ all -> 0x07d5 }
        r1.append(r2);	 Catch:{ all -> 0x07d5 }
        r2 = " for provider ";	 Catch:{ all -> 0x07d5 }
        r1.append(r2);	 Catch:{ all -> 0x07d5 }
        r1.append(r12);	 Catch:{ all -> 0x07d5 }
        r2 = ", callerApp: ";	 Catch:{ all -> 0x07d5 }
        r1.append(r2);	 Catch:{ all -> 0x07d5 }
        r1.append(r10);	 Catch:{ all -> 0x07d5 }
        r1 = r1.toString();	 Catch:{ all -> 0x07d5 }
        android.util.Slog.i(r0, r1);	 Catch:{ all -> 0x07d5 }
        r0 = "getContentProviderImpl: before start process";	 Catch:{ all -> 0x07d5 }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x07d5 }
        r2 = r12.processName;	 Catch:{ all -> 0x07d5 }
        r3 = r8.appInfo;	 Catch:{ all -> 0x07d5 }
        r24 = "content provider";	 Catch:{ all -> 0x07d5 }
        r1 = new android.content.ComponentName;	 Catch:{ all -> 0x07d5 }
        r0 = r12.applicationInfo;	 Catch:{ all -> 0x07d5 }
        r0 = r0.packageName;	 Catch:{ all -> 0x07d5 }
        r4 = r12.name;	 Catch:{ all -> 0x07d5 }
        r1.<init>(r0, r4);	 Catch:{ all -> 0x07d5 }
        r0 = 0;
        r25 = 0;
        r26 = 0;
        r27 = r1;
        r1 = r11;
        r37 = r35;
        r4 = 0;
        r28 = r5;
        r5 = 0;
        r29 = r6;
        r6 = r24;
        r24 = r7;
        r30 = 0;
        r7 = r27;
        r40 = r8;
        r39 = r32;
        r8 = r0;
        r27 = r9;
        r9 = r25;
        r41 = r10;
        r10 = r26;
        r0 = r1.startProcessLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10);	 Catch:{ all -> 0x07cf }
        r7 = r0;	 Catch:{ all -> 0x07cf }
        r0 = "getContentProviderImpl: after start process";	 Catch:{ all -> 0x07cf }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x07cf }
        if (r7 != 0) goto L_0x07bd;
    L_0x0778:
        r0 = "ActivityManager";	 Catch:{ all -> 0x07b7 }
        r1 = new java.lang.StringBuilder;	 Catch:{ all -> 0x07b7 }
        r1.<init>();	 Catch:{ all -> 0x07b7 }
        r2 = "Unable to launch app ";	 Catch:{ all -> 0x07b7 }
        r1.append(r2);	 Catch:{ all -> 0x07b7 }
        r2 = r12.applicationInfo;	 Catch:{ all -> 0x07b7 }
        r2 = r2.packageName;	 Catch:{ all -> 0x07b7 }
        r1.append(r2);	 Catch:{ all -> 0x07b7 }
        r2 = "/";	 Catch:{ all -> 0x07b7 }
        r1.append(r2);	 Catch:{ all -> 0x07b7 }
        r2 = r12.applicationInfo;	 Catch:{ all -> 0x07b7 }
        r2 = r2.uid;	 Catch:{ all -> 0x07b7 }
        r1.append(r2);	 Catch:{ all -> 0x07b7 }
        r2 = " for provider ";	 Catch:{ all -> 0x07b7 }
        r1.append(r2);	 Catch:{ all -> 0x07b7 }
        r1.append(r13);	 Catch:{ all -> 0x07b7 }
        r2 = ": process is bad";	 Catch:{ all -> 0x07b7 }
        r1.append(r2);	 Catch:{ all -> 0x07b7 }
        r1 = r1.toString();	 Catch:{ all -> 0x07b7 }
        android.util.Slog.w(r0, r1);	 Catch:{ all -> 0x07b7 }
        r1 = r37;
        android.os.Binder.restoreCallingIdentity(r1);	 Catch:{ all -> 0x0822 }
        monitor-exit(r43);	 Catch:{ all -> 0x0822 }
        resetPriorityAfterLockedSection();
        r4 = 0;
        return r4;
    L_0x07b7:
        r0 = move-exception;
        r1 = r37;
        r3 = r40;
        goto L_0x07f1;
    L_0x07bd:
        r1 = r37;
        r4 = 0;
    L_0x07c0:
        r3 = r40;
        r3.launchingApp = r7;	 Catch:{ all -> 0x07cd }
        r0 = r11.mLaunchingProviders;	 Catch:{ all -> 0x07cd }
        r0.add(r3);	 Catch:{ all -> 0x07cd }
        android.os.Binder.restoreCallingIdentity(r1);	 Catch:{ all -> 0x0822 }
        goto L_0x0813;	 Catch:{ all -> 0x0822 }
    L_0x07cd:
        r0 = move-exception;	 Catch:{ all -> 0x0822 }
        goto L_0x07f1;	 Catch:{ all -> 0x0822 }
    L_0x07cf:
        r0 = move-exception;	 Catch:{ all -> 0x0822 }
        r1 = r37;	 Catch:{ all -> 0x0822 }
        r3 = r40;	 Catch:{ all -> 0x0822 }
        goto L_0x07f1;	 Catch:{ all -> 0x0822 }
    L_0x07d5:
        r0 = move-exception;	 Catch:{ all -> 0x0822 }
        r28 = r5;	 Catch:{ all -> 0x0822 }
        r29 = r6;	 Catch:{ all -> 0x0822 }
        r3 = r8;	 Catch:{ all -> 0x0822 }
        r27 = r9;	 Catch:{ all -> 0x0822 }
        r41 = r10;	 Catch:{ all -> 0x0822 }
        r39 = r32;	 Catch:{ all -> 0x0822 }
        r1 = r35;	 Catch:{ all -> 0x0822 }
        goto L_0x07f1;	 Catch:{ all -> 0x0822 }
    L_0x07e4:
        r0 = move-exception;	 Catch:{ all -> 0x0822 }
        r1 = r3;	 Catch:{ all -> 0x0822 }
        r28 = r5;	 Catch:{ all -> 0x0822 }
        r29 = r6;	 Catch:{ all -> 0x0822 }
        r3 = r8;	 Catch:{ all -> 0x0822 }
        r27 = r9;	 Catch:{ all -> 0x0822 }
        r41 = r10;	 Catch:{ all -> 0x0822 }
        r39 = r32;	 Catch:{ all -> 0x0822 }
    L_0x07f1:
        android.os.Binder.restoreCallingIdentity(r1);	 Catch:{ all -> 0x0822 }
        throw r0;	 Catch:{ all -> 0x0822 }
    L_0x07f5:
        r0 = move-exception;
        r27 = r9;
        r2 = r12;
        r7 = r18;
        r8 = r21;
        r9 = r22;
        r1 = r27;
        r10 = r31;
        r5 = r47;
        goto L_0x0a35;
    L_0x0807:
        r28 = r5;
        r29 = r6;
        r4 = r7;
        r3 = r8;
        r27 = r9;
        r41 = r10;
        r39 = r32;
    L_0x0813:
        r0 = "getContentProviderImpl: updating data structures";	 Catch:{ all -> 0x0856 }
        r11.checkTime(r14, r0);	 Catch:{ all -> 0x0856 }
        if (r23 == 0) goto L_0x082e;
    L_0x081a:
        r0 = r11.mProviderMap;	 Catch:{ all -> 0x0822 }
        r1 = r34;	 Catch:{ all -> 0x0822 }
        r0.putProviderByClass(r1, r3);	 Catch:{ all -> 0x0822 }
        goto L_0x0830;
    L_0x0822:
        r0 = move-exception;
        r2 = r12;
        r7 = r18;
        r8 = r21;
        r9 = r22;
        r1 = r27;
        goto L_0x0446;
    L_0x082e:
        r1 = r34;
    L_0x0830:
        r0 = r11.mProviderMap;	 Catch:{ all -> 0x0856 }
        r0.putProviderByName(r13, r3);	 Catch:{ all -> 0x0856 }
        r8 = r14;
        r10 = r31;
        r6 = r41;
        r5 = r47;
        r0 = r11.incProviderCountLocked(r6, r3, r10, r5);	 Catch:{ all -> 0x084f }
        r7 = r0;
        if (r7 == 0) goto L_0x084a;
    L_0x0843:
        r2 = 1;
        r7.waiting = r2;	 Catch:{ all -> 0x0847 }
        goto L_0x084a;
    L_0x0847:
        r0 = move-exception;
        r2 = r12;
        goto L_0x0853;
    L_0x084a:
        r2 = r12;
        r1 = r27;
        goto L_0x08bf;
    L_0x084f:
        r0 = move-exception;
        r2 = r12;
        r7 = r18;
    L_0x0853:
        r8 = r21;
        goto L_0x088f;
    L_0x0856:
        r0 = move-exception;
        r10 = r31;
        r5 = r47;
        r2 = r12;
        r7 = r18;
        r8 = r21;
        r9 = r22;
        r1 = r27;
        goto L_0x0a35;
    L_0x0866:
        r0 = move-exception;
        r27 = r9;
        r10 = r31;
        r5 = r47;
        r2 = r12;
        r7 = r18;
        r8 = r21;
        r9 = r22;
        r1 = r27;
        goto L_0x0a35;
    L_0x0878:
        r39 = r8;
        r27 = r9;
        r3 = r30;
        r8 = r5;
        r6 = r10;
        r5 = r14;
        r10 = r15;
        r0 = new java.lang.SecurityException;	 Catch:{ all -> 0x088a }
        r1 = r39;	 Catch:{ all -> 0x088a }
        r0.<init>(r1);	 Catch:{ all -> 0x088a }
        throw r0;	 Catch:{ all -> 0x088a }
    L_0x088a:
        r0 = move-exception;
        r8 = r3;
        r2 = r12;
        r7 = r18;
    L_0x088f:
        r9 = r22;
        r1 = r27;
        goto L_0x0a35;
    L_0x0895:
        r0 = move-exception;
        r27 = r9;
        r5 = r14;
        r10 = r15;
        r3 = r30;
        r8 = r3;
        r2 = r12;
        r7 = r18;
        r9 = r22;
        r1 = r27;
        goto L_0x0a35;
    L_0x08a6:
        r0 = move-exception;
        r5 = r14;
        r10 = r15;
        r3 = r30;
        r8 = r3;
        r2 = r12;
        r7 = r18;
        r9 = r22;
        goto L_0x0a35;
    L_0x08b3:
        r8 = r5;
        r6 = r10;
        r5 = r14;
        r10 = r15;
        r3 = r30;
        r4 = 0;
        r21 = r3;
        r3 = r7;
        r7 = r18;
    L_0x08bf:
        r0 = "getContentProviderImpl: done!";	 Catch:{ all -> 0x0a25 }
        r11.checkTime(r8, r0);	 Catch:{ all -> 0x0a25 }
        r0 = r2.applicationInfo;	 Catch:{ all -> 0x0a25 }
        r0 = r0.uid;	 Catch:{ all -> 0x0a25 }
        r12 = android.os.Binder.getCallingUid();	 Catch:{ all -> 0x0a25 }
        r12 = android.os.UserHandle.getAppId(r12);	 Catch:{ all -> 0x0a25 }
        r11.grantEphemeralAccessLocked(r1, r4, r0, r12);	 Catch:{ all -> 0x0a25 }
        monitor-exit(r43);	 Catch:{ all -> 0x0a25 }
        resetPriorityAfterLockedSection();
        monitor-enter(r3);
    L_0x08d8:
        r0 = r3.provider;	 Catch:{ all -> 0x0a22 }
        if (r0 != 0) goto L_0x0a18;	 Catch:{ all -> 0x0a22 }
    L_0x08dc:
        r0 = r3.launchingApp;	 Catch:{ all -> 0x0a22 }
        if (r0 != 0) goto L_0x0941;	 Catch:{ all -> 0x0a22 }
    L_0x08e0:
        r0 = "ActivityManager";	 Catch:{ all -> 0x0a22 }
        r6 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0a22 }
        r6.<init>();	 Catch:{ all -> 0x0a22 }
        r8 = "Unable to launch app ";	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r8 = r2.applicationInfo;	 Catch:{ all -> 0x0a22 }
        r8 = r8.packageName;	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r8 = "/";	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r8 = r2.applicationInfo;	 Catch:{ all -> 0x0a22 }
        r8 = r8.uid;	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r8 = " for provider ";	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r6.append(r13);	 Catch:{ all -> 0x0a22 }
        r8 = ": launching app became null";	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r6 = r6.toString();	 Catch:{ all -> 0x0a22 }
        android.util.Slog.w(r0, r6);	 Catch:{ all -> 0x0a22 }
        r0 = 30036; // 0x7554 float:4.209E-41 double:1.484E-319;	 Catch:{ all -> 0x0a22 }
        r6 = 4;	 Catch:{ all -> 0x0a22 }
        r6 = new java.lang.Object[r6];	 Catch:{ all -> 0x0a22 }
        r8 = r2.applicationInfo;	 Catch:{ all -> 0x0a22 }
        r8 = r8.uid;	 Catch:{ all -> 0x0a22 }
        r8 = android.os.UserHandle.getUserId(r8);	 Catch:{ all -> 0x0a22 }
        r8 = java.lang.Integer.valueOf(r8);	 Catch:{ all -> 0x0a22 }
        r9 = 0;	 Catch:{ all -> 0x0a22 }
        r6[r9] = r8;	 Catch:{ all -> 0x0a22 }
        r8 = r2.applicationInfo;	 Catch:{ all -> 0x0a22 }
        r8 = r8.packageName;	 Catch:{ all -> 0x0a22 }
        r9 = 1;	 Catch:{ all -> 0x0a22 }
        r6[r9] = r8;	 Catch:{ all -> 0x0a22 }
        r8 = 2;	 Catch:{ all -> 0x0a22 }
        r9 = r2.applicationInfo;	 Catch:{ all -> 0x0a22 }
        r9 = r9.uid;	 Catch:{ all -> 0x0a22 }
        r9 = java.lang.Integer.valueOf(r9);	 Catch:{ all -> 0x0a22 }
        r6[r8] = r9;	 Catch:{ all -> 0x0a22 }
        r8 = 3;	 Catch:{ all -> 0x0a22 }
        r6[r8] = r13;	 Catch:{ all -> 0x0a22 }
        android.util.EventLog.writeEvent(r0, r6);	 Catch:{ all -> 0x0a22 }
        monitor-exit(r3);	 Catch:{ all -> 0x0a22 }
        return r4;
    L_0x0941:
        r0 = "ActivityManager_MU";	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6 = new java.lang.StringBuilder;	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6.<init>();	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r8 = "Waiting to start provider ";	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6.append(r8);	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6.append(r3);	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r8 = " launchingApp=";	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6.append(r8);	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r8 = r3.launchingApp;	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6.append(r8);	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r8 = " caller pid= ";	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6.append(r8);	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r8 = android.os.Binder.getCallingPid();	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6.append(r8);	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        r6 = r6.toString();	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        android.util.Slog.v(r0, r6);	 Catch:{ InterruptedException -> 0x09e1, all -> 0x09ae }
        if (r7 == 0) goto L_0x0975;
    L_0x096f:
        r6 = 1;
        r7.waiting = r6;	 Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }
        goto L_0x0976;	 Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }
    L_0x0973:
        r0 = move-exception;	 Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }
        goto L_0x09e3;	 Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }
    L_0x0975:
        r6 = 1;	 Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }
    L_0x0976:
        r3.wait();	 Catch:{ InterruptedException -> 0x0973, all -> 0x09ae }
        if (r7 == 0) goto L_0x097e;
    L_0x097b:
        r8 = 0;
        r7.waiting = r8;	 Catch:{ all -> 0x0a22 }
    L_0x097e:
        r0 = "ActivityManager";	 Catch:{ all -> 0x0a22 }
        r8 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0a22 }
        r8.<init>();	 Catch:{ all -> 0x0a22 }
        r9 = "Successfully start provider ";	 Catch:{ all -> 0x0a22 }
        r8.append(r9);	 Catch:{ all -> 0x0a22 }
        r8.append(r3);	 Catch:{ all -> 0x0a22 }
        r9 = " launchingApp=";	 Catch:{ all -> 0x0a22 }
        r8.append(r9);	 Catch:{ all -> 0x0a22 }
        r9 = r3.launchingApp;	 Catch:{ all -> 0x0a22 }
        r8.append(r9);	 Catch:{ all -> 0x0a22 }
        r9 = " caller pid= ";	 Catch:{ all -> 0x0a22 }
        r8.append(r9);	 Catch:{ all -> 0x0a22 }
        r9 = android.os.Binder.getCallingPid();	 Catch:{ all -> 0x0a22 }
        r8.append(r9);	 Catch:{ all -> 0x0a22 }
        r8 = r8.toString();	 Catch:{ all -> 0x0a22 }
        android.util.Slog.v(r0, r8);	 Catch:{ all -> 0x0a22 }
        r8 = 0;	 Catch:{ all -> 0x0a22 }
        goto L_0x08d8;	 Catch:{ all -> 0x0a22 }
    L_0x09ae:
        r0 = move-exception;	 Catch:{ all -> 0x0a22 }
        if (r7 == 0) goto L_0x09b4;	 Catch:{ all -> 0x0a22 }
    L_0x09b1:
        r4 = 0;	 Catch:{ all -> 0x0a22 }
        r7.waiting = r4;	 Catch:{ all -> 0x0a22 }
    L_0x09b4:
        r4 = "ActivityManager";	 Catch:{ all -> 0x0a22 }
        r6 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0a22 }
        r6.<init>();	 Catch:{ all -> 0x0a22 }
        r8 = "Successfully start provider ";	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r6.append(r3);	 Catch:{ all -> 0x0a22 }
        r8 = " launchingApp=";	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r8 = r3.launchingApp;	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r8 = " caller pid= ";	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r8 = android.os.Binder.getCallingPid();	 Catch:{ all -> 0x0a22 }
        r6.append(r8);	 Catch:{ all -> 0x0a22 }
        r6 = r6.toString();	 Catch:{ all -> 0x0a22 }
        android.util.Slog.v(r4, r6);	 Catch:{ all -> 0x0a22 }
        throw r0;	 Catch:{ all -> 0x0a22 }
    L_0x09e1:
        r0 = move-exception;	 Catch:{ all -> 0x0a22 }
        r6 = 1;	 Catch:{ all -> 0x0a22 }
    L_0x09e3:
        if (r7 == 0) goto L_0x09e9;	 Catch:{ all -> 0x0a22 }
    L_0x09e5:
        r8 = 0;	 Catch:{ all -> 0x0a22 }
        r7.waiting = r8;	 Catch:{ all -> 0x0a22 }
        goto L_0x09ea;	 Catch:{ all -> 0x0a22 }
    L_0x09e9:
        r8 = 0;	 Catch:{ all -> 0x0a22 }
    L_0x09ea:
        r0 = "ActivityManager";	 Catch:{ all -> 0x0a22 }
        r9 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0a22 }
        r9.<init>();	 Catch:{ all -> 0x0a22 }
        r12 = "Successfully start provider ";	 Catch:{ all -> 0x0a22 }
        r9.append(r12);	 Catch:{ all -> 0x0a22 }
        r9.append(r3);	 Catch:{ all -> 0x0a22 }
        r12 = " launchingApp=";	 Catch:{ all -> 0x0a22 }
        r9.append(r12);	 Catch:{ all -> 0x0a22 }
        r12 = r3.launchingApp;	 Catch:{ all -> 0x0a22 }
        r9.append(r12);	 Catch:{ all -> 0x0a22 }
        r12 = " caller pid= ";	 Catch:{ all -> 0x0a22 }
        r9.append(r12);	 Catch:{ all -> 0x0a22 }
        r12 = android.os.Binder.getCallingPid();	 Catch:{ all -> 0x0a22 }
        r9.append(r12);	 Catch:{ all -> 0x0a22 }
        r9 = r9.toString();	 Catch:{ all -> 0x0a22 }
        android.util.Slog.v(r0, r9);	 Catch:{ all -> 0x0a22 }
        goto L_0x08d8;	 Catch:{ all -> 0x0a22 }
    L_0x0a18:
        monitor-exit(r3);	 Catch:{ all -> 0x0a22 }
        if (r3 == 0) goto L_0x0a20;
    L_0x0a1b:
        r9 = r3.newHolder(r7);
        goto L_0x0a21;
    L_0x0a20:
        r9 = r4;
    L_0x0a21:
        return r9;
    L_0x0a22:
        r0 = move-exception;
        monitor-exit(r3);	 Catch:{ all -> 0x0a22 }
        throw r0;
    L_0x0a25:
        r0 = move-exception;
        r8 = r21;
    L_0x0a28:
        r9 = r22;
        goto L_0x0a35;
    L_0x0a2b:
        r0 = move-exception;
        r18 = r7;
        r3 = r8;
        r22 = r9;
        r5 = r14;
        r10 = r15;
        r1 = r48;
    L_0x0a35:
        monitor-exit(r43);	 Catch:{ all -> 0x0a3a }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x0a3a:
        r0 = move-exception;
        goto L_0x0a35;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.getContentProviderImpl(android.app.IApplicationThread, java.lang.String, android.os.IBinder, boolean, int):android.app.ContentProviderHolder");
    }

    private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi, ProcessRecord r, int userId) {
        boolean callerForeground = true;
        if (!getPackageManagerInternalLocked().isPermissionsReviewRequired(cpi.packageName, userId)) {
            return true;
        }
        if (r != null && r.setSchedGroup == 0) {
            callerForeground = false;
        }
        if (callerForeground) {
            final Intent intent = new Intent("android.intent.action.REVIEW_PERMISSIONS");
            intent.addFlags(276824064);
            intent.putExtra("android.intent.extra.PACKAGE_NAME", cpi.packageName);
            if (ActivityManagerDebugConfig.DEBUG_PERMISSIONS_REVIEW) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("u");
                stringBuilder.append(userId);
                stringBuilder.append(" Launching permission review for package ");
                stringBuilder.append(cpi.packageName);
                Slog.i(str, stringBuilder.toString());
            }
            final UserHandle userHandle = new UserHandle(userId);
            this.mHandler.post(new Runnable() {
                public void run() {
                    ActivityManagerService.this.mContext.startActivityAsUser(intent, userHandle);
                }
            });
            return false;
        }
        String str2 = TAG;
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append("u");
        stringBuilder2.append(userId);
        stringBuilder2.append(" Instantiating a provider in package");
        stringBuilder2.append(cpi.packageName);
        stringBuilder2.append(" requires a permissions review");
        Slog.w(str2, stringBuilder2.toString());
        return false;
    }

    IPackageManager getPackageManager() {
        return AppGlobals.getPackageManager();
    }

    ActivityStartController getActivityStartController() {
        return this.mActivityStartController;
    }

    LockTaskController getLockTaskController() {
        return this.mLockTaskController;
    }

    ClientLifecycleManager getLifecycleManager() {
        return this.mLifecycleManager;
    }

    PackageManagerInternal getPackageManagerInternalLocked() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (PackageManagerInternal) LocalServices.getService(PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    public ContentProviderHolder getContentProvider(IApplicationThread caller, String name, int userId, boolean stable) {
        enforceNotIsolatedCaller("getContentProvider");
        if (caller != null) {
            return getContentProviderImpl(caller, name, null, stable, userId);
        }
        String msg = new StringBuilder();
        msg.append("null IApplicationThread when getting content provider ");
        msg.append(name);
        msg = msg.toString();
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public ContentProviderHolder getContentProviderExternal(String name, int userId, IBinder token) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call getContentProviderExternal()");
        return getContentProviderExternalUnchecked(name, token, this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "getContentProvider", null));
    }

    private ContentProviderHolder getContentProviderExternalUnchecked(String name, IBinder token, int userId) {
        return getContentProviderImpl(null, name, token, true, userId);
    }

    public void removeContentProvider(IBinder connection, boolean stable) {
        enforceNotIsolatedCaller("removeContentProvider");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ContentProviderConnection conn = (ContentProviderConnection) connection;
                if (conn != null) {
                    if (decProviderCountLocked(conn, null, null, stable)) {
                        updateOomAdjLocked();
                    }
                } else {
                    throw new NullPointerException("connection is null");
                }
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (ClassCastException e) {
            String msg = new StringBuilder();
            msg.append("removeContentProvider: ");
            msg.append(connection);
            msg.append(" not a ContentProviderConnection");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void removeContentProviderExternal(String name, IBinder token) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call removeContentProviderExternal()");
        int userId = UserHandle.getCallingUserId();
        long ident = Binder.clearCallingIdentity();
        try {
            removeContentProviderExternalUnchecked(name, token, userId);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    /* JADX WARNING: Missing block: B:18:0x008e, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:19:0x0091, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected void removeContentProviderExternalUnchecked(String name, IBinder token, int userId) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ContentProviderRecord cpr = this.mProviderMap.getProviderByName(name, userId);
                if (cpr != null) {
                    ContentProviderRecord localCpr = this.mProviderMap.getProviderByClass(new ComponentName(cpr.info.packageName, cpr.info.name), userId);
                    String str;
                    StringBuilder stringBuilder;
                    if (!localCpr.hasExternalProcessHandles()) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Attmpt to remove content provider: ");
                        stringBuilder.append(localCpr);
                        stringBuilder.append(" with no external references.");
                        Slog.e(str, stringBuilder.toString());
                    } else if (localCpr.removeExternalProcessHandleLocked(token)) {
                        updateOomAdjLocked();
                    } else {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Attmpt to remove content provider ");
                        stringBuilder.append(localCpr);
                        stringBuilder.append(" with no external reference for token: ");
                        stringBuilder.append(token);
                        stringBuilder.append(".");
                        Slog.e(str, stringBuilder.toString());
                    }
                } else if (ActivityManagerDebugConfig.DEBUG_ALL) {
                    String str2 = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append(name);
                    stringBuilder2.append(" content provider not found in providers list");
                    Slog.v(str2, stringBuilder2.toString());
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void publishContentProviders(IApplicationThread caller, List<ContentProviderHolder> providers) {
        Throwable th;
        List<ContentProviderHolder> list = providers;
        if (list != null) {
            enforceNotIsolatedCaller("publishContentProviders");
            synchronized (this) {
                try {
                    StringBuilder stringBuilder;
                    boostPriorityForLockedSection();
                    ProcessRecord r = getRecordForAppLocked(caller);
                    if (ActivityManagerDebugConfig.DEBUG_MU) {
                        String str = TAG_MU;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("ProcessRecord uid = ");
                        stringBuilder.append(r.uid);
                        Slog.v(str, stringBuilder.toString());
                    }
                    if (r != null) {
                        long origId = Binder.clearCallingIdentity();
                        int N = providers.size();
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("publishContentProviders app: ");
                        stringBuilder2.append(r);
                        stringBuilder2.append(", providers.size: ");
                        stringBuilder2.append(N);
                        Flog.i(103, stringBuilder2.toString());
                        for (int i = 0; i < N; i++) {
                            ContentProviderHolder src = (ContentProviderHolder) list.get(i);
                            if (!(src == null || src.info == null || src.provider == null)) {
                                ContentProviderRecord dst = (ContentProviderRecord) r.pubProviders.get(src.info.name);
                                if (dst == null) {
                                    continue;
                                } else {
                                    if (ActivityManagerDebugConfig.DEBUG_MU) {
                                        String str2 = TAG_MU;
                                        StringBuilder stringBuilder3 = new StringBuilder();
                                        stringBuilder3.append("ContentProviderRecord uid = ");
                                        stringBuilder3.append(dst.uid);
                                        Slog.v(str2, stringBuilder3.toString());
                                    }
                                    this.mProviderMap.putProviderByClass(new ComponentName(dst.info.packageName, dst.info.name), dst);
                                    String[] names = dst.info.authority.split(";");
                                    for (String putProviderByName : names) {
                                        this.mProviderMap.putProviderByName(putProviderByName, dst);
                                    }
                                    boolean wasInLaunchingProviders = false;
                                    int launchingCount = this.mLaunchingProviders.size();
                                    int j = 0;
                                    while (j < launchingCount) {
                                        if (this.mLaunchingProviders.get(j) == dst) {
                                            this.mLaunchingProviders.remove(j);
                                            j--;
                                            launchingCount--;
                                            wasInLaunchingProviders = true;
                                        }
                                        j++;
                                    }
                                    if (wasInLaunchingProviders) {
                                        this.mHandler.removeMessages(57, r);
                                    }
                                    synchronized (dst) {
                                        dst.provider = src.provider;
                                        dst.proc = r;
                                        dst.notifyAll();
                                    }
                                    updateOomAdjLocked(r, true);
                                    maybeUpdateProviderUsageStatsLocked(r, src.info.packageName, src.info.authority);
                                }
                            }
                        }
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Unable to find app for caller ");
                    try {
                        stringBuilder.append(caller);
                        stringBuilder.append(" (pid=");
                        stringBuilder.append(Binder.getCallingPid());
                        stringBuilder.append(") when publishing content providers");
                        throw new SecurityException(stringBuilder.toString());
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    IApplicationThread iApplicationThread = caller;
                }
            }
        }
    }

    public boolean refContentProvider(IBinder connection, int stable, int unstable) {
        try {
            ContentProviderConnection conn = (ContentProviderConnection) connection;
            if (conn != null) {
                boolean z;
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (stable > 0) {
                            conn.numStableIncs += stable;
                        }
                        stable += conn.stableCount;
                        StringBuilder stringBuilder;
                        if (stable >= 0) {
                            if (unstable > 0) {
                                conn.numUnstableIncs += unstable;
                            }
                            unstable += conn.unstableCount;
                            if (unstable < 0) {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("unstableCount < 0: ");
                                stringBuilder.append(unstable);
                                throw new IllegalStateException(stringBuilder.toString());
                            } else if (stable + unstable > 0) {
                                conn.stableCount = stable;
                                conn.unstableCount = unstable;
                                z = conn.dead ^ 1;
                            } else {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("ref counts can't go to zero here: stable=");
                                stringBuilder.append(stable);
                                stringBuilder.append(" unstable=");
                                stringBuilder.append(unstable);
                                throw new IllegalStateException(stringBuilder.toString());
                            }
                        }
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("stableCount < 0: ");
                        stringBuilder.append(stable);
                        throw new IllegalStateException(stringBuilder.toString());
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                return z;
            }
            throw new NullPointerException("connection is null");
        } catch (ClassCastException e) {
            String msg = new StringBuilder();
            msg.append("refContentProvider: ");
            msg.append(connection);
            msg.append(" not a ContentProviderConnection");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        }
    }

    /* JADX WARNING: Missing block: B:45:0x00b2, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:46:0x00b5, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void unstableProviderDied(IBinder connection) {
        try {
            IContentProvider provider;
            ContentProviderConnection conn = (ContentProviderConnection) connection;
            if (conn != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        provider = conn.provider.provider;
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
            } else {
                throw new NullPointerException("connection is null");
            }
            return;
            if (provider != null) {
                if (provider.asBinder().pingBinder()) {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            String str = TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("unstableProviderDied: caller ");
                            stringBuilder.append(Binder.getCallingUid());
                            stringBuilder.append(" says ");
                            stringBuilder.append(conn);
                            stringBuilder.append(" died, but we don't agree");
                            Slog.w(str, stringBuilder.toString());
                        } finally {
                            while (true) {
                            }
                            resetPriorityAfterLockedSection();
                        }
                    }
                    return;
                }
                synchronized (this) {
                    long ident;
                    try {
                        boostPriorityForLockedSection();
                        if (conn.provider.provider != provider) {
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        ProcessRecord proc = conn.provider.proc;
                        if (proc == null || proc.thread == null) {
                        } else {
                            String str2 = TAG;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("Process ");
                            stringBuilder2.append(proc.processName);
                            stringBuilder2.append(" (pid ");
                            stringBuilder2.append(proc.pid);
                            stringBuilder2.append(") early provider death");
                            reportUidInfoMessageLocked(str2, stringBuilder2.toString(), proc.info.uid);
                            ident = Binder.clearCallingIdentity();
                            appDiedLocked(proc);
                            Binder.restoreCallingIdentity(ident);
                            resetPriorityAfterLockedSection();
                        }
                    } catch (Throwable th) {
                        while (true) {
                            resetPriorityAfterLockedSection();
                        }
                    }
                }
            }
        } catch (ClassCastException e) {
            String msg = new StringBuilder();
            msg.append("refContentProvider: ");
            msg.append(connection);
            msg.append(" not a ContentProviderConnection");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        }
    }

    public void appNotRespondingViaProvider(IBinder connection) {
        enforceCallingPermission("android.permission.REMOVE_TASKS", "appNotRespondingViaProvider()");
        ContentProviderConnection conn = (ContentProviderConnection) connection;
        if (conn == null) {
            Slog.w(TAG, "ContentProviderConnection is null");
            return;
        }
        final ProcessRecord host = conn.provider.proc;
        if (host == null) {
            Slog.w(TAG, "Failed to find hosting ProcessRecord");
        } else {
            this.mHandler.post(new Runnable() {
                public void run() {
                    ActivityManagerService.this.mAppErrors.appNotResponding(host, null, null, false, "ContentProvider not responding");
                }
            });
        }
    }

    public final void installSystemProviders() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                List<ProviderInfo> providers = generateApplicationProvidersLocked((ProcessRecord) this.mProcessNames.get("system", 1000));
                if (providers != null) {
                    for (int i = providers.size() - 1; i >= 0; i--) {
                        ProviderInfo pi = (ProviderInfo) providers.get(i);
                        if ((pi.applicationInfo.flags & 1) == 0) {
                            String str = TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("Not installing system proc provider ");
                            stringBuilder.append(pi.name);
                            stringBuilder.append(": not system .apk");
                            Slog.w(str, stringBuilder.toString());
                            providers.remove(i);
                        }
                    }
                }
                List<ProviderInfo> providers2 = providers;
                if (providers2 != null) {
                    this.mSystemThread.installSystemProviders(providers2);
                }
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        this.mSystemProvidersInstalled = true;
                        Slog.i(TAG, "installSystemProviders success");
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
                this.mConstants.start(this.mContext.getContentResolver());
                this.mCoreSettingsObserver = new CoreSettingsObserver(this);
                this.mFontScaleSettingObserver = new FontScaleSettingObserver();
                this.mDevelopmentSettingsObserver = new DevelopmentSettingsObserver();
                GlobalSettingsToPropertiesMapper.start(this.mContext.getContentResolver());
                RescueParty.onSettingsProviderPublished(this.mContext);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        this.mConstants.start(this.mContext.getContentResolver());
        this.mCoreSettingsObserver = new CoreSettingsObserver(this);
        this.mFontScaleSettingObserver = new FontScaleSettingObserver();
        this.mDevelopmentSettingsObserver = new DevelopmentSettingsObserver();
        GlobalSettingsToPropertiesMapper.start(this.mContext.getContentResolver());
        RescueParty.onSettingsProviderPublished(this.mContext);
    }

    void startPersistentApps(int matchFlags) {
        if (this.mFactoryTest != 1) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (ApplicationInfo app : AppGlobals.getPackageManager().getPersistentApplications(1024 | matchFlags).getList()) {
                        if (!PackageManagerService.PLATFORM_PACKAGE_NAME.equals(app.packageName)) {
                            addAppLocked(app, null, false, null);
                        }
                    }
                } catch (RemoteException e) {
                }
                try {
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        }
    }

    void installEncryptionUnawareProviders(int userId) {
        Throwable th;
        int i = userId;
        int matchFlags = 262152;
        synchronized (this) {
            int matchFlags2;
            try {
                boostPriorityForLockedSection();
                int NP = this.mProcessNames.getMap().size();
                int ip = 0;
                while (true) {
                    int ip2 = ip;
                    if (ip2 < NP) {
                        int NP2;
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip2);
                        int NA = apps.size();
                        ip = 0;
                        while (true) {
                            int ia = ip;
                            if (ia >= NA) {
                                break;
                            }
                            ProcessRecord app = (ProcessRecord) apps.valueAt(ia);
                            if (app.userId == i && app.thread != null && !app.unlocked) {
                                int NG = app.pkgList.size();
                                ip = 0;
                                while (true) {
                                    int ig = ip;
                                    if (ig >= NG) {
                                        break;
                                    }
                                    SparseArray<ProcessRecord> apps2;
                                    int NA2;
                                    try {
                                        String pkgName = (String) app.pkgList.keyAt(ig);
                                        PackageInfo pkgInfo = AppGlobals.getPackageManager().getPackageInfo(pkgName, 262152, i);
                                        if (!(pkgInfo == null || ArrayUtils.isEmpty(pkgInfo.providers))) {
                                            ProviderInfo[] providerInfoArr = pkgInfo.providers;
                                            int length = providerInfoArr.length;
                                            int i2 = 0;
                                            while (i2 < length) {
                                                String pkgName2 = pkgName;
                                                ProviderInfo pi = providerInfoArr[i2];
                                                matchFlags2 = matchFlags;
                                                try {
                                                    boolean processMatch;
                                                    boolean z;
                                                    boolean userMatch;
                                                    String str;
                                                    StringBuilder stringBuilder;
                                                    if (!Objects.equals(pi.processName, app.processName)) {
                                                        try {
                                                            if (!pi.multiprocess) {
                                                                processMatch = false;
                                                                NP2 = NP;
                                                                apps2 = apps;
                                                                try {
                                                                    NA2 = NA;
                                                                    try {
                                                                        z = isSingleton(pi.processName, pi.applicationInfo, pi.name, pi.flags) || app.userId == 0;
                                                                        userMatch = z;
                                                                        if (processMatch || !userMatch) {
                                                                            str = TAG;
                                                                            stringBuilder = new StringBuilder();
                                                                            stringBuilder.append("Skipping ");
                                                                            stringBuilder.append(pi);
                                                                            Log.v(str, stringBuilder.toString());
                                                                        } else {
                                                                            str = TAG;
                                                                            stringBuilder = new StringBuilder();
                                                                            stringBuilder.append("Installing ");
                                                                            stringBuilder.append(pi);
                                                                            Log.v(str, stringBuilder.toString());
                                                                            app.thread.scheduleInstallProvider(pi);
                                                                        }
                                                                        i2++;
                                                                        pkgName = pkgName2;
                                                                        matchFlags = matchFlags2;
                                                                        NP = NP2;
                                                                        apps = apps2;
                                                                        NA = NA2;
                                                                        i = userId;
                                                                    } catch (RemoteException e) {
                                                                    }
                                                                } catch (RemoteException e2) {
                                                                    NA2 = NA;
                                                                }
                                                            }
                                                        } catch (RemoteException e3) {
                                                            NP2 = NP;
                                                            apps2 = apps;
                                                            NA2 = NA;
                                                        }
                                                    }
                                                    processMatch = true;
                                                    NP2 = NP;
                                                    try {
                                                        apps2 = apps;
                                                        NA2 = NA;
                                                        if (isSingleton(pi.processName, pi.applicationInfo, pi.name, pi.flags)) {
                                                        }
                                                        userMatch = z;
                                                        if (processMatch) {
                                                        }
                                                        str = TAG;
                                                        stringBuilder = new StringBuilder();
                                                        stringBuilder.append("Skipping ");
                                                        stringBuilder.append(pi);
                                                        Log.v(str, stringBuilder.toString());
                                                        i2++;
                                                        pkgName = pkgName2;
                                                        matchFlags = matchFlags2;
                                                        NP = NP2;
                                                        apps = apps2;
                                                        NA = NA2;
                                                        i = userId;
                                                    } catch (RemoteException e4) {
                                                        apps2 = apps;
                                                        NA2 = NA;
                                                    }
                                                } catch (RemoteException e5) {
                                                    NP2 = NP;
                                                    apps2 = apps;
                                                    NA2 = NA;
                                                }
                                            }
                                        }
                                        matchFlags2 = matchFlags;
                                        NP2 = NP;
                                        apps2 = apps;
                                        NA2 = NA;
                                    } catch (RemoteException e6) {
                                        matchFlags2 = matchFlags;
                                        NP2 = NP;
                                        apps2 = apps;
                                        NA2 = NA;
                                    }
                                    ip = ig + 1;
                                    matchFlags = matchFlags2;
                                    NP = NP2;
                                    apps = apps2;
                                    NA = NA2;
                                    i = userId;
                                }
                            }
                            ip = ia + 1;
                            matchFlags = matchFlags;
                            NP = NP;
                            apps = apps;
                            NA = NA;
                            i = userId;
                        }
                        NP2 = NP;
                        ip = ip2 + 1;
                        i = userId;
                    } else {
                        try {
                            resetPriorityAfterLockedSection();
                            return;
                        } catch (Throwable th2) {
                            th = th2;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
            } catch (Throwable th3) {
                th = th3;
                matchFlags2 = 262152;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public String getProviderMimeType(Uri uri, int userId) {
        StringBuilder stringBuilder;
        enforceNotIsolatedCaller("getProviderMimeType");
        String name = uri.getAuthority();
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        long ident = 0;
        boolean clearedIdentity = false;
        userId = this.mUserController.unsafeConvertIncomingUser(userId);
        if (canClearIdentity(callingPid, callingUid, userId)) {
            clearedIdentity = true;
            ident = Binder.clearCallingIdentity();
        }
        ContentProviderHolder holder = null;
        String type;
        try {
            holder = getContentProviderExternalUnchecked(name, new AwareAppStartBinder(callingPid, callingUid, null), userId);
            if (holder != null) {
                type = holder.provider.getType(uri);
                if (!clearedIdentity) {
                    ident = Binder.clearCallingIdentity();
                }
                if (holder != null) {
                    try {
                        removeContentProviderExternalUnchecked(name, null, userId);
                    } catch (Throwable th) {
                        Binder.restoreCallingIdentity(ident);
                        throw th;
                    }
                }
                Binder.restoreCallingIdentity(ident);
                return type;
            }
            if (!clearedIdentity) {
                ident = Binder.clearCallingIdentity();
            }
            if (holder != null) {
                try {
                    removeContentProviderExternalUnchecked(name, null, userId);
                } catch (Throwable th2) {
                    Binder.restoreCallingIdentity(ident);
                    throw th2;
                }
            }
            Binder.restoreCallingIdentity(ident);
            return null;
        } catch (RemoteException e) {
            type = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Content provider dead retrieving ");
            stringBuilder.append(uri);
            Log.w(type, stringBuilder.toString(), e);
            if (!clearedIdentity) {
                ident = Binder.clearCallingIdentity();
            }
            if (holder != null) {
                removeContentProviderExternalUnchecked(name, null, userId);
            }
            Binder.restoreCallingIdentity(ident);
            return null;
        } catch (Exception e2) {
            try {
                type = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Exception while determining type of ");
                stringBuilder.append(uri);
                Log.w(type, stringBuilder.toString(), e2);
                if (!clearedIdentity) {
                    ident = Binder.clearCallingIdentity();
                }
                if (holder != null) {
                    removeContentProviderExternalUnchecked(name, null, userId);
                }
                Binder.restoreCallingIdentity(ident);
                return null;
            } catch (Throwable th22) {
                Binder.restoreCallingIdentity(ident);
                throw th22;
            }
        } catch (Throwable th222) {
            Binder.restoreCallingIdentity(ident);
            throw th222;
        }
    }

    private boolean canClearIdentity(int callingPid, int callingUid, int userId) {
        if (UserHandle.getUserId(callingUid) == userId) {
            return true;
        }
        if (checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", callingPid, callingUid, -1, true) != 0) {
            if (checkComponentPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingPid, callingUid, -1, true) != 0) {
                return false;
            }
        }
        return true;
    }

    @GuardedBy("this")
    final ProcessRecord newProcessRecordLocked(ApplicationInfo info, String customProcess, boolean isolated, int isolatedUid) {
        ApplicationInfo applicationInfo = info;
        String proc = customProcess != null ? customProcess : applicationInfo.processName;
        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
        int userId = UserHandle.getUserId(applicationInfo.uid);
        if (this.mHwAMSEx.shouldPreventStartProcess(proc, userId)) {
            return null;
        }
        int uid = applicationInfo.uid;
        if (isolated) {
            if (isolatedUid == 0) {
                int stepsLeft = 1000;
                do {
                    if (this.mNextIsolatedProcessUid < 99000 || this.mNextIsolatedProcessUid > 99999) {
                        this.mNextIsolatedProcessUid = 99000;
                    }
                    uid = UserHandle.getUid(userId, this.mNextIsolatedProcessUid);
                    this.mNextIsolatedProcessUid++;
                    if (this.mIsolatedProcesses.indexOfKey(uid) >= 0) {
                        stepsLeft--;
                    }
                } while (stepsLeft > 0);
                return null;
            }
            uid = isolatedUid;
            getPackageManagerInternalLocked().addIsolatedUid(uid, applicationInfo.uid);
            this.mBatteryStatsService.addIsolatedUid(uid, applicationInfo.uid);
        }
        ProcessRecord r = new ProcessRecord(this, stats, applicationInfo, proc, uid);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("new Process app=");
        stringBuilder.append(r);
        stringBuilder.append(", name: ");
        stringBuilder.append(r.processName);
        Flog.i(100, stringBuilder.toString());
        if (!this.mBooted && !this.mBooting && userId == 0 && (applicationInfo.flags & 9) == 9) {
            r.curSchedGroup = 2;
            r.setSchedGroup = 2;
            r.persistent = true;
            r.maxAdj = -800;
        }
        if (isolated && isolatedUid != 0) {
            r.maxAdj = -700;
        }
        addProcessNameLocked(r);
        return r;
    }

    private boolean uidOnBackgroundWhitelist(int uid) {
        int appId = UserHandle.getAppId(uid);
        for (int i : this.mBackgroundAppIdWhitelist) {
            if (appId == i) {
                return true;
            }
        }
        return false;
    }

    public boolean isBackgroundRestricted(String packageName) {
        int callingUid = Binder.getCallingUid();
        try {
            if (AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, UserHandle.getUserId(callingUid)) != callingUid) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Uid ");
                stringBuilder.append(callingUid);
                stringBuilder.append(" cannot query restriction state for package ");
                stringBuilder.append(packageName);
                throw new IllegalArgumentException(stringBuilder.toString());
            }
        } catch (RemoteException e) {
        }
        return isBackgroundRestrictedNoCheck(callingUid, packageName);
    }

    boolean isBackgroundRestrictedNoCheck(int uid, String packageName) {
        return this.mAppOpsService.checkOperation(70, uid, packageName) != 0;
    }

    public void backgroundWhitelistUid(int uid) {
        if (Binder.getCallingUid() == 1000) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Adding uid ");
                stringBuilder.append(uid);
                stringBuilder.append(" to bg uid whitelist");
                Slog.i(str, stringBuilder.toString());
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int N = this.mBackgroundAppIdWhitelist.length;
                    int[] newList = new int[(N + 1)];
                    System.arraycopy(this.mBackgroundAppIdWhitelist, 0, newList, 0, N);
                    newList[N] = UserHandle.getAppId(uid);
                    this.mBackgroundAppIdWhitelist = newList;
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Only the OS may call backgroundWhitelistUid()");
    }

    @GuardedBy("this")
    final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride) {
        return addAppLocked(info, customProcess, isolated, false, abiOverride);
    }

    final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, boolean disableHiddenApiChecks, String abiOverride) {
        ProcessRecord app;
        if (isolated) {
            app = null;
        } else {
            app = getProcessRecordLocked(customProcess != null ? customProcess : info.processName, info.uid, true);
        }
        if (app == null) {
            app = newProcessRecordLocked(info, customProcess, isolated, 0);
            updateLruProcessLocked(app, false, null);
            updateOomAdjLocked();
        }
        try {
            AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, UserHandle.getUserId(app.uid));
        } catch (RemoteException e) {
        } catch (IllegalArgumentException e2) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Failed trying to unstop package ");
            stringBuilder.append(info.packageName);
            stringBuilder.append(": ");
            stringBuilder.append(e2);
            Slog.w(str, stringBuilder.toString());
        }
        if ((info.flags & 9) == 9) {
            app.persistent = true;
            app.maxAdj = -800;
        }
        if (app.thread == null && this.mPersistentStartingProcesses.indexOf(app) < 0) {
            String str2;
            this.mPersistentStartingProcesses.add(app);
            String str3 = "added application";
            if (customProcess != null) {
                str2 = customProcess;
            } else {
                str2 = app.processName;
            }
            startProcessLocked(app, str3, str2, disableHiddenApiChecks, abiOverride);
        } else if (!(this.mPersistentReady || app.thread == null || !"com.android.phone".equals(app.processName))) {
            Slog.i(TAG, " phone process is running before persist ready");
            Intent intent = new Intent();
            intent.setPackage("com.android.phone");
            intent.setAction("com.android.phone.action.FAKE_BOOT_SERVICE");
            this.mContext.startService(intent);
        }
        return app;
    }

    public void unhandledBack() {
        enforceCallingPermission("android.permission.FORCE_BACK", "unhandledBack()");
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                getFocusedStack().unhandledBackLocked();
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public ParcelFileDescriptor openContentUri(String uriString) throws RemoteException {
        enforceNotIsolatedCaller("openContentUri");
        int userId = UserHandle.getCallingUserId();
        Uri uri = Uri.parse(uriString);
        String name = uri.getAuthority();
        ContentProviderHolder cph = getContentProviderExternalUnchecked(name, null, userId);
        if (cph != null) {
            ParcelFileDescriptor pfd;
            Binder token = new Binder();
            sCallerIdentity.set(new Identity(token, Binder.getCallingPid(), Binder.getCallingUid()));
            try {
                pfd = cph.provider.openFile(null, uri, "r", null, token);
            } catch (FileNotFoundException e) {
                return null;
            } finally {
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, null, userId);
                return null;
            }
            return pfd;
        }
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Failed to get provider for authority '");
        stringBuilder.append(name);
        stringBuilder.append("'");
        Slog.d(str, stringBuilder.toString());
        return null;
    }

    boolean isSleepingOrShuttingDownLocked() {
        return isSleepingLocked() || this.mShuttingDown;
    }

    boolean isShuttingDownLocked() {
        return this.mShuttingDown;
    }

    boolean isSleepingLocked() {
        return this.mSleeping;
    }

    void reportGlobalUsageEventLocked(int event) {
        this.mUsageStatsService.reportEvent(PackageManagerService.PLATFORM_PACKAGE_NAME, this.mUserController.getCurrentUserId(), event);
        int[] profiles = this.mUserController.getCurrentProfileIds();
        if (profiles != null) {
            for (int i = profiles.length - 1; i >= 0; i--) {
                this.mUsageStatsService.reportEvent((String) null, profiles[i], event);
            }
        }
    }

    void reportCurWakefulnessUsageEventLocked() {
        int i;
        if (this.mWakefulness == 1) {
            i = 15;
        } else {
            i = 16;
        }
        reportGlobalUsageEventLocked(i);
    }

    void reportCurKeyguardUsageEventLocked() {
        int i;
        if (this.mKeyguardShown) {
            i = 17;
        } else {
            i = 18;
        }
        reportGlobalUsageEventLocked(i);
    }

    void onWakefulnessChanged(int wakefulness) {
        this.mDAProxy.onWakefulnessChanged(wakefulness);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int i = 1;
                boolean wasAwake = this.mWakefulness == 1;
                boolean isAwake = wakefulness == 1;
                this.mWakefulness = wakefulness;
                if (wasAwake != isAwake) {
                    this.mServices.updateScreenStateLocked(isAwake);
                    reportCurWakefulnessUsageEventLocked();
                    MainHandler mainHandler = this.mHandler;
                    if (!isAwake) {
                        i = 0;
                    }
                    mainHandler.obtainMessage(64, i, 0).sendToTarget();
                }
                updateOomAdjLocked();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy("this")
    void finishRunningVoiceLocked() {
        if (this.mRunningVoice != null) {
            this.mRunningVoice = null;
            this.mVoiceWakeLock.release();
            updateSleepIfNeededLocked();
        }
    }

    void startTimeTrackingFocusedActivityLocked() {
        ActivityRecord resumedActivity = this.mStackSupervisor.getResumedActivityLocked();
        if (!this.mSleeping && this.mCurAppTimeTracker != null && resumedActivity != null) {
            this.mCurAppTimeTracker.start(resumedActivity.packageName);
        }
    }

    @GuardedBy("this")
    void updateSleepIfNeededLocked() {
        Trace.traceBegin(64, "updateSleepIfNeededLocked");
        boolean shouldSleep = this.mStackSupervisor.hasAwakeDisplay() ^ true;
        boolean wasSleeping = this.mSleeping;
        StringBuilder stringBuilder;
        if (ActivityManagerDebugConfig.DEBUG_KEYGUARD) {
            String str = TAG_KEYGUARD;
            stringBuilder = new StringBuilder();
            stringBuilder.append("updateSleep shouldSleep:");
            stringBuilder.append(shouldSleep);
            stringBuilder.append(" wasSleeping:");
            stringBuilder.append(wasSleeping);
            stringBuilder.append(" callers=");
            stringBuilder.append(Debug.getCallers(5));
            Slog.d(str, stringBuilder.toString());
        } else {
            stringBuilder = new StringBuilder();
            stringBuilder.append("updateSleep shouldSleep:");
            stringBuilder.append(shouldSleep);
            stringBuilder.append(" wasSleeping:");
            stringBuilder.append(wasSleeping);
            Flog.i(107, stringBuilder.toString());
        }
        if (!shouldSleep) {
            if (wasSleeping) {
                this.mSleeping = false;
                startTimeTrackingFocusedActivityLocked();
                this.mTopProcessState = 2;
                this.mStackSupervisor.comeOutOfSleepIfNeededLocked();
            }
            this.mStackSupervisor.applySleepTokensLocked(true);
            if (wasSleeping) {
                updateOomAdjLocked();
            }
        } else if (!this.mSleeping && shouldSleep) {
            this.mSleeping = true;
            if (this.mCurAppTimeTracker != null) {
                this.mCurAppTimeTracker.stop();
            }
            this.mTopProcessState = 11;
            this.mStackSupervisor.goingToSleepLocked();
            updateResumedAppTrace(null);
            updateOomAdjLocked();
        }
        Trace.traceEnd(64);
    }

    void notifyTaskPersisterLocked(TaskRecord task, boolean flush) {
        this.mRecentTasks.notifyTaskPersisterLocked(task, flush);
    }

    public void notifyPinnedStackAnimationStarted() {
        this.mTaskChangeNotificationController.notifyPinnedStackAnimationStarted();
    }

    public void notifyPinnedStackAnimationEnded() {
        this.mTaskChangeNotificationController.notifyPinnedStackAnimationEnded();
    }

    public void notifyCleartextNetwork(int uid, byte[] firstPacket) {
        this.mHandler.obtainMessage(49, uid, 0, firstPacket).sendToTarget();
    }

    public boolean shutdown(int timeout) {
        if (checkCallingPermission("android.permission.SHUTDOWN") == 0) {
            boolean timedout = false;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mShuttingDown = true;
                    this.mStackSupervisor.prepareForShutdownLocked();
                    updateEventDispatchingLocked();
                    timedout = this.mStackSupervisor.shutdownLocked(timeout);
                } catch (IndexOutOfBoundsException e) {
                    Slog.e(TAG, "index of stack in display out of bounds!", e);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                    }
                }
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.shutdown();
            if (this.mUsageStatsService != null) {
                this.mUsageStatsService.prepareShutdown();
            }
            this.mBatteryStatsService.shutdown();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mProcessStats.shutdownLocked();
                    notifyTaskPersisterLocked(null, true);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return timedout;
        }
        throw new SecurityException("Requires permission android.permission.SHUTDOWN");
    }

    public final void activitySlept(IBinder token) {
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Activity slept: token=");
        stringBuilder.append(token);
        stringBuilder.append(" callingPid=");
        stringBuilder.append(Binder.getCallingPid());
        Slog.v(str, stringBuilder.toString());
        long origId = Binder.clearCallingIdentity();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    this.mStackSupervisor.activitySleptLocked(r);
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        Binder.restoreCallingIdentity(origId);
    }

    @GuardedBy("this")
    void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid) {
        Slog.d(TAG, "<<<  startRunningVoiceLocked()");
        this.mVoiceWakeLock.setWorkSource(new WorkSource(targetUid));
        if (this.mRunningVoice == null || this.mRunningVoice.asBinder() != session.asBinder()) {
            boolean wasRunningVoice = this.mRunningVoice != null;
            this.mRunningVoice = session;
            if (!wasRunningVoice) {
                this.mVoiceWakeLock.acquire();
                updateSleepIfNeededLocked();
            }
        }
    }

    private void updateEventDispatchingLocked() {
        WindowManagerService windowManagerService = this.mWindowManager;
        boolean z = this.mBooted && !this.mShuttingDown;
        windowManagerService.setEventDispatching(z);
    }

    public void setLockScreenShown(boolean keyguardShowing, boolean aodShowing, int secondaryDisplayShowing) {
        if (checkCallingPermission("android.permission.DEVICE_POWER") == 0) {
            synchronized (this) {
                long ident;
                try {
                    boostPriorityForLockedSection();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("setKeyguardShowing: ");
                    stringBuilder.append(keyguardShowing);
                    stringBuilder.append(" aodShowing: ");
                    stringBuilder.append(aodShowing);
                    stringBuilder.append(" by pid:");
                    stringBuilder.append(Binder.getCallingPid());
                    Flog.i(107, stringBuilder.toString());
                    ident = Binder.clearCallingIdentity();
                    if (this.mKeyguardShown != keyguardShowing) {
                        this.mKeyguardShown = keyguardShowing;
                        reportCurKeyguardUsageEventLocked();
                    }
                    this.mKeyguardController.setKeyguardShown(keyguardShowing, aodShowing, secondaryDisplayShowing);
                    if (keyguardShowing) {
                        exitSingleHandMode();
                    }
                    Binder.restoreCallingIdentity(ident);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            this.mHandler.obtainMessage(65, keyguardShowing, 0).sendToTarget();
            return;
        }
        throw new SecurityException("Requires permission android.permission.DEVICE_POWER");
    }

    public void notifyLockedProfile(int userId) {
        try {
            if (AppGlobals.getPackageManager().isUidPrivileged(Binder.getCallingUid())) {
                synchronized (this) {
                    long ident;
                    try {
                        boostPriorityForLockedSection();
                        ident = Binder.clearCallingIdentity();
                        if (this.mUserController.shouldConfirmCredentials(userId)) {
                            if (this.mKeyguardController.isKeyguardLocked()) {
                                startHomeActivityLocked(this.mUserController.getCurrentUserId(), "notifyLockedProfile");
                            }
                            this.mStackSupervisor.lockAllProfileTasks(userId);
                        }
                        Binder.restoreCallingIdentity(ident);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                    }
                }
                resetPriorityAfterLockedSection();
                return;
            }
            throw new SecurityException("Only privileged app can call notifyLockedProfile");
        } catch (RemoteException ex) {
            throw new SecurityException("Fail to check is caller a privileged app", ex);
        }
    }

    public void startConfirmDeviceCredentialIntent(Intent intent, Bundle options) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "startConfirmDeviceCredentialIntent");
        synchronized (this) {
            long ident;
            try {
                ActivityOptions activityOptions;
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                intent.addFlags(276840448);
                if (options != null) {
                    activityOptions = new ActivityOptions(options);
                } else {
                    activityOptions = ActivityOptions.makeBasic();
                }
                activityOptions.setLaunchTaskId(this.mStackSupervisor.getHomeActivity().getTask().taskId);
                this.mContext.startActivityAsUser(intent, activityOptions.toBundle(), UserHandle.CURRENT);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void stopAppSwitches() {
        enforceCallerIsRecentsOrHasPermission("android.permission.STOP_APP_SWITCHES", "stopAppSwitches");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppSwitchesAllowedTime = SystemClock.uptimeMillis() + 5000;
                this.mDidAppSwitch = false;
                this.mActivityStartController.schedulePendingActivityLaunches(5000);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void resumeAppSwitches() {
        enforceCallerIsRecentsOrHasPermission("android.permission.STOP_APP_SWITCHES", "resumeAppSwitches");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppSwitchesAllowedTime = 0;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    boolean checkAllowAppSwitchUid(int uid) {
        ArrayMap<String, Integer> types = (ArrayMap) this.mAllowAppSwitchUids.get(UserHandle.getUserId(uid));
        if (types != null) {
            for (int i = types.size() - 1; i >= 0; i--) {
                if (((Integer) types.valueAt(i)).intValue() == uid) {
                    return true;
                }
            }
        }
        return false;
    }

    boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid, int callingPid, int callingUid, String name) {
        if (this.mAppSwitchesAllowedTime < SystemClock.uptimeMillis() || this.mRecentTasks.isCallerRecents(sourceUid)) {
            return true;
        }
        if (checkComponentPermission("android.permission.STOP_APP_SWITCHES", sourcePid, sourceUid, -1, true) == 0 || checkAllowAppSwitchUid(sourceUid)) {
            return true;
        }
        if (!(callingUid == -1 || callingUid == sourceUid)) {
            if (checkComponentPermission("android.permission.STOP_APP_SWITCHES", callingPid, callingUid, -1, true) == 0 || checkAllowAppSwitchUid(callingUid)) {
                return true;
            }
        }
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(name);
        stringBuilder.append(" request from ");
        stringBuilder.append(sourceUid);
        stringBuilder.append(" stopped");
        Slog.w(str, stringBuilder.toString());
        return false;
    }

    /* JADX WARNING: Missing block: B:46:0x0079, code:
            r0 = th;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setDebugApp(String packageName, boolean waitForDebugger, boolean persistent) {
        Throwable th;
        long ident;
        long ident2;
        String str = packageName;
        boolean z = waitForDebugger;
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long ident3 = Binder.clearCallingIdentity();
        if (persistent) {
            try {
                ContentResolver resolver = this.mContext.getContentResolver();
                Global.putString(resolver, "debug_app", str);
                Global.putInt(resolver, "wait_for_debugger", z);
            } catch (Throwable th2) {
                th = th2;
                ident = ident3;
            }
        }
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (!persistent) {
                        try {
                            this.mOrigDebugApp = this.mDebugApp;
                            this.mOrigWaitForDebugger = this.mWaitForDebugger;
                        } catch (Throwable th3) {
                            th = th3;
                            ident = ident3;
                        }
                    }
                    this.mDebugApp = str;
                    this.mWaitForDebugger = z;
                    this.mDebugTransient = persistent ^ 1;
                    if (str != null) {
                        try {
                            ident2 = ident3;
                            try {
                                forceStopPackageLocked(str, -1, false, false, true, true, false, -1, "set debug app");
                            } catch (Throwable th4) {
                                th = th4;
                                ident = ident2;
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            ident = ident3;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th6) {
                                    th = th6;
                                }
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    ident2 = ident3;
                    try {
                        try {
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(ident2);
                        } catch (Throwable th7) {
                            th = th7;
                            ident = ident2;
                            Binder.restoreCallingIdentity(ident);
                            throw th;
                        }
                    } catch (Throwable th8) {
                        th = th8;
                        ident = ident2;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th9) {
                    th = th9;
                    ident = ident3;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } catch (Throwable th10) {
            th = th10;
            ident = ident3;
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void setAgentApp(String packageName, String agent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                } else if (agent != null) {
                    if (this.mAppAgentMap == null) {
                        this.mAppAgentMap = new HashMap();
                    }
                    if (this.mAppAgentMap.size() >= 100) {
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("App agent map has too many entries, cannot add ");
                        stringBuilder.append(packageName);
                        stringBuilder.append(SliceAuthority.DELIMITER);
                        stringBuilder.append(agent);
                        Slog.e(str, stringBuilder.toString());
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mAppAgentMap.put(packageName, agent);
                } else if (this.mAppAgentMap != null) {
                    this.mAppAgentMap.remove(packageName);
                    if (this.mAppAgentMap.isEmpty()) {
                        this.mAppAgentMap = null;
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    void setTrackAllocationApp(ApplicationInfo app, String processName) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (app.flags & 2) != 0) {
                    this.mTrackAllocationApp = processName;
                } else {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Process not debuggable: ");
                    stringBuilder.append(app.packageName);
                    throw new SecurityException(stringBuilder.toString());
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (app.flags & 2) != 0) {
                    this.mProfileApp = processName;
                    if (!(this.mProfilerInfo == null || this.mProfilerInfo.profileFd == null)) {
                        try {
                            this.mProfilerInfo.profileFd.close();
                        } catch (IOException e) {
                        }
                    }
                    this.mProfilerInfo = new ProfilerInfo(profilerInfo);
                    this.mProfileType = 0;
                } else {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Process not debuggable: ");
                    stringBuilder.append(app.packageName);
                    throw new SecurityException(stringBuilder.toString());
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void setNativeDebuggingAppLocked(ApplicationInfo app, String processName) {
        if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (app.flags & 2) != 0) {
            this.mNativeDebuggingApp = processName;
            return;
        }
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Process not debuggable: ");
        stringBuilder.append(app.packageName);
        throw new SecurityException(stringBuilder.toString());
    }

    public void setAlwaysFinish(boolean enabled) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long ident = Binder.clearCallingIdentity();
        try {
            Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", enabled);
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mAlwaysFinishActivities = enabled;
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void setActivityController(IActivityController controller, boolean imAMonkey) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "setActivityController()");
        int pid = controller == null ? 0 : Binder.getCallingPid();
        Watchdog.getInstance().processStarted("ActivityController", pid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mController = controller;
                this.mControllerIsAMonkey = imAMonkey;
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("setActivityController mControllerIsAMonkey:");
                stringBuilder.append(imAMonkey);
                stringBuilder.append(" callingPid:");
                stringBuilder.append(pid);
                stringBuilder.append(" callingUid:");
                stringBuilder.append(Binder.getCallingUid());
                Slog.d(str, stringBuilder.toString());
                Watchdog.getInstance().setActivityController(controller);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setUserIsMonkey(boolean userIsMonkey) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = Binder.getCallingPid();
                    ProcessRecord proc = (ProcessRecord) this.mPidsSelfLocked.get(callingPid);
                    if (proc == null) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Unknown process: ");
                        stringBuilder.append(callingPid);
                        throw new SecurityException(stringBuilder.toString());
                    } else if (proc.instr == null || proc.instr.mUiAutomationConnection == null) {
                        throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                String str = TAG;
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("setUserIsMonkey userIsMonkey:");
                stringBuilder2.append(userIsMonkey);
                stringBuilder2.append(" callingPid:");
                stringBuilder2.append(Binder.getCallingPid());
                stringBuilder2.append(" callingUid:");
                stringBuilder2.append(Binder.getCallingUid());
                Slog.d(str, stringBuilder2.toString());
                this.mUserIsMonkey = userIsMonkey;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean isUserAMonkey() {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                z = this.mUserIsMonkey || (this.mController != null && this.mControllerIsAMonkey);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    @Deprecated
    public void requestBugReport(int bugreportType) {
        String extraOptions = null;
        switch (bugreportType) {
            case 0:
                break;
            case 1:
                extraOptions = "bugreportplus";
                break;
            case 2:
                extraOptions = "bugreportremote";
                break;
            case 3:
                extraOptions = "bugreportwear";
                break;
            case 4:
                extraOptions = "bugreporttelephony";
                break;
            case 5:
                extraOptions = "bugreportwifi";
                break;
            default:
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Provided bugreport type is not correct, value: ");
                stringBuilder.append(bugreportType);
                throw new IllegalArgumentException(stringBuilder.toString());
        }
        String type = extraOptions == null ? "bugreport" : extraOptions;
        String str = TAG;
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append(type);
        stringBuilder2.append(" requested by UID ");
        stringBuilder2.append(Binder.getCallingUid());
        Slog.i(str, stringBuilder2.toString());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        if (extraOptions != null) {
            SystemProperties.set("dumpstate.options", extraOptions);
        }
        SystemProperties.set("ctl.start", "bugreport");
    }

    @Deprecated
    private void requestBugReportWithDescription(String shareTitle, String shareDescription, int bugreportType) {
        if (!TextUtils.isEmpty(shareTitle)) {
            if (shareTitle.length() <= 50) {
                if (!TextUtils.isEmpty(shareDescription)) {
                    try {
                        if (shareDescription.getBytes("UTF-8").length <= 91) {
                            SystemProperties.set("dumpstate.options.description", shareDescription);
                        } else {
                            throw new IllegalArgumentException("shareTitle should be less than 91 bytes");
                        }
                    } catch (UnsupportedEncodingException e) {
                        throw new IllegalArgumentException("shareDescription: UnsupportedEncodingException");
                    }
                }
                SystemProperties.set("dumpstate.options.title", shareTitle);
            } else {
                throw new IllegalArgumentException("shareTitle should be less than 50 characters");
            }
        }
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Bugreport notification title ");
        stringBuilder.append(shareTitle);
        stringBuilder.append(" description ");
        stringBuilder.append(shareDescription);
        Slog.d(str, stringBuilder.toString());
        requestBugReport(bugreportType);
    }

    @Deprecated
    public void requestTelephonyBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 4);
    }

    @Deprecated
    public void requestWifiBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 5);
    }

    public static long getInputDispatchingTimeoutLocked(ActivityRecord r) {
        return r != null ? getInputDispatchingTimeoutLocked(r.app) : (long) KEY_DISPATCHING_TIMEOUT;
    }

    public static long getInputDispatchingTimeoutLocked(ProcessRecord r) {
        if (r == null || (r.instr == null && !r.usingWrapper)) {
            return (long) KEY_DISPATCHING_TIMEOUT;
        }
        return (long) INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT;
    }

    public long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
        if (checkCallingPermission("android.permission.FILTER_EVENTS") == 0) {
            ProcessRecord proc;
            long timeout;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = (ProcessRecord) this.mPidsSelfLocked.get(pid);
                    }
                    timeout = getInputDispatchingTimeoutLocked(proc);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            if (inputDispatchingTimedOut(proc, null, null, aboveSystem, reason)) {
                return -1;
            }
            return timeout;
        }
        throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }

    /* JADX WARNING: Missing block: B:22:0x005c, code:
            resetPriorityAfterLockedSection();
            r3 = r10.pid;
            r4 = r10;
            r5 = r18;
            r6 = r19;
            r7 = r20;
            r8 = r12;
            r9.mHandler.post(new com.android.server.am.ActivityManagerService.AnonymousClass16(r9));
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean inputDispatchingTimedOut(ProcessRecord proc, ActivityRecord activity, ActivityRecord parent, boolean aboveSystem, String reason) {
        boolean z;
        ProcessRecord processRecord = proc;
        String str = reason;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") == 0) {
            String annotation;
            if (str == null) {
                annotation = "Input dispatching timed out";
            } else {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Input dispatching timed out (");
                stringBuilder.append(str);
                stringBuilder.append(")");
                annotation = stringBuilder.toString();
            }
            String annotation2 = annotation;
            if (processRecord != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        z = false;
                        if (processRecord.debugging) {
                        } else if (processRecord.instr != null) {
                            Bundle info = new Bundle();
                            info.putString("shortMsg", "keyDispatchingTimedOut");
                            info.putString("longMsg", annotation2);
                            finishInstrumentationLocked(processRecord, 0, info);
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
            }
            return true;
        }
        throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
        return z;
    }

    public Bundle getAssistContextExtras(int requestType) {
        PendingAssistExtras pae = enqueueAssistContext(requestType, null, null, null, null, null, true, true, UserHandle.getCallingUserId(), null, 500, 0);
        if (pae == null) {
            return null;
        }
        synchronized (pae) {
            while (!pae.haveResult) {
                try {
                    pae.wait();
                } catch (InterruptedException e) {
                }
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                buildAssistBundleLocked(pae, pae.result);
                this.mPendingAssistExtras.remove(pae);
                this.mUiHandler.removeCallbacks(pae);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return pae.extras;
    }

    public boolean isAssistDataAllowedOnCurrentActivity() {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack focusedStack = getFocusedStack();
                z = false;
                if (focusedStack == null || focusedStack.isActivityTypeAssistant()) {
                    resetPriorityAfterLockedSection();
                    return false;
                }
                ActivityRecord activity = focusedStack.getTopActivity();
                if (activity == null) {
                } else {
                    focusedStack = activity.userId;
                    resetPriorityAfterLockedSection();
                    return DevicePolicyCache.getInstance().getScreenCaptureDisabled(focusedStack) ^ 1;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    public boolean showAssistFromActivity(IBinder token, Bundle args) {
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord caller = ActivityRecord.forTokenLocked(token);
                ActivityRecord top = getFocusedStack().getTopActivity();
                String str;
                StringBuilder stringBuilder;
                if (top != caller) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("showAssistFromActivity failed: caller ");
                    stringBuilder.append(caller);
                    stringBuilder.append(" is not current top ");
                    stringBuilder.append(top);
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return false;
                } else if (top.nowVisible) {
                    resetPriorityAfterLockedSection();
                    boolean showSessionForActiveService = this.mAssistUtils.showSessionForActiveService(args, 8, null, token);
                    Binder.restoreCallingIdentity(ident);
                    return showSessionForActiveService;
                } else {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("showAssistFromActivity failed: caller ");
                    stringBuilder.append(caller);
                    stringBuilder.append(" is not visible");
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return false;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public boolean requestAssistContextExtras(int requestType, IAssistDataReceiver receiver, Bundle receiverExtras, IBinder activityToken, boolean focused, boolean newSessionId) {
        return enqueueAssistContext(requestType, null, null, receiver, receiverExtras, activityToken, focused, newSessionId, UserHandle.getCallingUserId(), null, 2000, 0) != null;
    }

    public boolean requestAutofillData(IAssistDataReceiver receiver, Bundle receiverExtras, IBinder activityToken, int flags) {
        return enqueueAssistContext(2, null, null, receiver, receiverExtras, activityToken, true, true, UserHandle.getCallingUserId(), null, 2000, flags) != null;
    }

    private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint, IAssistDataReceiver receiver, Bundle receiverExtras, IBinder activityToken, boolean focused, boolean newSessionId, int userHandle, Bundle args, long timeout, int flags) {
        Throwable th;
        IBinder iBinder = activityToken;
        Bundle bundle = args;
        enforceCallingPermission("android.permission.GET_TOP_ACTIVITY_INFO", "enqueueAssistContext()");
        synchronized (this) {
            long j;
            try {
                boostPriorityForLockedSection();
                ActivityRecord activity = getFocusedStack().getTopActivity();
                String str;
                StringBuilder stringBuilder;
                if (activity == null) {
                    Slog.w(TAG, "getAssistContextExtras failed: no top activity");
                    resetPriorityAfterLockedSection();
                    return null;
                } else if (activity.app == null || activity.app.thread == null) {
                    j = timeout;
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("getAssistContextExtras failed: no process for ");
                    stringBuilder.append(activity);
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    return null;
                } else {
                    if (!focused) {
                        activity = ActivityRecord.forTokenLocked(activityToken);
                        if (activity == null) {
                            str = TAG;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("enqueueAssistContext failed: activity for token=");
                            stringBuilder2.append(iBinder);
                            stringBuilder2.append(" couldn't be found");
                            Slog.w(str, stringBuilder2.toString());
                            resetPriorityAfterLockedSection();
                            return null;
                        } else if (activity.app == null || activity.app.thread == null) {
                            j = timeout;
                            str = TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("enqueueAssistContext failed: no process for ");
                            stringBuilder.append(activity);
                            Slog.w(str, stringBuilder.toString());
                            resetPriorityAfterLockedSection();
                            return null;
                        }
                    } else if (iBinder != null) {
                        ActivityRecord caller = ActivityRecord.forTokenLocked(activityToken);
                        if (activity != caller) {
                            String str2 = TAG;
                            StringBuilder stringBuilder3 = new StringBuilder();
                            stringBuilder3.append("enqueueAssistContext failed: caller ");
                            stringBuilder3.append(caller);
                            stringBuilder3.append(" is not current top ");
                            stringBuilder3.append(activity);
                            Slog.w(str2, stringBuilder3.toString());
                            resetPriorityAfterLockedSection();
                            return null;
                        }
                    }
                    ActivityRecord activity2 = activity;
                    Bundle extras = new Bundle();
                    if (bundle != null) {
                        extras.putAll(bundle);
                    }
                    extras.putString("android.intent.extra.ASSIST_PACKAGE", activity2.packageName);
                    extras.putInt("android.intent.extra.ASSIST_UID", activity2.app.uid);
                    PendingAssistExtras pae = new PendingAssistExtras(activity2, extras, intent, hint, receiver, receiverExtras, userHandle);
                    pae.isHome = activity2.isActivityTypeHome();
                    if (newSessionId) {
                        this.mViSessionId++;
                    }
                    try {
                        activity2.app.thread.requestAssistContextExtras(activity2.appToken, pae, requestType, this.mViSessionId, flags);
                        this.mPendingAssistExtras.add(pae);
                        try {
                            this.mUiHandler.postDelayed(pae, timeout);
                            resetPriorityAfterLockedSection();
                            return pae;
                        } catch (RemoteException e) {
                        }
                    } catch (RemoteException e2) {
                        j = timeout;
                        try {
                            String str3 = TAG;
                            StringBuilder stringBuilder4 = new StringBuilder();
                            stringBuilder4.append("getAssistContextExtras failed: crash calling ");
                            stringBuilder4.append(activity2);
                            Slog.w(str3, stringBuilder4.toString());
                            resetPriorityAfterLockedSection();
                            return null;
                        } catch (Throwable th2) {
                            th = th2;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
            } catch (Throwable th3) {
                th = th3;
                j = timeout;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    void pendingAssistExtrasTimedOut(PendingAssistExtras pae) {
        IAssistDataReceiver receiver;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mPendingAssistExtras.remove(pae);
                receiver = pae.receiver;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (receiver != null) {
            Bundle sendBundle = new Bundle();
            sendBundle.putBundle("receiverExtras", pae.receiverExtras);
            try {
                pae.receiver.onHandleAssistData(sendBundle);
            } catch (RemoteException e) {
            }
        }
    }

    private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result) {
        if (result != null) {
            pae.extras.putBundle("android.intent.extra.ASSIST_CONTEXT", result);
        }
        if (pae.hint != null) {
            pae.extras.putBoolean(pae.hint, true);
        }
    }

    /* JADX WARNING: Missing block: B:15:0x002b, code:
            r2 = null;
     */
    /* JADX WARNING: Missing block: B:16:0x002d, code:
            monitor-enter(r9);
     */
    /* JADX WARNING: Missing block: B:18:?, code:
            boostPriorityForLockedSection();
            buildAssistBundleLocked(r0, r11);
            r3 = r9.mPendingAssistExtras.remove(r0);
            r9.mUiHandler.removeCallbacks(r0);
     */
    /* JADX WARNING: Missing block: B:19:0x003f, code:
            if (r3 != false) goto L_0x0046;
     */
    /* JADX WARNING: Missing block: B:20:0x0041, code:
            monitor-exit(r9);
     */
    /* JADX WARNING: Missing block: B:23:?, code:
            r4 = r0.receiver;
            r1 = r4;
     */
    /* JADX WARNING: Missing block: B:24:0x0049, code:
            if (r4 == null) goto L_0x006f;
     */
    /* JADX WARNING: Missing block: B:25:0x004b, code:
            r2 = new android.os.Bundle();
            r2.putBundle("data", r0.extras);
            r2.putParcelable("structure", r0.structure);
            r2.putParcelable("content", r0.content);
            r2.putBundle("receiverExtras", r0.receiverExtras);
     */
    /* JADX WARNING: Missing block: B:26:0x006f, code:
            monitor-exit(r9);
     */
    /* JADX WARNING: Missing block: B:27:0x0070, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:28:0x0073, code:
            if (r1 == null) goto L_0x007b;
     */
    /* JADX WARNING: Missing block: B:30:?, code:
            r1.onHandleAssistData(r2);
     */
    /* JADX WARNING: Missing block: B:33:0x007b, code:
            r3 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Missing block: B:36:0x008b, code:
            if (android.text.TextUtils.equals(r0.intent.getAction(), "android.service.voice.VoiceInteractionService") == false) goto L_0x00a3;
     */
    /* JADX WARNING: Missing block: B:37:0x008d, code:
            r0.intent.putExtras(r0.extras);
            r9.mContext.startServiceAsUser(r0.intent, new android.os.UserHandle(r0.userHandle));
     */
    /* JADX WARNING: Missing block: B:38:0x00a3, code:
            r0.intent.replaceExtras(r0.extras);
            r0.intent.setFlags(872415232);
            closeSystemDialogs(com.android.server.policy.PhoneWindowManager.SYSTEM_DIALOG_REASON_ASSIST);
     */
    /* JADX WARNING: Missing block: B:40:?, code:
            r9.mContext.startActivityAsUser(r0.intent, new android.os.UserHandle(r0.userHandle));
     */
    /* JADX WARNING: Missing block: B:41:0x00c5, code:
            r5 = move-exception;
     */
    /* JADX WARNING: Missing block: B:43:?, code:
            android.util.Slog.w(TAG, "No activity to handle assist action.", r5);
     */
    /* JADX WARNING: Missing block: B:47:0x00d3, code:
            android.os.Binder.restoreCallingIdentity(r3);
     */
    /* JADX WARNING: Missing block: B:51:0x00d9, code:
            resetPriorityAfterLockedSection();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure, AssistContent content, Uri referrer) {
        PendingAssistExtras pae = (PendingAssistExtras) token;
        synchronized (pae) {
            pae.result = extras;
            pae.structure = structure;
            pae.content = content;
            if (referrer != null) {
                pae.extras.putParcelable("android.intent.extra.REFERRER", referrer);
            }
            if (structure != null) {
                structure.setHomeActivity(pae.isHome);
            }
            pae.haveResult = true;
            pae.notifyAll();
            if (pae.intent == null && pae.receiver == null) {
                return;
            }
        }
        return;
        return;
        Binder.restoreCallingIdentity(ident);
    }

    public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle, Bundle args) {
        return enqueueAssistContext(requestType, intent, hint, null, null, null, true, true, userHandle, args, 500, 0) != null;
    }

    public void registerProcessObserver(IProcessObserver observer) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.register(observer);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void unregisterProcessObserver(IProcessObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.unregister(observer);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public int getUidProcessState(int uid, String callingPackage) {
        int i;
        if (!hasUsageStatsPermission(callingPackage)) {
            i = "getUidProcessState";
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", i);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = (UidRecord) this.mActiveUids.get(uid);
                i = uidRec != null ? uidRec.curProcState : 19;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return i;
    }

    public void registerUidObserver(IUidObserver observer, int which, int cutpoint, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.register(observer, new UidObserverRegistration(Binder.getCallingUid(), callingPackage, which, cutpoint));
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void unregisterUidObserver(IUidObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.unregister(observer);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean isUidActive(int uid, String callingPackage) {
        boolean isUidActiveLocked;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                isUidActiveLocked = isUidActiveLocked(uid);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return isUidActiveLocked;
    }

    boolean isUidActiveLocked(int uid) {
        UidRecord uidRecord = (UidRecord) this.mActiveUids.get(uid);
        return (uidRecord == null || uidRecord.setIdle) ? false : true;
    }

    public boolean convertFromTranslucent(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                }
                boolean translucentChanged = r.changeWindowTranslucency(true);
                if (translucentChanged) {
                    this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                }
                this.mWindowManager.setAppFullscreen(token, true);
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(origId);
                return translucentChanged;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public boolean convertToTranslucent(IBinder token, Bundle options) {
        SafeActivityOptions safeOptions = SafeActivityOptions.fromBundle(options);
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                }
                TaskRecord task = r.getTask();
                int index = task.mActivities.lastIndexOf(r);
                if (index > 0) {
                    ((ActivityRecord) task.mActivities.get(index - 1)).returningOptions = safeOptions != null ? safeOptions.getOptions(r) : null;
                }
                boolean translucentChanged = r.changeWindowTranslucency(false);
                if (translucentChanged) {
                    r.getStack().convertActivityToTranslucent(r);
                }
                this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                this.mWindowManager.setAppFullscreen(token, false);
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(origId);
                return translucentChanged;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    /* JADX WARNING: Missing block: B:10:0x001b, code:
            resetPriorityAfterLockedSection();
            android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Missing block: B:11:0x0021, code:
            return r3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public Bundle getActivityOptions(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                Bundle bundle = null;
                if (r != null) {
                    ActivityOptions activityOptions = r.takeOptionsLocked();
                    if (activityOptions != null) {
                        bundle = activityOptions.toBundle();
                    }
                } else {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return null;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public void setImmersive(IBinder token, boolean immersive) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    r.immersive = immersive;
                    if (r == this.mStackSupervisor.getResumedActivityLocked()) {
                        if (ActivityManagerDebugConfig.DEBUG_IMMERSIVE) {
                            String str = TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("Frontmost changed immersion: ");
                            stringBuilder.append(r);
                            Slog.d(str, stringBuilder.toString());
                        }
                        applyUpdateLockStateLocked(r);
                    }
                } else {
                    throw new IllegalArgumentException();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean isImmersive(IBinder token) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    z = r.immersive;
                } else {
                    throw new IllegalArgumentException();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    public void setVrThread(int tid) {
        enforceSystemHasVrFeature();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int pid = Binder.getCallingPid();
                    this.mVrController.setVrThreadLocked(tid, pid, (ProcessRecord) this.mPidsSelfLocked.get(pid));
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setPersistentVrThread(int tid) {
        if (checkCallingPermission("android.permission.RESTRICTED_VR_ACCESS") == 0) {
            enforceSystemHasVrFeature();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        int pid = Binder.getCallingPid();
                        this.mVrController.setPersistentVrThreadLocked(tid, pid, (ProcessRecord) this.mPidsSelfLocked.get(pid));
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        String msg = new StringBuilder();
        msg.append("Permission Denial: setPersistentVrThread() from pid=");
        msg.append(Binder.getCallingPid());
        msg.append(", uid=");
        msg.append(Binder.getCallingUid());
        msg.append(" requires ");
        msg.append("android.permission.RESTRICTED_VR_ACCESS");
        msg = msg.toString();
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    static boolean scheduleAsRegularPriority(int tid, boolean suppressLogs) {
        String str;
        StringBuilder stringBuilder;
        try {
            Process.setThreadScheduler(tid, 0, 0);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Failed to set scheduling policy, thread does not exist:\n");
                stringBuilder.append(e);
                Slog.w(str, stringBuilder.toString());
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Failed to set scheduling policy, not allowed:\n");
                stringBuilder.append(e2);
                Slog.w(str, stringBuilder.toString());
            }
            return false;
        }
    }

    static boolean scheduleAsFifoPriority(int tid, boolean suppressLogs) {
        String str;
        StringBuilder stringBuilder;
        try {
            Process.setThreadScheduler(tid, 1073741825, 1);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Failed to set scheduling policy, thread does not exist:\n");
                stringBuilder.append(e);
                Slog.w(str, stringBuilder.toString());
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Failed to set scheduling policy, not allowed:\n");
                stringBuilder.append(e2);
                Slog.w(str, stringBuilder.toString());
            }
            return false;
        }
    }

    private void enforceSystemHasVrFeature() {
        if (!this.mContext.getPackageManager().hasSystemFeature("android.hardware.vr.high_performance")) {
            throw new UnsupportedOperationException("VR mode not supported on this device!");
        }
    }

    public void setRenderThread(int tid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int pid = Binder.getCallingPid();
                if (pid == Process.myPid()) {
                    demoteSystemServerRenderThread(tid);
                    resetPriorityAfterLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord proc = (ProcessRecord) this.mPidsSelfLocked.get(pid);
                    StringBuilder stringBuilder;
                    if (proc == null || proc.renderThreadTid != 0 || tid <= 0) {
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Didn't set thread from setRenderThread? PID: ");
                            stringBuilder.append(pid);
                            stringBuilder.append(", TID: ");
                            stringBuilder.append(tid);
                            stringBuilder.append(" FIFO: ");
                            stringBuilder.append(this.mUseFifoUiScheduling);
                            Slog.d("UI_FIFO", stringBuilder.toString());
                        }
                    } else if (Process.isThreadInProcess(pid, tid)) {
                        proc.renderThreadTid = tid;
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Set RenderThread tid ");
                            stringBuilder.append(tid);
                            stringBuilder.append(" for pid ");
                            stringBuilder.append(pid);
                            Slog.d("UI_FIFO", stringBuilder.toString());
                        }
                        if (proc.curSchedGroup == 3) {
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("Promoting ");
                                stringBuilder.append(tid);
                                stringBuilder.append("out of band");
                                Slog.d("UI_FIFO", stringBuilder.toString());
                            }
                            if (this.mUseFifoUiScheduling) {
                                Process.setThreadScheduler(proc.renderThreadTid, 1073741825, 1);
                            } else {
                                if (this.mCpusetSwitch) {
                                    this.mDAProxy.setVipThread(proc.pid, proc.renderThreadTid, true);
                                }
                                Process.setThreadPriority(proc.renderThreadTid, -10);
                            }
                        }
                    } else {
                        throw new IllegalArgumentException("Render thread does not belong to process");
                    }
                }
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void demoteSystemServerRenderThread(int tid) {
        Process.setThreadPriority(tid, 10);
    }

    public int setVrMode(IBinder token, boolean enabled, ComponentName packageName) {
        long callingId;
        enforceSystemHasVrFeature();
        VrManagerInternal vrService = (VrManagerInternal) LocalServices.getService(VrManagerInternal.class);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    int hasVrPackage = vrService.hasVrPackage(packageName, r.userId);
                    int err = hasVrPackage;
                    if (hasVrPackage != 0) {
                        return err;
                    }
                    callingId = Binder.clearCallingIdentity();
                    try {
                        synchronized (this) {
                            boostPriorityForLockedSection();
                            r.requestedVrComponent = enabled ? packageName : null;
                            if (r == this.mStackSupervisor.getResumedActivityLocked()) {
                                applyUpdateVrModeLocked(r);
                            }
                        }
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(callingId);
                        return 0;
                    } catch (Throwable th) {
                        Binder.restoreCallingIdentity(callingId);
                    }
                }
                throw new IllegalArgumentException();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(callingId);
        return 0;
    }

    public boolean isVrModePackageEnabled(ComponentName packageName) {
        enforceSystemHasVrFeature();
        return ((VrManagerInternal) LocalServices.getService(VrManagerInternal.class)).hasVrPackage(packageName, UserHandle.getCallingUserId()) == 0;
    }

    public boolean isTopActivityImmersive() {
        boolean z;
        enforceNotIsolatedCaller("startActivity");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = getFocusedStack().topRunningActivityLocked();
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("isTopActivityImmersive r: ");
                stringBuilder.append(r);
                Slog.d(str, stringBuilder.toString());
                z = r != null ? r.immersive : false;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    boolean shouldDisableNonVrUiLocked() {
        return this.mVrController.shouldDisableNonVrUiLocked();
    }

    public boolean isTopOfTask(IBinder token) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    z = r.getTask().getTopActivity() == r;
                } else {
                    throw new IllegalArgumentException();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    /* JADX WARNING: Missing block: B:15:0x003b, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:25:0x006c, code:
            r4 = r5;
     */
    /* JADX WARNING: Missing block: B:26:0x006d, code:
            if (r3 == false) goto L_0x0073;
     */
    /* JADX WARNING: Missing block: B:29:?, code:
            updateOomAdjLocked(r4, true);
     */
    /* JADX WARNING: Missing block: B:32:?, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:33:0x0077, code:
            android.os.Binder.restoreCallingIdentity(r1);
     */
    /* JADX WARNING: Missing block: B:34:0x007b, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void setHasTopUi(boolean hasTopUi) throws RemoteException {
        if (checkCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW") == 0) {
            int pid = Binder.getCallingPid();
            long origId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        boolean changed = false;
                        synchronized (this.mPidsSelfLocked) {
                            ProcessRecord pr = (ProcessRecord) this.mPidsSelfLocked.get(pid);
                            String str;
                            StringBuilder stringBuilder;
                            if (pr == null) {
                                str = TAG;
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("setHasTopUi called on unknown pid: ");
                                stringBuilder.append(pid);
                                Slog.w(str, stringBuilder.toString());
                            } else if (pr.hasTopUi != hasTopUi) {
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    str = TAG;
                                    stringBuilder = new StringBuilder();
                                    stringBuilder.append("Setting hasTopUi=");
                                    stringBuilder.append(hasTopUi);
                                    stringBuilder.append(" for pid=");
                                    stringBuilder.append(pid);
                                    Slog.d(str, stringBuilder.toString());
                                }
                                pr.hasTopUi = hasTopUi;
                                changed = true;
                            }
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
        } else {
            String msg = new StringBuilder();
            msg.append("Permission Denial: setHasTopUi() from pid=");
            msg.append(Binder.getCallingPid());
            msg.append(", uid=");
            msg.append(Binder.getCallingUid());
            msg.append(" requires ");
            msg.append("android.permission.INTERNAL_SYSTEM_WINDOW");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* JADX WARNING: Missing block: B:21:0x0040, code:
            if (r1.runningRemoteAnimation != r7) goto L_0x0047;
     */
    /* JADX WARNING: Missing block: B:23:0x0043, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:24:0x0046, code:
            return;
     */
    /* JADX WARNING: Missing block: B:26:?, code:
            r1.runningRemoteAnimation = r7;
     */
    /* JADX WARNING: Missing block: B:27:0x004b, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_OOM_ADJ == false) goto L_0x006d;
     */
    /* JADX WARNING: Missing block: B:28:0x004d, code:
            r0 = TAG;
            r2 = new java.lang.StringBuilder();
            r2.append("Setting runningRemoteAnimation=");
            r2.append(r1.runningRemoteAnimation);
            r2.append(" for pid=");
            r2.append(r6);
            android.util.Slog.i(r0, r2.toString());
     */
    /* JADX WARNING: Missing block: B:29:0x006d, code:
            updateOomAdjLocked(r1, true);
     */
    /* JADX WARNING: Missing block: B:31:0x0072, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:32:0x0075, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    void setRunningRemoteAnimation(int pid, boolean runningRemoteAnimation) {
        if (pid == Process.myPid()) {
            Slog.wtf(TAG, "system can't run remote animation");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord pr = (ProcessRecord) this.mPidsSelfLocked.get(pid);
                    if (pr == null) {
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("setRunningRemoteAnimation called on unknown pid: ");
                        stringBuilder.append(pid);
                        Slog.w(str, stringBuilder.toString());
                        resetPriorityAfterLockedSection();
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void enterSafeMode() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mSystemReady) {
                    try {
                        AppGlobals.getPackageManager().enterSafeMode();
                    } catch (RemoteException e) {
                    }
                }
                this.mSafeMode = true;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void showSafeModeOverlay() {
        View v = LayoutInflater.from(this.mContext).inflate(17367258, null);
        LayoutParams lp = new LayoutParams();
        lp.type = 2015;
        lp.width = -2;
        lp.height = -2;
        lp.gravity = 8388691;
        lp.format = v.getBackground().getOpacity();
        lp.flags = 24;
        lp.privateFlags |= 16;
        ((WindowManager) this.mContext.getSystemService("window")).addView(v, lp);
    }

    public void noteWakeupAlarm(IIntentSender sender, WorkSource workSource, int sourceUid, String sourcePkg, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("noteWakupAlarm[ sourcePkg=");
            stringBuilder.append(sourcePkg);
            stringBuilder.append(", sourceUid=");
            stringBuilder.append(sourceUid);
            stringBuilder.append(", workSource=");
            stringBuilder.append(workSource);
            stringBuilder.append(", tag=");
            stringBuilder.append(tag);
            stringBuilder.append("]");
            Slog.w(str, stringBuilder.toString());
        }
        this.mBatteryStatsService.noteWakupAlarm(sourcePkg, sourceUid, workSource, tag);
    }

    public void noteAlarmStart(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("noteAlarmStart[sourceUid=");
            stringBuilder.append(sourceUid);
            stringBuilder.append(", workSource=");
            stringBuilder.append(workSource);
            stringBuilder.append(", tag=");
            stringBuilder.append(tag);
            stringBuilder.append("]");
            Slog.w(str, stringBuilder.toString());
        }
        this.mBatteryStatsService.noteAlarmStart(tag, workSource, sourceUid);
    }

    public void noteAlarmFinish(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("noteAlarmFinish[sourceUid=");
            stringBuilder.append(sourceUid);
            stringBuilder.append(", workSource=");
            stringBuilder.append(workSource);
            stringBuilder.append(", tag=");
            stringBuilder.append(tag);
            stringBuilder.append("]");
            Slog.w(str, stringBuilder.toString());
        }
        this.mBatteryStatsService.noteAlarmFinish(tag, workSource, sourceUid);
    }

    public boolean killPids(int[] pids, String pReason, boolean secure) {
        if (Binder.getCallingUid() == 1000) {
            String reason = pReason == null ? "Unknown" : pReason;
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int i;
                int i2 = 0;
                int worstType = 0;
                for (int i3 : pids) {
                    int i32;
                    ProcessRecord proc = (ProcessRecord) this.mPidsSelfLocked.get(i32);
                    if (proc != null) {
                        i32 = proc.setAdj;
                        if (i32 > worstType) {
                            worstType = i32;
                        }
                    }
                }
                if (worstType < 906 && worstType > 900) {
                    worstType = 900;
                }
                if (!secure && worstType < 500) {
                    worstType = 500;
                }
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Killing processes ");
                stringBuilder.append(reason);
                stringBuilder.append(" at adjustment ");
                stringBuilder.append(worstType);
                Slog.w(str, stringBuilder.toString());
                while (true) {
                    i = i2;
                    if (i < pids.length) {
                        ProcessRecord proc2 = (ProcessRecord) this.mPidsSelfLocked.get(pids[i]);
                        if (!(proc2 == null || proc2.setAdj < worstType || proc2.killedByAm)) {
                            proc2.kill(reason, true);
                            killed = true;
                        }
                        i2 = i + 1;
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killPids only available to the system");
    }

    public void killUid(int appId, int userId, String reason) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        synchronized (this) {
            long identity;
            try {
                String str;
                boostPriorityForLockedSection();
                identity = Binder.clearCallingIdentity();
                if (reason != null) {
                    str = reason;
                } else {
                    str = "kill uid";
                }
                killPackageProcessesLocked(null, appId, userId, -800, false, true, true, true, str);
                Binder.restoreCallingIdentity(identity);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean killProcessesBelowForeground(String reason) {
        if (Binder.getCallingUid() == 1000) {
            return killProcessesBelowAdj(0, reason);
        }
        throw new SecurityException("killProcessesBelowForeground() only available to system");
    }

    private boolean killProcessesBelowAdj(int belowAdj, String reason) {
        if (Binder.getCallingUid() == 1000) {
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int size = this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    int pid = this.mPidsSelfLocked.keyAt(i);
                    ProcessRecord proc = (ProcessRecord) this.mPidsSelfLocked.valueAt(i);
                    if (!(proc == null || proc.setAdj <= belowAdj || proc.killedByAm)) {
                        proc.kill(reason, true);
                        killed = true;
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killProcessesBelowAdj() only available to system");
    }

    public void hang(IBinder who, boolean allowRestart) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            DeathRecipient death = new DeathRecipient() {
                public void binderDied() {
                    synchronized (this) {
                        notifyAll();
                    }
                }
            };
            try {
                who.linkToDeath(death, 0);
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        Watchdog.getInstance().setAllowRestart(allowRestart);
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Hanging system process at request of pid ");
                        stringBuilder.append(Binder.getCallingPid());
                        Slog.i(str, stringBuilder.toString());
                        synchronized (death) {
                            while (who.isBinderAlive()) {
                                try {
                                    death.wait();
                                } catch (InterruptedException e) {
                                }
                            }
                        }
                        Watchdog.getInstance().setAllowRestart(true);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                    }
                }
                resetPriorityAfterLockedSection();
                return;
            } catch (RemoteException e2) {
                Slog.w(TAG, "hang: given caller IBinder is already dead.");
                return;
            }
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    public void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            Log.i(TAG, "Sending shutdown broadcast...");
            BroadcastReceiver br = new BroadcastReceiver() {
                public void onReceive(Context context, Intent intent) {
                    Log.i(ActivityManagerService.TAG, "Shutting down activity manager...");
                    ActivityManagerService.this.shutdown(10000);
                    Log.i(ActivityManagerService.TAG, "Shutdown complete, restarting!");
                    Process.killProcess(Process.myPid());
                    System.exit(10);
                }
            };
            Intent intent = new Intent("android.intent.action.ACTION_SHUTDOWN");
            intent.addFlags(268435456);
            intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
            br.onReceive(this.mContext, intent);
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    private long getLowRamTimeSinceIdle(long now) {
        long j = this.mLowRamTimeSinceLastIdle;
        long j2 = 0;
        if (this.mLowRamStartTime > 0) {
            j2 = now - this.mLowRamStartTime;
        }
        return j + j2;
    }

    public void performIdleMaintenance() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long now = SystemClock.uptimeMillis();
                    long timeSinceLastIdle = now - this.mLastIdleTime;
                    long lowRamSinceLastIdle = getLowRamTimeSinceIdle(now);
                    this.mLastIdleTime = now;
                    long j = 0;
                    this.mLowRamTimeSinceLastIdle = 0;
                    if (this.mLowRamStartTime != 0) {
                        this.mLowRamStartTime = now;
                    }
                    int i = 128;
                    StringBuilder sb = new StringBuilder(128);
                    sb.append("Idle maintenance over ");
                    TimeUtils.formatDuration(timeSinceLastIdle, sb);
                    sb.append(" low RAM for ");
                    TimeUtils.formatDuration(lowRamSinceLastIdle, sb);
                    Slog.i(TAG, sb.toString());
                    boolean z = true;
                    boolean doKilling = lowRamSinceLastIdle > timeSinceLastIdle / 3;
                    int i2 = this.mLruProcesses.size() - 1;
                    while (true) {
                        int i3 = i2;
                        if (i3 < 0) {
                            break;
                        }
                        int i4;
                        int i5;
                        boolean z2;
                        ProcessRecord proc = (ProcessRecord) this.mLruProcesses.get(i3);
                        if (proc.notCachedSinceIdle) {
                            if (proc.setProcState >= 4 && proc.setProcState <= 9 && doKilling && proc.initialIdlePss != j && proc.lastPss > (proc.initialIdlePss * 3) / 2) {
                                sb = new StringBuilder(i);
                                sb.append("Kill");
                                sb.append(proc.processName);
                                sb.append(" in idle maint: pss=");
                                sb.append(proc.lastPss);
                                sb.append(", swapPss=");
                                sb.append(proc.lastSwapPss);
                                sb.append(", initialPss=");
                                sb.append(proc.initialIdlePss);
                                sb.append(", period=");
                                TimeUtils.formatDuration(timeSinceLastIdle, sb);
                                sb.append(", lowRamPeriod=");
                                TimeUtils.formatDuration(lowRamSinceLastIdle, sb);
                                Slog.wtfQuiet(TAG, sb.toString());
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("idle maint (pss ");
                                stringBuilder.append(proc.lastPss);
                                stringBuilder.append(" from ");
                                stringBuilder.append(proc.initialIdlePss);
                                stringBuilder.append(")");
                                proc.kill(stringBuilder.toString(), z);
                            }
                            i4 = i3;
                            i5 = i;
                            z2 = z;
                        } else if (proc.setProcState >= 13 || proc.setProcState < 0) {
                            i4 = i3;
                            i5 = i;
                            z2 = z;
                        } else {
                            proc.notCachedSinceIdle = z;
                            proc.initialIdlePss = 0;
                            i4 = i3;
                            z2 = z;
                            i5 = 128;
                            proc.nextPssTime = ProcessList.computeNextPssTime(proc.setProcState, null, this.mTestPssMode, isSleepingLocked(), now);
                        }
                        i2 = i4 - 1;
                        z = z2;
                        i = i5;
                        j = 0;
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    public void sendIdleJobTrigger() {
        Throwable th;
        long ident;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            long ident2 = Binder.clearCallingIdentity();
            try {
                long ident3 = ident2;
                try {
                    broadcastIntent(null, new Intent(ACTION_TRIGGER_IDLE).setPackage(PackageManagerService.PLATFORM_PACKAGE_NAME).addFlags(1073741824), null, null, 0, null, null, null, -1, null, false, false, -1);
                    Binder.restoreCallingIdentity(ident3);
                    return;
                } catch (Throwable th2) {
                    th = th2;
                    ident = ident3;
                    Binder.restoreCallingIdentity(ident);
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                ident = ident2;
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    /* JADX WARNING: Removed duplicated region for block: B:113:0x0233  */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x0224  */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x0247 A:{SYNTHETIC, Splitter: B:118:0x0247} */
    /* JADX WARNING: Removed duplicated region for block: B:80:0x0177  */
    /* JADX WARNING: Removed duplicated region for block: B:67:0x0142 A:{SYNTHETIC, Splitter: B:67:0x0142} */
    /* JADX WARNING: Removed duplicated region for block: B:84:0x018b A:{SYNTHETIC, Splitter: B:84:0x018b} */
    /* JADX WARNING: Removed duplicated region for block: B:90:0x0196 A:{SYNTHETIC, Splitter: B:90:0x0196} */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x0224  */
    /* JADX WARNING: Removed duplicated region for block: B:113:0x0233  */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x0247 A:{SYNTHETIC, Splitter: B:118:0x0247} */
    /* JADX WARNING: Missing block: B:124:0x0259, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:125:0x025c, code:
            if (r12 == false) goto L_?;
     */
    /* JADX WARNING: Missing block: B:126:0x025e, code:
            setAlwaysFinish(false);
     */
    /* JADX WARNING: Missing block: B:140:?, code:
            return;
     */
    /* JADX WARNING: Missing block: B:141:?, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected void retrieveSettings() {
        long waitForNetworkTimeoutMs;
        Throwable globalConfig;
        Object obj;
        boolean z;
        boolean supportsLeanbackOnly;
        boolean z2;
        ContentResolver resolver = this.mContext.getContentResolver();
        boolean z3 = this.mContext.getPackageManager().hasSystemFeature("android.software.freeform_window_management") || Global.getInt(resolver, "enable_freeform_support", 0) != 0;
        boolean freeformWindowManagement = z3;
        boolean supportsMultiWindow = ActivityManager.supportsMultiWindow(this.mContext);
        z3 = supportsMultiWindow && this.mContext.getPackageManager().hasSystemFeature("android.software.picture_in_picture");
        boolean supportsPictureInPicture = z3;
        boolean supportsSplitScreenMultiWindow = ActivityManager.supportsSplitScreenMultiWindow(this.mContext);
        boolean supportsMultiDisplay = this.mContext.getPackageManager().hasSystemFeature("android.software.activities_on_secondary_displays");
        String debugApp = Global.getString(resolver, "debug_app");
        boolean waitForDebugger = Global.getInt(resolver, "wait_for_debugger", 0) != 0;
        boolean alwaysFinishActivities = Global.getInt(resolver, "always_finish_activities", 0) != 0;
        boolean forceRtl = Global.getInt(resolver, "debug.force_rtl", 0) != 0;
        boolean forceResizable = Global.getInt(resolver, "force_resizable_activities", 0) != 0;
        long waitForNetworkTimeoutMs2 = Global.getLong(resolver, "network_access_timeout_ms", NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
        boolean supportsLeanbackOnly2 = this.mContext.getPackageManager().hasSystemFeature("android.software.leanback_only");
        this.mHiddenApiBlacklist.registerObserver();
        long waitForNetworkTimeoutMs3 = waitForNetworkTimeoutMs2;
        SystemProperties.set("debug.force_rtl", forceRtl ? "1" : "0");
        Configuration configuration = new Configuration();
        System.getConfiguration(resolver, configuration);
        HwThemeManager.retrieveSimpleUIConfig(resolver, configuration, this.mUserController.getCurrentUserId());
        if (forceRtl) {
            configuration.setLayoutDirection(configuration.locale);
        }
        synchronized (this) {
            Configuration configuration2;
            ContentResolver contentResolver;
            try {
                Configuration globalConfig2;
                String languagetag;
                LocaleList defaultlocallist;
                String str;
                boostPriorityForLockedSection();
                this.mOrigDebugApp = debugApp;
                this.mDebugApp = debugApp;
                this.mOrigWaitForDebugger = waitForDebugger;
                this.mWaitForDebugger = waitForDebugger;
                this.mAlwaysFinishActivities = alwaysFinishActivities;
                this.mSupportsLeanbackOnly = supportsLeanbackOnly2;
                this.mForceResizableActivities = forceResizable;
                z3 = freeformWindowManagement || supportsSplitScreenMultiWindow || supportsPictureInPicture || supportsMultiDisplay;
                if (!supportsMultiWindow && !forceResizable) {
                    waitForNetworkTimeoutMs = supportsLeanbackOnly2;
                } else if (z3) {
                    try {
                        this.mSupportsMultiWindow = true;
                        waitForNetworkTimeoutMs = supportsLeanbackOnly2;
                        try {
                            this.mSupportsFreeformWindowManagement = freeformWindowManagement;
                            this.mSupportsSplitScreenMultiWindow = supportsSplitScreenMultiWindow;
                            this.mSupportsPictureInPicture = supportsPictureInPicture;
                            this.mSupportsMultiDisplay = supportsMultiDisplay;
                            this.mWindowManager.setForceResizableTasks(this.mForceResizableActivities);
                            this.mWindowManager.setSupportsPictureInPicture(this.mSupportsPictureInPicture);
                            updateConfigurationLocked(configuration, null, true);
                            globalConfig2 = getGlobalConfiguration();
                            if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                                configuration2 = configuration;
                            } else {
                                try {
                                    String str2 = TAG_CONFIGURATION;
                                    contentResolver = resolver;
                                    try {
                                        StringBuilder stringBuilder = new StringBuilder();
                                        configuration2 = configuration;
                                        try {
                                            stringBuilder.append("Initial config: ");
                                            stringBuilder.append(globalConfig2);
                                            Slog.v(str2, stringBuilder.toString());
                                        } catch (Throwable th) {
                                            globalConfig = th;
                                        }
                                    } catch (Throwable th2) {
                                        globalConfig = th2;
                                        configuration2 = configuration;
                                        obj = waitForNetworkTimeoutMs;
                                        z = freeformWindowManagement;
                                        supportsLeanbackOnly = waitForNetworkTimeoutMs3;
                                        resetPriorityAfterLockedSection();
                                        throw globalConfig;
                                    }
                                } catch (Throwable th3) {
                                    globalConfig = th3;
                                    contentResolver = resolver;
                                    configuration2 = configuration;
                                    obj = waitForNetworkTimeoutMs;
                                    z = freeformWindowManagement;
                                    supportsLeanbackOnly = waitForNetworkTimeoutMs3;
                                    resetPriorityAfterLockedSection();
                                    throw globalConfig;
                                }
                            }
                            languagetag = SystemProperties.get("persist.sys.locale", BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                            configuration = null;
                            if (!languagetag.isEmpty()) {
                                configuration = LocaleList.forLanguageTags(languagetag);
                            }
                            defaultlocallist = LocaleList.getDefault();
                            if (configuration != null) {
                                try {
                                    if (!configuration.equals(defaultlocallist)) {
                                        languagetag = TAG;
                                        obj = waitForNetworkTimeoutMs;
                                        try {
                                            StringBuilder stringBuilder2 = new StringBuilder();
                                            z = freeformWindowManagement;
                                            try {
                                                stringBuilder2.append("syslocal = ");
                                                stringBuilder2.append(configuration);
                                                stringBuilder2.append("LocaleList.getDefault() = ");
                                                stringBuilder2.append(defaultlocallist);
                                                Slog.i(languagetag, stringBuilder2.toString());
                                                LocaleList.setDefault(configuration);
                                                resolver = this.mContext.getResources();
                                                this.mThumbnailWidth = resolver.getDimensionPixelSize(17104898);
                                                this.mThumbnailHeight = resolver.getDimensionPixelSize(17104897);
                                                this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(resolver.getString(17039767));
                                                this.mUserController.mUserSwitchUiEnabled = resolver.getBoolean(17956918) ^ 1;
                                                this.mUserController.mMaxRunningUsers = resolver.getInteger(17694822);
                                                if ((globalConfig2.uiMode & 4) == 4) {
                                                    this.mFullscreenThumbnailScale = ((float) resolver.getInteger(17694970)) / ((float) globalConfig2.screenWidthDp);
                                                } else {
                                                    this.mFullscreenThumbnailScale = resolver.getFraction(18022411, 1, 1);
                                                }
                                                if (SystemProperties.getBoolean("ro.build.hw_emui_lite.enable", false)) {
                                                    this.mFullscreenThumbnailScale *= resolver.getFraction(34668545, 1, 1);
                                                }
                                                this.mWaitForNetworkTimeoutMs = waitForNetworkTimeoutMs3;
                                            } catch (Throwable th4) {
                                                globalConfig = th4;
                                            }
                                        } catch (Throwable th5) {
                                            globalConfig = th5;
                                            z = freeformWindowManagement;
                                            waitForNetworkTimeoutMs = waitForNetworkTimeoutMs3;
                                            resetPriorityAfterLockedSection();
                                            throw globalConfig;
                                        }
                                    }
                                } catch (Throwable th6) {
                                    globalConfig = th6;
                                    obj = waitForNetworkTimeoutMs;
                                    z = freeformWindowManagement;
                                    supportsLeanbackOnly = waitForNetworkTimeoutMs3;
                                    resetPriorityAfterLockedSection();
                                    throw globalConfig;
                                }
                            }
                            str = languagetag;
                            obj = waitForNetworkTimeoutMs;
                            z = freeformWindowManagement;
                            try {
                                resolver = this.mContext.getResources();
                                this.mThumbnailWidth = resolver.getDimensionPixelSize(17104898);
                                this.mThumbnailHeight = resolver.getDimensionPixelSize(17104897);
                                this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(resolver.getString(17039767));
                                this.mUserController.mUserSwitchUiEnabled = resolver.getBoolean(17956918) ^ 1;
                                this.mUserController.mMaxRunningUsers = resolver.getInteger(17694822);
                                if ((globalConfig2.uiMode & 4) == 4) {
                                }
                                if (SystemProperties.getBoolean("ro.build.hw_emui_lite.enable", false)) {
                                }
                                this.mWaitForNetworkTimeoutMs = waitForNetworkTimeoutMs3;
                            } catch (Throwable th7) {
                                globalConfig = th7;
                                supportsLeanbackOnly = waitForNetworkTimeoutMs3;
                                resetPriorityAfterLockedSection();
                                throw globalConfig;
                            }
                        } catch (Throwable th8) {
                            globalConfig = th8;
                        }
                    } catch (Throwable th9) {
                        globalConfig = th9;
                        contentResolver = resolver;
                        configuration2 = configuration;
                        z = freeformWindowManagement;
                        z2 = supportsLeanbackOnly2;
                        supportsLeanbackOnly = waitForNetworkTimeoutMs3;
                        resetPriorityAfterLockedSection();
                        throw globalConfig;
                    }
                } else {
                    waitForNetworkTimeoutMs = supportsLeanbackOnly2;
                }
                try {
                    this.mSupportsMultiWindow = false;
                    this.mSupportsFreeformWindowManagement = false;
                    this.mSupportsSplitScreenMultiWindow = false;
                    this.mSupportsPictureInPicture = false;
                    this.mSupportsMultiDisplay = false;
                    this.mWindowManager.setForceResizableTasks(this.mForceResizableActivities);
                    this.mWindowManager.setSupportsPictureInPicture(this.mSupportsPictureInPicture);
                    updateConfigurationLocked(configuration, null, true);
                    globalConfig2 = getGlobalConfiguration();
                    if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                    }
                } catch (Throwable th10) {
                    globalConfig = th10;
                    contentResolver = resolver;
                    configuration2 = configuration;
                    obj = waitForNetworkTimeoutMs;
                    z = freeformWindowManagement;
                    resetPriorityAfterLockedSection();
                    throw globalConfig;
                }
                try {
                    languagetag = SystemProperties.get("persist.sys.locale", BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                    configuration = null;
                    if (languagetag.isEmpty()) {
                    }
                    defaultlocallist = LocaleList.getDefault();
                    if (configuration != null) {
                    }
                    str = languagetag;
                    obj = waitForNetworkTimeoutMs;
                    z = freeformWindowManagement;
                    resolver = this.mContext.getResources();
                    this.mThumbnailWidth = resolver.getDimensionPixelSize(17104898);
                    this.mThumbnailHeight = resolver.getDimensionPixelSize(17104897);
                    this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(resolver.getString(17039767));
                    this.mUserController.mUserSwitchUiEnabled = resolver.getBoolean(17956918) ^ 1;
                    this.mUserController.mMaxRunningUsers = resolver.getInteger(17694822);
                    if ((globalConfig2.uiMode & 4) == 4) {
                    }
                    if (SystemProperties.getBoolean("ro.build.hw_emui_lite.enable", false)) {
                    }
                } catch (Throwable th11) {
                    globalConfig = th11;
                    obj = waitForNetworkTimeoutMs;
                    z = freeformWindowManagement;
                    supportsLeanbackOnly = waitForNetworkTimeoutMs3;
                    resetPriorityAfterLockedSection();
                    throw globalConfig;
                }
                try {
                    this.mWaitForNetworkTimeoutMs = waitForNetworkTimeoutMs3;
                } catch (Throwable th12) {
                    globalConfig = th12;
                    resetPriorityAfterLockedSection();
                    throw globalConfig;
                }
            } catch (Throwable th13) {
                globalConfig = th13;
                contentResolver = resolver;
                configuration2 = configuration;
                z = freeformWindowManagement;
                z2 = supportsLeanbackOnly2;
                waitForNetworkTimeoutMs = waitForNetworkTimeoutMs3;
                resetPriorityAfterLockedSection();
                throw globalConfig;
            }
        }
        z2 = waitForNetworkTimeoutMs;
        resetPriorityAfterLockedSection();
        throw globalConfig;
        resetPriorityAfterLockedSection();
        throw globalConfig;
    }

    private void updateForceBackgroundCheck(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mForceBackgroundCheck != enabled) {
                    this.mForceBackgroundCheck = enabled;
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Force background check ");
                        stringBuilder.append(enabled ? "enabled" : "disabled");
                        Slog.i(str, stringBuilder.toString());
                    }
                    if (this.mForceBackgroundCheck) {
                        doStopUidForIdleUidsLocked();
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppErrors.killAppAtUserRequestLocked(app, fromDialog);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private ProcessErrorStateInfo generateProcessError(ProcessRecord app, int condition, String activity, String shortMsg, String longMsg, String stackTrace) {
        ProcessErrorStateInfo report = new ProcessErrorStateInfo();
        report.condition = condition;
        report.processName = app.processName;
        report.pid = app.pid;
        report.uid = app.info.uid;
        report.tag = activity;
        report.shortMsg = shortMsg;
        report.longMsg = longMsg;
        report.stackTrace = stackTrace;
        return report;
    }

    void skipCurrentReceiverLocked(ProcessRecord app) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipCurrentReceiverLocked(app);
        }
    }

    public void handleApplicationCrash(IBinder app, ParcelableCrashInfo crashInfo) {
        IBinder iBinder = app;
        ParcelableCrashInfo parcelableCrashInfo = crashInfo;
        ProcessRecord r = findAppProcess(iBinder, "Crash");
        String systemServer = "system_server";
        String str = iBinder == null ? "system_server" : r == null ? Binder.getCallingPid() == MY_PID ? "system_server" : "mystery" : r.processName;
        String processName = str;
        if (r != null) {
            this.mDAProxy.notifyProcessWillDie(false, true, false, null, r.pid, r.uid);
        }
        if (!(parcelableCrashInfo == null || parcelableCrashInfo.stackTrace == null)) {
            String stackTrace = parcelableCrashInfo.stackTrace;
            if (stackTrace.endsWith("-loghandler")) {
                this.mLastAppCrashedPid = r == null ? -1 : r.pid;
                addErrorToDropBox("crash", r, processName, null, null, null, null, null, parcelableCrashInfo);
                return;
            }
        }
        handleApplicationCrashInner("crash", r, processName, parcelableCrashInfo);
    }

    void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName, CrashInfo crashInfo) {
        int i;
        ProcessRecord processRecord = r;
        CrashInfo crashInfo2 = crashInfo;
        Object[] objArr = new Object[8];
        objArr[0] = Integer.valueOf(Binder.getCallingPid());
        objArr[1] = Integer.valueOf(UserHandle.getUserId(Binder.getCallingUid()));
        objArr[2] = processName;
        objArr[3] = Integer.valueOf(processRecord == null ? -1 : processRecord.info.flags);
        objArr[4] = crashInfo2.exceptionClassName;
        objArr[5] = crashInfo2.exceptionMessage;
        objArr[6] = crashInfo2.throwFileName;
        objArr[7] = Integer.valueOf(crashInfo2.throwLineNumber);
        EventLog.writeEvent(EventLogTags.AM_CRASH, objArr);
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        String str = (processRecord == null || processRecord.info == null) ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : processRecord.info.packageName;
        String str2 = str;
        int i2 = (processRecord == null || processRecord.info == null) ? 0 : processRecord.info.isInstantApp() ? 2 : 1;
        int i3 = processRecord != null ? r.isInterestingToUserLocked() ? 2 : 1 : 0;
        StatsLog.write(78, callingUid, eventType, processName, callingPid, str2, i2, i3);
        if (processRecord == null || processRecord.pid != this.mLastAppCrashedPid) {
            i = -1;
            addErrorToDropBox(eventType, processRecord, processName, null, null, null, null, null, crashInfo2);
        } else {
            str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("The same pid with last one, do not add dropbox and clear mLastCrashedPid. mLastAppCrashedPid==");
            stringBuilder.append(this.mLastAppCrashedPid);
            Slog.e(str, stringBuilder.toString());
            i = -1;
        }
        this.mLastAppCrashedPid = i;
        this.mAppErrors.crashApplication(processRecord, crashInfo2);
    }

    public void handleApplicationStrictModeViolation(IBinder app, int violationMask, ViolationInfo info) {
        ProcessRecord r = findAppProcess(app, "StrictMode");
        if ((DumpState.DUMP_COMPILER_STATS & violationMask) != 0) {
            Integer stackFingerprint = Integer.valueOf(info.hashCode());
            boolean logIt = true;
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                if (this.mAlreadyLoggedViolatedStacks.contains(stackFingerprint)) {
                    logIt = false;
                } else {
                    if (this.mAlreadyLoggedViolatedStacks.size() >= MAX_DUP_SUPPRESSED_STACKS) {
                        this.mAlreadyLoggedViolatedStacks.clear();
                    }
                    this.mAlreadyLoggedViolatedStacks.add(stackFingerprint);
                }
            }
            if (logIt) {
                logStrictModeViolationToDropBox(r, info);
            }
        }
        if ((131072 & violationMask) != 0) {
            AppErrorResult result = new AppErrorResult();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long origId = Binder.clearCallingIdentity();
                    Message msg = Message.obtain();
                    msg.what = 26;
                    HashMap<String, Object> data = new HashMap();
                    data.put(IZRHungService.PARA_RESULT, result);
                    data.put("app", r);
                    data.put("violationMask", Integer.valueOf(violationMask));
                    data.put("info", info);
                    msg.obj = data;
                    this.mUiHandler.sendMessage(msg);
                    Binder.restoreCallingIdentity(origId);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            int res = result.get();
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("handleApplicationStrictModeViolation; res=");
            stringBuilder.append(res);
            Slog.w(str, stringBuilder.toString());
        }
    }

    private void logStrictModeViolationToDropBox(ProcessRecord process, ViolationInfo info) {
        if (info != null) {
            int i = 0;
            boolean isSystemApp = process == null || (process.info.flags & NetworkConstants.ICMPV6_ECHO_REPLY_TYPE) != 0;
            String processName = process == null ? Shell.NIGHT_MODE_STR_UNKNOWN : process.processName;
            DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService("dropbox");
            String dropboxTag = new StringBuilder();
            dropboxTag.append(processClass(process));
            dropboxTag.append("_strictmode");
            dropboxTag = dropboxTag.toString();
            if (this.mSystemProvidersInstalled && dbox != null && dbox.isTagEnabled(dropboxTag)) {
                StringBuilder sb = new StringBuilder(1024);
                synchronized (sb) {
                    appendDropBoxProcessHeaders(process, processName, sb);
                    sb.append("Build: ");
                    sb.append(Build.FINGERPRINT);
                    sb.append("\n");
                    sb.append("System-App: ");
                    sb.append(isSystemApp);
                    sb.append("\n");
                    sb.append("Uptime-Millis: ");
                    sb.append(info.violationUptimeMillis);
                    sb.append("\n");
                    if (info.violationNumThisLoop != 0) {
                        sb.append("Loop-Violation-Number: ");
                        sb.append(info.violationNumThisLoop);
                        sb.append("\n");
                    }
                    if (info.numAnimationsRunning != 0) {
                        sb.append("Animations-Running: ");
                        sb.append(info.numAnimationsRunning);
                        sb.append("\n");
                    }
                    if (info.broadcastIntentAction != null) {
                        sb.append("Broadcast-Intent-Action: ");
                        sb.append(info.broadcastIntentAction);
                        sb.append("\n");
                    }
                    if (info.durationMillis != -1) {
                        sb.append("Duration-Millis: ");
                        sb.append(info.durationMillis);
                        sb.append("\n");
                    }
                    if (info.numInstances != -1) {
                        sb.append("Instance-Count: ");
                        sb.append(info.numInstances);
                        sb.append("\n");
                    }
                    if (info.tags != null) {
                        String[] strArr = info.tags;
                        int length = strArr.length;
                        while (i < length) {
                            String tag = strArr[i];
                            sb.append("Span-Tag: ");
                            sb.append(tag);
                            sb.append("\n");
                            i++;
                        }
                    }
                    sb.append("\n");
                    sb.append(info.getStackTrace());
                    sb.append("\n");
                    if (info.getViolationDetails() != null) {
                        sb.append(info.getViolationDetails());
                        sb.append("\n");
                    }
                }
                IoThread.getHandler().post(new -$$Lambda$ActivityManagerService$w5jCshLsk1jfv4UDTmEfq_HU0OQ(dbox, dropboxTag, sb.toString()));
            }
        }
    }

    public boolean handleApplicationWtf(IBinder app, String tag, boolean system, ParcelableCrashInfo crashInfo) {
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        if (system) {
            final int i = callingUid;
            final int i2 = callingPid;
            final IBinder iBinder = app;
            final String str = tag;
            final ParcelableCrashInfo parcelableCrashInfo = crashInfo;
            this.mHandler.post(new Runnable() {
                public void run() {
                    ActivityManagerService.this.handleApplicationWtfInner(i, i2, iBinder, str, parcelableCrashInfo);
                }
            });
            return false;
        }
        ProcessRecord r = handleApplicationWtfInner(callingUid, callingPid, app, tag, crashInfo);
        boolean isFatal = Build.IS_ENG || Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
        boolean isSystem = r == null || r.persistent;
        if (!isFatal || isSystem) {
            ParcelableCrashInfo parcelableCrashInfo2 = crashInfo;
            return false;
        }
        this.mAppErrors.crashApplication(r, crashInfo);
        return true;
    }

    ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag, CrashInfo crashInfo) {
        IBinder iBinder = app;
        String str = tag;
        CrashInfo crashInfo2 = crashInfo;
        ProcessRecord r = findAppProcess(iBinder, "WTF");
        String str2 = iBinder == null ? "system_server" : r == null ? Shell.NIGHT_MODE_STR_UNKNOWN : r.processName;
        String processName = str2;
        Object[] objArr = new Object[6];
        objArr[0] = Integer.valueOf(UserHandle.getUserId(callingUid));
        objArr[1] = Integer.valueOf(callingPid);
        objArr[2] = processName;
        objArr[3] = Integer.valueOf(r == null ? -1 : r.info.flags);
        objArr[4] = str;
        objArr[5] = crashInfo2 == null ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : crashInfo2.exceptionMessage;
        EventLog.writeEvent(EventLogTags.AM_WTF, objArr);
        StatsLog.write(80, callingUid, str, processName, callingPid);
        addErrorToDropBox("wtf", r, processName, null, null, str, null, null, crashInfo2);
        return r;
    }

    private ProcessRecord findAppProcess(IBinder app, String reason) {
        ProcessRecord p;
        if (app == null) {
            return null;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int NP = this.mProcessNames.getMap().size();
                for (int ip = 0; ip < NP; ip++) {
                    SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                    int NA = apps.size();
                    int ia = 0;
                    while (ia < NA) {
                        p = (ProcessRecord) apps.valueAt(ia);
                        if (p.thread == null || p.thread.asBinder() != app) {
                            ia++;
                        }
                    }
                }
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Can't find mystery application for ");
                stringBuilder.append(reason);
                stringBuilder.append(" from pid=");
                stringBuilder.append(Binder.getCallingPid());
                stringBuilder.append(" uid=");
                stringBuilder.append(Binder.getCallingUid());
                stringBuilder.append(": ");
                stringBuilder.append(app);
                Slog.w(str, stringBuilder.toString());
                resetPriorityAfterLockedSection();
                return null;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return p;
    }

    private void appendDropBoxProcessHeaders(ProcessRecord process, String processName, StringBuilder sb) {
        if (process == null) {
            sb.append("Process: ");
            sb.append(processName);
            sb.append("\n");
            return;
        }
        synchronized (this) {
            String pkg;
            try {
                boostPriorityForLockedSection();
                sb.append("Process: ");
                sb.append(processName);
                sb.append("\n");
                sb.append("PID: ");
                sb.append(process.pid);
                sb.append("\n");
                int flags = process.info.flags;
                IPackageManager pm = AppGlobals.getPackageManager();
                sb.append("Flags: 0x");
                sb.append(Integer.toHexString(flags));
                sb.append("\n");
                for (int ip = 0; ip < process.pkgList.size(); ip++) {
                    pkg = (String) process.pkgList.keyAt(ip);
                    sb.append("Package: ");
                    sb.append(pkg);
                    PackageInfo pi = pm.getPackageInfo(pkg, 0, UserHandle.getCallingUserId());
                    if (pi != null) {
                        sb.append(" v");
                        sb.append(pi.getLongVersionCode());
                        if (pi.versionName != null) {
                            sb.append(" (");
                            sb.append(pi.versionName);
                            sb.append(")");
                        }
                    }
                    sb.append("\n");
                }
                if (process.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
            } catch (RemoteException e) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Error getting package info: ");
                stringBuilder.append(pkg);
                Slog.e(str, stringBuilder.toString(), e);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private static String processClass(ProcessRecord process) {
        if (process == null || process.pid == MY_PID) {
            return "system_server";
        }
        if ((process.info.flags & 1) != 0) {
            return "system_app";
        }
        return "data_app";
    }

    public void addErrorToDropBox(String eventType, ProcessRecord process, String processName, ActivityRecord activity, ActivityRecord parent, String subject, String report, File dataFile, CrashInfo crashInfo) {
        String str = eventType;
        ProcessRecord processRecord = process;
        ActivityRecord activityRecord = activity;
        ActivityRecord activityRecord2 = parent;
        String str2 = subject;
        CrashInfo crashInfo2 = crashInfo;
        if (ServiceManager.getService("dropbox") != null) {
            String dropboxTag;
            DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService(DropBoxManager.class);
            String str3 = processName;
            if ("mystery".equals(str3)) {
                dropboxTag = new StringBuilder();
                dropboxTag.append("data_app_");
                dropboxTag.append(str);
                dropboxTag = dropboxTag.toString();
                str3 = Shell.NIGHT_MODE_STR_UNKNOWN;
            } else {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append(processClass(process));
                stringBuilder.append("_");
                stringBuilder.append(str);
                dropboxTag = stringBuilder.toString();
            }
            String processName2 = str3;
            final String dropboxTag2 = dropboxTag;
            String str4;
            DropBoxManager dropBoxManager;
            if (!this.mSystemProvidersInstalled || dbox == null) {
                str4 = processName2;
                dropBoxManager = dbox;
            } else if (dbox.isTagEnabled(dropboxTag2)) {
                long now = SystemClock.elapsedRealtime();
                if (now - this.mWtfClusterStart > JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY) {
                    this.mWtfClusterStart = now;
                    this.mWtfClusterCount = 1;
                } else {
                    int i = this.mWtfClusterCount;
                    this.mWtfClusterCount = i + 1;
                    if (i >= 5) {
                        return;
                    }
                }
                StringBuilder sb = new StringBuilder(1024);
                appendDropBoxProcessHeaders(processRecord, processName2, sb);
                if (processRecord != null) {
                    sb.append("Foreground: ");
                    sb.append(process.isInterestingToUserLocked() ? "Yes" : "No");
                    sb.append("\n");
                }
                if (activityRecord != null) {
                    sb.append("Activity: ");
                    sb.append(activityRecord.shortComponentName);
                    sb.append("\n");
                }
                if (!(activityRecord2 == null || activityRecord2.app == null || activityRecord2.app.pid == processRecord.pid)) {
                    sb.append("Parent-Process: ");
                    sb.append(activityRecord2.app.processName);
                    sb.append("\n");
                }
                if (!(activityRecord2 == null || activityRecord2 == activityRecord)) {
                    sb.append("Parent-Activity: ");
                    sb.append(activityRecord2.shortComponentName);
                    sb.append("\n");
                }
                if (str2 != null) {
                    sb.append("Subject: ");
                    sb.append(str2);
                    sb.append("\n");
                }
                if (processRecord != null) {
                    long crashTimeInterval = (SystemClock.elapsedRealtime() - processRecord.startTime) / 1000;
                    String timeInfo = new StringBuilder();
                    timeInfo.append(crashTimeInterval);
                    timeInfo.append("s");
                    timeInfo = timeInfo.toString();
                    sb.append("Lifetime: ");
                    sb.append(timeInfo);
                    sb.append("\n");
                }
                sb.append("Build: ");
                sb.append(Build.FINGERPRINT);
                sb.append("\n");
                if (Debug.isDebuggerConnected()) {
                    sb.append("Debugger: Connected\n");
                }
                sb.append("\n");
                if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE)) || this.mController != null) {
                    boolean needCpuInfo = "watchdog".equals(str);
                    if (!(!"crash".equals(str) || crashInfo2 == null || crashInfo2.exceptionClassName == null)) {
                        needCpuInfo = crashInfo2.exceptionClassName.contains("TimeoutException");
                    }
                    if (needCpuInfo) {
                        synchronized (this.mProcessCpuThread) {
                            sb.append(this.mProcessCpuTracker.printCurrentLoad());
                            sb.append(this.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
                        }
                        sb.append("\n");
                    }
                }
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Error dump: ");
                stringBuilder2.append(dropboxTag2);
                final String str5 = report;
                final StringBuilder stringBuilder3 = sb;
                final File file = dataFile;
                dropBoxManager = dbox;
                final CrashInfo crashInfo3 = crashInfo2;
                final DropBoxManager dropBoxManager2 = dropBoxManager;
                Thread worker = new Thread(stringBuilder2.toString()) {
                    /* JADX WARNING: Missing block: B:41:0x0143, code:
            if (r4 == null) goto L_0x014e;
     */
                    /* Code decompiled incorrectly, please refer to instructions dump. */
                    public void run() {
                        if (str5 != null) {
                            stringBuilder3.append(str5);
                        }
                        String setting = new StringBuilder();
                        setting.append("logcat_for_");
                        setting.append(dropboxTag2);
                        int lines = Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), setting.toString(), 0);
                        int maxDataFileSize = (ActivityManagerService.DROPBOX_MAX_SIZE - stringBuilder3.length()) - (lines * 100);
                        if (file != null && maxDataFileSize > 0) {
                            try {
                                if (Log.HWINFO) {
                                    stringBuilder3.append(FileUtils.readTextFile(file, 0, null));
                                } else {
                                    stringBuilder3.append(FileUtils.readTextFile(file, maxDataFileSize, "\n\n[[TRUNCATED]]"));
                                }
                            } catch (IOException e) {
                                String str = ActivityManagerService.TAG;
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("Error reading ");
                                stringBuilder.append(file);
                                Slog.e(str, stringBuilder.toString(), e);
                            }
                        }
                        if (!(crashInfo3 == null || crashInfo3.stackTrace == null)) {
                            stringBuilder3.append(crashInfo3.stackTrace);
                        }
                        if (lines > 0) {
                            stringBuilder3.append("\n");
                            InputStreamReader input = null;
                            try {
                                Process logcat = new ProcessBuilder(new String[]{"/system/bin/timeout", "-k", "15s", "10s", "/system/bin/logcat", "-v", "threadtime", "-b", "events", "-b", "system", "-b", "main", "-b", "crash", "-t", String.valueOf(lines)}).redirectErrorStream(true).start();
                                try {
                                    logcat.getOutputStream().close();
                                } catch (IOException e2) {
                                }
                                try {
                                    logcat.getErrorStream().close();
                                } catch (IOException e3) {
                                }
                                input = new InputStreamReader(logcat.getInputStream());
                                char[] buf = new char[8192];
                                while (true) {
                                    int read = input.read(buf);
                                    int num = read;
                                    if (read > 0) {
                                        stringBuilder3.append(buf, 0, num);
                                    }
                                    try {
                                        break;
                                    } catch (IOException e4) {
                                    }
                                }
                            } catch (IOException e5) {
                                Slog.e(ActivityManagerService.TAG, "Error running logcat", e5);
                            } catch (Throwable th) {
                                if (input != null) {
                                    try {
                                        input.close();
                                    } catch (IOException e6) {
                                    }
                                }
                            }
                            input.close();
                        }
                        dropBoxManager2.addText(dropboxTag2, stringBuilder3.toString());
                    }
                };
                if (processRecord == null) {
                    int oldMask = StrictMode.allowThreadDiskWritesMask();
                    try {
                        worker.run();
                        StrictMode.setThreadPolicyMask(oldMask);
                    } catch (Throwable th) {
                        StrictMode.setThreadPolicyMask(oldMask);
                        Throwable th2 = th;
                    }
                } else {
                    worker.start();
                }
            } else {
                String str6 = dropboxTag2;
                str4 = processName2;
                dropBoxManager = dbox;
            }
        }
    }

    public List<ProcessErrorStateInfo> getProcessesInErrorState() {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_GETPROCESSESINERRORSTATE);
        enforceNotIsolatedCaller("getProcessesInErrorState");
        List<ProcessErrorStateInfo> errList = null;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", Binder.getCallingUid()) == 0;
        int userId = UserHandle.getUserId(Binder.getCallingUid());
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord app = (ProcessRecord) this.mLruProcesses.get(i);
                    if ((allUsers || app.userId == userId) && app.thread != null && (app.crashing || app.notResponding)) {
                        ProcessErrorStateInfo report = null;
                        if (app.crashing) {
                            report = app.crashingReport;
                        } else if (app.notResponding) {
                            report = app.notRespondingReport;
                        }
                        if (report != null) {
                            if (errList == null) {
                                errList = new ArrayList(1);
                            }
                            errList.add(report);
                        } else {
                            String str = TAG;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("Missing app error report, app = ");
                            stringBuilder.append(app.processName);
                            stringBuilder.append(" crashing = ");
                            stringBuilder.append(app.crashing);
                            stringBuilder.append(" notResponding = ");
                            stringBuilder.append(app.notResponding);
                            Slog.w(str, stringBuilder.toString());
                        }
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return errList;
    }

    static int procStateToImportance(int procState, int memAdj, RunningAppProcessInfo currApp, int clientTargetSdk) {
        int imp = RunningAppProcessInfo.procStateToImportanceForTargetSdk(procState, clientTargetSdk);
        if (imp == 400) {
            currApp.lru = memAdj;
        } else {
            currApp.lru = 0;
        }
        return imp;
    }

    private void fillInProcMemInfo(ProcessRecord app, RunningAppProcessInfo outInfo, int clientTargetSdk) {
        outInfo.pid = app.pid;
        outInfo.uid = app.info.uid;
        if (this.mHeavyWeightProcess == app) {
            outInfo.flags |= 1;
        }
        if (app.persistent) {
            outInfo.flags |= 2;
        }
        if (app.activities.size() > 0) {
            outInfo.flags |= 4;
        }
        outInfo.lastTrimLevel = app.trimMemoryLevel;
        outInfo.importance = procStateToImportance(app.curProcState, app.curAdj, outInfo, clientTargetSdk);
        outInfo.importanceReasonCode = app.adjTypeCode;
        outInfo.processState = app.curProcState;
    }

    public List<RunningAppProcessInfo> getRunningAppProcesses() {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_GETRUNNINGAPPPROCESSES);
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = Binder.getCallingUid();
        int clientTargetSdk = getPackageManagerInternalLocked().getUidTargetSdkVersion(callingUid);
        List<RunningAppProcessInfo> runList = null;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = UserHandle.getUserId(callingUid);
        boolean allUids = isGetTasksAllowed("getRunningAppProcesses", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int i = this.mLruProcesses.size() - 1;
                while (true) {
                    int i2 = i;
                    if (i2 < 0) {
                        break;
                    }
                    ProcessRecord app = (ProcessRecord) this.mLruProcesses.get(i2);
                    String EXCLUDE_PROCESS = "com.huawei.android.pushagent.PushService";
                    if ((allUsers || app.userId == userId) && !((!allUids && app.uid != callingUid) || "com.huawei.android.pushagent.PushService".equals(app.processName) || app.thread == null || app.crashing || app.notResponding)) {
                        RunningAppProcessInfo currApp = new RunningAppProcessInfo(app.processName, app.pid, app.getPackageList());
                        fillInProcMemInfo(app, currApp, clientTargetSdk);
                        if (app.adjSource instanceof ProcessRecord) {
                            currApp.importanceReasonPid = ((ProcessRecord) app.adjSource).pid;
                            currApp.importanceReasonImportance = RunningAppProcessInfo.procStateToImportance(app.adjSourceProcState);
                        } else if (app.adjSource instanceof ActivityRecord) {
                            ActivityRecord r = app.adjSource;
                            if (r.app != null) {
                                currApp.importanceReasonPid = r.app.pid;
                            }
                        }
                        if (app.adjTarget instanceof ComponentName) {
                            currApp.importanceReasonComponent = (ComponentName) app.adjTarget;
                        }
                        if (runList == null) {
                            runList = new ArrayList();
                        }
                        runList.add(currApp);
                    }
                    i = i2 - 1;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return runList;
    }

    public List<ApplicationInfo> getRunningExternalApplications() {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List<RunningAppProcessInfo> runningApps = getRunningAppProcesses();
        List<ApplicationInfo> retList = new ArrayList();
        if (runningApps != null && runningApps.size() > 0) {
            Set<String> extList = new HashSet();
            Iterator it = runningApps.iterator();
            while (true) {
                int i = 0;
                if (!it.hasNext()) {
                    break;
                }
                RunningAppProcessInfo app = (RunningAppProcessInfo) it.next();
                if (app.pkgList != null) {
                    String[] strArr = app.pkgList;
                    int length = strArr.length;
                    while (i < length) {
                        extList.add(strArr[i]);
                        i++;
                    }
                }
            }
            IPackageManager pm = AppGlobals.getPackageManager();
            for (String pkg : extList) {
                try {
                    ApplicationInfo info = pm.getApplicationInfo(pkg, 0, UserHandle.getCallingUserId());
                    if (!(info == null || (info.flags & 262144) == 0)) {
                        retList.add(info);
                    }
                } catch (RemoteException e) {
                }
            }
        }
        return retList;
    }

    public void getMyMemoryState(RunningAppProcessInfo outState) {
        if (outState != null) {
            enforceNotIsolatedCaller("getMyMemoryState");
            int clientTargetSdk = getPackageManagerInternalLocked().getUidTargetSdkVersion(Binder.getCallingUid());
            synchronized (this) {
                try {
                    ProcessRecord proc;
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = (ProcessRecord) this.mPidsSelfLocked.get(Binder.getCallingPid());
                    }
                    if (proc != null) {
                        fillInProcMemInfo(proc, outState, clientTargetSdk);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new IllegalArgumentException("outState is null");
    }

    public int getMemoryTrimLevel() {
        int i;
        enforceNotIsolatedCaller("getMyMemoryState");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                i = this.mLastMemoryLevel;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return i;
    }

    public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ShellCallback callback, ResultReceiver resultReceiver) {
        new ActivityManagerShellCommand(this, false).exec(this, in, out, err, args, callback, resultReceiver);
    }

    SleepToken acquireSleepToken(String tag, int displayId) {
        SleepToken token;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                token = this.mStackSupervisor.createSleepTokenLocked(tag, displayId);
                updateSleepIfNeededLocked();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return token;
    }

    protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
        PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
    }

    private void writeActivitiesToProtoLocked(ProtoOutputStream proto) {
        this.mStackSupervisor.writeToProto(proto, 1146756268033L);
    }

    private void dumpLastANRLocked(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER LAST ANR (dumpsys activity lastanr)");
        if (this.mLastANRState == null) {
            pw.println("  <no ANR has occurred since boot>");
        } else {
            pw.println(this.mLastANRState);
        }
    }

    private void dumpHandler(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER HANDLER (dumpsys activity handler)");
        pw.println();
        pw.println(" mHandler:");
        this.mHandler.dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" mUiHandler:");
        this.mUiHandler.dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" UiThread.getHandler(): ");
        UiThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" FgThread.getHandler(): ");
        FgThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" IoThread.getHandler(): ");
        IoThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" DisplayThread.getHandler(): ");
        DisplayThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" AnimationThread.getHandler(): ");
        AnimationThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println();
        pw.println(" SurfaceAnimationThread.getHandler(): ");
        SurfaceAnimationThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" BackgroundThread.getHandler(): ");
        BackgroundThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
    }

    private void dumpActivityContainersLocked(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER STARTER (dumpsys activity containers)");
        this.mStackSupervisor.dumpChildrenNames(pw, " ");
        pw.println(" ");
    }

    private void dumpActivityStarterLocked(PrintWriter pw, String dumpPackage) {
        pw.println("ACTIVITY MANAGER STARTER (dumpsys activity starter)");
        this.mActivityStartController.dump(pw, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, dumpPackage);
    }

    void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage) {
        dumpActivitiesLocked(fd, pw, args, opti, dumpAll, dumpClient, dumpPackage, "ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)");
    }

    void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage, String header) {
        pw.println(header);
        boolean printedAnything = this.mStackSupervisor.dumpActivitiesLocked(fd, pw, dumpAll, dumpClient, dumpPackage);
        boolean needSep = printedAnything;
        if (ActivityStackSupervisor.printThisActivity(pw, this.mStackSupervisor.getResumedActivityLocked(), dumpPackage, needSep, "  ResumedActivity: ")) {
            printedAnything = true;
            needSep = false;
        }
        if (dumpPackage == null) {
            if (needSep) {
                pw.println();
            }
            printedAnything = true;
            this.mStackSupervisor.dump(pw, "  ");
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage) {
        ActivityManagerService activityManagerService = this;
        PrintWriter printWriter = pw;
        Object obj = dumpPackage;
        printWriter.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
        int dumpUid = 0;
        int i = 0;
        if (obj != null) {
            try {
                dumpUid = AppGlobals.getPackageManager().getPackageUid(obj, DumpState.DUMP_CHANGES, 0);
            } catch (RemoteException e) {
            }
        }
        boolean printedAnything = false;
        long now = SystemClock.uptimeMillis();
        int i1 = 0;
        int N1 = activityManagerService.mAssociations.size();
        while (i1 < N1) {
            int dumpUid2;
            int N12;
            String str;
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents = (ArrayMap) activityManagerService.mAssociations.valueAt(i1);
            int i2 = 0;
            int N2 = targetComponents.size();
            while (i2 < N2) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2;
                SparseArray<ArrayMap<String, Association>> sourceUids = (SparseArray) targetComponents.valueAt(i2);
                int i3 = 0;
                int N3 = sourceUids.size();
                while (i3 < N3) {
                    ArrayMap<String, Association> sourceProcesses = (ArrayMap) sourceUids.valueAt(i3);
                    int N4 = sourceProcesses.size();
                    boolean printedAnything2 = printedAnything;
                    int i4 = 0;
                    while (true) {
                        int N42 = N4;
                        if (i4 >= N42) {
                            break;
                        }
                        ArrayMap<String, Association> sourceProcesses2;
                        int N43 = N42;
                        Association ass = (Association) sourceProcesses.valueAt(i4);
                        if (obj != null) {
                            sourceProcesses2 = sourceProcesses;
                            if (!(ass.mTargetComponent.getPackageName().equals(obj) || UserHandle.getAppId(ass.mSourceUid) == dumpUid)) {
                                dumpUid2 = dumpUid;
                                N12 = N1;
                                targetComponents2 = targetComponents;
                                i4++;
                                N4 = N43;
                                sourceProcesses = sourceProcesses2;
                                dumpUid = dumpUid2;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                str = dumpPackage;
                            }
                        } else {
                            sourceProcesses2 = sourceProcesses;
                        }
                        printedAnything2 = true;
                        printWriter.print("  ");
                        printWriter.print(ass.mTargetProcess);
                        printWriter.print(SliceAuthority.DELIMITER);
                        UserHandle.formatUid(printWriter, ass.mTargetUid);
                        printWriter.print(" <- ");
                        printWriter.print(ass.mSourceProcess);
                        printWriter.print(SliceAuthority.DELIMITER);
                        UserHandle.formatUid(printWriter, ass.mSourceUid);
                        pw.println();
                        printWriter.print("    via ");
                        printWriter.print(ass.mTargetComponent.flattenToShortString());
                        pw.println();
                        printWriter.print("    ");
                        dumpUid2 = dumpUid;
                        long dur = ass.mTime;
                        if (ass.mNesting > 0) {
                            N12 = N1;
                            targetComponents2 = targetComponents;
                            dur += now - ass.mStartTime;
                        } else {
                            N12 = N1;
                            targetComponents2 = targetComponents;
                        }
                        TimeUtils.formatDuration(dur, printWriter);
                        printWriter.print(" (");
                        printWriter.print(ass.mCount);
                        printWriter.print(" times)");
                        printWriter.print("  ");
                        i = 0;
                        while (i < ass.mStateTimes.length) {
                            long amt = ass.mStateTimes[i];
                            long dur2 = dur;
                            if (ass.mLastState - 0 == i) {
                                amt += now - ass.mLastStateUptime;
                            }
                            if (amt != 0) {
                                printWriter.print(" ");
                                printWriter.print(ProcessList.makeProcStateString(i + 0));
                                printWriter.print("=");
                                TimeUtils.formatDuration(amt, printWriter);
                                if (ass.mLastState - 0 == i) {
                                    printWriter.print("*");
                                }
                            }
                            i++;
                            dur = dur2;
                        }
                        pw.println();
                        if (ass.mNesting > 0) {
                            printWriter.print("    Currently active: ");
                            TimeUtils.formatDuration(now - ass.mStartTime, printWriter);
                            pw.println();
                        }
                        i4++;
                        N4 = N43;
                        sourceProcesses = sourceProcesses2;
                        dumpUid = dumpUid2;
                        N1 = N12;
                        targetComponents = targetComponents2;
                        str = dumpPackage;
                    }
                    N12 = N1;
                    targetComponents2 = targetComponents;
                    i3++;
                    i = 0;
                    printedAnything = printedAnything2;
                    dumpUid = dumpUid;
                    str = dumpPackage;
                }
                dumpUid2 = dumpUid;
                dumpUid = i;
                N12 = N1;
                targetComponents2 = targetComponents;
                i2++;
                dumpUid = dumpUid2;
                str = dumpPackage;
            }
            dumpUid2 = dumpUid;
            dumpUid = i;
            N12 = N1;
            i1++;
            dumpUid = dumpUid2;
            activityManagerService = this;
            str = dumpPackage;
        }
        if (!printedAnything) {
            printWriter.println("  (nothing)");
        }
    }

    private int getAppId(String dumpPackage) {
        if (dumpPackage != null) {
            try {
                return UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(dumpPackage, 0).uid);
            } catch (NameNotFoundException e) {
                e.printStackTrace();
            }
        }
        return -1;
    }

    boolean dumpUids(PrintWriter pw, String dumpPackage, int dumpAppId, SparseArray<UidRecord> uids, String header, boolean needSep) {
        boolean printed = false;
        for (int i = 0; i < uids.size(); i++) {
            UidRecord uidRec = (UidRecord) uids.valueAt(i);
            if (dumpPackage == null || UserHandle.getAppId(uidRec.uid) == dumpAppId) {
                if (!printed) {
                    printed = true;
                    if (needSep) {
                        pw.println();
                    }
                    pw.print("  ");
                    pw.println(header);
                    needSep = true;
                }
                pw.print("    UID ");
                UserHandle.formatUid(pw, uidRec.uid);
                pw.print(": ");
                pw.println(uidRec);
            }
        }
        return printed;
    }

    boolean dumpBinderProxiesCounts(PrintWriter pw, SparseIntArray counts, String header) {
        if (counts == null) {
            return false;
        }
        pw.println(header);
        for (int i = 0; i < counts.size(); i++) {
            int uid = counts.keyAt(i);
            int binderCount = counts.valueAt(i);
            pw.print("    UID ");
            pw.print(uid);
            pw.print(", binder count = ");
            pw.print(binderCount);
            pw.print(", package(s)= ");
            String[] pkgNames = this.mContext.getPackageManager().getPackagesForUid(uid);
            if (pkgNames != null) {
                for (String print : pkgNames) {
                    pw.print(print);
                    pw.print("; ");
                }
            } else {
                pw.print("NO PACKAGE NAME FOUND");
            }
            pw.println();
        }
        pw.println();
        return true;
    }

    /* JADX WARNING: Missing block: B:96:0x0209, code:
            r0 = r3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage, int dumpAppId) {
        int numPers;
        boolean numPers2;
        int ip;
        boolean needSep;
        int numPers3;
        int numPers4;
        boolean needSep2;
        ProcessRecord r;
        Throwable th;
        FileDescriptor fileDescriptor;
        int i;
        int i2;
        StringBuilder stringBuilder;
        StringBuilder stringBuilder2;
        StringBuilder stringBuilder3;
        boolean printed;
        int numPers5;
        PrintWriter printWriter = pw;
        boolean z = dumpAll;
        String str = dumpPackage;
        boolean needSep3 = false;
        printWriter.println("ACTIVITY MANAGER RUNNING PROCESSES (dumpsys activity processes)");
        if (z) {
            int NP = this.mProcessNames.getMap().size();
            numPers = 0;
            numPers2 = false;
            ip = 0;
            while (ip < NP) {
                SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                int NA = procs.size();
                int numPers6 = numPers;
                needSep = numPers2;
                for (numPers3 = 0; numPers3 < NA; numPers3++) {
                    ProcessRecord r2 = (ProcessRecord) procs.valueAt(numPers3);
                    if (str == null || r2.pkgList.containsKey(str)) {
                        if (!needSep) {
                            printWriter.println("  All known processes:");
                            needSep = true;
                        }
                        printWriter.print(r2.persistent ? "  *PERS*" : "  *APP*");
                        printWriter.print(" UID ");
                        printWriter.print(procs.keyAt(numPers3));
                        printWriter.print(" ");
                        printWriter.println(r2);
                        r2.dump(printWriter, "    ");
                        if (r2.persistent) {
                            numPers6++;
                        }
                    }
                }
                ip++;
                numPers2 = needSep;
                numPers = numPers6;
            }
            needSep3 = numPers2;
            numPers4 = numPers;
        } else {
            numPers4 = 0;
        }
        if (this.mIsolatedProcesses.size() > 0) {
            numPers2 = false;
            needSep2 = needSep3;
            for (ip = 0; ip < this.mIsolatedProcesses.size(); ip++) {
                ProcessRecord r3 = (ProcessRecord) this.mIsolatedProcesses.valueAt(ip);
                if (str == null || r3.pkgList.containsKey(str)) {
                    if (!numPers2) {
                        if (needSep2) {
                            pw.println();
                        }
                        printWriter.println("  Isolated process list (sorted by uid):");
                        numPers2 = true;
                        needSep2 = true;
                    }
                    printWriter.print("    Isolated #");
                    printWriter.print(ip);
                    printWriter.print(": ");
                    printWriter.println(r3);
                }
            }
            needSep3 = needSep2;
        }
        if (this.mActiveInstrumentation.size() > 0) {
            numPers2 = false;
            needSep2 = needSep3;
            for (ip = 0; ip < this.mActiveInstrumentation.size(); ip++) {
                ActiveInstrumentation ai = (ActiveInstrumentation) this.mActiveInstrumentation.get(ip);
                if (str == null || ai.mClass.getPackageName().equals(str) || ai.mTargetInfo.packageName.equals(str)) {
                    if (!numPers2) {
                        if (needSep2) {
                            pw.println();
                        }
                        printWriter.println("  Active instrumentation:");
                        numPers2 = true;
                        needSep2 = true;
                    }
                    printWriter.print("    Instrumentation #");
                    printWriter.print(ip);
                    printWriter.print(": ");
                    printWriter.println(ai);
                    ai.dump(printWriter, "      ");
                }
            }
            needSep3 = needSep2;
        }
        if (this.mActiveUids.size() > 0) {
            if (dumpUids(printWriter, str, dumpAppId, this.mActiveUids, "UID states:", needSep3)) {
                needSep3 = true;
            }
        }
        if (z && this.mValidateUids.size() > 0) {
            if (dumpUids(printWriter, str, dumpAppId, this.mValidateUids, "UID validation:", needSep3)) {
                needSep3 = true;
            }
        }
        if (this.mLruProcesses.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            printWriter.print("  Process LRU list (sorted by oom_adj, ");
            printWriter.print(this.mLruProcesses.size());
            printWriter.print(" total, non-act at ");
            printWriter.print(this.mLruProcesses.size() - this.mLruProcessActivityStart);
            printWriter.print(", non-svc at ");
            printWriter.print(this.mLruProcesses.size() - this.mLruProcessServiceStart);
            printWriter.println("):");
            dumpProcessOomList(printWriter, this, this.mLruProcesses, "    ", "Proc", "PERS", false, str);
            needSep3 = true;
        }
        if (z || str != null) {
            synchronized (this.mPidsSelfLocked) {
                needSep2 = false;
                needSep = needSep3;
                ip = 0;
                while (ip < this.mPidsSelfLocked.size()) {
                    try {
                        try {
                            r = (ProcessRecord) this.mPidsSelfLocked.valueAt(ip);
                            if (str == null || r.pkgList.containsKey(str)) {
                                if (!needSep2) {
                                    if (needSep) {
                                        pw.println();
                                    }
                                    needSep = true;
                                    printWriter.println("  PID mappings:");
                                    needSep2 = true;
                                }
                                printWriter.print("    PID #");
                                printWriter.print(this.mPidsSelfLocked.keyAt(ip));
                                printWriter.print(": ");
                                printWriter.println(this.mPidsSelfLocked.valueAt(ip));
                            }
                            ip++;
                        } catch (Throwable th2) {
                            th = th2;
                            fileDescriptor = fd;
                            i = dumpAppId;
                            i2 = numPers4;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th3) {
                                    th = th3;
                                }
                            }
                            throw th;
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        fileDescriptor = fd;
                        i = dumpAppId;
                        i2 = numPers4;
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                needSep2 = false;
                needSep = needSep3;
                for (ip = 0; ip < this.mImportantProcesses.size(); ip++) {
                    r = (ProcessRecord) this.mPidsSelfLocked.get(((ImportanceToken) this.mImportantProcesses.valueAt(ip)).pid);
                    if (str == null || (r != null && r.pkgList.containsKey(str))) {
                        if (!needSep2) {
                            if (needSep) {
                                pw.println();
                            }
                            needSep = true;
                            printWriter.println("  Foreground Processes:");
                            needSep2 = true;
                        }
                        printWriter.print("    PID #");
                        printWriter.print(this.mImportantProcesses.keyAt(ip));
                        printWriter.print(": ");
                        printWriter.println(this.mImportantProcesses.valueAt(ip));
                    }
                }
            }
            needSep3 = needSep;
        }
        if (this.mPersistentStartingProcesses.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            needSep3 = true;
            printWriter.println("  Persisent processes that are starting:");
            dumpProcessList(printWriter, this, this.mPersistentStartingProcesses, "    ", "Starting Norm", "Restarting PERS", str);
        }
        if (this.mRemovedProcesses.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            needSep3 = true;
            printWriter.println("  Processes that are being removed:");
            dumpProcessList(printWriter, this, this.mRemovedProcesses, "    ", "Removed Norm", "Removed PERS", str);
        }
        if (this.mProcessesOnHold.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            needSep3 = true;
            printWriter.println("  Processes that are on old until the system is ready:");
            dumpProcessList(printWriter, this, this.mProcessesOnHold, "    ", "OnHold Norm", "OnHold PERS", str);
        }
        needSep3 = this.mAppErrors.dumpLocked(fd, printWriter, dumpProcessesToGc(printWriter, needSep3, str), str);
        if (str == null) {
            pw.println();
            needSep3 = false;
            this.mUserController.dump(printWriter, z);
        }
        if (this.mHomeProcess != null && (str == null || this.mHomeProcess.pkgList.containsKey(str))) {
            if (needSep3) {
                pw.println();
                needSep3 = false;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mHomeProcess: ");
            stringBuilder.append(this.mHomeProcess);
            printWriter.println(stringBuilder.toString());
        }
        if (this.mPreviousProcess != null && (str == null || this.mPreviousProcess.pkgList.containsKey(str))) {
            if (needSep3) {
                pw.println();
                needSep3 = false;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mPreviousProcess: ");
            stringBuilder.append(this.mPreviousProcess);
            printWriter.println(stringBuilder.toString());
        }
        if (z && (this.mPreviousProcess == null || str == null || this.mPreviousProcess.pkgList.containsKey(str))) {
            stringBuilder = new StringBuilder(128);
            stringBuilder.append("  mPreviousProcessVisibleTime: ");
            TimeUtils.formatDuration(this.mPreviousProcessVisibleTime, stringBuilder);
            printWriter.println(stringBuilder);
        }
        if (this.mHeavyWeightProcess != null && (str == null || this.mHeavyWeightProcess.pkgList.containsKey(str))) {
            if (needSep3) {
                pw.println();
                needSep3 = false;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mHeavyWeightProcess: ");
            stringBuilder.append(this.mHeavyWeightProcess);
            printWriter.println(stringBuilder.toString());
        }
        if (z && this.mPendingStarts.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            needSep3 = true;
            printWriter.println("  mPendingStarts: ");
            numPers = this.mPendingStarts.size();
            for (numPers3 = 0; numPers3 < numPers; numPers3++) {
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("    ");
                stringBuilder2.append(this.mPendingStarts.keyAt(numPers3));
                stringBuilder2.append(": ");
                stringBuilder2.append(this.mPendingStarts.valueAt(numPers3));
                printWriter.println(stringBuilder2.toString());
            }
        }
        if (str == null) {
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mGlobalConfiguration: ");
            stringBuilder.append(getGlobalConfiguration());
            printWriter.println(stringBuilder.toString());
            this.mStackSupervisor.dumpDisplayConfigs(printWriter, "  ");
        }
        if (z) {
            if (str == null) {
                stringBuilder3 = new StringBuilder();
                stringBuilder3.append("  mConfigWillChange: ");
                stringBuilder3.append(getFocusedStack().mConfigWillChange);
                printWriter.println(stringBuilder3.toString());
            }
            if (this.mCompatModePackages.getPackages().size() > 0) {
                needSep = false;
                for (Entry<String, Integer> entry : this.mCompatModePackages.getPackages().entrySet()) {
                    String pkg = (String) entry.getKey();
                    i = ((Integer) entry.getValue()).intValue();
                    if (str == null || str.equals(pkg)) {
                        if (!needSep) {
                            printWriter.println("  mScreenCompatPackages:");
                            needSep = true;
                        }
                        printWriter.print("    ");
                        printWriter.print(pkg);
                        printWriter.print(": ");
                        printWriter.print(i);
                        pw.println();
                    }
                }
            }
            numPers = this.mUidObservers.getRegisteredCallbackCount();
            printed = false;
            for (i2 = 0; i2 < numPers; i2++) {
                UidObserverRegistration reg = (UidObserverRegistration) this.mUidObservers.getRegisteredCallbackCookie(i2);
                if (str == null || str.equals(reg.pkg)) {
                    if (!printed) {
                        printWriter.println("  mUidObservers:");
                        printed = true;
                    }
                    printWriter.print("    ");
                    UserHandle.formatUid(printWriter, reg.uid);
                    printWriter.print(" ");
                    printWriter.print(reg.pkg);
                    printWriter.print(":");
                    if ((reg.which & 4) != 0) {
                        printWriter.print(" IDLE");
                    }
                    if ((reg.which & 8) != 0) {
                        printWriter.print(" ACT");
                    }
                    if ((reg.which & 2) != 0) {
                        printWriter.print(" GONE");
                    }
                    if ((reg.which & 1) != 0) {
                        printWriter.print(" STATE");
                        printWriter.print(" (cut=");
                        printWriter.print(reg.cutpoint);
                        printWriter.print(")");
                    }
                    pw.println();
                    if (reg.lastProcStates != null) {
                        i = reg.lastProcStates.size();
                        for (int j = 0; j < i; j++) {
                            printWriter.print("      Last ");
                            UserHandle.formatUid(printWriter, reg.lastProcStates.keyAt(j));
                            printWriter.print(": ");
                            printWriter.println(reg.lastProcStates.valueAt(j));
                        }
                    }
                }
            }
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append("  mDeviceIdleWhitelist=");
            stringBuilder2.append(Arrays.toString(this.mDeviceIdleWhitelist));
            printWriter.println(stringBuilder2.toString());
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append("  mDeviceIdleExceptIdleWhitelist=");
            stringBuilder2.append(Arrays.toString(this.mDeviceIdleExceptIdleWhitelist));
            printWriter.println(stringBuilder2.toString());
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append("  mDeviceIdleTempWhitelist=");
            stringBuilder2.append(Arrays.toString(this.mDeviceIdleTempWhitelist));
            printWriter.println(stringBuilder2.toString());
            if (this.mPendingTempWhitelist.size() > 0) {
                printWriter.println("  mPendingTempWhitelist:");
                for (i2 = 0; i2 < this.mPendingTempWhitelist.size(); i2++) {
                    PendingTempWhitelist ptw = (PendingTempWhitelist) this.mPendingTempWhitelist.valueAt(i2);
                    printWriter.print("    ");
                    UserHandle.formatUid(printWriter, ptw.targetUid);
                    printWriter.print(": ");
                    TimeUtils.formatDuration(ptw.duration, printWriter);
                    printWriter.print(" ");
                    printWriter.println(ptw.tag);
                }
            }
        }
        if (str == null) {
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("  mWakefulness=");
            stringBuilder3.append(PowerManagerInternal.wakefulnessToString(this.mWakefulness));
            printWriter.println(stringBuilder3.toString());
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("  mSleepTokens=");
            stringBuilder3.append(this.mStackSupervisor.mSleepTokens);
            printWriter.println(stringBuilder3.toString());
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("  mSleeping=");
            stringBuilder3.append(this.mSleeping);
            printWriter.println(stringBuilder3.toString());
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("  mShuttingDown=");
            stringBuilder3.append(this.mShuttingDown);
            stringBuilder3.append(" mTestPssMode=");
            stringBuilder3.append(this.mTestPssMode);
            printWriter.println(stringBuilder3.toString());
            if (this.mRunningVoice != null) {
                stringBuilder3 = new StringBuilder();
                stringBuilder3.append("  mRunningVoice=");
                stringBuilder3.append(this.mRunningVoice);
                printWriter.println(stringBuilder3.toString());
                stringBuilder3 = new StringBuilder();
                stringBuilder3.append("  mVoiceWakeLock");
                stringBuilder3.append(this.mVoiceWakeLock);
                printWriter.println(stringBuilder3.toString());
            }
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("  mVrController=");
            stringBuilder3.append(this.mVrController);
            printWriter.println(stringBuilder3.toString());
        }
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(this.mDebugApp) || str.equals(this.mOrigDebugApp))) {
            if (needSep3) {
                pw.println();
                needSep3 = false;
            }
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("  mDebugApp=");
            stringBuilder3.append(this.mDebugApp);
            stringBuilder3.append("/orig=");
            stringBuilder3.append(this.mOrigDebugApp);
            stringBuilder3.append(" mDebugTransient=");
            stringBuilder3.append(this.mDebugTransient);
            stringBuilder3.append(" mOrigWaitForDebugger=");
            stringBuilder3.append(this.mOrigWaitForDebugger);
            printWriter.println(stringBuilder3.toString());
        }
        if (this.mCurAppTimeTracker != null) {
            this.mCurAppTimeTracker.dumpWithHeader(printWriter, "  ", true);
        }
        if (this.mMemWatchProcesses.getMap().size() > 0) {
            printWriter.println("  Mem watch processes:");
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs2 = this.mMemWatchProcesses.getMap();
            needSep = needSep3;
            ip = 0;
            while (ip < procs2.size()) {
                String proc = (String) procs2.keyAt(ip);
                SparseArray<Pair<Long, String>> uids = (SparseArray) procs2.valueAt(ip);
                boolean needSep4 = needSep;
                numPers = 0;
                while (numPers < uids.size()) {
                    if (needSep4) {
                        pw.println();
                        needSep4 = false;
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append("    ");
                    sb.append(proc);
                    sb.append('/');
                    UserHandle.formatUid(sb, uids.keyAt(numPers));
                    Pair<Long, String> val = (Pair) uids.valueAt(numPers);
                    sb.append(": ");
                    numPers5 = numPers4;
                    DebugUtils.sizeValueToString(((Long) val.first).longValue(), sb);
                    if (val.second != null) {
                        sb.append(", report to ");
                        sb.append((String) val.second);
                    }
                    printWriter.println(sb.toString());
                    numPers++;
                    numPers4 = numPers5;
                }
                ip++;
                needSep = needSep4;
            }
            numPers5 = numPers4;
            printWriter.print("  mMemWatchDumpProcName=");
            printWriter.println(this.mMemWatchDumpProcName);
            printWriter.print("  mMemWatchDumpFile=");
            printWriter.println(this.mMemWatchDumpFile);
            printWriter.print("  mMemWatchDumpPid=");
            printWriter.print(this.mMemWatchDumpPid);
            printWriter.print(" mMemWatchDumpUid=");
            printWriter.println(this.mMemWatchDumpUid);
            needSep3 = needSep;
        } else {
            numPers5 = numPers4;
        }
        if (this.mTrackAllocationApp != null && (str == null || str.equals(this.mTrackAllocationApp))) {
            if (needSep3) {
                pw.println();
                needSep3 = false;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mTrackAllocationApp=");
            stringBuilder.append(this.mTrackAllocationApp);
            printWriter.println(stringBuilder.toString());
        }
        if (!(this.mProfileApp == null && this.mProfileProc == null && (this.mProfilerInfo == null || (this.mProfilerInfo.profileFile == null && this.mProfilerInfo.profileFd == null))) && (str == null || str.equals(this.mProfileApp))) {
            if (needSep3) {
                pw.println();
                needSep3 = false;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mProfileApp=");
            stringBuilder.append(this.mProfileApp);
            stringBuilder.append(" mProfileProc=");
            stringBuilder.append(this.mProfileProc);
            printWriter.println(stringBuilder.toString());
            if (this.mProfilerInfo != null) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mProfileFile=");
                stringBuilder.append(this.mProfilerInfo.profileFile);
                stringBuilder.append(" mProfileFd=");
                stringBuilder.append(this.mProfilerInfo.profileFd);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mSamplingInterval=");
                stringBuilder.append(this.mProfilerInfo.samplingInterval);
                stringBuilder.append(" mAutoStopProfiler=");
                stringBuilder.append(this.mProfilerInfo.autoStopProfiler);
                stringBuilder.append(" mStreamingOutput=");
                stringBuilder.append(this.mProfilerInfo.streamingOutput);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mProfileType=");
                stringBuilder.append(this.mProfileType);
                printWriter.println(stringBuilder.toString());
            }
        }
        if (this.mNativeDebuggingApp != null && (str == null || str.equals(this.mNativeDebuggingApp))) {
            if (needSep3) {
                pw.println();
                needSep3 = false;
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mNativeDebuggingApp=");
            stringBuilder.append(this.mNativeDebuggingApp);
            printWriter.println(stringBuilder.toString());
        }
        if (this.mAllowAppSwitchUids.size() > 0) {
            numPers2 = false;
            needSep = needSep3;
            ip = 0;
            while (ip < this.mAllowAppSwitchUids.size()) {
                ArrayMap<String, Integer> types = (ArrayMap) this.mAllowAppSwitchUids.valueAt(ip);
                printed = needSep;
                needSep = numPers2;
                for (numPers3 = 0; numPers3 < types.size(); numPers3++) {
                    if (str == null) {
                        i = dumpAppId;
                    } else if (UserHandle.getAppId(((Integer) types.valueAt(numPers3)).intValue()) != dumpAppId) {
                    }
                    if (printed) {
                        pw.println();
                        printed = false;
                    }
                    if (!needSep) {
                        printWriter.println("  mAllowAppSwitchUids:");
                        needSep = true;
                    }
                    printWriter.print("    User ");
                    printWriter.print(this.mAllowAppSwitchUids.keyAt(ip));
                    printWriter.print(": Type ");
                    printWriter.print((String) types.keyAt(numPers3));
                    printWriter.print(" = ");
                    UserHandle.formatUid(printWriter, ((Integer) types.valueAt(numPers3)).intValue());
                    pw.println();
                }
                i = dumpAppId;
                ip++;
                numPers2 = needSep;
                needSep = printed;
            }
            i = dumpAppId;
        } else {
            i = dumpAppId;
        }
        if (str == null) {
            if (this.mAlwaysFinishActivities) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mAlwaysFinishActivities=");
                stringBuilder.append(this.mAlwaysFinishActivities);
                printWriter.println(stringBuilder.toString());
            }
            if (this.mController != null) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mController=");
                stringBuilder.append(this.mController);
                stringBuilder.append(" mControllerIsAMonkey=");
                stringBuilder.append(this.mControllerIsAMonkey);
                printWriter.println(stringBuilder.toString());
            }
            if (z) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("  Total persistent processes: ");
                stringBuilder.append(numPers5);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mProcessesReady=");
                stringBuilder.append(this.mProcessesReady);
                stringBuilder.append(" mSystemReady=");
                stringBuilder.append(this.mSystemReady);
                stringBuilder.append(" mBooted=");
                stringBuilder.append(this.mBooted);
                stringBuilder.append(" mFactoryTest=");
                stringBuilder.append(this.mFactoryTest);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mBooting=");
                stringBuilder.append(this.mBooting);
                stringBuilder.append(" mCallFinishBooting=");
                stringBuilder.append(this.mCallFinishBooting);
                stringBuilder.append(" mBootAnimationComplete=");
                stringBuilder.append(this.mBootAnimationComplete);
                printWriter.println(stringBuilder.toString());
                printWriter.print("  mLastPowerCheckUptime=");
                TimeUtils.formatDuration(this.mLastPowerCheckUptime, printWriter);
                printWriter.println(BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mGoingToSleep=");
                stringBuilder.append(this.mStackSupervisor.mGoingToSleep);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mLaunchingActivity=");
                stringBuilder.append(this.mStackSupervisor.mLaunchingActivity);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mAdjSeq=");
                stringBuilder.append(this.mAdjSeq);
                stringBuilder.append(" mLruSeq=");
                stringBuilder.append(this.mLruSeq);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mNumNonCachedProcs=");
                stringBuilder.append(this.mNumNonCachedProcs);
                stringBuilder.append(" (");
                stringBuilder.append(this.mLruProcesses.size());
                stringBuilder.append(" total) mNumCachedHiddenProcs=");
                stringBuilder.append(this.mNumCachedHiddenProcs);
                stringBuilder.append(" mNumServiceProcs=");
                stringBuilder.append(this.mNumServiceProcs);
                stringBuilder.append(" mNewNumServiceProcs=");
                stringBuilder.append(this.mNewNumServiceProcs);
                printWriter.println(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mAllowLowerMemLevel=");
                stringBuilder.append(this.mAllowLowerMemLevel);
                stringBuilder.append(" mLastMemoryLevel=");
                stringBuilder.append(this.mLastMemoryLevel);
                stringBuilder.append(" mLastNumProcesses=");
                stringBuilder.append(this.mLastNumProcesses);
                printWriter.println(stringBuilder.toString());
                long now = SystemClock.uptimeMillis();
                printWriter.print("  mLastIdleTime=");
                TimeUtils.formatDuration(now, this.mLastIdleTime, printWriter);
                printWriter.print(" mLowRamSinceLastIdle=");
                TimeUtils.formatDuration(getLowRamTimeSinceIdle(now), printWriter);
                pw.println();
                pw.println();
                printWriter.print("  mUidChangeDispatchCount=");
                printWriter.print(this.mUidChangeDispatchCount);
                pw.println();
                printWriter.println("  Slow UID dispatches:");
                numPers3 = this.mUidObservers.beginBroadcast();
                int i3 = 0;
                while (true) {
                    numPers = i3;
                    if (numPers >= numPers3) {
                        break;
                    }
                    UidObserverRegistration r4 = (UidObserverRegistration) this.mUidObservers.getBroadcastCookie(numPers);
                    printWriter.print("    ");
                    printWriter.print(((IUidObserver) this.mUidObservers.getBroadcastItem(numPers)).getClass().getTypeName());
                    printWriter.print(": ");
                    printWriter.print(r4.mSlowDispatchCount);
                    printWriter.print(" / Max ");
                    printWriter.print(r4.mMaxDispatchTime);
                    printWriter.println("ms");
                    i3 = numPers + 1;
                }
                this.mUidObservers.finishBroadcast();
                pw.println();
                printWriter.println("  ServiceManager statistics:");
                ServiceManager.sStatLogger.dump(printWriter, "    ");
                pw.println();
                stringBuilder = new StringBuilder();
                stringBuilder.append("  mForceBackgroundCheck=");
                stringBuilder.append(this.mForceBackgroundCheck);
                printWriter.println(stringBuilder.toString());
            }
        }
        stringBuilder = new StringBuilder();
        stringBuilder.append("  mForceBackgroundCheck=");
        stringBuilder.append(this.mForceBackgroundCheck);
        printWriter.println(stringBuilder.toString());
    }

    @GuardedBy("this")
    void writeProcessesToProtoLocked(ProtoOutputStream proto, String dumpPackage) {
        int ip;
        ProcessRecord r;
        UidRecord uidRec;
        long lruToken;
        int total;
        long lruToken2;
        long compatToken;
        int i;
        ProtoOutputStream protoOutputStream = proto;
        String str = dumpPackage;
        int NP = this.mProcessNames.getMap().size();
        int numPers = 0;
        for (ip = 0; ip < NP; ip++) {
            SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
            int NA = procs.size();
            for (int ia = 0; ia < NA; ia++) {
                ProcessRecord r2 = (ProcessRecord) procs.valueAt(ia);
                if (str == null || r2.pkgList.containsKey(str)) {
                    r2.writeToProto(protoOutputStream, 2246267895809L);
                    if (r2.persistent) {
                        numPers++;
                    }
                }
            }
        }
        for (ip = 0; ip < this.mIsolatedProcesses.size(); ip++) {
            r = (ProcessRecord) this.mIsolatedProcesses.valueAt(ip);
            if (str == null || r.pkgList.containsKey(str)) {
                r.writeToProto(protoOutputStream, 2246267895810L);
            }
        }
        for (ip = 0; ip < this.mActiveInstrumentation.size(); ip++) {
            ActiveInstrumentation ai = (ActiveInstrumentation) this.mActiveInstrumentation.get(ip);
            if (str == null || ai.mClass.getPackageName().equals(str) || ai.mTargetInfo.packageName.equals(str)) {
                ai.writeToProto(protoOutputStream, 2246267895811L);
            }
        }
        int whichAppId = getAppId(str);
        for (ip = 0; ip < this.mActiveUids.size(); ip++) {
            uidRec = (UidRecord) this.mActiveUids.valueAt(ip);
            if (str == null || UserHandle.getAppId(uidRec.uid) == whichAppId) {
                uidRec.writeToProto(protoOutputStream, 2246267895812L);
            }
        }
        for (ip = 0; ip < this.mValidateUids.size(); ip++) {
            uidRec = (UidRecord) this.mValidateUids.valueAt(ip);
            if (str == null || UserHandle.getAppId(uidRec.uid) == whichAppId) {
                uidRec.writeToProto(protoOutputStream, 2246267895813L);
            }
        }
        int numPers2 = numPers;
        if (this.mLruProcesses.size() > 0) {
            lruToken = protoOutputStream.start(1146756268038L);
            total = this.mLruProcesses.size();
            protoOutputStream.write(1120986464257L, total);
            protoOutputStream.write(1120986464258L, total - this.mLruProcessActivityStart);
            protoOutputStream.write(1120986464259L, total - this.mLruProcessServiceStart);
            lruToken2 = lruToken;
            writeProcessOomListToProto(protoOutputStream, 2246267895812L, this, this.mLruProcesses, false, str);
            protoOutputStream.end(lruToken2);
        }
        if (str != null) {
            synchronized (this.mPidsSelfLocked) {
                for (ip = 0; ip < this.mPidsSelfLocked.size(); ip++) {
                    ProcessRecord r3 = (ProcessRecord) this.mPidsSelfLocked.valueAt(ip);
                    if (r3.pkgList.containsKey(str)) {
                        r3.writeToProto(protoOutputStream, 2246267895815L);
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                for (ip = 0; ip < this.mImportantProcesses.size(); ip++) {
                    ImportanceToken it = (ImportanceToken) this.mImportantProcesses.valueAt(ip);
                    ProcessRecord r4 = (ProcessRecord) this.mPidsSelfLocked.get(it.pid);
                    if (str == null || (r4 != null && r4.pkgList.containsKey(str))) {
                        it.writeToProto(protoOutputStream, 2246267895816L);
                    }
                }
            }
        }
        for (ip = 0; ip < this.mPersistentStartingProcesses.size(); ip++) {
            r = (ProcessRecord) this.mPersistentStartingProcesses.get(ip);
            if (str == null || str.equals(r.info.packageName)) {
                r.writeToProto(protoOutputStream, 2246267895817L);
            }
        }
        for (ip = 0; ip < this.mRemovedProcesses.size(); ip++) {
            r = (ProcessRecord) this.mRemovedProcesses.get(ip);
            if (str == null || str.equals(r.info.packageName)) {
                r.writeToProto(protoOutputStream, 2246267895818L);
            }
        }
        for (ip = 0; ip < this.mProcessesOnHold.size(); ip++) {
            r = (ProcessRecord) this.mProcessesOnHold.get(ip);
            if (str == null || str.equals(r.info.packageName)) {
                r.writeToProto(protoOutputStream, 2246267895819L);
            }
        }
        writeProcessesToGcToProto(protoOutputStream, 2246267895820L, str);
        this.mAppErrors.writeToProto(protoOutputStream, 1146756268045L, str);
        if (str == null) {
            this.mUserController.writeToProto(protoOutputStream, 1146756268046L);
            getGlobalConfiguration().writeToProto(protoOutputStream, 1146756268051L);
            protoOutputStream.write(1133871366165L, getFocusedStack().mConfigWillChange);
        }
        if (this.mHomeProcess != null && (str == null || this.mHomeProcess.pkgList.containsKey(str))) {
            this.mHomeProcess.writeToProto(protoOutputStream, 1146756268047L);
        }
        if (this.mPreviousProcess != null && (str == null || this.mPreviousProcess.pkgList.containsKey(str))) {
            this.mPreviousProcess.writeToProto(protoOutputStream, 1146756268048L);
            protoOutputStream.write(1112396529681L, this.mPreviousProcessVisibleTime);
        }
        if (this.mHeavyWeightProcess != null && (str == null || this.mHeavyWeightProcess.pkgList.containsKey(str))) {
            this.mHeavyWeightProcess.writeToProto(protoOutputStream, 1146756268050L);
        }
        for (Entry<String, Integer> entry : this.mCompatModePackages.getPackages().entrySet()) {
            String pkg = (String) entry.getKey();
            whichAppId = ((Integer) entry.getValue()).intValue();
            if (str == null || str.equals(pkg)) {
                compatToken = protoOutputStream.start(2246267895830L);
                protoOutputStream.write(1138166333441L, pkg);
                protoOutputStream.write(1120986464258L, whichAppId);
                protoOutputStream.end(compatToken);
            }
        }
        ip = this.mUidObservers.getRegisteredCallbackCount();
        for (i = 0; i < ip; i++) {
            UidObserverRegistration reg = (UidObserverRegistration) this.mUidObservers.getRegisteredCallbackCookie(i);
            if (str == null || str.equals(reg.pkg)) {
                reg.writeToProto(protoOutputStream, 2246267895831L);
            }
        }
        for (int v : this.mDeviceIdleWhitelist) {
            protoOutputStream.write(2220498092056L, v);
        }
        for (int v2 : this.mDeviceIdleTempWhitelist) {
            protoOutputStream.write(2220498092057L, v2);
        }
        if (this.mPendingTempWhitelist.size() > 0) {
            for (i = 0; i < this.mPendingTempWhitelist.size(); i++) {
                ((PendingTempWhitelist) this.mPendingTempWhitelist.valueAt(i)).writeToProto(protoOutputStream, 2246267895834L);
            }
        }
        if (str == null) {
            long sleepToken = protoOutputStream.start(1146756268059L);
            protoOutputStream.write(1159641169921L, PowerManagerInternal.wakefulnessToProtoEnum(this.mWakefulness));
            Iterator it2 = this.mStackSupervisor.mSleepTokens.iterator();
            while (it2.hasNext()) {
                protoOutputStream.write(2237677961218L, ((SleepToken) it2.next()).toString());
            }
            protoOutputStream.write(1133871366147L, this.mSleeping);
            protoOutputStream.write(1133871366148L, this.mShuttingDown);
            protoOutputStream.write(1133871366149L, this.mTestPssMode);
            protoOutputStream.end(sleepToken);
            if (this.mRunningVoice != null) {
                long vrToken = protoOutputStream.start(1146756268060L);
                protoOutputStream.write(1138166333441L, this.mRunningVoice.toString());
                this.mVoiceWakeLock.writeToProto(protoOutputStream, 1146756268034L);
                protoOutputStream.end(vrToken);
            }
            this.mVrController.writeToProto(protoOutputStream, 1146756268061L);
        }
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(this.mDebugApp) || str.equals(this.mOrigDebugApp))) {
            lruToken2 = protoOutputStream.start(1146756268062L);
            protoOutputStream.write(1138166333441L, this.mDebugApp);
            protoOutputStream.write(1138166333442L, this.mOrigDebugApp);
            protoOutputStream.write(1133871366147L, this.mDebugTransient);
            protoOutputStream.write(1133871366148L, this.mOrigWaitForDebugger);
            protoOutputStream.end(lruToken2);
        }
        if (this.mCurAppTimeTracker != null) {
            this.mCurAppTimeTracker.writeToProto(protoOutputStream, 1146756268063L, true);
        }
        int NP2;
        if (this.mMemWatchProcesses.getMap().size() > 0) {
            long ptoken;
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs2;
            compatToken = protoOutputStream.start(1146756268064L);
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs3 = this.mMemWatchProcesses.getMap();
            int i2 = 0;
            while (i2 < procs3.size()) {
                String proc;
                SparseArray<Pair<Long, String>> uids;
                String proc2 = (String) procs3.keyAt(i2);
                SparseArray<Pair<Long, String>> uids2 = (SparseArray) procs3.valueAt(i2);
                ptoken = protoOutputStream.start(2246267895809L);
                protoOutputStream.write(1138166333441L, proc2);
                total = 0;
                while (total < uids2.size()) {
                    int NI = ip;
                    procs2 = procs3;
                    NP2 = NP;
                    long utoken = protoOutputStream.start(2);
                    Pair<Long, String> val = (Pair) uids2.valueAt(total);
                    protoOutputStream.write(1120986464257L, uids2.keyAt(total));
                    proc = proc2;
                    uids = uids2;
                    protoOutputStream.write(2, DebugUtils.sizeValueToString(((Long) val.first).longValue(), new StringBuilder()));
                    protoOutputStream.write(1138166333443L, (String) val.second);
                    protoOutputStream.end(utoken);
                    total++;
                    ip = NI;
                    procs3 = procs2;
                    NP = NP2;
                    proc2 = proc;
                    uids2 = uids;
                    str = dumpPackage;
                }
                procs2 = procs3;
                NP2 = NP;
                proc = proc2;
                uids = uids2;
                protoOutputStream.end(ptoken);
                i2++;
                str = dumpPackage;
            }
            procs2 = procs3;
            NP2 = NP;
            ptoken = protoOutputStream.start(1146756268034L);
            protoOutputStream.write(1138166333441L, this.mMemWatchDumpProcName);
            protoOutputStream.write(1138166333442L, this.mMemWatchDumpFile);
            protoOutputStream.write(1120986464259L, this.mMemWatchDumpPid);
            protoOutputStream.write(1120986464260L, this.mMemWatchDumpUid);
            protoOutputStream.end(ptoken);
            protoOutputStream.end(compatToken);
        } else {
            NP2 = NP;
        }
        if (this.mTrackAllocationApp != null) {
            str = dumpPackage;
            if (str == null || str.equals(this.mTrackAllocationApp)) {
                protoOutputStream.write(1138166333473L, this.mTrackAllocationApp);
            }
        } else {
            str = dumpPackage;
        }
        if (!(this.mProfileApp == null && this.mProfileProc == null && (this.mProfilerInfo == null || (this.mProfilerInfo.profileFile == null && this.mProfilerInfo.profileFd == null))) && (str == null || str.equals(this.mProfileApp))) {
            lruToken = protoOutputStream.start(1146756268066L);
            protoOutputStream.write(1138166333441L, this.mProfileApp);
            this.mProfileProc.writeToProto(protoOutputStream, 1146756268034L);
            if (this.mProfilerInfo != null) {
                this.mProfilerInfo.writeToProto(protoOutputStream, 1146756268035L);
                protoOutputStream.write(1120986464260L, this.mProfileType);
            }
            protoOutputStream.end(lruToken);
        }
        if (str == null || str.equals(this.mNativeDebuggingApp)) {
            protoOutputStream.write(1138166333475L, this.mNativeDebuggingApp);
        }
        if (str == null) {
            protoOutputStream.write(1133871366180L, this.mAlwaysFinishActivities);
            if (this.mController != null) {
                lruToken = protoOutputStream.start(1146756268069L);
                protoOutputStream.write(1138166333441L, this.mController.toString());
                protoOutputStream.write(1133871366146L, this.mControllerIsAMonkey);
                protoOutputStream.end(lruToken);
            }
            protoOutputStream.write(1120986464294L, numPers2);
            protoOutputStream.write(1133871366183L, this.mProcessesReady);
            protoOutputStream.write(1133871366184L, this.mSystemReady);
            protoOutputStream.write(1133871366185L, this.mBooted);
            protoOutputStream.write(1120986464298L, this.mFactoryTest);
            protoOutputStream.write(1133871366187L, this.mBooting);
            protoOutputStream.write(1133871366188L, this.mCallFinishBooting);
            protoOutputStream.write(1133871366189L, this.mBootAnimationComplete);
            protoOutputStream.write(1112396529710L, this.mLastPowerCheckUptime);
            this.mStackSupervisor.mGoingToSleep.writeToProto(protoOutputStream, 1146756268079L);
            this.mStackSupervisor.mLaunchingActivity.writeToProto(protoOutputStream, 1146756268080L);
            protoOutputStream.write(1120986464305L, this.mAdjSeq);
            protoOutputStream.write(1120986464306L, this.mLruSeq);
            protoOutputStream.write(1120986464307L, this.mNumNonCachedProcs);
            protoOutputStream.write(1120986464309L, this.mNumServiceProcs);
            protoOutputStream.write(1120986464310L, this.mNewNumServiceProcs);
            protoOutputStream.write(1133871366199L, this.mAllowLowerMemLevel);
            protoOutputStream.write(1120986464312L, this.mLastMemoryLevel);
            protoOutputStream.write(1120986464313L, this.mLastNumProcesses);
            long now = SystemClock.uptimeMillis();
            ProtoUtils.toDuration(protoOutputStream, 1146756268090L, this.mLastIdleTime, now);
            protoOutputStream.write(1112396529723L, getLowRamTimeSinceIdle(now));
            return;
        }
    }

    void writeProcessesToGcToProto(ProtoOutputStream proto, long fieldId, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord r = (ProcessRecord) this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                    long token = proto.start(fieldId);
                    r.writeToProto(proto, 1146756268033L);
                    proto.write(1133871366146L, r.reportLowMemory);
                    proto.write(1112396529667L, now);
                    proto.write(1112396529668L, r.lastRequestedGc);
                    proto.write(1112396529669L, r.lastLowMemory);
                    proto.end(token);
                }
            }
        }
    }

    boolean dumpProcessesToGc(PrintWriter pw, boolean needSep, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            boolean printed = false;
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord proc = (ProcessRecord) this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(proc.info.packageName)) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Processes that are waiting to GC:");
                        printed = true;
                    }
                    pw.print("    Process ");
                    pw.println(proc);
                    pw.print("      lowMem=");
                    pw.print(proc.reportLowMemory);
                    pw.print(", last gced=");
                    pw.print(now - proc.lastRequestedGc);
                    pw.print(" ms ago, last lowMem=");
                    pw.print(now - proc.lastLowMemory);
                    pw.println(" ms ago");
                }
            }
        }
        return needSep;
    }

    void printOomLevel(PrintWriter pw, String name, int adj) {
        pw.print("    ");
        if (adj >= 0) {
            pw.print(' ');
            if (adj < 10) {
                pw.print(' ');
            }
        } else if (adj > -10) {
            pw.print(' ');
        }
        pw.print(adj);
        pw.print(": ");
        pw.print(name);
        pw.print(" (");
        pw.print(stringifySize(this.mProcessList.getMemLevel(adj), 1024));
        pw.println(")");
    }

    boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll) {
        boolean needSep = false;
        if (this.mLruProcesses.size() > 0) {
            if (null != null) {
                pw.println();
            }
            pw.println("  OOM levels:");
            printOomLevel(pw, "SYSTEM_ADJ", -900);
            printOomLevel(pw, "PERSISTENT_PROC_ADJ", -800);
            printOomLevel(pw, "PERSISTENT_SERVICE_ADJ", -700);
            printOomLevel(pw, "FOREGROUND_APP_ADJ", 0);
            printOomLevel(pw, "VISIBLE_APP_ADJ", 100);
            printOomLevel(pw, "PERCEPTIBLE_APP_ADJ", 200);
            printOomLevel(pw, "BACKUP_APP_ADJ", 300);
            printOomLevel(pw, "HEAVY_WEIGHT_APP_ADJ", 400);
            printOomLevel(pw, "SERVICE_ADJ", 500);
            printOomLevel(pw, "HOME_APP_ADJ", 600);
            printOomLevel(pw, "PREVIOUS_APP_ADJ", 700);
            printOomLevel(pw, "SERVICE_B_ADJ", 800);
            printOomLevel(pw, "CACHED_APP_MIN_ADJ", 900);
            printOomLevel(pw, "CACHED_APP_MAX_ADJ", 906);
            if (true) {
                pw.println();
            }
            pw.print("  Process OOM control (");
            pw.print(this.mLruProcesses.size());
            pw.print(" total, non-act at ");
            pw.print(this.mLruProcesses.size() - this.mLruProcessActivityStart);
            pw.print(", non-svc at ");
            pw.print(this.mLruProcesses.size() - this.mLruProcessServiceStart);
            pw.println("):");
            dumpProcessOomList(pw, this, this.mLruProcesses, "    ", "Proc", "PERS", true, null);
            needSep = true;
        }
        dumpProcessesToGc(pw, needSep, null);
        pw.println();
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("  mHomeProcess: ");
        stringBuilder.append(this.mHomeProcess);
        pw.println(stringBuilder.toString());
        stringBuilder = new StringBuilder();
        stringBuilder.append("  mPreviousProcess: ");
        stringBuilder.append(this.mPreviousProcess);
        pw.println(stringBuilder.toString());
        if (this.mHeavyWeightProcess != null) {
            stringBuilder = new StringBuilder();
            stringBuilder.append("  mHeavyWeightProcess: ");
            stringBuilder.append(this.mHeavyWeightProcess);
            pw.println(stringBuilder.toString());
        }
        return true;
    }

    protected boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args, int opti, boolean dumpAll) {
        return this.mProviderMap.dumpProvider(fd, pw, name, args, opti, dumpAll);
    }

    protected boolean dumpProviderProto(FileDescriptor fd, PrintWriter pw, String name, String[] args) {
        return this.mProviderMap.dumpProviderProto(fd, pw, name, args);
    }

    /* JADX WARNING: Missing block: B:8:0x001a, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:9:0x0022, code:
            if (r15.size() > 0) goto L_0x0025;
     */
    /* JADX WARNING: Missing block: B:10:0x0024, code:
            return false;
     */
    /* JADX WARNING: Missing block: B:11:0x0025, code:
            r7 = new java.lang.String[(r10.length - r11)];
            java.lang.System.arraycopy(r10, r11, r7, 0, r10.length - r11);
            r1 = false;
            r2 = r15.size() - 1;
            r3 = null;
     */
    /* JADX WARNING: Missing block: B:12:0x0039, code:
            r6 = r2;
     */
    /* JADX WARNING: Missing block: B:13:0x003a, code:
            if (r6 < 0) goto L_0x00c3;
     */
    /* JADX WARNING: Missing block: B:14:0x003c, code:
            r5 = (com.android.server.am.ActivityRecord) r15.get(r6);
     */
    /* JADX WARNING: Missing block: B:15:0x0043, code:
            if (r1 == false) goto L_0x0048;
     */
    /* JADX WARNING: Missing block: B:16:0x0045, code:
            r24.println();
     */
    /* JADX WARNING: Missing block: B:18:0x004a, code:
            monitor-enter(r22);
     */
    /* JADX WARNING: Missing block: B:20:?, code:
            boostPriorityForLockedSection();
            r0 = r5.getTask();
     */
    /* JADX WARNING: Missing block: B:21:0x0052, code:
            if (r3 == r0) goto L_0x0083;
     */
    /* JADX WARNING: Missing block: B:22:0x0054, code:
            r3 = r0;
     */
    /* JADX WARNING: Missing block: B:24:?, code:
            r9.print("TASK ");
            r9.print(r3.affinity);
            r9.print(" id=");
            r9.print(r3.taskId);
            r9.print(" userId=");
            r9.println(r3.userId);
     */
    /* JADX WARNING: Missing block: B:25:0x0073, code:
            if (r28 == false) goto L_0x0083;
     */
    /* JADX WARNING: Missing block: B:26:0x0075, code:
            r3.dump(r9, "  ");
     */
    /* JADX WARNING: Missing block: B:27:0x007b, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:28:0x007c, code:
            r19 = r5;
            r20 = r6;
            r21 = r7;
     */
    /* JADX WARNING: Missing block: B:29:0x0083, code:
            r18 = r3;
     */
    /* JADX WARNING: Missing block: B:31:?, code:
            monitor-exit(r22);
     */
    /* JADX WARNING: Missing block: B:32:0x0086, code:
            resetPriorityAfterLockedSection();
            r19 = r5;
            r20 = r6;
            r21 = r7;
            dumpActivity("  ", r23, r9, (com.android.server.am.ActivityRecord) r15.get(r6), r7, r28);
            r2 = r20 - 1;
            r1 = true;
            r3 = r18;
            r7 = r21;
     */
    /* JADX WARNING: Missing block: B:33:0x00ab, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:34:0x00ac, code:
            r19 = r5;
            r20 = r6;
            r21 = r7;
            r3 = r18;
     */
    /* JADX WARNING: Missing block: B:35:0x00b5, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:36:0x00b6, code:
            r19 = r5;
            r20 = r6;
            r21 = r7;
     */
    /* JADX WARNING: Missing block: B:38:?, code:
            monitor-exit(r22);
     */
    /* JADX WARNING: Missing block: B:39:0x00bd, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:40:0x00c0, code:
            throw r0;
     */
    /* JADX WARNING: Missing block: B:41:0x00c1, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:43:0x00c3, code:
            r21 = r7;
     */
    /* JADX WARNING: Missing block: B:44:0x00c5, code:
            return true;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args, int opti, boolean dumpAll, boolean dumpVisibleStacksOnly, boolean dumpFocusedStackOnly) {
        Throwable th;
        PrintWriter printWriter = pw;
        Object obj = args;
        int i = opti;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                try {
                    ArrayList<ActivityRecord> activities = this.mStackSupervisor.getDumpActivitiesLocked(name, dumpVisibleStacksOnly, dumpFocusedStackOnly);
                } catch (Throwable th2) {
                    th = th2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                String str = name;
                boolean z = dumpVisibleStacksOnly;
                boolean z2 = dumpFocusedStackOnly;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw, ActivityRecord r, String[] args, boolean dumpAll) {
        StringBuilder stringBuilder;
        String innerPrefix = new StringBuilder();
        innerPrefix.append(prefix);
        innerPrefix.append("  ");
        innerPrefix = innerPrefix.toString();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                pw.print(prefix);
                pw.print("ACTIVITY ");
                pw.print(r.shortComponentName);
                pw.print(" ");
                pw.print(Integer.toHexString(System.identityHashCode(r)));
                pw.print(" pid=");
                if (r.app != null) {
                    pw.println(r.app.pid);
                } else {
                    pw.println("(not running)");
                }
                if (dumpAll) {
                    r.dump(pw, innerPrefix);
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (r.app != null && r.app.thread != null) {
            pw.flush();
            TransferPipe tp;
            try {
                tp = new TransferPipe();
                r.app.thread.dumpActivity(tp.getWriteFd(), r.appToken, innerPrefix, args);
                tp.go(fd);
                tp.kill();
            } catch (IOException e) {
                stringBuilder = new StringBuilder();
                stringBuilder.append(innerPrefix);
                stringBuilder.append("Failure while dumping the activity: ");
                stringBuilder.append(e);
                pw.println(stringBuilder.toString());
            } catch (RemoteException e2) {
                stringBuilder = new StringBuilder();
                stringBuilder.append(innerPrefix);
                stringBuilder.append("Got a RemoteException while dumping the activity");
                pw.println(stringBuilder.toString());
            } catch (Throwable th) {
                tp.kill();
            }
        }
    }

    void writeBroadcastsToProtoLocked(ProtoOutputStream proto) {
        ProtoOutputStream protoOutputStream = proto;
        if (this.mRegisteredReceivers.size() > 0) {
            for (ReceiverList r : this.mRegisteredReceivers.values()) {
                r.writeToProto(protoOutputStream, 2246267895809L);
            }
        }
        this.mReceiverResolver.writeToProto(protoOutputStream, 1146756268034L);
        int user = 0;
        for (BroadcastQueue q : this.mBroadcastQueues) {
            q.writeToProto(protoOutputStream, 2246267895811L);
        }
        while (true) {
            int user2 = user;
            long token = 1138166333441L;
            if (user2 < this.mStickyBroadcasts.size()) {
                long token2 = protoOutputStream.start(2246267895812L);
                protoOutputStream.write(1120986464257L, this.mStickyBroadcasts.keyAt(user2));
                for (Entry<String, ArrayList<Intent>> ent : ((ArrayMap) this.mStickyBroadcasts.valueAt(user2)).entrySet()) {
                    Entry<String, ArrayList<Intent>> ent2;
                    Entry<String, ArrayList<Intent>> ent3;
                    long actionToken = protoOutputStream.start(2246267895810L);
                    protoOutputStream.write(token, (String) ent2.getKey());
                    Iterator it = ((ArrayList) ent2.getValue()).iterator();
                    while (it.hasNext()) {
                        long actionToken2 = actionToken;
                        Iterator it2 = it;
                        ent3 = ent2;
                        token = token2;
                        ((Intent) it.next()).writeToProto(protoOutputStream, 2246267895810L, false, true, true, false);
                        actionToken = actionToken2;
                        token2 = token;
                        it = it2;
                        ent2 = ent3;
                    }
                    ent3 = ent2;
                    token = token2;
                    protoOutputStream.end(actionToken);
                    token = 1138166333441L;
                }
                protoOutputStream.end(token2);
                user = user2 + 1;
            } else {
                long handlerToken = protoOutputStream.start(1146756268037L);
                protoOutputStream.write(1138166333441L, this.mHandler.toString());
                this.mHandler.getLooper().writeToProto(protoOutputStream, 1146756268034L);
                protoOutputStream.end(handlerToken);
                return;
            }
        }
    }

    void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        boolean onlyHistory;
        boolean dumpAll2;
        boolean printed;
        int i;
        PrintWriter printWriter = pw;
        String[] strArr = args;
        int i2 = opti;
        boolean needSep = false;
        boolean printedAnything = false;
        String str = dumpPackage;
        if ("history".equals(str)) {
            boolean dumpAll3;
            if (i2 >= strArr.length || !"-s".equals(strArr[i2])) {
                dumpAll3 = dumpAll;
            } else {
                dumpAll3 = false;
            }
            str = null;
            onlyHistory = true;
            dumpAll2 = dumpAll3;
        } else {
            dumpAll2 = dumpAll;
            onlyHistory = false;
        }
        String dumpPackage2 = str;
        printWriter.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        if (!onlyHistory && dumpAll2) {
            if (this.mRegisteredReceivers.size() > 0) {
                printed = false;
                for (ReceiverList r : this.mRegisteredReceivers.values()) {
                    if (dumpPackage2 != null) {
                        if (r.app != null) {
                            if (!dumpPackage2.equals(r.app.info.packageName)) {
                            }
                        }
                    }
                    if (!printed) {
                        printWriter.println("  Registered Receivers:");
                        needSep = true;
                        printed = true;
                        printedAnything = true;
                    }
                    printWriter.print("  * ");
                    printWriter.println(r);
                    r.dump(printWriter, "    ");
                }
            }
            boolean needSep2 = needSep;
            boolean printedAnything2 = printedAnything;
            if (this.mReceiverResolver.dump(printWriter, needSep2 ? "\n  Receiver Resolver Table:" : "  Receiver Resolver Table:", "    ", dumpPackage2, false, false)) {
                needSep = true;
                printedAnything = true;
            } else {
                needSep = needSep2;
                printedAnything = printedAnything2;
            }
        }
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        int length = broadcastQueueArr.length;
        int i3 = 0;
        boolean needSep3 = needSep;
        boolean printedAnything3 = printedAnything;
        int i4 = 0;
        while (i4 < length) {
            int i5 = i4;
            i = i3;
            int i6 = length;
            needSep3 = broadcastQueueArr[i4].dumpLocked(fd, printWriter, strArr, i2, dumpAll2, dumpPackage2, needSep3);
            printedAnything3 |= needSep3;
            i4 = i5 + 1;
            i3 = i;
            length = i6;
            strArr = args;
        }
        i = i3;
        if (!(onlyHistory || this.mStickyBroadcasts == null || dumpPackage2 != null)) {
            printed = true;
            int user = i;
            while (user < this.mStickyBroadcasts.size()) {
                if (printed) {
                    pw.println();
                }
                printed = true;
                printedAnything3 = true;
                printWriter.print("  Sticky broadcasts for user ");
                printWriter.print(this.mStickyBroadcasts.keyAt(user));
                printWriter.println(":");
                StringBuilder sb = new StringBuilder(128);
                for (Entry<String, ArrayList<Intent>> ent : ((ArrayMap) this.mStickyBroadcasts.valueAt(user)).entrySet()) {
                    printWriter.print("  * Sticky action ");
                    printWriter.print((String) ent.getKey());
                    if (dumpAll2) {
                        printWriter.println(":");
                        ArrayList<Intent> intents = (ArrayList) ent.getValue();
                        i3 = intents.size();
                        length = i;
                        while (length < i3) {
                            sb.setLength(i);
                            sb.append("    Intent: ");
                            ((Intent) intents.get(length)).toShortString(sb, true, true, false, false);
                            printWriter.println(sb.toString());
                            Bundle bundle = ((Intent) intents.get(length)).getExtras();
                            if (bundle != null) {
                                printWriter.print("      ");
                                printWriter.println(bundle.toString());
                            }
                            length++;
                            i = 0;
                        }
                    } else {
                        printWriter.println(BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                    }
                    i = 0;
                }
                user++;
                i = 0;
            }
        }
        if (!onlyHistory && dumpAll2) {
            pw.println();
            for (BroadcastQueue queue : this.mBroadcastQueues) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("  mBroadcastsScheduled [");
                stringBuilder.append(queue.mQueueName);
                stringBuilder.append("]=");
                stringBuilder.append(queue.mBroadcastsScheduled);
                printWriter.println(stringBuilder.toString());
            }
            printWriter.println("  mHandler:");
            this.mHandler.dump(new PrintWriterPrinter(printWriter), "    ");
            printWriter.println("  mUiHandler:");
            this.mUiHandler.dump(new PrintWriterPrinter(printWriter), "    ");
            printedAnything3 = true;
        }
        if (!printedAnything3) {
            printWriter.println("  (nothing)");
        }
    }

    void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        if (this.mCurBroadcastStats != null) {
            pw.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
            long now = SystemClock.elapsedRealtime();
            if (this.mLastBroadcastStats != null) {
                pw.print("  Last stats (from ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, now, pw);
                pw.print(" to ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, now, pw);
                pw.print(", ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndUptime - this.mLastBroadcastStats.mStartUptime, pw);
                pw.println(" uptime):");
                if (!this.mLastBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
                    pw.println("    (nothing)");
                }
                pw.println();
            }
            pw.print("  Current stats (from ");
            TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, now, pw);
            pw.print(" to now, ");
            TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, pw);
            pw.println(" uptime):");
            if (!this.mCurBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
                pw.println("    (nothing)");
            }
        }
    }

    void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean fullCheckin, String dumpPackage) {
        if (this.mCurBroadcastStats != null) {
            if (this.mLastBroadcastStats != null) {
                this.mLastBroadcastStats.dumpCheckinStats(pw, dumpPackage);
                if (fullCheckin) {
                    this.mLastBroadcastStats = null;
                    return;
                }
            }
            this.mCurBroadcastStats.dumpCheckinStats(pw, dumpPackage);
            if (fullCheckin) {
                this.mCurBroadcastStats = null;
            }
        }
    }

    void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        new ItemMatcher().build(args, opti);
        pw.println("ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers)");
        boolean needSep = this.mProviderMap.dumpProvidersLocked(pw, dumpAll, dumpPackage);
        boolean printedAnything = false | needSep;
        if (this.mLaunchingProviders.size() > 0) {
            boolean printed = false;
            for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
                ContentProviderRecord r = (ContentProviderRecord) this.mLaunchingProviders.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.name.getPackageName())) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Launching content providers:");
                        printed = true;
                        printedAnything = true;
                    }
                    pw.print("  Launching #");
                    pw.print(i);
                    pw.print(": ");
                    pw.println(r);
                }
            }
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    @GuardedBy("this")
    void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        PrintWriter printWriter = pw;
        String str = dumpPackage;
        boolean needSep = false;
        boolean printedAnything = false;
        printWriter.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        if (this.mGrantedUriPermissions.size() > 0) {
            boolean printed = false;
            int dumpUid = -2;
            int i = 0;
            if (str != null) {
                try {
                    dumpUid = this.mContext.getPackageManager().getPackageUidAsUser(str, DumpState.DUMP_CHANGES, 0);
                } catch (NameNotFoundException e) {
                    dumpUid = -1;
                }
            }
            while (true) {
                int i2 = i;
                if (i2 >= this.mGrantedUriPermissions.size()) {
                    break;
                }
                i = this.mGrantedUriPermissions.keyAt(i2);
                if (dumpUid < -1 || UserHandle.getAppId(i) == dumpUid) {
                    ArrayMap<GrantUri, UriPermission> perms = (ArrayMap) this.mGrantedUriPermissions.valueAt(i2);
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        printWriter.println("  Granted Uri Permissions:");
                        printed = true;
                        printedAnything = true;
                    }
                    printWriter.print("  * UID ");
                    printWriter.print(i);
                    printWriter.println(" holds:");
                    for (UriPermission perm : perms.values()) {
                        printWriter.print("    ");
                        printWriter.println(perm);
                        if (dumpAll) {
                            perm.dump(printWriter, "      ");
                        }
                    }
                }
                i = i2 + 1;
            }
        }
        if (!printedAnything) {
            printWriter.println("  (nothing)");
        }
    }

    void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        PrintWriter printWriter = pw;
        String str = dumpPackage;
        boolean printed = false;
        printWriter.println("ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents)");
        if (this.mIntentSenderRecords.size() > 0) {
            ArrayList<PendingIntentRecord> list;
            ArrayMap<String, ArrayList<PendingIntentRecord>> byPackage = new ArrayMap();
            ArrayList<WeakReference<PendingIntentRecord>> weakRefs = new ArrayList();
            for (WeakReference<PendingIntentRecord> ref : this.mIntentSenderRecords.values()) {
                PendingIntentRecord rec = ref != null ? (PendingIntentRecord) ref.get() : null;
                if (rec == null) {
                    weakRefs.add(ref);
                } else if (str == null || str.equals(rec.key.packageName)) {
                    list = (ArrayList) byPackage.get(rec.key.packageName);
                    if (list == null) {
                        list = new ArrayList();
                        byPackage.put(rec.key.packageName, list);
                    }
                    list.add(rec);
                }
            }
            int i = 0;
            boolean printed2 = false;
            for (int i2 = 0; i2 < byPackage.size(); i2++) {
                list = (ArrayList) byPackage.valueAt(i2);
                printed2 = true;
                printWriter.print("  * ");
                printWriter.print((String) byPackage.keyAt(i2));
                printWriter.print(": ");
                printWriter.print(list.size());
                printWriter.println(" items");
                for (int j = 0; j < list.size(); j++) {
                    printWriter.print("    #");
                    printWriter.print(j);
                    printWriter.print(": ");
                    printWriter.println(list.get(j));
                    if (dumpAll) {
                        ((PendingIntentRecord) list.get(j)).dump(printWriter, "      ");
                    }
                }
            }
            if (weakRefs.size() > 0) {
                printed = true;
                printWriter.println("  * WEAK REFS:");
                while (i < weakRefs.size()) {
                    printWriter.print("    #");
                    printWriter.print(i);
                    printWriter.print(": ");
                    printWriter.println(weakRefs.get(i));
                    i++;
                }
            } else {
                printed = printed2;
            }
        }
        if (!printed) {
            printWriter.println("  (nothing)");
        }
    }

    private static final int dumpProcessList(PrintWriter pw, ActivityManagerService service, List list, String prefix, String normalLabel, String persistentLabel, String dumpPackage) {
        int numPers = 0;
        for (int i = list.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) list.get(i);
            if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                String str = "%s%s #%2d: %s";
                Object[] objArr = new Object[4];
                objArr[0] = prefix;
                objArr[1] = r.persistent ? persistentLabel : normalLabel;
                objArr[2] = Integer.valueOf(i);
                objArr[3] = r.toString();
                pw.println(String.format(str, objArr));
                if (r.persistent) {
                    numPers++;
                }
            }
        }
        return numPers;
    }

    private static final ArrayList<Pair<ProcessRecord, Integer>> sortProcessOomList(List<ProcessRecord> origList, String dumpPackage) {
        ArrayList<Pair<ProcessRecord, Integer>> list = new ArrayList(origList.size());
        for (int i = 0; i < origList.size(); i++) {
            ProcessRecord r = (ProcessRecord) origList.get(i);
            if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                list.add(new Pair((ProcessRecord) origList.get(i), Integer.valueOf(i)));
            }
        }
        Collections.sort(list, new Comparator<Pair<ProcessRecord, Integer>>() {
            public int compare(Pair<ProcessRecord, Integer> object1, Pair<ProcessRecord, Integer> object2) {
                int i = 1;
                if (((ProcessRecord) object1.first).setAdj != ((ProcessRecord) object2.first).setAdj) {
                    if (((ProcessRecord) object1.first).setAdj > ((ProcessRecord) object2.first).setAdj) {
                        i = -1;
                    }
                    return i;
                } else if (((ProcessRecord) object1.first).setProcState != ((ProcessRecord) object2.first).setProcState) {
                    if (((ProcessRecord) object1.first).setProcState > ((ProcessRecord) object2.first).setProcState) {
                        i = -1;
                    }
                    return i;
                } else if (((Integer) object1.second).intValue() == ((Integer) object2.second).intValue()) {
                    return 0;
                } else {
                    if (((Integer) object1.second).intValue() > ((Integer) object2.second).intValue()) {
                        i = -1;
                    }
                    return i;
                }
            }
        });
        return list;
    }

    private static final boolean writeProcessOomListToProto(ProtoOutputStream proto, long fieldId, ActivityManagerService service, List<ProcessRecord> origList, boolean inclDetails, String dumpPackage) {
        ProtoOutputStream protoOutputStream = proto;
        ArrayList<Pair<ProcessRecord, Integer>> list = sortProcessOomList(origList, dumpPackage);
        if (list.isEmpty()) {
            return false;
        }
        long curUptime;
        long curUptime2 = SystemClock.uptimeMillis();
        boolean z = true;
        int i = list.size() - 1;
        while (i >= 0) {
            ArrayList<Pair<ProcessRecord, Integer>> list2;
            ProcessRecord r = ((Pair) list.get(i)).first;
            long token = proto.start(fieldId);
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj);
            protoOutputStream.write(1133871366145L, r.persistent);
            protoOutputStream.write(1120986464258L, (origList.size() - z) - ((Integer) ((Pair) list.get(i)).second).intValue());
            protoOutputStream.write(1138166333443L, oomAdj);
            int schedGroup = -1;
            int i2 = r.setSchedGroup;
            if (i2 != 0) {
                switch (i2) {
                    case 2:
                        schedGroup = 1;
                        break;
                    case 3:
                        schedGroup = 2;
                        break;
                    case 4:
                        schedGroup = 3;
                        break;
                }
            }
            schedGroup = 0;
            if (schedGroup != -1) {
                protoOutputStream.write(1159641169924L, schedGroup);
            }
            if (r.foregroundActivities) {
                protoOutputStream.write(1133871366149L, z);
            } else if (r.foregroundServices) {
                protoOutputStream.write(1133871366150L, z);
            }
            ProcessRecord r2 = r;
            protoOutputStream.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r.curProcState));
            ProcessRecord r3 = r2;
            protoOutputStream.write(1120986464264L, r3.trimMemoryLevel);
            r3.writeToProto(protoOutputStream, 1146756268041L);
            protoOutputStream.write(1138166333450L, r3.adjType);
            if (!(r3.adjSource == null && r3.adjTarget == null)) {
                if (r3.adjTarget instanceof ComponentName) {
                    r3.adjTarget.writeToProto(protoOutputStream, 1146756268043L);
                } else if (r3.adjTarget != null) {
                    protoOutputStream.write(1138166333452L, r3.adjTarget.toString());
                }
                if (r3.adjSource instanceof ProcessRecord) {
                    r3.adjSource.writeToProto(protoOutputStream, 1146756268045L);
                } else if (r3.adjSource != null) {
                    protoOutputStream.write(1138166333454L, r3.adjSource.toString());
                }
            }
            String str;
            int i3;
            if (inclDetails) {
                long detailToken = protoOutputStream.start(1146756268047L);
                protoOutputStream.write(1120986464257L, r3.maxAdj);
                protoOutputStream.write(1120986464258L, r3.curRawAdj);
                protoOutputStream.write(1120986464259L, r3.setRawAdj);
                protoOutputStream.write(1120986464260L, r3.curAdj);
                protoOutputStream.write(1120986464261L, r3.setAdj);
                protoOutputStream.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r3.curProcState));
                protoOutputStream.write(1159641169928L, ProcessList.makeProcStateProtoEnum(r3.setProcState));
                protoOutputStream.write(1138166333449L, DebugUtils.sizeValueToString(r3.lastPss * 1024, new StringBuilder()));
                protoOutputStream.write(1138166333450L, DebugUtils.sizeValueToString(r3.lastSwapPss * 1024, new StringBuilder()));
                protoOutputStream.write(1138166333451L, DebugUtils.sizeValueToString(r3.lastCachedPss * 1024, new StringBuilder()));
                protoOutputStream.write(1133871366156L, r3.cached);
                protoOutputStream.write(1133871366157L, r3.empty);
                protoOutputStream.write(1133871366158L, r3.hasAboveClient);
                if (r3.setProcState < 9 || r3.lastCpuTime == 0) {
                    list2 = list;
                    curUptime = curUptime2;
                    str = oomAdj;
                    i3 = schedGroup;
                } else {
                    long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
                    list2 = list;
                    curUptime = curUptime2;
                    list = r3.curCpuTime - r3.lastCpuTime;
                    long cpuTimeToken = protoOutputStream.start(1146756268047L);
                    protoOutputStream.write(1, uptimeSince);
                    protoOutputStream.write(1112396529666L, list);
                    long timeUsed = list;
                    protoOutputStream.write(3, (100.0d * ((double) list)) / ((double) uptimeSince));
                    protoOutputStream.end(cpuTimeToken);
                }
                protoOutputStream.end(detailToken);
            } else {
                list2 = list;
                curUptime = curUptime2;
                str = oomAdj;
                i3 = schedGroup;
            }
            protoOutputStream.end(token);
            i--;
            list = list2;
            curUptime2 = curUptime;
            List<ProcessRecord> list3 = origList;
            String str2 = dumpPackage;
            z = true;
        }
        curUptime = curUptime2;
        return true;
    }

    private static final boolean dumpProcessOomList(PrintWriter pw, ActivityManagerService service, List<ProcessRecord> origList, String prefix, String normalLabel, String persistentLabel, boolean inclDetails, String dumpPackage) {
        PrintWriter printWriter = pw;
        String str = prefix;
        ArrayList<Pair<ProcessRecord, Integer>> list = sortProcessOomList(origList, dumpPackage);
        if (list.isEmpty()) {
            return false;
        }
        long curUptime;
        long curUptime2 = SystemClock.uptimeMillis();
        long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
        int i = list.size() - 1;
        while (i >= 0) {
            char schedGroup;
            char foreground;
            char c;
            ArrayList<Pair<ProcessRecord, Integer>> list2;
            List<ProcessRecord> list3;
            String str2;
            ProcessRecord r = ((Pair) list.get(i)).first;
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj);
            switch (r.setSchedGroup) {
                case 0:
                    schedGroup = 'B';
                    break;
                case 1:
                    schedGroup = 'R';
                    break;
                case 2:
                    schedGroup = 'F';
                    break;
                case 3:
                    schedGroup = 'T';
                    break;
                default:
                    schedGroup = '?';
                    break;
            }
            if (r.foregroundActivities) {
                foreground = 'A';
            } else if (r.foregroundServices) {
                foreground = 'S';
            } else {
                foreground = ' ';
            }
            String procState = ProcessList.makeProcStateString(r.curProcState);
            printWriter.print(str);
            printWriter.print(r.persistent ? persistentLabel : normalLabel);
            printWriter.print(" #");
            int num = (origList.size() - 1) - ((Integer) ((Pair) list.get(i)).second).intValue();
            if (num < 10) {
                printWriter.print(' ');
            }
            printWriter.print(num);
            printWriter.print(": ");
            printWriter.print(oomAdj);
            printWriter.print(' ');
            printWriter.print(schedGroup);
            printWriter.print('/');
            printWriter.print(foreground);
            printWriter.print('/');
            printWriter.print(procState);
            printWriter.print(" trm:");
            if (r.trimMemoryLevel < 10) {
                c = ' ';
                printWriter.print(' ');
            } else {
                c = ' ';
            }
            printWriter.print(r.trimMemoryLevel);
            printWriter.print(c);
            printWriter.print(r.toShortString());
            printWriter.print(" (");
            printWriter.print(r.adjType);
            printWriter.println(')');
            if (!(r.adjSource == null && r.adjTarget == null)) {
                printWriter.print(str);
                printWriter.print("    ");
                if (r.adjTarget instanceof ComponentName) {
                    printWriter.print(((ComponentName) r.adjTarget).flattenToShortString());
                } else if (r.adjTarget != null) {
                    printWriter.print(r.adjTarget.toString());
                } else {
                    printWriter.print("{null}");
                }
                printWriter.print("<=");
                if (r.adjSource instanceof ProcessRecord) {
                    printWriter.print("Proc{");
                    printWriter.print(((ProcessRecord) r.adjSource).toShortString());
                    printWriter.println("}");
                } else if (r.adjSource != null) {
                    printWriter.println(r.adjSource.toString());
                } else {
                    printWriter.println("{null}");
                }
            }
            if (inclDetails) {
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("oom: max=");
                printWriter.print(r.maxAdj);
                printWriter.print(" curRaw=");
                printWriter.print(r.curRawAdj);
                printWriter.print(" setRaw=");
                printWriter.print(r.setRawAdj);
                printWriter.print(" cur=");
                printWriter.print(r.curAdj);
                printWriter.print(" set=");
                printWriter.println(r.setAdj);
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("state: cur=");
                printWriter.print(ProcessList.makeProcStateString(r.curProcState));
                printWriter.print(" set=");
                printWriter.print(ProcessList.makeProcStateString(r.setProcState));
                printWriter.print(" lastPss=");
                DebugUtils.printSizeValue(printWriter, r.lastPss * 1024);
                printWriter.print(" lastSwapPss=");
                DebugUtils.printSizeValue(printWriter, r.lastSwapPss * 1024);
                printWriter.print(" lastCachedPss=");
                DebugUtils.printSizeValue(printWriter, r.lastCachedPss * 1024);
                pw.println();
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("cached=");
                printWriter.print(r.cached);
                printWriter.print(" empty=");
                printWriter.print(r.empty);
                printWriter.print(" hasAboveClient=");
                printWriter.println(r.hasAboveClient);
                if (r.setProcState >= 9 && r.lastCpuTime != 0) {
                    list2 = list;
                    curUptime = curUptime2;
                    long timeUsed = r.curCpuTime - r.lastCpuTime;
                    printWriter.print(str);
                    printWriter.print("    ");
                    printWriter.print("run cpu over ");
                    TimeUtils.formatDuration(uptimeSince, printWriter);
                    printWriter.print(" used ");
                    TimeUtils.formatDuration(timeUsed, printWriter);
                    printWriter.print(" (");
                    printWriter.print((SINGLE_DISPATCH_THRESHOLD_MS * timeUsed) / uptimeSince);
                    printWriter.println("%)");
                    i--;
                    list = list2;
                    curUptime2 = curUptime;
                    list3 = origList;
                    str2 = dumpPackage;
                }
            }
            list2 = list;
            curUptime = curUptime2;
            i--;
            list = list2;
            curUptime2 = curUptime;
            list3 = origList;
            str2 = dumpPackage;
        }
        curUptime = curUptime2;
        return true;
    }

    /* JADX WARNING: Missing block: B:40:0x007a, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:41:0x007d, code:
            return r0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs, String[] args) {
        ArrayList<ProcessRecord> e;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ArrayList<ProcessRecord> procs;
                if (args == null || args.length <= start || args[start].charAt(0) == '-') {
                    procs = new ArrayList(this.mLruProcesses);
                } else {
                    procs = new ArrayList();
                    int pid = -1;
                    try {
                        e = Integer.parseInt(args[start]);
                        pid = e;
                    } catch (NumberFormatException e2) {
                        e = e2;
                    }
                    for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                        ProcessRecord proc = (ProcessRecord) this.mLruProcesses.get(i);
                        if (proc.pid > 0 && proc.pid == pid) {
                            procs.add(proc);
                        } else if (allPkgs && proc.pkgList != null && proc.pkgList.containsKey(args[start])) {
                            procs.add(proc);
                        } else if (proc.processName.equals(args[start])) {
                            procs.add(proc);
                        }
                    }
                    if (procs.size() <= 0) {
                        e = null;
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return e;
    }

    final void dumpGraphicsHardwareUsage(FileDescriptor fd, PrintWriter pw, String[] args) {
        StringBuilder stringBuilder;
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("No process found for: ");
            stringBuilder2.append(args[0]);
            pw.println(stringBuilder2.toString());
            return;
        }
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        pw.println("Applications Graphics Acceleration Info:");
        StringBuilder stringBuilder3 = new StringBuilder();
        stringBuilder3.append("Uptime: ");
        stringBuilder3.append(uptime);
        stringBuilder3.append(" Realtime: ");
        stringBuilder3.append(realtime);
        pw.println(stringBuilder3.toString());
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) procs.get(i);
            if (r.thread != null) {
                StringBuilder stringBuilder4 = new StringBuilder();
                stringBuilder4.append("\n** Graphics info for pid ");
                stringBuilder4.append(r.pid);
                stringBuilder4.append(" [");
                stringBuilder4.append(r.processName);
                stringBuilder4.append("] **");
                pw.println(stringBuilder4.toString());
                pw.flush();
                TransferPipe tp;
                try {
                    tp = new TransferPipe();
                    r.thread.dumpGfxInfo(tp.getWriteFd(), args);
                    tp.go(fd);
                    tp.kill();
                } catch (IOException e) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Failure while dumping the app: ");
                    stringBuilder.append(r);
                    pw.println(stringBuilder.toString());
                    pw.flush();
                } catch (RemoteException e2) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Got a RemoteException while dumping the app ");
                    stringBuilder.append(r);
                    pw.println(stringBuilder.toString());
                    pw.flush();
                } catch (Throwable th) {
                    tp.kill();
                }
            }
        }
    }

    final void dumpDbInfo(FileDescriptor fd, PrintWriter pw, String[] args) {
        StringBuilder stringBuilder;
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("No process found for: ");
            stringBuilder2.append(args[0]);
            pw.println(stringBuilder2.toString());
            return;
        }
        pw.println("Applications Database Info:");
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) procs.get(i);
            if (r.thread != null) {
                StringBuilder stringBuilder3 = new StringBuilder();
                stringBuilder3.append("\n** Database info for pid ");
                stringBuilder3.append(r.pid);
                stringBuilder3.append(" [");
                stringBuilder3.append(r.processName);
                stringBuilder3.append("] **");
                pw.println(stringBuilder3.toString());
                pw.flush();
                TransferPipe tp;
                try {
                    tp = new TransferPipe();
                    r.thread.dumpDbInfo(tp.getWriteFd(), args);
                    tp.go(fd);
                    tp.kill();
                } catch (IOException e) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Failure while dumping the app: ");
                    stringBuilder.append(r);
                    pw.println(stringBuilder.toString());
                    pw.flush();
                } catch (RemoteException e2) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Got a RemoteException while dumping the app ");
                    stringBuilder.append(r);
                    pw.println(stringBuilder.toString());
                    pw.flush();
                } catch (Throwable th) {
                    tp.kill();
                }
            }
        }
    }

    private static void sortMemItems(List<MemItem> items) {
        Collections.sort(items, new Comparator<MemItem>() {
            public int compare(MemItem lhs, MemItem rhs) {
                if (lhs.pss < rhs.pss) {
                    return 1;
                }
                if (lhs.pss > rhs.pss) {
                    return -1;
                }
                return 0;
            }
        });
    }

    static final void dumpMemItems(PrintWriter pw, String prefix, String tag, ArrayList<MemItem> items, boolean sort, boolean isCompact, boolean dumpSwapPss) {
        PrintWriter printWriter = pw;
        String str = prefix;
        String str2 = tag;
        if (sort && !isCompact) {
            sortMemItems(items);
        }
        int i = 0;
        int i2 = 0;
        while (true) {
            int i3 = i2;
            if (i3 < items.size()) {
                int i4;
                MemItem mi = (MemItem) items.get(i3);
                if (isCompact) {
                    i4 = i3;
                    if (mi.isProc) {
                        printWriter.print("proc,");
                        printWriter.print(str2);
                        printWriter.print(",");
                        printWriter.print(mi.shortLabel);
                        printWriter.print(",");
                        printWriter.print(mi.id);
                        printWriter.print(",");
                        printWriter.print(mi.pss);
                        printWriter.print(",");
                        printWriter.print(dumpSwapPss ? Long.valueOf(mi.swapPss) : "N/A");
                        printWriter.println(mi.hasActivities ? ",a" : ",e");
                    } else {
                        printWriter.print(str2);
                        printWriter.print(",");
                        printWriter.print(mi.shortLabel);
                        printWriter.print(",");
                        printWriter.print(mi.pss);
                        printWriter.print(",");
                        printWriter.println(dumpSwapPss ? Long.valueOf(mi.swapPss) : "N/A");
                    }
                } else if (dumpSwapPss) {
                    r4 = new Object[4];
                    i4 = i3;
                    r4[1] = stringifyKBSize(mi.pss);
                    r4[2] = mi.label;
                    r4[3] = stringifyKBSize(mi.swapPss);
                    printWriter.printf("%s%s: %-60s (%s in swap)\n", r4);
                    i = 0;
                } else {
                    i4 = i3;
                    r0 = new Object[3];
                    i = 0;
                    r0[0] = str;
                    r0[1] = stringifyKBSize(mi.pss);
                    r0[2] = mi.label;
                    printWriter.printf("%s%s: %s\n", r0);
                }
                if (mi.subitems != null) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(str);
                    stringBuilder.append("    ");
                    dumpMemItems(printWriter, stringBuilder.toString(), mi.shortLabel, mi.subitems, true, isCompact, dumpSwapPss);
                }
                i2 = i4 + 1;
            } else {
                ArrayList<MemItem> arrayList = items;
                return;
            }
        }
    }

    static final void dumpMemItems(ProtoOutputStream proto, long fieldId, String tag, ArrayList<MemItem> items, boolean sort, boolean dumpSwapPss) {
        ProtoOutputStream protoOutputStream = proto;
        if (sort) {
            sortMemItems(items);
        }
        int i = 0;
        while (true) {
            int i2 = i;
            if (i2 < items.size()) {
                MemItem mi = (MemItem) items.get(i2);
                long token = proto.start(fieldId);
                protoOutputStream.write(1138166333441L, tag);
                protoOutputStream.write(1138166333442L, mi.shortLabel);
                protoOutputStream.write(1133871366148L, mi.isProc);
                protoOutputStream.write(1120986464259L, mi.id);
                protoOutputStream.write(1133871366149L, mi.hasActivities);
                protoOutputStream.write(1112396529670L, mi.pss);
                if (dumpSwapPss) {
                    protoOutputStream.write(1112396529671L, mi.swapPss);
                }
                if (mi.subitems != null) {
                    dumpMemItems(protoOutputStream, 2246267895816L, mi.shortLabel, mi.subitems, true, dumpSwapPss);
                }
                protoOutputStream.end(token);
                i = i2 + 1;
            } else {
                String str = tag;
                ArrayList<MemItem> arrayList = items;
                return;
            }
        }
    }

    static final void appendMemBucket(StringBuilder out, long memKB, String label, boolean stackLike) {
        int start = label.lastIndexOf(46);
        if (start >= 0) {
            start++;
        } else {
            start = 0;
        }
        int end = label.length();
        for (int i = 0; i < DUMP_MEM_BUCKETS.length; i++) {
            if (DUMP_MEM_BUCKETS[i] >= memKB) {
                out.append(DUMP_MEM_BUCKETS[i] / 1024);
                out.append(stackLike ? "MB." : "MB ");
                out.append(label, start, end);
                return;
            }
        }
        out.append(memKB / 1024);
        out.append(stackLike ? "MB." : "MB ");
        out.append(label, start, end);
    }

    private final void dumpApplicationMemoryUsageHeader(PrintWriter pw, long uptime, long realtime, boolean isCheckinRequest, boolean isCompact) {
        if (isCompact) {
            pw.print("version,");
            pw.println(1);
        }
        if (isCheckinRequest || isCompact) {
            pw.print("time,");
            pw.print(uptime);
            pw.print(",");
            pw.println(realtime);
            return;
        }
        pw.println("Applications Memory Usage (in Kilobytes):");
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Uptime: ");
        stringBuilder.append(uptime);
        stringBuilder.append(" Realtime: ");
        stringBuilder.append(realtime);
        pw.println(stringBuilder.toString());
    }

    private final long[] getKsmInfo() {
        long[] longOut = new long[4];
        int[] SINGLE_LONG_FORMAT = new int[]{8224};
        long[] longTmp = new long[1];
        Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", SINGLE_LONG_FORMAT, null, longTmp, null);
        longOut[0] = (longTmp[0] * 4096) / 1024;
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", SINGLE_LONG_FORMAT, null, longTmp, null);
        longOut[1] = (longTmp[0] * 4096) / 1024;
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", SINGLE_LONG_FORMAT, null, longTmp, null);
        longOut[2] = (longTmp[0] * 4096) / 1024;
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", SINGLE_LONG_FORMAT, null, longTmp, null);
        longOut[3] = (longTmp[0] * 4096) / 1024;
        return longOut;
    }

    private static String stringifySize(long size, int order) {
        Locale locale = Locale.US;
        if (order == 1) {
            return String.format(locale, "%,13d", new Object[]{Long.valueOf(size)});
        } else if (order == 1024) {
            return String.format(locale, "%,9dK", new Object[]{Long.valueOf(size / 1024)});
        } else if (order == DumpState.DUMP_DEXOPT) {
            return String.format(locale, "%,5dM", new Object[]{Long.valueOf((size / 1024) / 1024)});
        } else if (order == 1073741824) {
            return String.format(locale, "%,1dG", new Object[]{Long.valueOf(((size / 1024) / 1024) / 1024)});
        } else {
            throw new IllegalArgumentException("Invalid size order");
        }
    }

    private static String stringifyKBSize(long size) {
        return stringifySize(1024 * size, 1024);
    }

    final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, String[] args, boolean brief, PrintWriter categoryPw, boolean asProto) {
        int opti;
        PrintWriter printWriter = pw;
        Object obj = args;
        MemoryUsageDumpOptions opts = new MemoryUsageDumpOptions();
        opts.dumpDetails = false;
        opts.dumpFullDetails = false;
        opts.dumpDalvik = false;
        opts.dumpSummaryOnly = false;
        opts.dumpUnreachable = false;
        opts.oomOnly = false;
        opts.isCompact = false;
        opts.localOnly = false;
        opts.packages = false;
        opts.isCheckinRequest = false;
        opts.dumpSwapPss = false;
        opts.dumpProto = asProto;
        int opti2 = 0;
        while (true) {
            opti = opti2;
            if (opti >= obj.length) {
                break;
            }
            String opt = obj[opti];
            if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
                break;
            }
            int opti3 = opti + 1;
            if ("-a".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpFullDetails = true;
                opts.dumpDalvik = true;
                opts.dumpSwapPss = true;
            } else if ("-d".equals(opt)) {
                opts.dumpDalvik = true;
            } else if ("-c".equals(opt)) {
                opts.isCompact = true;
            } else if ("-s".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpSummaryOnly = true;
            } else if ("-S".equals(opt)) {
                opts.dumpSwapPss = true;
            } else if ("--unreachable".equals(opt)) {
                opts.dumpUnreachable = true;
            } else if ("--oom".equals(opt)) {
                opts.oomOnly = true;
            } else if ("--local".equals(opt)) {
                opts.localOnly = true;
            } else if ("--package".equals(opt)) {
                opts.packages = true;
            } else if ("--checkin".equals(opt)) {
                opts.isCheckinRequest = true;
            } else if (PriorityDump.PROTO_ARG.equals(opt)) {
                opts.dumpProto = true;
            } else if ("-h".equals(opt)) {
                printWriter.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
                printWriter.println("  -a: include all available information for each process.");
                printWriter.println("  -d: include dalvik details.");
                printWriter.println("  -c: dump in a compact machine-parseable representation.");
                printWriter.println("  -s: dump only summary of application memory usage.");
                printWriter.println("  -S: dump also SwapPss.");
                printWriter.println("  --oom: only show processes organized by oom adj.");
                printWriter.println("  --local: only collect details locally, don't call process.");
                printWriter.println("  --package: interpret process arg as package, dumping all");
                printWriter.println("             processes that have loaded that package.");
                printWriter.println("  --checkin: dump data for a checkin");
                printWriter.println("  --proto: dump data to proto");
                printWriter.println("If [process] is specified it can be the name or ");
                printWriter.println("pid of a specific process to dump.");
                return;
            } else {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Unknown argument: ");
                stringBuilder.append(opt);
                stringBuilder.append("; use -h for help");
                printWriter.println(stringBuilder.toString());
            }
            opti2 = opti3;
        }
        String[] innerArgs = new String[(obj.length - opti)];
        System.arraycopy(obj, opti, innerArgs, 0, obj.length - opti);
        ArrayList<ProcessRecord> procs = collectProcesses(printWriter, opti, opts.packages, obj);
        if (opts.dumpProto) {
            dumpApplicationMemoryUsage(fd, opts, innerArgs, brief, procs);
        } else {
            dumpApplicationMemoryUsage(fd, printWriter, prefix, opts, innerArgs, brief, procs, categoryPw);
        }
    }

    private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss, long memtrack, String name) {
        sb.append("  ");
        sb.append(ProcessList.makeOomAdjString(oomAdj));
        sb.append(' ');
        sb.append(ProcessList.makeProcStateString(procState));
        sb.append(' ');
        ProcessList.appendRamKb(sb, pss);
        sb.append(": ");
        sb.append(name);
        if (memtrack > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(memtrack));
            sb.append(" memtrack)");
        }
    }

    private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi) {
        appendBasicMemEntry(sb, mi.oomAdj, mi.procState, mi.pss, mi.memtrack, mi.name);
        sb.append(" (pid ");
        sb.append(mi.pid);
        sb.append(") ");
        sb.append(mi.adjType);
        sb.append(10);
        if (mi.adjReason != null) {
            sb.append("                      ");
            sb.append(mi.adjReason);
            sb.append(10);
        }
    }

    static /* synthetic */ boolean lambda$reportMemUsage$4(Stats st) {
        return st.vsize > 0;
    }

    private static boolean scanArgs(String[] args, String value) {
        if (args != null) {
            for (String arg : args) {
                if (value.equals(arg)) {
                    return true;
                }
            }
        }
        return false;
    }

    final boolean removeDyingProviderLocked(ProcessRecord proc, ContentProviderRecord cpr, boolean always) {
        boolean inLaunching = this.mLaunchingProviders.contains(cpr);
        if (!inLaunching || always) {
            synchronized (cpr) {
                cpr.launchingApp = null;
                cpr.notifyAll();
            }
            this.mProviderMap.removeProviderByClass(cpr.name, UserHandle.getUserId(cpr.uid));
            String[] names = cpr.info.authority.split(";");
            for (String removeProviderByName : names) {
                this.mProviderMap.removeProviderByName(removeProviderByName, UserHandle.getUserId(cpr.uid));
            }
            if (cpr.proc != null) {
                cpr.proc.pubProviders.remove(cpr.info.name);
            } else {
                ProcessRecord app = getProcessRecordLocked(cpr.info.processName, cpr.appInfo.uid, false);
                if (app != null) {
                    app.pubProviders.remove(cpr.info.name);
                }
            }
        }
        for (int i = cpr.connections.size() - 1; i >= 0; i--) {
            ContentProviderConnection conn = (ContentProviderConnection) cpr.connections.get(i);
            if (!conn.waiting || !inLaunching || always) {
                ProcessRecord capp = conn.client;
                conn.dead = true;
                if (conn.stableCount > 0) {
                    if (!(capp == this.mHomeProcess || capp.persistent || capp.thread == null || capp.pid == 0 || capp.pid == MY_PID)) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("depends on provider ");
                        stringBuilder.append(cpr.name.flattenToShortString());
                        stringBuilder.append(" in dying proc ");
                        stringBuilder.append(proc != null ? proc.processName : "??");
                        stringBuilder.append(" (adj ");
                        stringBuilder.append(proc != null ? Integer.valueOf(proc.setAdj) : "??");
                        stringBuilder.append(")");
                        capp.kill(stringBuilder.toString(), true);
                    }
                } else if (!(capp.thread == null || conn.provider.provider == null)) {
                    try {
                        capp.thread.unstableProviderDied(conn.provider.provider.asBinder());
                    } catch (RemoteException e) {
                    }
                    cpr.connections.remove(i);
                    if (conn.client.conProviders.remove(conn)) {
                        stopAssociationLocked(capp.uid, capp.processName, cpr.uid, cpr.name);
                    }
                }
            }
        }
        if (inLaunching && always) {
            this.mLaunchingProviders.remove(cpr);
        }
        return inLaunching;
    }

    @GuardedBy("this")
    protected boolean cleanUpApplicationRecordLocked(final ProcessRecord app, boolean restarting, boolean allowRestart, int index, boolean replacingPid) {
        int i;
        String str;
        StringBuilder stringBuilder;
        String str2 = TAG;
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append("cleanUpApplicationRecord app: ");
        stringBuilder2.append(app);
        stringBuilder2.append(", app.bad: ");
        stringBuilder2.append(app.bad);
        stringBuilder2.append(", restarting: ");
        stringBuilder2.append(restarting);
        stringBuilder2.append(", allowRestart: ");
        stringBuilder2.append(allowRestart);
        Slog.d(str2, stringBuilder2.toString());
        if (index >= 0) {
            removeLruProcessLocked(app);
            ProcessList.remove(app.pid);
        }
        this.mProcessesToGc.remove(app);
        this.mPendingPssProcesses.remove(app);
        ProcessList.abortNextPssTime(app.procStateMemTracker);
        if (!(app.crashDialog == null || app.forceCrashReport)) {
            app.crashDialog.dismiss();
            app.crashDialog = null;
        }
        if (app.anrDialog != null) {
            app.anrDialog.dismiss();
            app.anrDialog = null;
        }
        if (app.waitDialog != null) {
            app.waitDialog.dismiss();
            app.waitDialog = null;
        }
        app.crashing = false;
        app.notResponding = false;
        app.resetPackageList(this.mProcessStats);
        app.unlinkDeathRecipient();
        app.makeInactive(this.mProcessStats);
        app.waitingToKill = null;
        app.forcingToImportant = null;
        updateProcessForegroundLocked(app, false, false);
        app.foregroundActivities = false;
        app.hasShownUi = false;
        app.treatLikeActivity = false;
        app.hasAboveClient = false;
        app.hasClientActivities = false;
        this.mServices.killServicesLocked(app, allowRestart);
        boolean restart = false;
        for (i = app.pubProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = (ContentProviderRecord) app.pubProviders.valueAt(i);
            boolean always = app.bad || !allowRestart;
            if ((removeDyingProviderLocked(app, cpr, always) || always) && cpr.hasConnectionOrHandle()) {
                restart = true;
            }
            cpr.provider = null;
            cpr.proc = null;
        }
        app.pubProviders.clear();
        if (cleanupAppInLaunchingProvidersLocked(app, false)) {
            restart = true;
        }
        if (!app.conProviders.isEmpty()) {
            for (i = app.conProviders.size() - 1; i >= 0; i--) {
                ContentProviderConnection conn = (ContentProviderConnection) app.conProviders.get(i);
                conn.provider.connections.remove(conn);
                stopAssociationLocked(app.uid, app.processName, conn.provider.uid, conn.provider.name);
            }
            app.conProviders.clear();
        }
        skipCurrentReceiverLocked(app);
        if (!app.killedByAm) {
            cleanupBroadcastLocked(app);
            cleanupAlarmLocked(app);
        }
        for (i = app.receivers.size() - 1; i >= 0; i--) {
            removeReceiverLocked((ReceiverList) app.receivers.valueAt(i));
        }
        app.receivers.clear();
        if (this.mBackupTarget != null && app.pid == this.mBackupTarget.app.pid) {
            if (ActivityManagerDebugConfig.DEBUG_BACKUP || ActivityManagerDebugConfig.DEBUG_CLEANUP) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("App ");
                stringBuilder.append(this.mBackupTarget.appInfo);
                stringBuilder.append(" died during backup");
                Slog.d(str, stringBuilder.toString());
            }
            this.mHandler.post(new Runnable() {
                public void run() {
                    try {
                        IBackupManager.Stub.asInterface(ServiceManager.getService(HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnected(app.info.packageName);
                    } catch (RemoteException e) {
                    }
                }
            });
        }
        for (i = this.mPendingProcessChanges.size() - 1; i >= 0; i--) {
            ProcessChangeItem item = (ProcessChangeItem) this.mPendingProcessChanges.get(i);
            if (app.pid > 0 && item.pid == app.pid) {
                this.mPendingProcessChanges.remove(i);
                this.mAvailProcessChanges.add(item);
            }
        }
        this.mUiHandler.obtainMessage(32, app.pid, app.info.uid, null).sendToTarget();
        if (restarting) {
            return false;
        }
        if (!app.persistent || app.isolated) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityManagerDebugConfig.DEBUG_CLEANUP) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Removing non-persistent process during cleanup: ");
                stringBuilder.append(app);
                Slog.v(str, stringBuilder.toString());
            }
            if (!replacingPid) {
                removeProcessNameLocked(app.processName, app.uid, app);
            }
            if (this.mHeavyWeightProcess == app) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
                this.mHeavyWeightProcess = null;
            }
        } else if (!app.removed && this.mPersistentStartingProcesses.indexOf(app) < 0) {
            this.mPersistentStartingProcesses.add(app);
            restart = true;
        }
        if ((ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityManagerDebugConfig.DEBUG_CLEANUP) && this.mProcessesOnHold.contains(app)) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Clean-up removing on hold: ");
            stringBuilder.append(app);
            Slog.v(str, stringBuilder.toString());
        }
        this.mProcessesOnHold.remove(app);
        if (app == this.mHomeProcess) {
            this.mHomeProcess = null;
            this.mHwAMSEx.reportHomeProcess(this.mHomeProcess);
        }
        if (app == this.mPreviousProcess) {
            this.mPreviousProcess = null;
        }
        StringBuilder stringBuilder3 = new StringBuilder();
        stringBuilder3.append("cleanUpApplicationRecordLocked, pid: ");
        stringBuilder3.append(app.pid);
        stringBuilder3.append(", restart: ");
        stringBuilder3.append(restart);
        Flog.i(100, stringBuilder3.toString());
        if (!isAcquireAppResourceLocked(app)) {
            restart = false;
            clearAppAndAppServiceResource(app);
            for (int i2 = this.mLaunchingProviders.size() - 1; i2 >= 0; i2--) {
                ContentProviderRecord cpr2 = (ContentProviderRecord) this.mLaunchingProviders.get(i2);
                if (cpr2.launchingApp == app) {
                    String str3 = TAG;
                    StringBuilder stringBuilder4 = new StringBuilder();
                    stringBuilder4.append("the host process of ");
                    stringBuilder4.append(cpr2);
                    stringBuilder4.append(" do not restart anymore and ");
                    stringBuilder4.append(cpr2.connections.size());
                    stringBuilder4.append(" clients waiting for it, notify them to release the Binder!");
                    Slog.i(str3, stringBuilder4.toString());
                    removeDyingProviderLocked(app, cpr2, true);
                }
            }
        }
        if (!(app.userId == 0 || this.mUserController.isUserRunning(app.userId, 0))) {
            restart = false;
        }
        if (!restart || app.isolated) {
            if (app.pid > 0 && app.pid != MY_PID) {
                synchronized (this.mPidsSelfLocked) {
                    this.mPidsSelfLocked.remove(app.pid);
                    this.mHandler.removeMessages(20, app);
                }
                this.mDAProxy.notifyProcessDied(app.pid, app.uid);
                this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
                if (app.isolated) {
                    this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
                }
                app.setPid(0);
            }
            return false;
        }
        if (index < 0) {
            ProcessList.remove(app.pid);
        }
        addProcessNameLocked(app);
        app.pendingStart = false;
        startProcessLocked(app, "restart", app.processName);
        return true;
    }

    boolean checkAppInLaunchingProvidersLocked(ProcessRecord app) {
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            if (((ContentProviderRecord) this.mLaunchingProviders.get(i)).launchingApp == app) {
                return true;
            }
        }
        return false;
    }

    private void cleanupAlarmLocked(ProcessRecord process) {
        if (!isThirdParty(process)) {
            return;
        }
        if (this.mAlms == null) {
            Log.w(TAG, "Could not get instance of AlarmManagerService.");
            return;
        }
        ArrayList<String> array = new ArrayList();
        for (String pkg : process.pkgList.keySet()) {
            array.add(pkg);
        }
        if (array.size() > 0) {
            this.mAlms.cleanupAlarmLocked(array);
        }
    }

    private static boolean isThirdParty(ProcessRecord process) {
        if (process == null || process.pid == MY_PID || (process.info.flags & 1) != 0) {
            return false;
        }
        return true;
    }

    boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("cleanupAppInLaunchingProvidersLocked app: ");
        stringBuilder.append(app);
        stringBuilder.append(", alwaysBad: ");
        stringBuilder.append(alwaysBad);
        stringBuilder.append(", app.bad: ");
        stringBuilder.append(app.bad);
        Flog.i(103, stringBuilder.toString());
        boolean restart = false;
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = (ContentProviderRecord) this.mLaunchingProviders.get(i);
            if (cpr.launchingApp == app) {
                if (alwaysBad || app.bad || !cpr.hasConnectionOrHandle()) {
                    removeDyingProviderLocked(app, cpr, true);
                } else {
                    restart = true;
                }
            }
        }
        return restart;
    }

    public List<RunningServiceInfo> getServices(int maxNum, int flags) {
        List<RunningServiceInfo> runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = Binder.getCallingUid();
        boolean canInteractAcrossUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean allowed = isGetTasksAllowed("getServices", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(maxNum, flags, callingUid, allowed, canInteractAcrossUsers);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return runningServiceInfoLocked;
    }

    public PendingIntent getRunningServiceControlPanel(ComponentName name) {
        PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(name);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return runningServiceControlPanelLocked;
    }

    public ComponentName startService(IApplicationThread caller, Intent service, String resolvedType, boolean requireForeground, String callingPackage, int userId) throws TransactionTooLargeException {
        Throwable th;
        Intent intent = service;
        int i = userId;
        enforceNotIsolatedCaller("startService");
        String str;
        StringBuilder stringBuilder;
        if (intent != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        } else if (i <= 0 || this.mUserController.hasStartedUserState(i)) {
            String str2;
            boolean z;
            ComponentName res;
            if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("*** startService: ");
                stringBuilder.append(intent);
                stringBuilder.append(" type=");
                str2 = resolvedType;
                stringBuilder.append(str2);
                stringBuilder.append(" fg=");
                z = requireForeground;
                stringBuilder.append(z);
                Slog.v(str, stringBuilder.toString());
            } else {
                str2 = resolvedType;
                z = requireForeground;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId = Binder.clearCallingIdentity();
                    long origId2;
                    try {
                        String str3 = str2;
                        origId2 = origId;
                        try {
                            res = this.mServices.startServiceLocked(caller, intent, str3, callingPid, callingUid, z, callingPackage, i);
                            Binder.restoreCallingIdentity(origId2);
                        } catch (Throwable th2) {
                            th = th2;
                            Binder.restoreCallingIdentity(origId2);
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        origId2 = origId;
                        Binder.restoreCallingIdentity(origId2);
                        throw th;
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return res;
        } else {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Unable to start service ");
            stringBuilder.append(intent);
            stringBuilder.append(" for userId:");
            stringBuilder.append(i);
            stringBuilder.append(" is stopped");
            Slog.w(str, stringBuilder.toString());
            return null;
        }
    }

    ComponentName startServiceInPackage(int uid, Intent service, String resolvedType, boolean fgRequired, String callingPackage, int userId) throws TransactionTooLargeException {
        Throwable th;
        synchronized (this) {
            Intent intent;
            String str;
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                    String str2 = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("startServiceInPackage: ");
                    intent = service;
                    try {
                        stringBuilder.append(intent);
                        stringBuilder.append(" type=");
                        str = resolvedType;
                        stringBuilder.append(str);
                        Slog.v(str2, stringBuilder.toString());
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                intent = service;
                str = resolvedType;
                long origId = Binder.clearCallingIdentity();
                ComponentName res = this.mServices.startServiceLocked(null, intent, str, -1, uid, fgRequired, callingPackage, userId);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return res;
            } catch (Throwable th3) {
                th = th3;
                intent = service;
                str = resolvedType;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public int stopService(IApplicationThread caller, Intent service, String resolvedType, int userId) {
        enforceNotIsolatedCaller("stopService");
        if (service == null || !service.hasFileDescriptors()) {
            int stopServiceLocked;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    stopServiceLocked = this.mServices.stopServiceLocked(caller, service, resolvedType, userId);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return stopServiceLocked;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public IBinder peekService(Intent service, String resolvedType, String callingPackage) {
        enforceNotIsolatedCaller("peekService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage != null) {
            IBinder peekServiceLocked;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    peekServiceLocked = this.mServices.peekServiceLocked(service, resolvedType, callingPackage);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return peekServiceLocked;
        } else {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
    }

    public boolean stopServiceToken(ComponentName className, IBinder token, int startId) {
        boolean stopServiceTokenLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(className, token, startId);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return stopServiceTokenLocked;
    }

    public void setServiceForeground(ComponentName className, IBinder token, int id, Notification notification, int flags) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.setServiceForegroundLocked(className, token, id, notification, flags);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, boolean requireFull, String name, String callerPackage) {
        return this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, requireFull ? 2 : 0, name, callerPackage);
    }

    boolean isSingleton(String componentProcessName, ApplicationInfo aInfo, String className, int flags) {
        boolean result = false;
        if (UserHandle.getAppId(aInfo.uid) >= 10000) {
            if ((flags & 1073741824) != 0) {
                if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", aInfo.uid) == 0) {
                    result = true;
                } else {
                    ComponentName comp = new ComponentName(aInfo.packageName, className);
                    String msg = new StringBuilder();
                    msg.append("Permission Denial: Component ");
                    msg.append(comp.flattenToShortString());
                    msg.append(" requests FLAG_SINGLE_USER, but app does not hold ");
                    msg.append("android.permission.INTERACT_ACROSS_USERS");
                    msg = msg.toString();
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            }
        } else if ("system".equals(componentProcessName)) {
            result = true;
        } else if ("com.huawei.indexsearch".equals(componentProcessName)) {
            result = true;
        } else if ((flags & 1073741824) != 0) {
            boolean z = UserHandle.isSameApp(aInfo.uid, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE) || (aInfo.flags & 8) != 0;
            result = z;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            String str = TAG_MU;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("isSingleton(");
            stringBuilder.append(componentProcessName);
            stringBuilder.append(", ");
            stringBuilder.append(aInfo);
            stringBuilder.append(", ");
            stringBuilder.append(className);
            stringBuilder.append(", 0x");
            stringBuilder.append(Integer.toHexString(flags));
            stringBuilder.append(") = ");
            stringBuilder.append(result);
            Slog.v(str, stringBuilder.toString());
        }
        return result;
    }

    boolean isValidSingletonCall(int callingUid, int componentUid) {
        int componentAppId = UserHandle.getAppId(componentUid);
        return UserHandle.isSameApp(callingUid, componentUid) || componentAppId == 1000 || componentAppId == NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE || ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", componentUid) == 0;
    }

    public int bindService(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String callingPackage, int userId) throws TransactionTooLargeException {
        Intent intent = service;
        int i = userId;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_BINDSERVICE);
        enforceNotIsolatedCaller("bindService");
        if (intent != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        } else if (i <= 0 || this.mUserController.hasStartedUserState(i)) {
            int bindServiceLocked;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    bindServiceLocked = this.mServices.bindServiceLocked(caller, token, intent, resolvedType, connection, flags, callingPackage, i);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return bindServiceLocked;
        } else {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unable to bind service ");
            stringBuilder.append(intent);
            stringBuilder.append(" for userId:");
            stringBuilder.append(i);
            stringBuilder.append(" is stopped");
            Slog.w(str, stringBuilder.toString());
            return 0;
        }
    }

    public boolean unbindService(IServiceConnection connection) {
        boolean unbindServiceLocked;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_UNBINDSERVICE);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                unbindServiceLocked = this.mServices.unbindServiceLocked(connection);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return unbindServiceLocked;
    }

    public void publishService(IBinder token, Intent intent, IBinder service) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (token instanceof ServiceRecord) {
                        this.mServices.publishServiceLocked((ServiceRecord) token, intent, service);
                    } else {
                        throw new IllegalArgumentException("Invalid service token");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void unbindFinished(IBinder token, Intent intent, boolean doRebind) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mServices.unbindFinishedLocked((ServiceRecord) token, intent, doRebind);
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void serviceDoneExecuting(IBinder token, int type, int startId, int res) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (token instanceof ServiceRecord) {
                    this.mServices.serviceDoneExecutingLocked((ServiceRecord) token, type, startId, res);
                } else {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("serviceDoneExecuting: Invalid service token=");
                    stringBuilder.append(token);
                    Slog.e(str, stringBuilder.toString());
                    throw new IllegalArgumentException("Invalid service token");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: RegionMakerVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Exception block dominator not found, method:com.android.server.am.ActivityManagerService.bindBackupAgent(java.lang.String, int, int):boolean, dom blocks: [B:40:0x00e9, B:84:0x019b]
        	at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.searchTryCatchDominators(ProcessTryCatchRegions.java:89)
        	at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.process(ProcessTryCatchRegions.java:45)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.postProcessRegions(RegionMakerVisitor.java:63)
        	at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:58)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:27)
        	at jadx.core.dex.visitors.DepthTraversal.lambda$visit$1(DepthTraversal.java:14)
        	at java.util.ArrayList.forEach(ArrayList.java:1249)
        	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
        	at jadx.core.ProcessClass.process(ProcessClass.java:32)
        	at jadx.core.ProcessClass.lambda$processDependencies$0(ProcessClass.java:51)
        	at java.lang.Iterable.forEach(Iterable.java:75)
        	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:51)
        	at jadx.core.ProcessClass.process(ProcessClass.java:37)
        	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:292)
        	at jadx.api.JavaClass.decompile(JavaClass.java:62)
        	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
        */
    public boolean bindBackupAgent(java.lang.String r24, int r25, int r26) {
        /*
        r23 = this;
        r11 = r23;
        r12 = r24;
        r13 = r25;
        r0 = com.android.server.am.ActivityManagerDebugConfig.DEBUG_BACKUP;
        if (r0 == 0) goto L_0x0028;
    L_0x000a:
        r0 = "ActivityManager";
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "bindBackupAgent: app=";
        r1.append(r2);
        r1.append(r12);
        r2 = " mode=";
        r1.append(r2);
        r1.append(r13);
        r1 = r1.toString();
        android.util.Slog.v(r0, r1);
    L_0x0028:
        r0 = "android.permission.CONFIRM_FULL_BACKUP";
        r1 = "bindBackupAgent";
        r11.enforceCallingPermission(r0, r1);
        r14 = android.app.AppGlobals.getPackageManager();
        r0 = 0;
        r1 = r0;
        r0 = 1024; // 0x400 float:1.435E-42 double:5.06E-321;
        r15 = r26;
        r0 = r14.getApplicationInfo(r12, r0, r15);	 Catch:{ RemoteException -> 0x0040 }
        r10 = r0;
        goto L_0x0042;
    L_0x0040:
        r0 = move-exception;
        r10 = r1;
    L_0x0042:
        r9 = 0;
        if (r10 != 0) goto L_0x005c;
    L_0x0045:
        r0 = "ActivityManager";
        r1 = new java.lang.StringBuilder;
        r1.<init>();
        r2 = "Unable to bind backup agent for ";
        r1.append(r2);
        r1.append(r12);
        r1 = r1.toString();
        android.util.Slog.w(r0, r1);
        return r9;
    L_0x005c:
        monitor-enter(r23);
        boostPriorityForLockedSection();	 Catch:{ all -> 0x019f }
        r1 = 0;	 Catch:{ all -> 0x019f }
        r0 = r11.mBatteryStatsService;	 Catch:{ all -> 0x019f }
        r0 = r0.getActiveStatistics();	 Catch:{ all -> 0x019f }
        r8 = r0;	 Catch:{ all -> 0x019f }
        monitor-enter(r8);	 Catch:{ all -> 0x019f }
        r0 = r10.uid;	 Catch:{ all -> 0x0197 }
        r2 = r10.packageName;	 Catch:{ all -> 0x0197 }
        r3 = r10.name;	 Catch:{ all -> 0x0197 }
        r0 = r8.getServiceStatsLocked(r0, r2, r3);	 Catch:{ all -> 0x0197 }
        r6 = r0;
        monitor-exit(r8);	 Catch:{ all -> 0x018e }
        r0 = android.app.AppGlobals.getPackageManager();	 Catch:{ RemoteException -> 0x00ab, IllegalArgumentException -> 0x0089 }
        r1 = r10.packageName;	 Catch:{ RemoteException -> 0x00ab, IllegalArgumentException -> 0x0089 }
        r2 = r10.uid;	 Catch:{ RemoteException -> 0x00ab, IllegalArgumentException -> 0x0089 }
        r2 = android.os.UserHandle.getUserId(r2);	 Catch:{ RemoteException -> 0x00ab, IllegalArgumentException -> 0x0089 }
        r0.setPackageStoppedState(r1, r9, r2);	 Catch:{ RemoteException -> 0x00ab, IllegalArgumentException -> 0x0089 }
        goto L_0x00ac;
    L_0x0085:
        r0 = move-exception;
        r12 = r10;
        goto L_0x01a1;
    L_0x0089:
        r0 = move-exception;
        r1 = "ActivityManager";	 Catch:{ all -> 0x0085 }
        r2 = new java.lang.StringBuilder;	 Catch:{ all -> 0x0085 }
        r2.<init>();	 Catch:{ all -> 0x0085 }
        r3 = "Failed trying to unstop package ";	 Catch:{ all -> 0x0085 }
        r2.append(r3);	 Catch:{ all -> 0x0085 }
        r3 = r10.packageName;	 Catch:{ all -> 0x0085 }
        r2.append(r3);	 Catch:{ all -> 0x0085 }
        r3 = ": ";	 Catch:{ all -> 0x0085 }
        r2.append(r3);	 Catch:{ all -> 0x0085 }
        r2.append(r0);	 Catch:{ all -> 0x0085 }
        r2 = r2.toString();	 Catch:{ all -> 0x0085 }
        android.util.Slog.w(r1, r2);	 Catch:{ all -> 0x0085 }
        goto L_0x00ad;
    L_0x00ab:
        r0 = move-exception;
    L_0x00ad:
        r0 = new com.android.server.am.BackupRecord;	 Catch:{ all -> 0x019f }
        r0.<init>(r6, r10, r13);	 Catch:{ all -> 0x019f }
        r5 = r0;
        if (r13 != 0) goto L_0x00bf;
    L_0x00b5:
        r0 = new android.content.ComponentName;	 Catch:{ all -> 0x0085 }
        r1 = r10.packageName;	 Catch:{ all -> 0x0085 }
        r2 = r10.backupAgentName;	 Catch:{ all -> 0x0085 }
        r0.<init>(r1, r2);	 Catch:{ all -> 0x0085 }
        goto L_0x00c8;
    L_0x00bf:
        r0 = new android.content.ComponentName;	 Catch:{ all -> 0x019f }
        r1 = "android";	 Catch:{ all -> 0x019f }
        r2 = "FullBackupAgent";	 Catch:{ all -> 0x019f }
        r0.<init>(r1, r2);	 Catch:{ all -> 0x019f }
    L_0x00c8:
        r7 = r0;	 Catch:{ all -> 0x019f }
        r2 = r10.processName;	 Catch:{ all -> 0x019f }
        r4 = 0;	 Catch:{ all -> 0x019f }
        r0 = 0;	 Catch:{ all -> 0x019f }
        r16 = "backup";	 Catch:{ all -> 0x019f }
        r17 = 0;
        r18 = 0;
        r19 = 0;
        r1 = r11;
        r3 = r10;
        r20 = r5;
        r5 = r0;
        r21 = r6;
        r6 = r16;
        r16 = r8;
        r8 = r17;
        r17 = r9;
        r9 = r18;
        r12 = r10;
        r10 = r19;
        r0 = r1.startProcessLocked(r2, r3, r4, r5, r6, r7, r8, r9, r10);	 Catch:{ all -> 0x01a6 }
        r1 = r0;	 Catch:{ all -> 0x01a6 }
        if (r1 != 0) goto L_0x010d;	 Catch:{ all -> 0x01a6 }
    L_0x00f0:
        r0 = "ActivityManager";	 Catch:{ all -> 0x01a6 }
        r2 = new java.lang.StringBuilder;	 Catch:{ all -> 0x01a6 }
        r2.<init>();	 Catch:{ all -> 0x01a6 }
        r3 = "Unable to start backup agent process ";	 Catch:{ all -> 0x01a6 }
        r2.append(r3);	 Catch:{ all -> 0x01a6 }
        r3 = r20;	 Catch:{ all -> 0x01a6 }
        r2.append(r3);	 Catch:{ all -> 0x01a6 }
        r2 = r2.toString();	 Catch:{ all -> 0x01a6 }
        android.util.Slog.e(r0, r2);	 Catch:{ all -> 0x01a6 }
        monitor-exit(r23);	 Catch:{ all -> 0x01a6 }
        resetPriorityAfterLockedSection();
        return r17;
    L_0x010d:
        r3 = r20;
        r0 = r12.uid;	 Catch:{ all -> 0x01a6 }
        r0 = android.os.UserHandle.isApp(r0);	 Catch:{ all -> 0x01a6 }
        r2 = 1;	 Catch:{ all -> 0x01a6 }
        if (r0 == 0) goto L_0x011c;	 Catch:{ all -> 0x01a6 }
    L_0x0118:
        if (r13 != r2) goto L_0x011c;	 Catch:{ all -> 0x01a6 }
    L_0x011a:
        r1.inFullBackup = r2;	 Catch:{ all -> 0x01a6 }
    L_0x011c:
        r3.app = r1;	 Catch:{ all -> 0x01a6 }
        r0 = r11.mBackupTarget;	 Catch:{ all -> 0x01a6 }
        r4 = -1;	 Catch:{ all -> 0x01a6 }
        if (r0 == 0) goto L_0x012a;	 Catch:{ all -> 0x01a6 }
    L_0x0123:
        r0 = r11.mBackupTarget;	 Catch:{ all -> 0x01a6 }
        r0 = r0.appInfo;	 Catch:{ all -> 0x01a6 }
        r0 = r0.uid;	 Catch:{ all -> 0x01a6 }
        goto L_0x012b;	 Catch:{ all -> 0x01a6 }
    L_0x012a:
        r0 = r4;	 Catch:{ all -> 0x01a6 }
    L_0x012b:
        r5 = r0;	 Catch:{ all -> 0x01a6 }
        r0 = r1.inFullBackup;	 Catch:{ all -> 0x01a6 }
        if (r0 == 0) goto L_0x0135;	 Catch:{ all -> 0x01a6 }
    L_0x0130:
        r0 = r3.appInfo;	 Catch:{ all -> 0x01a6 }
        r0 = r0.uid;	 Catch:{ all -> 0x01a6 }
        goto L_0x0136;	 Catch:{ all -> 0x01a6 }
    L_0x0135:
        r0 = r4;	 Catch:{ all -> 0x01a6 }
    L_0x0136:
        r6 = r0;	 Catch:{ all -> 0x01a6 }
        r11.mBackupTarget = r3;	 Catch:{ all -> 0x01a6 }
        r0 = r12.packageName;	 Catch:{ all -> 0x01a6 }
        r11.mBackupAppName = r0;	 Catch:{ all -> 0x01a6 }
        r11.updateOomAdjLocked(r1, r2);	 Catch:{ all -> 0x01a6 }
        r0 = r1.thread;	 Catch:{ all -> 0x01a6 }
        if (r0 == 0) goto L_0x016a;	 Catch:{ all -> 0x01a6 }
    L_0x0144:
        r0 = com.android.server.am.ActivityManagerDebugConfig.DEBUG_BACKUP;	 Catch:{ all -> 0x01a6 }
        if (r0 == 0) goto L_0x015e;	 Catch:{ all -> 0x01a6 }
    L_0x0148:
        r0 = "ActivityManager";	 Catch:{ all -> 0x01a6 }
        r8 = new java.lang.StringBuilder;	 Catch:{ all -> 0x01a6 }
        r8.<init>();	 Catch:{ all -> 0x01a6 }
        r9 = "Agent proc already running: ";	 Catch:{ all -> 0x01a6 }
        r8.append(r9);	 Catch:{ all -> 0x01a6 }
        r8.append(r1);	 Catch:{ all -> 0x01a6 }
        r8 = r8.toString();	 Catch:{ all -> 0x01a6 }
        android.util.Slog.v(r0, r8);	 Catch:{ all -> 0x01a6 }
    L_0x015e:
        r0 = r1.thread;	 Catch:{ RemoteException -> 0x0168 }
        r8 = r11.compatibilityInfoForPackageLocked(r12);	 Catch:{ RemoteException -> 0x0168 }
        r0.scheduleCreateBackupAgent(r12, r8, r13);	 Catch:{ RemoteException -> 0x0168 }
        goto L_0x0169;
    L_0x0168:
        r0 = move-exception;
    L_0x0169:
        goto L_0x0175;
    L_0x016a:
        r0 = com.android.server.am.ActivityManagerDebugConfig.DEBUG_BACKUP;	 Catch:{ all -> 0x01a6 }
        if (r0 == 0) goto L_0x0175;	 Catch:{ all -> 0x01a6 }
    L_0x016e:
        r0 = "ActivityManager";	 Catch:{ all -> 0x01a6 }
        r8 = "Agent proc not running, waiting for attach";	 Catch:{ all -> 0x01a6 }
        android.util.Slog.v(r0, r8);	 Catch:{ all -> 0x01a6 }
    L_0x0175:
        monitor-exit(r23);	 Catch:{ all -> 0x01a6 }
        resetPriorityAfterLockedSection();
        r0 = r5;
        r1 = r6;
        r3 = com.android.server.job.JobSchedulerInternal.class;
        r3 = com.android.server.LocalServices.getService(r3);
        r3 = (com.android.server.job.JobSchedulerInternal) r3;
        if (r0 == r4) goto L_0x0188;
    L_0x0185:
        r3.removeBackingUpUid(r0);
    L_0x0188:
        if (r1 == r4) goto L_0x018d;
    L_0x018a:
        r3.addBackingUpUid(r1);
    L_0x018d:
        return r2;
    L_0x018e:
        r0 = move-exception;
        r21 = r6;
        r16 = r8;
        r12 = r10;
        r1 = r21;
        goto L_0x019b;
    L_0x0197:
        r0 = move-exception;
        r16 = r8;
        r12 = r10;
    L_0x019b:
        monitor-exit(r16);	 Catch:{ all -> 0x019d }
        throw r0;	 Catch:{ all -> 0x01a6 }
    L_0x019d:
        r0 = move-exception;	 Catch:{ all -> 0x01a6 }
        goto L_0x019b;	 Catch:{ all -> 0x01a6 }
    L_0x019f:
        r0 = move-exception;	 Catch:{ all -> 0x01a6 }
        r12 = r10;	 Catch:{ all -> 0x01a6 }
    L_0x01a1:
        monitor-exit(r23);	 Catch:{ all -> 0x01a6 }
        resetPriorityAfterLockedSection();
        throw r0;
    L_0x01a6:
        r0 = move-exception;
        goto L_0x01a1;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.bindBackupAgent(java.lang.String, int, int):boolean");
    }

    public void clearPendingBackup() {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "clearPendingBackup");
        }
        enforceCallingPermission("android.permission.BACKUP", "clearPendingBackup");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBackupTarget = null;
                this.mBackupAppName = null;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).clearAllBackingUpUids();
    }

    public void backupAgentCreated(String agentPackageName, IBinder agent) {
        String str;
        StringBuilder stringBuilder;
        long oldIdent;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("backupAgentCreated: ");
            stringBuilder.append(agentPackageName);
            stringBuilder.append(" = ");
            stringBuilder.append(agent);
            Slog.v(str, stringBuilder.toString());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (agentPackageName == null || !agentPackageName.equals(this.mBackupAppName)) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Backup agent created for ");
                    stringBuilder.append(agentPackageName);
                    stringBuilder.append(" but not requested!");
                    Slog.e(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                    return;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        oldIdent = Binder.clearCallingIdentity();
        try {
            IBackupManager.Stub.asInterface(ServiceManager.getService(HealthServiceWrapper.INSTANCE_HEALTHD)).agentConnected(agentPackageName, agent);
        } catch (RemoteException e) {
        } catch (Exception e2) {
            Slog.w(TAG, "Exception trying to deliver BackupAgent binding: ");
            e2.printStackTrace();
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(oldIdent);
        }
        Binder.restoreCallingIdentity(oldIdent);
        Binder.restoreCallingIdentity(oldIdent);
    }

    /* JADX WARNING: Missing block: B:40:0x00a5, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:41:0x00a8, code:
            if (r0 == -1) goto L_0x00b5;
     */
    /* JADX WARNING: Missing block: B:42:0x00aa, code:
            ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).removeBackingUpUid(r0);
     */
    /* JADX WARNING: Missing block: B:43:0x00b5, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void unbindBackupAgent(ApplicationInfo appInfo) {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("unbindBackupAgent: ");
            stringBuilder.append(appInfo);
            Slog.v(str, stringBuilder.toString());
        }
        if (appInfo == null) {
            Slog.w(TAG, "unbind backup agent for null app");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mBackupAppName == null) {
                    Slog.w(TAG, "Unbinding backup agent with no active backup");
                    try {
                        this.mBackupTarget = null;
                        this.mBackupAppName = null;
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                } else if (this.mBackupAppName.equals(appInfo.packageName)) {
                    ProcessRecord proc = this.mBackupTarget.app;
                    updateOomAdjLocked(proc, true);
                    proc.inFullBackup = false;
                    int oldBackupUid = this.mBackupTarget != null ? this.mBackupTarget.appInfo.uid : -1;
                    if (proc.thread != null) {
                        proc.thread.scheduleDestroyBackupAgent(appInfo, compatibilityInfoForPackageLocked(appInfo));
                    }
                    this.mBackupTarget = null;
                    this.mBackupAppName = null;
                    int oldBackupUid2 = oldBackupUid;
                } else {
                    String str2 = TAG;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Unbind of ");
                    stringBuilder2.append(appInfo);
                    stringBuilder2.append(" but is not the current backup target");
                    Slog.e(str2, stringBuilder2.toString());
                    this.mBackupTarget = null;
                    this.mBackupAppName = null;
                    resetPriorityAfterLockedSection();
                }
            } catch (Exception e) {
                Slog.e(TAG, "Exception when unbinding backup agent:");
                e.printStackTrace();
            } catch (Throwable th) {
                this.mBackupTarget = null;
                this.mBackupAppName = null;
            }
        }
    }

    private boolean isInstantApp(ProcessRecord record, String callerPackage, int uid) {
        if (UserHandle.getAppId(uid) < 10000) {
            return false;
        }
        if (record != null) {
            return record.info.isInstantApp();
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        if (callerPackage == null) {
            try {
                String[] packageNames = pm.getPackagesForUid(uid);
                if (packageNames == null || packageNames.length == 0) {
                    throw new IllegalArgumentException("Unable to determine caller package name");
                }
                callerPackage = packageNames[0];
            } catch (RemoteException e) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Error looking up if ");
                stringBuilder.append(callerPackage);
                stringBuilder.append(" is an instant app.");
                Slog.e(str, stringBuilder.toString(), e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(uid, callerPackage);
        return pm.isInstantApp(callerPackage, UserHandle.getUserId(uid));
    }

    boolean isPendingBroadcastProcessLocked(int pid) {
        return this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || isThirdPartyAppPendingBroadcastProcessLocked(pid) || isKeyAppPendingBroadcastProcessLocked(pid);
    }

    void skipPendingBroadcastLocked(int pid) {
        Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipPendingBroadcastLocked(pid);
        }
    }

    boolean sendPendingBroadcastsLocked(ProcessRecord app) {
        boolean didSomething = false;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            didSomething |= queue.sendPendingBroadcastsLocked(app);
        }
        return didSomething;
    }

    /* JADX WARNING: Missing block: B:73:0x015d, code:
            resetPriorityAfterLockedSection();
            r14 = r4;
            r11 = r21;
            r20 = r1;
            r0 = null;
     */
    /* JADX WARNING: Missing block: B:74:0x0166, code:
            if (r2 == null) goto L_0x01a6;
     */
    /* JADX WARNING: Missing block: B:75:0x0168, code:
            r1 = r8.mContext.getContentResolver();
            r3 = 0;
            r4 = r2.size();
     */
    /* JADX WARNING: Missing block: B:76:0x0173, code:
            if (r3 >= r4) goto L_0x01a6;
     */
    /* JADX WARNING: Missing block: B:77:0x0175, code:
            r5 = (android.content.Intent) r2.get(r3);
     */
    /* JADX WARNING: Missing block: B:78:0x017b, code:
            if (r20 == false) goto L_0x018b;
     */
    /* JADX WARNING: Missing block: B:80:0x0185, code:
            if ((r5.getFlags() & com.android.server.pm.DumpState.DUMP_COMPILER_STATS) != 0) goto L_0x018b;
     */
    /* JADX WARNING: Missing block: B:81:0x0187, code:
            r33 = r2;
     */
    /* JADX WARNING: Missing block: B:82:0x018b, code:
            r33 = r2;
     */
    /* JADX WARNING: Missing block: B:83:0x0194, code:
            if (r15.match(r1, r5, true, TAG) < 0) goto L_0x01a1;
     */
    /* JADX WARNING: Missing block: B:84:0x0196, code:
            if (r0 != null) goto L_0x019e;
     */
    /* JADX WARNING: Missing block: B:85:0x0198, code:
            r0 = new java.util.ArrayList();
     */
    /* JADX WARNING: Missing block: B:86:0x019e, code:
            r0.add(r5);
     */
    /* JADX WARNING: Missing block: B:87:0x01a1, code:
            r3 = r3 + 1;
            r2 = r33;
     */
    /* JADX WARNING: Missing block: B:88:0x01a6, code:
            r33 = r2;
            r6 = r0;
     */
    /* JADX WARNING: Missing block: B:89:0x01a9, code:
            if (r6 == null) goto L_0x01b4;
     */
    /* JADX WARNING: Missing block: B:90:0x01ab, code:
            r5 = (android.content.Intent) r6.get(0);
     */
    /* JADX WARNING: Missing block: B:91:0x01b4, code:
            r5 = null;
     */
    /* JADX WARNING: Missing block: B:93:0x01b7, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_BROADCAST == false) goto L_0x01d7;
     */
    /* JADX WARNING: Missing block: B:94:0x01b9, code:
            r0 = TAG;
            r1 = new java.lang.StringBuilder();
            r1.append("Register receiver ");
            r1.append(r15);
            r1.append(": ");
            r1.append(r5);
            android.util.Slog.v(r0, r1.toString());
     */
    /* JADX WARNING: Missing block: B:95:0x01d7, code:
            if (r10 != null) goto L_0x01da;
     */
    /* JADX WARNING: Missing block: B:96:0x01d9, code:
            return r5;
     */
    /* JADX WARNING: Missing block: B:97:0x01da, code:
            monitor-enter(r58);
     */
    /* JADX WARNING: Missing block: B:99:?, code:
            boostPriorityForLockedSection();
     */
    /* JADX WARNING: Missing block: B:100:0x01de, code:
            if (r13 == null) goto L_0x0204;
     */
    /* JADX WARNING: Missing block: B:103:0x01e2, code:
            if (r13.thread == null) goto L_0x01f0;
     */
    /* JADX WARNING: Missing block: B:105:0x01ee, code:
            if (r13.thread.asBinder() == r59.asBinder()) goto L_0x0204;
     */
    /* JADX WARNING: Missing block: B:106:0x01f0, code:
            monitor-exit(r58);
     */
    /* JADX WARNING: Missing block: B:107:0x01f1, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:108:0x01f5, code:
            return null;
     */
    /* JADX WARNING: Missing block: B:109:0x01f6, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:110:0x01f7, code:
            r22 = r5;
            r9 = r7;
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
            r21 = r33;
            r12 = r6;
     */
    /* JADX WARNING: Missing block: B:112:?, code:
            r0 = (com.android.server.am.ReceiverList) r8.mRegisteredReceivers.get(r61.asBinder());
     */
    /* JADX WARNING: Missing block: B:113:0x0210, code:
            if (r0 != null) goto L_0x02bb;
     */
    /* JADX WARNING: Missing block: B:116:0x0214, code:
            r1 = r1;
            r21 = r33;
            r22 = r5;
            r34 = r6;
            r9 = r7;
     */
    /* JADX WARNING: Missing block: B:118:?, code:
            r1 = new com.android.server.am.ReceiverList(r8, r13, r11, r14, r7, r10);
     */
    /* JADX WARNING: Missing block: B:119:0x022b, code:
            if (IS_DEBUG_VERSION == false) goto L_0x0243;
     */
    /* JADX WARNING: Missing block: B:121:0x0235, code:
            if (getBgBroadcastQueue().getMtmBRManager() == null) goto L_0x0243;
     */
    /* JADX WARNING: Missing block: B:122:0x0237, code:
            getBgBroadcastQueue().getMtmBRManager().iawareCountDuplicatedReceiver(true, r1, r15);
     */
    /* JADX WARNING: Missing block: B:124:0x0245, code:
            if (r1.app == null) goto L_0x0286;
     */
    /* JADX WARNING: Missing block: B:125:0x0247, code:
            r0 = r1.app.receivers.size();
     */
    /* JADX WARNING: Missing block: B:126:0x0251, code:
            if (r0 >= 1000) goto L_0x025d;
     */
    /* JADX WARNING: Missing block: B:127:0x0253, code:
            r1.app.receivers.add(r1);
            r2 = 0;
     */
    /* JADX WARNING: Missing block: B:128:0x025d, code:
            r3 = new java.lang.StringBuilder();
            r3.append("Too many receivers, total of ");
            r3.append(r0);
            r3.append(", registered for pid: ");
            r3.append(r1.pid);
            r3.append(", callerPackage: ");
            r3.append(r12);
     */
    /* JADX WARNING: Missing block: B:129:0x0285, code:
            throw new java.lang.IllegalStateException(r3.toString());
     */
    /* JADX WARNING: Missing block: B:131:?, code:
            r2 = 0;
            r61.asBinder().linkToDeath(r1, 0);
     */
    /* JADX WARNING: Missing block: B:134:?, code:
            r1.linkedToDeath = true;
     */
    /* JADX WARNING: Missing block: B:135:0x0292, code:
            r8.mRegisteredReceivers.put(r61.asBinder(), r1);
            r0 = r1;
     */
    /* JADX WARNING: Missing block: B:138:0x029f, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:139:0x02a2, code:
            return r22;
     */
    /* JADX WARNING: Missing block: B:140:0x02a3, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:141:0x02a4, code:
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
     */
    /* JADX WARNING: Missing block: B:142:0x02a9, code:
            r12 = r34;
     */
    /* JADX WARNING: Missing block: B:143:0x02ad, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:144:0x02ae, code:
            r22 = r5;
            r9 = r7;
            r21 = r33;
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
            r12 = r6;
     */
    /* JADX WARNING: Missing block: B:145:0x02bb, code:
            r22 = r5;
            r34 = r6;
            r9 = r7;
            r21 = r33;
            r2 = 0;
     */
    /* JADX WARNING: Missing block: B:148:0x02c5, code:
            if (r0.uid != r14) goto L_0x040f;
     */
    /* JADX WARNING: Missing block: B:150:0x02c9, code:
            if (r0.pid != r11) goto L_0x03df;
     */
    /* JADX WARNING: Missing block: B:152:0x02cd, code:
            if (r0.userId != r9) goto L_0x03af;
     */
    /* JADX WARNING: Missing block: B:154:0x02d1, code:
            r3 = r11;
            r11 = r11;
            r4 = r12;
            r5 = r13;
            r6 = r2;
            r7 = r15;
     */
    /* JADX WARNING: Missing block: B:156:?, code:
            r11 = new com.android.server.am.BroadcastFilter(r15, r0, r4, r63, r14, r9, r20, r19);
     */
    /* JADX WARNING: Missing block: B:157:0x02ea, code:
            if (r0.containsFilter(r7) == 0) goto L_0x0317;
     */
    /* JADX WARNING: Missing block: B:159:?, code:
            r11 = TAG;
            r12 = new java.lang.StringBuilder();
            r12.append("Receiver with filter ");
            r12.append(r7);
            r12.append(" already registered for pid ");
            r12.append(r0.pid);
            r12.append(", callerPackage is ");
            r12.append(r4);
            android.util.Slog.w(r11, r12.toString());
     */
    /* JADX WARNING: Missing block: B:160:0x0315, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:163:0x031f, code:
            if (getBgBroadcastQueue().getMtmBRManager() == 0) goto L_0x032c;
     */
    /* JADX WARNING: Missing block: B:165:?, code:
            getBgBroadcastQueue().getMtmBRManager().iawareCheckCombinedConditon(r7);
     */
    /* JADX WARNING: Missing block: B:167:?, code:
            r0.add(r11);
     */
    /* JADX WARNING: Missing block: B:168:0x0333, code:
            if (r11.debugCheck() != 0) goto L_0x033c;
     */
    /* JADX WARNING: Missing block: B:170:?, code:
            android.util.Slog.w(TAG, "==> For Dynamic broadcast");
     */
    /* JADX WARNING: Missing block: B:172:?, code:
            r8.mReceiverResolver.addFilter(r11);
     */
    /* JADX WARNING: Missing block: B:173:0x0341, code:
            if (r34 == null) goto L_0x03a1;
     */
    /* JADX WARNING: Missing block: B:174:0x0343, code:
            r11 = new java.util.ArrayList();
            r11.add(r11);
     */
    /* JADX WARNING: Missing block: B:175:0x034b, code:
            r12 = r34;
     */
    /* JADX WARNING: Missing block: B:177:?, code:
            r13 = r12.size();
     */
    /* JADX WARNING: Missing block: B:178:0x0352, code:
            if (r6 >= r13) goto L_0x039e;
     */
    /* JADX WARNING: Missing block: B:179:0x0354, code:
            r14 = (android.content.Intent) r12.get(r6);
            r15 = broadcastQueueForIntent(r14);
            r57 = r0;
            r15.enqueueParallelBroadcastLocked(new com.android.server.am.BroadcastRecord(r15, r14, null, null, -1, -1, false, null, null, -1, null, r11, null, 0, null, null, false, true, true, -1));
            r15.scheduleBroadcastsLocked();
            r6 = r6 + 1;
            r0 = r57;
     */
    /* JADX WARNING: Missing block: B:180:0x039e, code:
            r57 = r0;
     */
    /* JADX WARNING: Missing block: B:181:0x03a1, code:
            r57 = r0;
            r12 = r34;
     */
    /* JADX WARNING: Missing block: B:182:0x03a5, code:
            monitor-exit(r58);
     */
    /* JADX WARNING: Missing block: B:183:0x03a6, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:184:0x03a9, code:
            return r22;
     */
    /* JADX WARNING: Missing block: B:185:0x03aa, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:186:0x03ab, code:
            r12 = r34;
     */
    /* JADX WARNING: Missing block: B:187:0x03af, code:
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
            r12 = r34;
     */
    /* JADX WARNING: Missing block: B:189:?, code:
            r6 = new java.lang.StringBuilder();
            r6.append("Receiver requested to register for user ");
            r6.append(r9);
            r6.append(" was previously registered for user ");
            r6.append(r0.userId);
            r6.append(" callerPackage is ");
            r6.append(r4);
     */
    /* JADX WARNING: Missing block: B:190:0x03de, code:
            throw new java.lang.IllegalArgumentException(r6.toString());
     */
    /* JADX WARNING: Missing block: B:191:0x03df, code:
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
            r12 = r34;
            r6 = new java.lang.StringBuilder();
            r6.append("Receiver requested to register for pid ");
            r6.append(r3);
            r6.append(" was previously registered for pid ");
            r6.append(r0.pid);
            r6.append(" callerPackage is ");
            r6.append(r4);
     */
    /* JADX WARNING: Missing block: B:192:0x040e, code:
            throw new java.lang.IllegalArgumentException(r6.toString());
     */
    /* JADX WARNING: Missing block: B:193:0x040f, code:
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
            r12 = r34;
            r6 = new java.lang.StringBuilder();
            r6.append("Receiver requested to register for uid ");
            r6.append(r2);
            r6.append(" was previously registered for uid ");
            r6.append(r0.uid);
            r6.append(" callerPackage is ");
            r6.append(r4);
     */
    /* JADX WARNING: Missing block: B:194:0x043e, code:
            throw new java.lang.IllegalArgumentException(r6.toString());
     */
    /* JADX WARNING: Missing block: B:195:0x043f, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:196:0x0440, code:
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
            r12 = r34;
     */
    /* JADX WARNING: Missing block: B:197:0x0448, code:
            r0 = th;
     */
    /* JADX WARNING: Missing block: B:198:0x0449, code:
            r22 = r5;
            r9 = r7;
            r3 = r11;
            r4 = r12;
            r5 = r13;
            r2 = r14;
            r7 = r15;
            r21 = r33;
            r12 = r6;
     */
    /* JADX WARNING: Missing block: B:199:0x0454, code:
            monitor-exit(r58);
     */
    /* JADX WARNING: Missing block: B:200:0x0455, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:201:0x0458, code:
            throw r0;
     */
    /* JADX WARNING: Missing block: B:202:0x0459, code:
            r0 = th;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public Intent registerReceiver(IApplicationThread caller, String callerPackage, IIntentReceiver receiver, IntentFilter filter, String permission, int userId, int flags) {
        Throwable th;
        IntentFilter intentFilter;
        String callerPackage2;
        ProcessRecord callerApp;
        boolean instantApp;
        int userId2;
        int i;
        IApplicationThread iApplicationThread = caller;
        String callerPackage3 = callerPackage;
        IIntentReceiver iIntentReceiver = receiver;
        IntentFilter intentFilter2 = filter;
        enforceNotIsolatedCaller("registerReceiver");
        ArrayList<Intent> stickyIntents = null;
        ProcessRecord callerApp2 = null;
        int i2 = 0;
        boolean visibleToInstantApps = (flags & 1) != 0;
        synchronized (this) {
            try {
                int callingUid;
                int i3;
                boostPriorityForLockedSection();
                if (iApplicationThread != null) {
                    try {
                        callerApp2 = getRecordForAppLocked(caller);
                        StringBuilder stringBuilder;
                        if (callerApp2 == null) {
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Unable to find app for caller ");
                            stringBuilder.append(iApplicationThread);
                            stringBuilder.append(" (pid=");
                            stringBuilder.append(Binder.getCallingPid());
                            stringBuilder.append(") when registering receiver ");
                            stringBuilder.append(iIntentReceiver);
                            throw new SecurityException(stringBuilder.toString());
                        } else if (callerApp2.info.uid == 1000 || callerApp2.pkgList.containsKey(callerPackage3) || PackageManagerService.PLATFORM_PACKAGE_NAME.equals(callerPackage3)) {
                            callingUid = callerApp2.info.uid;
                            i3 = callerApp2.pid;
                        } else {
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Given caller package ");
                            stringBuilder.append(callerPackage3);
                            stringBuilder.append(" is not running in process ");
                            stringBuilder.append(callerApp2);
                            throw new SecurityException(stringBuilder.toString());
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        intentFilter = intentFilter2;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th3) {
                                th = th3;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                callerPackage3 = null;
                callingUid = Binder.getCallingUid();
                i3 = Binder.getCallingPid();
                callerPackage2 = callerPackage3;
                callerApp = callerApp2;
                int callingPid = i3;
                try {
                    instantApp = isInstantApp(callerApp, callerPackage2, callingUid);
                    userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId, true, 2, "registerReceiver", callerPackage2);
                } catch (Throwable th4) {
                    th = th4;
                    intentFilter = intentFilter2;
                    i = userId;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
                try {
                    Iterator<String> actions = filter.actionsIterator();
                    if (actions == null) {
                        try {
                            ArrayList<String> noAction = new ArrayList(1);
                            noAction.add(null);
                            actions = noAction.iterator();
                        } catch (Throwable th5) {
                            th = th5;
                        }
                    }
                    int[] userIds = new int[]{-1, UserHandle.getUserId(callingUid)};
                    while (actions.hasNext()) {
                        try {
                            Iterator<String> actions2;
                            String action = (String) actions.next();
                            int length = userIds.length;
                            ArrayList<Intent> stickyIntents2 = stickyIntents;
                            int stickyIntents3 = i2;
                            while (stickyIntents3 < length) {
                                try {
                                    String action2;
                                    int i4;
                                    ArrayMap<String, ArrayList<Intent>> stickies = (ArrayMap) this.mStickyBroadcasts.get(userIds[stickyIntents3]);
                                    if (stickies != null) {
                                        action2 = action;
                                        i4 = length;
                                        ArrayList<Intent> intents = (ArrayList) stickies.get(action2);
                                        if (intents != null) {
                                            if (stickyIntents2 == null) {
                                                actions2 = actions;
                                                actions = new ArrayList();
                                            } else {
                                                actions2 = actions;
                                                actions = stickyIntents2;
                                            }
                                            try {
                                                actions.addAll(intents);
                                                stickyIntents2 = actions;
                                            } catch (Throwable th6) {
                                                th = th6;
                                                Iterator<String> it = actions;
                                            }
                                        } else {
                                            actions2 = actions;
                                        }
                                    } else {
                                        i4 = length;
                                        actions2 = actions;
                                        action2 = action;
                                    }
                                    stickyIntents3++;
                                    action = action2;
                                    length = i4;
                                    actions = actions2;
                                } catch (Throwable th7) {
                                    th = th7;
                                    i = userId2;
                                    callerPackage3 = callerPackage2;
                                    callerApp2 = callerApp;
                                    userId2 = intentFilter2;
                                    stickyIntents = stickyIntents2;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            actions2 = actions;
                            stickyIntents = stickyIntents2;
                            i2 = 0;
                        } catch (Throwable th8) {
                            th = th8;
                            ArrayList<Intent> arrayList = stickyIntents;
                            i = userId2;
                            userId2 = intentFilter2;
                            callerPackage3 = callerPackage2;
                            callerApp2 = callerApp;
                        }
                    }
                } catch (Throwable th9) {
                    th = th9;
                    i = userId2;
                    userId2 = intentFilter2;
                    callerPackage3 = callerPackage2;
                    callerApp2 = callerApp;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th10) {
                th = th10;
                intentFilter = intentFilter2;
                i = userId;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        instantApp = callerPackage2;
        callerApp2 = callerApp;
        intentFilter = intentFilter2;
        while (true) {
            break;
        }
        resetPriorityAfterLockedSection();
        throw th;
    }

    public void unregisterReceiver(IIntentReceiver receiver) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_UNREGISTERRECEIVER);
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Unregister receiver: ");
            stringBuilder.append(receiver);
            Slog.v(str, stringBuilder.toString());
        }
        long origId = Binder.clearCallingIdentity();
        boolean doTrim = false;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ReceiverList rl = (ReceiverList) this.mRegisteredReceivers.get(receiver.asBinder());
                if (rl != null) {
                    BroadcastRecord r = rl.curBroadcast;
                    if (r != null && r == r.queue.getMatchingOrderedReceiver(r)) {
                        if (r.queue.finishReceiverLocked(r, r.resultCode, r.resultData, r.resultExtras, r.resultAbort, false)) {
                            doTrim = true;
                            r.queue.processNextBroadcast(false);
                        }
                    }
                    if (rl.app != null) {
                        rl.app.receivers.remove(rl);
                    }
                    removeReceiverLocked(rl);
                    if (rl.linkedToDeath) {
                        rl.linkedToDeath = false;
                        rl.receiver.asBinder().unlinkToDeath(rl, 0);
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (doTrim) {
                trimApplications();
                Binder.restoreCallingIdentity(origId);
                return;
            }
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
        }
    }

    void removeReceiverLocked(ReceiverList rl) {
        this.mRegisteredReceivers.remove(rl.receiver.asBinder());
        for (int i = rl.size() - 1; i >= 0; i--) {
            this.mReceiverResolver.removeFilter((BroadcastFilter) rl.get(i));
        }
        if (IS_DEBUG_VERSION && getBgBroadcastQueue().getMtmBRManager() != null) {
            getBgBroadcastQueue().getMtmBRManager().iawareCountDuplicatedReceiver(false, rl, null);
        }
    }

    private final void sendPackageBroadcastLocked(int cmd, String[] packages, int userId) {
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) this.mLruProcesses.get(i);
            if (r.thread != null && (userId == -1 || r.userId == userId)) {
                try {
                    r.thread.dispatchPackageBroadcast(cmd, packages);
                } catch (RemoteException e) {
                }
            }
        }
    }

    private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType, int callingUid, int[] users) {
        List<ResolveInfo> receivers;
        int pmFlags;
        int i;
        Intent intent2 = intent;
        int[] iArr = users;
        int pmFlags2 = 268436480;
        List<ResolveInfo> receivers2 = null;
        boolean scannedFirstReceivers = false;
        String str;
        try {
            int length = iArr.length;
            receivers = receivers2;
            HashSet<ComponentName> singleUserReceivers = null;
            int singleUserReceivers2 = 0;
            while (singleUserReceivers2 < length) {
                try {
                    int user = iArr[singleUserReceivers2];
                    if (callingUid == 2000) {
                        try {
                            if (this.mUserController.hasUserRestriction("no_debugging_features", user) && !isPermittedShellBroadcast(intent)) {
                                str = resolvedType;
                                pmFlags = pmFlags2;
                                singleUserReceivers2++;
                                pmFlags2 = pmFlags;
                                iArr = users;
                            }
                        } catch (RemoteException e) {
                            str = resolvedType;
                            filterBadAppsReceiverList(intent2, receivers);
                            return receivers;
                        }
                    }
                    try {
                        try {
                            List<ResolveInfo> newReceivers = AppGlobals.getPackageManager().queryIntentReceivers(intent2, resolvedType, pmFlags2, user).getList();
                            if (!(user == 0 || newReceivers == null)) {
                                int i2 = 0;
                                while (i2 < newReceivers.size()) {
                                    try {
                                        if ((((ResolveInfo) newReceivers.get(i2)).activityInfo.flags & 536870912) != 0) {
                                            newReceivers.remove(i2);
                                            i2--;
                                        }
                                        i2++;
                                    } catch (RemoteException e2) {
                                        filterBadAppsReceiverList(intent2, receivers);
                                        return receivers;
                                    }
                                }
                            }
                            if (newReceivers != null && newReceivers.size() == 0) {
                                newReceivers = null;
                            }
                            if (receivers == null) {
                                pmFlags = pmFlags2;
                                receivers = newReceivers;
                            } else if (newReceivers != null) {
                                HashSet<ComponentName> singleUserReceivers3;
                                if (scannedFirstReceivers) {
                                    pmFlags = pmFlags2;
                                    singleUserReceivers3 = singleUserReceivers;
                                } else {
                                    scannedFirstReceivers = true;
                                    singleUserReceivers3 = singleUserReceivers;
                                    singleUserReceivers = null;
                                    while (singleUserReceivers < receivers.size()) {
                                        ResolveInfo ri = (ResolveInfo) receivers.get(singleUserReceivers);
                                        if ((ri.activityInfo.flags & 1073741824) != 0) {
                                            pmFlags = pmFlags2;
                                            try {
                                                ComponentName cn = new ComponentName(ri.activityInfo.packageName, ri.activityInfo.name);
                                                if (singleUserReceivers3 == null) {
                                                    singleUserReceivers3 = new HashSet();
                                                }
                                                singleUserReceivers3.add(cn);
                                            } catch (RemoteException e3) {
                                            }
                                        } else {
                                            pmFlags = pmFlags2;
                                        }
                                        singleUserReceivers++;
                                        pmFlags2 = pmFlags;
                                        iArr = users;
                                    }
                                    pmFlags = pmFlags2;
                                }
                                for (int i3 = 0; i3 < newReceivers.size(); i3++) {
                                    ResolveInfo pmFlags3 = (ResolveInfo) newReceivers.get(i3);
                                    if ((pmFlags3.activityInfo.flags & 1073741824) != 0) {
                                        ComponentName cn2 = new ComponentName(pmFlags3.activityInfo.packageName, pmFlags3.activityInfo.name);
                                        if (singleUserReceivers3 == null) {
                                            singleUserReceivers3 = new HashSet();
                                        }
                                        if (!singleUserReceivers3.contains(cn2)) {
                                            singleUserReceivers3.add(cn2);
                                            receivers.add(pmFlags3);
                                        }
                                    } else {
                                        receivers.add(pmFlags3);
                                    }
                                }
                                singleUserReceivers = singleUserReceivers3;
                            } else {
                                pmFlags = pmFlags2;
                            }
                            singleUserReceivers2++;
                            pmFlags2 = pmFlags;
                            iArr = users;
                        } catch (RemoteException e4) {
                        }
                    } catch (RemoteException e5) {
                        str = resolvedType;
                    }
                } catch (RemoteException e6) {
                    str = resolvedType;
                    i = callingUid;
                }
            }
            str = resolvedType;
            i = callingUid;
            pmFlags = pmFlags2;
        } catch (RemoteException e7) {
            str = resolvedType;
            i = callingUid;
            pmFlags = 268436480;
            receivers = receivers2;
        }
        if (!(receivers == null || receivers.isEmpty())) {
            filterBadAppsReceiverList(intent2, receivers);
        }
        return receivers;
        pmFlags = pmFlags2;
        filterBadAppsReceiverList(intent2, receivers);
        return receivers;
    }

    private boolean isPermittedShellBroadcast(Intent intent) {
        return INTENT_REMOTE_BUGREPORT_FINISHED.equals(intent.getAction());
    }

    private void checkBroadcastFromSystem(Intent intent, ProcessRecord callerApp, String callerPackage, int callingUid, boolean isProtectedBroadcast, List receivers) {
        if ((intent.getFlags() & DumpState.DUMP_CHANGES) == 0) {
            String action = intent.getAction();
            if (!isProtectedBroadcast && !"android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) && !"com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MEDIA_BUTTON".equals(action) && !"android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) && !"com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MASTER_CLEAR".equals(action) && !"android.intent.action.FACTORY_RESET".equals(action) && !"android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) && !"android.appwidget.action.APPWIDGET_UPDATE".equals(action) && !"android.location.HIGH_POWER_REQUEST_CHANGE".equals(action) && !"com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) && !"android.text.style.SUGGESTION_PICKED".equals(action) && !"android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) && !"android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
                if (!(intent.getPackage() == null && intent.getComponent() == null)) {
                    if (receivers != null && receivers.size() != 0) {
                        boolean allProtected = true;
                        for (int i = receivers.size() - 1; i >= 0; i--) {
                            ResolveInfo target = receivers.get(i);
                            if (target instanceof ResolveInfo) {
                                ResolveInfo ri = target;
                                if (ri.activityInfo.exported && ri.activityInfo.permission == null) {
                                    allProtected = false;
                                    break;
                                }
                            } else if (((BroadcastFilter) target).requiredPermission == null) {
                                allProtected = false;
                                break;
                            }
                        }
                        if (allProtected) {
                            return;
                        }
                    }
                    return;
                }
                String str;
                StringBuilder stringBuilder;
                if (callerApp != null) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Sending non-protected broadcast ");
                    stringBuilder.append(action);
                    stringBuilder.append(" from system ");
                    stringBuilder.append(callerApp.toShortString());
                    stringBuilder.append(" pkg ");
                    stringBuilder.append(callerPackage);
                    Log.w(str, stringBuilder.toString());
                } else {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Sending non-protected broadcast ");
                    stringBuilder.append(action);
                    stringBuilder.append(" from system uid ");
                    stringBuilder.append(UserHandle.formatUid(callingUid));
                    stringBuilder.append(" pkg ");
                    stringBuilder.append(callerPackage);
                    Log.w(str, stringBuilder.toString());
                }
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:278:0x0640  */
    /* JADX WARNING: Removed duplicated region for block: B:282:0x0680  */
    /* JADX WARNING: Removed duplicated region for block: B:281:0x0655  */
    /* JADX WARNING: Removed duplicated region for block: B:356:0x088e  */
    /* JADX WARNING: Removed duplicated region for block: B:405:0x09af  */
    /* JADX WARNING: Removed duplicated region for block: B:404:0x09ad  */
    /* JADX WARNING: Removed duplicated region for block: B:409:0x09ec  */
    /* JADX WARNING: Removed duplicated region for block: B:408:0x09ea  */
    /* JADX WARNING: Removed duplicated region for block: B:413:0x09f9  */
    /* JADX WARNING: Removed duplicated region for block: B:412:0x09f7  */
    /* JADX WARNING: Removed duplicated region for block: B:417:0x0a09  */
    /* JADX WARNING: Removed duplicated region for block: B:416:0x0a07  */
    /* JADX WARNING: Removed duplicated region for block: B:421:0x0a23  */
    /* JADX WARNING: Removed duplicated region for block: B:420:0x0a1e  */
    /* JADX WARNING: Removed duplicated region for block: B:496:0x0bb2  */
    /* JADX WARNING: Removed duplicated region for block: B:446:0x0ad4  */
    /* JADX WARNING: Removed duplicated region for block: B:498:0x0bb9  */
    /* JADX WARNING: Removed duplicated region for block: B:503:0x0bdd  */
    /* JADX WARNING: Removed duplicated region for block: B:502:0x0bcd  */
    /* JADX WARNING: Removed duplicated region for block: B:361:0x08d0  */
    /* JADX WARNING: Removed duplicated region for block: B:321:0x07b4  */
    /* JADX WARNING: Removed duplicated region for block: B:364:0x08dd  */
    /* JADX WARNING: Removed duplicated region for block: B:363:0x08d5  */
    /* JADX WARNING: Removed duplicated region for block: B:368:0x08f8  */
    /* JADX WARNING: Removed duplicated region for block: B:367:0x08ef  */
    /* JADX WARNING: Removed duplicated region for block: B:371:0x0902  */
    /* JADX WARNING: Removed duplicated region for block: B:390:0x0940  */
    /* JADX WARNING: Removed duplicated region for block: B:404:0x09ad  */
    /* JADX WARNING: Removed duplicated region for block: B:405:0x09af  */
    /* JADX WARNING: Removed duplicated region for block: B:408:0x09ea  */
    /* JADX WARNING: Removed duplicated region for block: B:409:0x09ec  */
    /* JADX WARNING: Removed duplicated region for block: B:412:0x09f7  */
    /* JADX WARNING: Removed duplicated region for block: B:413:0x09f9  */
    /* JADX WARNING: Removed duplicated region for block: B:416:0x0a07  */
    /* JADX WARNING: Removed duplicated region for block: B:417:0x0a09  */
    /* JADX WARNING: Removed duplicated region for block: B:420:0x0a1e  */
    /* JADX WARNING: Removed duplicated region for block: B:421:0x0a23  */
    /* JADX WARNING: Removed duplicated region for block: B:424:0x0a28 A:{SKIP} */
    /* JADX WARNING: Removed duplicated region for block: B:446:0x0ad4  */
    /* JADX WARNING: Removed duplicated region for block: B:496:0x0bb2  */
    /* JADX WARNING: Removed duplicated region for block: B:498:0x0bb9  */
    /* JADX WARNING: Removed duplicated region for block: B:502:0x0bcd  */
    /* JADX WARNING: Removed duplicated region for block: B:503:0x0bdd  */
    /* JADX WARNING: Removed duplicated region for block: B:505:0x0be2  */
    /* JADX WARNING: Removed duplicated region for block: B:543:0x0d32  */
    /* JADX WARNING: Missing block: B:180:0x044f, code:
            r48 = r7;
            r9 = r10;
     */
    /* JADX WARNING: Missing block: B:227:0x053b, code:
            if (r7.equals("android.intent.action.PACKAGE_REMOVED") != false) goto L_0x0577;
     */
    /* JADX WARNING: Missing block: B:305:0x0737, code:
            r9 = r73;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int userId) {
        String str;
        StringBuilder stringBuilder;
        int i;
        int i2;
        String str2;
        StringBuilder stringBuilder2;
        String action;
        String action2;
        BroadcastOptions brOptions;
        ProcessRecord processRecord = callerApp;
        String str3 = callerPackage;
        String str4 = resolvedType;
        String[] strArr = requiredPermissions;
        Bundle bundle = bOptions;
        boolean z = ordered;
        int i3 = callingPid;
        int i4 = callingUid;
        Intent intent2 = new Intent(intent);
        boolean callerInstantApp = isInstantApp(processRecord, str3, i4);
        if (callerInstantApp) {
            intent2.setFlags(intent2.getFlags() & -2097153);
        }
        intent2.addFlags(16);
        if (!this.mProcessesReady && (intent2.getFlags() & DumpState.DUMP_HANDLE) == 0) {
            intent2.addFlags(1073741824);
        }
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append(sticky ? "Broadcast sticky: " : "Broadcast: ");
            stringBuilder.append(intent2);
            stringBuilder.append(" ordered=");
            stringBuilder.append(z);
            stringBuilder.append(" userid=");
            stringBuilder.append(userId);
            Slog.v(str, stringBuilder.toString());
        } else {
            i = userId;
        }
        if (!(resultTo == null || z)) {
            str = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("Broadcast ");
            stringBuilder.append(intent2);
            stringBuilder.append(" not ordered but result callback requested!");
            Slog.w(str, stringBuilder.toString());
        }
        int i5 = 1073741824;
        Intent intent3 = intent2;
        int i6 = i3;
        i3 = this.mUserController.handleIncomingUser(i3, i4, userId, true, 0, "broadcast", str3);
        if (i3 == -1 || this.mUserController.isUserOrItsParentRunning(i3)) {
            i2 = callingUid;
        } else {
            i2 = callingUid;
            if ((i2 != 1000 || (intent3.getFlags() & DumpState.DUMP_HANDLE) == 0) && !"android.intent.action.ACTION_SHUTDOWN".equals(intent3.getAction())) {
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Skipping broadcast of ");
                stringBuilder2.append(intent3);
                stringBuilder2.append(": user ");
                stringBuilder2.append(i3);
                stringBuilder2.append(" and its parent (if any) are stopped");
                Slog.w(str2, stringBuilder2.toString());
                return -2;
            }
        }
        String action3 = intent3.getAction();
        if (bundle != null) {
            BroadcastOptions brOptions2;
            BroadcastOptions brOptions3 = new BroadcastOptions(bundle);
            if (brOptions3.getTemporaryAppWhitelistDuration() > 0) {
                brOptions2 = brOptions3;
                action = action3;
                action2 = i2;
                if (checkComponentPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", Binder.getCallingPid(), Binder.getCallingUid(), -1, true) != 0) {
                    str = new StringBuilder();
                    str.append("Permission Denial: ");
                    str.append(intent3.getAction());
                    str.append(" broadcast from ");
                    str.append(str3);
                    str.append(" (pid=");
                    str.append(i6);
                    str.append(", uid=");
                    str.append(action2);
                    str.append(") requires ");
                    str.append("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST");
                    str = str.toString();
                    Slog.w(TAG, str);
                    throw new SecurityException(str);
                }
            }
            brOptions2 = brOptions3;
            action = action3;
            action2 = i2;
            if (brOptions2.isDontSendToRestrictedApps() && !isUidActiveLocked(action) && isBackgroundRestrictedNoCheck(action, str3)) {
                str = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Not sending broadcast ");
                stringBuilder.append(action);
                stringBuilder.append(" - app ");
                stringBuilder.append(str3);
                stringBuilder.append(" has background restrictions");
                Slog.i(str, stringBuilder.toString());
                return -96;
            }
            brOptions = brOptions2;
        } else {
            action = action3;
            action2 = i2;
            brOptions = null;
        }
        Intent intent4;
        int userId2;
        try {
            boolean isCallerSystem;
            String action4;
            int i7;
            boolean z2;
            String action5;
            int i8;
            int i9;
            String ssp;
            boolean killProcess;
            boolean z3;
            int appId;
            String[] packageNames;
            StringBuilder stringBuilder3;
            String str5;
            Intent intent5;
            ProcessRecord processRecord2;
            BroadcastQueue processQueue;
            StringBuilder stringBuilder4;
            boolean z4;
            int NR;
            int[] iArr;
            boolean replacePending;
            ProcessRecord userId3;
            List<BroadcastFilter> registeredReceivers;
            List receivers;
            List receivers2;
            Intent intent6;
            List<BroadcastFilter> list;
            int i10;
            boolean isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action);
            int appId2 = UserHandle.getAppId(callingUid);
            if (!(appId2 == 0 || appId2 == UsbTerminalTypes.TERMINAL_BIDIR_SKRPHONE || appId2 == 1068)) {
                switch (appId2) {
                    case 1000:
                    case NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE /*1001*/:
                    case 1002:
                        break;
                    default:
                        if (processRecord != null && processRecord.persistent) {
                            isCallerSystem = true;
                            break;
                        }
                        isCallerSystem = false;
                        break;
                        break;
                }
            }
            isCallerSystem = true;
            boolean isCallerSystem2 = isCallerSystem;
            if (!isCallerSystem2) {
                if (isProtectedBroadcast) {
                    if (!(checkPermission("android.permission.INSTALL_LOCATION_PROVIDER", i6, action2) == 0 && "android.intent.action.AIRPLANE_MODE".equals(intent3.getAction()))) {
                        str2 = new StringBuilder();
                        str2.append("Permission Denial: not allowed to send broadcast ");
                        str2.append(action);
                        str2.append(" from pid=");
                        str2.append(i6);
                        str2.append(", uid=");
                        str2.append(action2);
                        str2 = str2.toString();
                        Slog.w(TAG, str2);
                        throw new SecurityException(str2);
                    }
                } else if ("android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action)) {
                    StringBuilder stringBuilder5;
                    if (str3 == null) {
                        stringBuilder5 = new StringBuilder();
                        stringBuilder5.append("Permission Denial: not allowed to send broadcast ");
                        stringBuilder5.append(action);
                        stringBuilder5.append(" from unknown caller.");
                        str2 = stringBuilder5.toString();
                        Slog.w(TAG, str2);
                        throw new SecurityException(str2);
                    } else if (intent3.getComponent() == null) {
                        intent3.setPackage(str3);
                    } else if (!intent3.getComponent().getPackageName().equals(str3)) {
                        stringBuilder5 = new StringBuilder();
                        stringBuilder5.append("Permission Denial: not allowed to send broadcast ");
                        stringBuilder5.append(action);
                        stringBuilder5.append(" to ");
                        stringBuilder5.append(intent3.getComponent().getPackageName());
                        stringBuilder5.append(" from ");
                        stringBuilder5.append(str3);
                        str2 = stringBuilder5.toString();
                        Slog.w(TAG, str2);
                        throw new SecurityException(str2);
                    }
                }
            }
            BroadcastRecord broadcastRecord = null;
            if (action != null) {
                if (getBackgroundLaunchBroadcasts().contains(action)) {
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        str2 = TAG;
                        stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Broadcast action ");
                        stringBuilder2.append(action);
                        stringBuilder2.append(" forcing include-background");
                        Slog.i(str2, stringBuilder2.toString());
                    }
                    intent3.addFlags(DumpState.DUMP_SERVICE_PERMISSIONS);
                }
                int i11 = 2;
                switch (action.hashCode()) {
                    case -2098526293:
                        if (action.equals("android.hardware.action.NEW_VIDEO")) {
                            appId2 = 15;
                            break;
                        }
                    case -2074848843:
                        if (action.equals("android.intent.action.CLEAR_DNS_CACHE")) {
                            appId2 = 12;
                            break;
                        }
                    case -1749672628:
                        if (action.equals("android.intent.action.UID_REMOVED")) {
                            appId2 = false;
                            break;
                        }
                    case -1403934493:
                        if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                            appId2 = 3;
                            break;
                        }
                    case -1338021860:
                        if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                            appId2 = 4;
                            break;
                        }
                    case -1001645458:
                        if (action.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                            appId2 = 5;
                            break;
                        }
                    case -810471698:
                        if (action.equals("android.intent.action.PACKAGE_REPLACED")) {
                            appId2 = 7;
                            break;
                        }
                    case 172491798:
                        if (action.equals("android.intent.action.PACKAGE_CHANGED")) {
                            appId2 = 2;
                            break;
                        }
                    case 183904262:
                        if (action.equals("android.intent.action.PROXY_CHANGE")) {
                            appId2 = 13;
                            break;
                        }
                    case 267468725:
                        if (action.equals("android.intent.action.PACKAGE_DATA_CLEARED")) {
                            appId2 = 9;
                            break;
                        }
                    case 502473491:
                        if (action.equals("android.intent.action.TIMEZONE_CHANGED")) {
                            appId2 = 10;
                            break;
                        }
                    case 505380757:
                        if (action.equals("android.intent.action.TIME_SET")) {
                            appId2 = 11;
                            break;
                        }
                    case 525384130:
                        if (action.equals("android.intent.action.PACKAGE_REMOVED")) {
                            appId2 = 1;
                            break;
                        }
                    case 555021408:
                        if (action.equals("com.android.launcher.action.INSTALL_SHORTCUT")) {
                            appId2 = 17;
                            break;
                        }
                    case 920338478:
                        if (action.equals("android.hardware.action.NEW_PICTURE")) {
                            appId2 = 14;
                            break;
                        }
                    case 1290767157:
                        if (action.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                            appId2 = 6;
                            break;
                        }
                    case 1544582882:
                        if (action.equals("android.intent.action.PACKAGE_ADDED")) {
                            appId2 = 8;
                            break;
                        }
                    case 1862858502:
                        if (action.equals("android.security.action.TRUST_STORE_CHANGED")) {
                            appId2 = 16;
                            break;
                        }
                    default:
                        appId2 = -1;
                        break;
                }
                Uri data;
                Uri data2;
                String ssp2;
                switch (appId2) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        action4 = action;
                        int i12 = 3;
                        i7 = 1;
                        z2 = false;
                        if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", i6, action2, -1, true) == 0) {
                            if (!isLimitedPackageBroadcast(intent3)) {
                                action = action4;
                                switch (action.hashCode()) {
                                    case -1749672628:
                                        if (action.equals("android.intent.action.UID_REMOVED")) {
                                            i12 = z2;
                                            break;
                                        }
                                    case -1403934493:
                                        if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                            i12 = 1;
                                            break;
                                        }
                                    case -1338021860:
                                        if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                            i12 = 2;
                                            break;
                                        }
                                    case -1001645458:
                                        if (action.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                            i12 = 5;
                                            break;
                                        }
                                    case 172491798:
                                        if (action.equals("android.intent.action.PACKAGE_CHANGED")) {
                                            i12 = 4;
                                            break;
                                        }
                                    case 525384130:
                                        break;
                                    case 1290767157:
                                        if (action.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                            i12 = 6;
                                            break;
                                        }
                                    default:
                                        i12 = -1;
                                        break;
                                }
                                int userId4;
                                switch (i12) {
                                    case 0:
                                        action5 = action;
                                        i7 = -1;
                                        appId2 = getUidFromIntent(intent3);
                                        if (appId2 >= 0) {
                                            this.mBatteryStatsService.removeUid(appId2);
                                            this.mAppOpsService.uidRemoved(appId2);
                                            break;
                                        }
                                        break;
                                    case 1:
                                        action5 = action;
                                        userId4 = i3;
                                        i7 = -1;
                                        String[] list2 = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                                        if (list2 != null && list2.length > 0) {
                                            i8 = 0;
                                            while (true) {
                                                i9 = i8;
                                                int userId5;
                                                if (i9 >= list2.length) {
                                                    userId5 = userId4;
                                                    this.mRecentTasks.cleanupLocked(-1);
                                                    i3 = userId5;
                                                    sendPackageBroadcastLocked(1, list2, i3);
                                                    break;
                                                }
                                                int i13 = i9;
                                                userId5 = userId4;
                                                forceStopPackageLocked(list2[i9], -1, false, true, true, false, false, userId4, "storage unmount");
                                                i8 = i13 + 1;
                                                userId4 = userId5;
                                            }
                                        } else {
                                            i3 = userId4;
                                            break;
                                        }
                                        break;
                                    case 2:
                                        action5 = action;
                                        userId4 = i3;
                                        i7 = -1;
                                        this.mRecentTasks.cleanupLocked(-1);
                                        break;
                                    case 3:
                                    case 4:
                                        data = intent3.getData();
                                        if (data != null) {
                                            str = data.getSchemeSpecificPart();
                                            ssp = str;
                                            if (str != null) {
                                                boolean removed = "android.intent.action.PACKAGE_REMOVED".equals(action);
                                                killProcess = intent3.getBooleanExtra("android.intent.extra.DONT_KILL_APP", z2) ^ 1;
                                                z3 = (!removed || intent3.getBooleanExtra("android.intent.extra.REPLACING", z2)) ? z2 : true;
                                                boolean fullUninstall = z3;
                                                if (removed) {
                                                    String ssp3;
                                                    int userId6;
                                                    String[] strArr2;
                                                    Uri uri;
                                                    if (killProcess) {
                                                        if (!this.mHwAMSEx.isApplyPersistAppPatch(ssp, intent3.getIntExtra("android.intent.extra.UID", -1), i3, false, false, null, action)) {
                                                            int i14 = -1;
                                                            z2 = killProcess;
                                                            ssp3 = ssp;
                                                            action5 = action;
                                                            userId6 = i3;
                                                            forceStopPackageLocked(ssp, UserHandle.getAppId(intent3.getIntExtra("android.intent.extra.UID", -1)), false, true, true, false, fullUninstall, userId6, removed ? "pkg removed" : "pkg changed");
                                                            if (z2) {
                                                                i11 = 0;
                                                            }
                                                            i8 = i11;
                                                            strArr2 = new String[1];
                                                            action2 = ssp3;
                                                            strArr2[0] = action2;
                                                            i9 = userId6;
                                                            sendPackageBroadcastLocked(i8, strArr2, i9);
                                                            if (!fullUninstall) {
                                                                this.mAppOpsService.packageRemoved(intent3.getIntExtra("android.intent.extra.UID", -1), action2);
                                                                removeUriPermissionsForPackageLocked(action2, i9, true, false);
                                                                this.mRecentTasks.removeTasksByPackageName(action2, i9);
                                                                this.mServices.forceStopPackageLocked(action2, i9);
                                                                this.mAppWarnings.onPackageUninstalled(action2);
                                                                this.mCompatModePackages.handlePackageUninstalledLocked(action2);
                                                                this.mBatteryStatsService.notePackageUninstalled(action2);
                                                            }
                                                            uri = data;
                                                            str2 = action2;
                                                            userId4 = i9;
                                                        }
                                                    }
                                                    z2 = killProcess;
                                                    ssp3 = ssp;
                                                    action5 = action;
                                                    userId6 = i3;
                                                    if (z2) {
                                                    }
                                                    i8 = i11;
                                                    strArr2 = new String[1];
                                                    action2 = ssp3;
                                                    strArr2[0] = action2;
                                                    i9 = userId6;
                                                    sendPackageBroadcastLocked(i8, strArr2, i9);
                                                    if (!fullUninstall) {
                                                    }
                                                    uri = data;
                                                    str2 = action2;
                                                    userId4 = i9;
                                                } else {
                                                    int userId7;
                                                    z2 = killProcess;
                                                    action2 = ssp;
                                                    action5 = action;
                                                    i9 = i3;
                                                    if (z2) {
                                                        appId = UserHandle.getAppId(intent3.getIntExtra("android.intent.extra.UID", -1));
                                                        stringBuilder2 = new StringBuilder();
                                                        stringBuilder2.append("change ");
                                                        stringBuilder2.append(action2);
                                                        userId7 = i9;
                                                        str2 = action2;
                                                        killPackageProcessesLocked(action2, appId, i9, -10000, false, true, true, false, stringBuilder2.toString());
                                                    } else {
                                                        userId7 = i9;
                                                        str2 = action2;
                                                    }
                                                    userId4 = userId7;
                                                    cleanupDisabledPackageComponentsLocked(str2, userId4, z2, intent3.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
                                                }
                                                i3 = userId4;
                                            }
                                        }
                                        action5 = action;
                                        i7 = -1;
                                        break;
                                    case 5:
                                    case 6:
                                        z3 = "android.intent.action.PACKAGES_SUSPENDED".equals(intent3.getAction());
                                        packageNames = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                                        appId = intent3.getIntExtra("android.intent.extra.user_handle", -10000);
                                        synchronized (this) {
                                            try {
                                                boostPriorityForLockedSection();
                                                this.mRecentTasks.onPackagesSuspendedChanged(packageNames, z3, appId);
                                            } finally {
                                                while (true) {
                                                    resetPriorityAfterLockedSection();
                                                    break;
                                                }
                                            }
                                        }
                                        action5 = action;
                                        i7 = -1;
                                        break;
                                    default:
                                        action5 = action;
                                        i7 = -1;
                                        break;
                                }
                            }
                            Flog.d(102, "Android Wear-skip limited ACTION_PACKAGE_REMOVED");
                            break;
                        }
                        str2 = new StringBuilder();
                        str2.append("Permission Denial: ");
                        str2.append(intent3.getAction());
                        str2.append(" broadcast from ");
                        str2.append(str3);
                        str2.append(" (pid=");
                        str2.append(i6);
                        str2.append(", uid=");
                        str2.append(callingUid);
                        str2.append(") requires ");
                        str2.append("android.permission.BROADCAST_PACKAGE_REMOVED");
                        str2 = str2.toString();
                        Slog.w(TAG, str2);
                        throw new SecurityException(str2);
                    case 7:
                        action4 = action;
                        data2 = intent3.getData();
                        if (data2 != null) {
                            str2 = data2.getSchemeSpecificPart();
                            ssp2 = str2;
                            if (str2 != null) {
                                ApplicationInfo aInfo = null;
                                try {
                                    aInfo = AppGlobals.getPackageManager().getApplicationInfo(ssp2, 1024, i3);
                                } catch (RemoteException e) {
                                }
                                if (aInfo != null) {
                                    this.mStackSupervisor.updateActivityApplicationInfoLocked(aInfo);
                                    this.mServices.updateServiceApplicationInfoLocked(aInfo);
                                    sendPackageBroadcastLocked(3, new String[]{ssp2}, i3);
                                    break;
                                }
                                str2 = TAG;
                                stringBuilder3 = new StringBuilder();
                                stringBuilder3.append("Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp=");
                                stringBuilder3.append(ssp2);
                                stringBuilder3.append(" data=");
                                stringBuilder3.append(data2);
                                Slog.w(str2, stringBuilder3.toString());
                                return 0;
                            }
                        }
                        break;
                    case 8:
                        if (!isLimitedPackageBroadcast(intent3)) {
                            data2 = intent3.getData();
                            if (data2 != null) {
                                str2 = data2.getSchemeSpecificPart();
                                ssp2 = str2;
                                if (str2 != null) {
                                    this.mCompatModePackages.handlePackageAddedLocked(ssp2, intent3.getBooleanExtra("android.intent.extra.REPLACING", false));
                                    try {
                                        long j;
                                        ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(ssp2, 1024, 0);
                                        BatteryStatsService batteryStatsService = this.mBatteryStatsService;
                                        if (ai != null) {
                                            action4 = action;
                                            j = (long) ai.versionCode;
                                        } else {
                                            action4 = action;
                                            j = 0;
                                        }
                                        try {
                                            batteryStatsService.notePackageInstalled(ssp2, j);
                                            break;
                                        } catch (RemoteException e2) {
                                            break;
                                        }
                                    } catch (RemoteException e3) {
                                        action4 = action;
                                        break;
                                    }
                                }
                            }
                            action5 = action;
                            i9 = action2;
                            i7 = -1;
                            break;
                        }
                        Flog.d(102, "Android Wear-skip limited ACTION_PACKAGE_ADDED");
                        break;
                    case 9:
                        data = intent3.getData();
                        if (data != null) {
                            str = data.getSchemeSpecificPart();
                            ssp2 = str;
                            if (str != null) {
                                this.mCompatModePackages.handlePackageDataClearedLocked(ssp2);
                                this.mAppWarnings.onPackageDataCleared(ssp2);
                                break;
                            }
                        }
                        break;
                    case 10:
                        this.mHandler.sendEmptyMessage(13);
                        break;
                    case 11:
                        appId = intent3.getIntExtra("android.intent.extra.TIME_PREF_24_HOUR_FORMAT", -1);
                        if (appId != -1) {
                            this.mHandler.sendMessage(this.mHandler.obtainMessage(41, appId, 0));
                        }
                        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
                        synchronized (stats) {
                            stats.noteCurrentTimeChangedLocked();
                        }
                    case 12:
                        this.mHandler.sendEmptyMessage(28);
                        break;
                    case 13:
                        this.mHandler.sendMessage(this.mHandler.obtainMessage(29, (ProxyInfo) intent3.getParcelableExtra("android.intent.extra.PROXY_INFO")));
                        break;
                    case 14:
                    case 15:
                        intent3.addFlags(1073741824);
                        break;
                    case 16:
                        this.mHandler.sendEmptyMessage(HANDLE_TRUST_STORAGE_UPDATE_MSG);
                        break;
                    case 17:
                        str2 = TAG;
                        stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Broadcast ");
                        stringBuilder2.append(action);
                        stringBuilder2.append(" no longer supported. It will not be delivered.");
                        Log.w(str2, stringBuilder2.toString());
                        return 0;
                    default:
                        action5 = action;
                        i9 = action2;
                        i7 = -1;
                        break;
                }
            }
            i9 = action2;
            i7 = -1;
            action2 = action;
            String[] strArr3;
            if (sticky) {
                i4 = i6;
                strArr3 = requiredPermissions;
            } else if (checkPermission("android.permission.BROADCAST_STICKY", i6, i9) == 0) {
                i4 = i6;
                strArr3 = requiredPermissions;
                if (strArr3 != null && strArr3.length > 0) {
                    str2 = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Can't broadcast sticky intent ");
                    stringBuilder.append(intent3);
                    stringBuilder.append(" and enforce permissions ");
                    stringBuilder.append(Arrays.toString(requiredPermissions));
                    Slog.w(str2, stringBuilder.toString());
                    return i7;
                } else if (intent3.getComponent() == null) {
                    ArrayMap<String, ArrayList<Intent>> stickies;
                    ArrayList<Intent> list3;
                    if (i3 != i7) {
                        stickies = (ArrayMap) this.mStickyBroadcasts.get(i7);
                        if (stickies != null) {
                            list3 = (ArrayList) stickies.get(intent3.getAction());
                            if (list3 != null) {
                                appId = list3.size();
                                for (i = 0; i < appId; i++) {
                                    if (intent3.filterEquals((Intent) list3.get(i))) {
                                        StringBuilder stringBuilder6 = new StringBuilder();
                                        stringBuilder6.append("Sticky broadcast ");
                                        stringBuilder6.append(intent3);
                                        stringBuilder6.append(" for user ");
                                        stringBuilder6.append(i3);
                                        stringBuilder6.append(" conflicts with existing global broadcast");
                                        throw new IllegalArgumentException(stringBuilder6.toString());
                                    }
                                }
                            }
                        }
                    }
                    stickies = (ArrayMap) this.mStickyBroadcasts.get(i3);
                    if (stickies == null) {
                        stickies = new ArrayMap();
                        this.mStickyBroadcasts.put(i3, stickies);
                    }
                    list3 = (ArrayList) stickies.get(intent3.getAction());
                    if (list3 == null) {
                        list3 = new ArrayList();
                        stickies.put(intent3.getAction(), list3);
                    }
                    appId = list3.size();
                    i = 0;
                    while (i < appId) {
                        if (intent3.filterEquals((Intent) list3.get(i))) {
                            list3.set(i, new Intent(intent3));
                            if (i >= appId) {
                                list3.add(new Intent(intent3));
                            }
                        } else {
                            i++;
                        }
                    }
                    if (i >= appId) {
                    }
                } else {
                    throw new SecurityException("Sticky broadcasts can't target a specific component");
                }
            } else {
                i4 = i6;
                strArr3 = requiredPermissions;
                str2 = new StringBuilder();
                str2.append("Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=");
                str2.append(i4);
                str2.append(", uid=");
                str2.append(i9);
                str2.append(" requires ");
                str2.append("android.permission.BROADCAST_STICKY");
                str2 = str2.toString();
                Slog.w(TAG, str2);
                throw new SecurityException(str2);
            }
            int[] users = i3 != i7 ? this.mUserController.getStartedUserArray() : new int[]{i3};
            List receivers3 = null;
            List<BroadcastFilter> registeredReceivers2 = null;
            int i15;
            if ((intent3.getFlags() & 1073741824) != 0) {
                i15 = 1073741824;
                str5 = resolvedType;
                receivers3 = collectReceiverComponents(intent3, str5, i9, users);
            } else {
                i15 = 1073741824;
                str5 = resolvedType;
            }
            if (intent3.getComponent() == null) {
                if (i3 == i7 && i9 == IHwShutdownThread.SHUTDOWN_ANIMATION_WAIT_TIME) {
                    List<BroadcastFilter> registeredReceivers3 = null;
                    for (appId = 0; appId < users.length; appId++) {
                        if (!this.mUserController.hasUserRestriction("no_debugging_features", users[appId])) {
                            List<BroadcastFilter> registeredReceiversForUser = this.mReceiverResolver.queryIntent(intent3, str5, false, users[appId]);
                            if (registeredReceivers3 == null) {
                                registeredReceivers3 = registeredReceiversForUser;
                            } else if (registeredReceiversForUser != null) {
                                registeredReceivers3.addAll(registeredReceiversForUser);
                            }
                        }
                    }
                    registeredReceivers2 = registeredReceivers3;
                } else {
                    BroadcastQueue queue;
                    String str6;
                    boolean z5;
                    killProcess = false;
                    registeredReceivers2 = this.mReceiverResolver.queryIntent(intent3, str5, false, i3);
                    if ((registeredReceivers2 != null || registeredReceivers2.size() <= 0) && ((receivers3 == null || receivers3.size() <= 0) && resultTo == null)) {
                        intent5 = intent3;
                        z3 = true;
                        action2 = killProcess;
                        processRecord2 = callerApp;
                        processQueue = null;
                    } else {
                        processRecord = callerApp;
                        BroadcastQueue processQueue2 = getProcessBroadcastQueue(processRecord, str3, intent3);
                        if (processQueue2.getMtmBRManager() != null) {
                            z3 = true;
                            intent5 = intent3;
                            action2 = killProcess;
                            processRecord2 = processRecord;
                            processQueue2.getMtmBRManager().iawareFilterBroadcast(intent3, processRecord, callerPackage, i4, i9, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, receivers3, registeredReceivers2, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, i3);
                        } else {
                            z3 = true;
                            intent5 = intent3;
                            action2 = killProcess;
                            processRecord2 = processRecord;
                        }
                        processQueue = processQueue2;
                    }
                    z2 = (intent5.getFlags() & 536870912) != 0 ? z3 : action2;
                    stringBuilder4 = new StringBuilder();
                    stringBuilder4.append("sendBroadcast caller:");
                    stringBuilder4.append(processRecord2);
                    stringBuilder4.append(",action:");
                    stringBuilder4.append(intent5.getAction());
                    stringBuilder4.append(",replace:");
                    stringBuilder4.append(z2);
                    stringBuilder4.append(",ordered:");
                    z4 = ordered;
                    stringBuilder4.append(z4);
                    stringBuilder4.append(",hasComponent:");
                    stringBuilder4.append(intent5.getComponent() != null ? z3 : action2);
                    stringBuilder4.append(",manifestNum:");
                    stringBuilder4.append(receivers3 == null ? action2 : receivers3.size());
                    stringBuilder4.append(",registeredNum:");
                    stringBuilder4.append(registeredReceivers2 == null ? action2 : registeredReceivers2.size());
                    Flog.i(104, stringBuilder4.toString());
                    str4 = callerPackage;
                    checkBroadcastRecordSpeed(i9, str4, processRecord2);
                    NR = registeredReceivers2 != null ? registeredReceivers2.size() : action2;
                    if (!z4 || NR <= 0) {
                        i4 = z3;
                        intent4 = intent5;
                        iArr = users;
                        userId2 = i3;
                        ssp = str4;
                        replacePending = z2;
                        userId3 = processRecord2;
                        registeredReceivers = registeredReceivers2;
                    } else {
                        boolean z6;
                        List<BroadcastFilter> registeredReceivers4;
                        if (isCallerSystem2) {
                            z6 = z3;
                            registeredReceivers4 = registeredReceivers2;
                            intent4 = intent5;
                            userId2 = i3;
                            userId3 = processRecord2;
                            checkBroadcastFromSystem(intent5, processRecord2, str4, i9, isProtectedBroadcast, registeredReceivers4);
                        } else {
                            z6 = z3;
                            registeredReceivers4 = registeredReceivers2;
                            intent4 = intent5;
                            iArr = users;
                            userId2 = i3;
                            userId3 = processRecord2;
                        }
                        queue = processQueue != null ? processQueue : getProcessBroadcastQueue(userId3, str4, intent4);
                        i4 = z6;
                        ssp = str4;
                        replacePending = z2;
                        BroadcastRecord broadcastRecord2 = new BroadcastRecord(queue, intent4, userId3, ssp, callingPid, i9, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, registeredReceivers4, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId2);
                        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                            String str7 = TAG;
                            stringBuilder3 = new StringBuilder();
                            stringBuilder3.append("Enqueueing parallel broadcast ");
                            stringBuilder3.append(broadcastRecord2);
                            Slog.v(str7, stringBuilder3.toString());
                        }
                        checkAndPrintTestModeLog(registeredReceivers4, intent4.getAction(), "broadcastIntentLocked", "接收短信");
                        registeredReceivers2 = (!replacePending || queue.replaceParallelBroadcastLocked(broadcastRecord2) == null) ? null : i4;
                        if (registeredReceivers2 == null) {
                            queue.enqueueParallelBroadcastLocked(broadcastRecord2);
                            queue.scheduleBroadcastsLocked();
                        }
                        NR = 0;
                        registeredReceivers = null;
                    }
                    i7 = NR;
                    i8 = 0;
                    if (receivers3 != null) {
                        int ir;
                        packageNames = null;
                        if ("android.intent.action.PACKAGE_ADDED".equals(intent4.getAction()) || "android.intent.action.PACKAGE_RESTARTED".equals(intent4.getAction()) || "android.intent.action.PACKAGE_DATA_CLEARED".equals(intent4.getAction())) {
                            Uri data3 = intent4.getData();
                            if (data3 != null) {
                                str5 = data3.getSchemeSpecificPart();
                                if (str5 != null) {
                                    String[] strArr4 = new String[i4];
                                    strArr4[0] = str5;
                                    packageNames = strArr4;
                                }
                            }
                        } else if ("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(intent4.getAction())) {
                            packageNames = intent4.getStringArrayExtra("android.intent.extra.changed_package_list");
                        }
                        if (packageNames != null && packageNames.length > 0) {
                            appId = packageNames.length;
                            i = 0;
                            while (i < appId) {
                                action3 = packageNames[i];
                                if (action3 != null) {
                                    i5 = receivers3.size();
                                    i6 = 0;
                                    while (i6 < i5) {
                                        ir = i8;
                                        if (((ResolveInfo) receivers3.get(i6)).activityInfo.packageName.equals(action3) != 0) {
                                            receivers3.remove(i6);
                                            i6--;
                                            i5--;
                                        }
                                        i6++;
                                        i8 = ir;
                                    }
                                }
                                i++;
                                i8 = i8;
                            }
                        }
                        ir = i8;
                        if (shouldDropCtsBroadcast(intent4) != 0) {
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST != 0) {
                                Slog.d(TAG, "shold Drop Broadcast for Cts test.");
                            }
                            receivers3 = null;
                        }
                        appId = 0;
                        ResolveInfo curt = null;
                        i6 = ir;
                        i = receivers3 != null ? receivers3.size() : 0;
                        i8 = 0;
                        while (appId < i && i6 < i7) {
                            if (curt == null) {
                                curt = (ResolveInfo) receivers3.get(appId);
                            }
                            if (i8 == 0) {
                                i8 = (BroadcastFilter) registeredReceivers.get(i6);
                            }
                            if (i8.getPriority() >= curt.priority) {
                                receivers3.add(appId, i8);
                                i6++;
                                i8 = 0;
                                appId++;
                                i++;
                            } else {
                                appId++;
                                curt = null;
                            }
                        }
                        intent3 = i6;
                        receivers = receivers3;
                    } else {
                        receivers = receivers3;
                        intent3 = 0;
                    }
                    while (intent3 < i7) {
                        if (receivers == null) {
                            receivers = new ArrayList();
                        }
                        receivers.add(registeredReceivers.get(intent3));
                        intent3++;
                    }
                    if (isCallerSystem2) {
                        str6 = ssp;
                        z5 = true;
                        checkBroadcastFromSystem(intent4, userId3, ssp, i9, isProtectedBroadcast, receivers);
                    } else {
                        str6 = ssp;
                        z5 = true;
                    }
                    if ((receivers != null || receivers.size() <= 0) && resultTo == null) {
                        receivers2 = receivers;
                        intent6 = intent3;
                        list = registeredReceivers;
                        i10 = i7;
                        if (intent4.getComponent() != null && intent4.getPackage() == null && (intent4.getFlags() & i15) == 0) {
                            addBroadcastStatLocked(intent4.getAction(), callerPackage, 0, 0, 0);
                        }
                    } else {
                        queue = processQueue != null ? processQueue : getProcessBroadcastQueue(userId3, str6, intent4);
                        receivers2 = receivers;
                        intent6 = intent3;
                        BroadcastRecord r = new BroadcastRecord(queue, intent4, userId3, str6, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, receivers2, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId2);
                        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                            str2 = TAG;
                            StringBuilder stringBuilder7 = new StringBuilder();
                            stringBuilder7.append("Enqueueing ordered broadcast ");
                            stringBuilder7.append(r);
                            stringBuilder7.append(": prev had ");
                            stringBuilder7.append(queue.mOrderedBroadcasts.size());
                            Slog.v(str2, stringBuilder7.toString());
                        }
                        if (queue.mOrderedBroadcasts.size() > BroadcastQueue.MAX_BROADCAST_HISTORY / 10) {
                            BroadcastRecord br = (BroadcastRecord) queue.mOrderedBroadcasts.get(0);
                            i = Math.max(br.nextReceiver - 1, 0);
                            if (i >= (br.receivers != null ? br.receivers.size() : 0)) {
                                z5 = false;
                            }
                            boolean isLegalIdx = z5;
                            StringBuilder stringBuilder8 = new StringBuilder();
                            stringBuilder8.append("ordered broadcast[");
                            stringBuilder8.append(queue.mQueueName);
                            stringBuilder8.append("] head:");
                            stringBuilder8.append(br);
                            stringBuilder8.append(" prev had ");
                            stringBuilder8.append(queue.mOrderedBroadcasts.size());
                            stringBuilder8.append(" currentReceiver:");
                            stringBuilder8.append(isLegalIdx ? br.receivers.get(i) : BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                            Flog.i(104, stringBuilder8.toString());
                        }
                        checkAndPrintTestModeLog(receivers2, intent4.getAction(), "broadcastIntentLocked", "接收短信");
                        if (replacePending) {
                            broadcastRecord = queue.replaceOrderedBroadcastLocked(r);
                        }
                        BroadcastRecord oldRecord = broadcastRecord;
                        if (oldRecord == null) {
                            queue.enqueueOrderedBroadcastLocked(r);
                            queue.scheduleBroadcastsLocked();
                        } else if (oldRecord.resultTo != null) {
                            try {
                                broadcastQueueForIntent(oldRecord.intent).performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo, oldRecord.intent, 0, null, null, false, false, oldRecord.userId);
                            } catch (RemoteException e4) {
                                str5 = TAG;
                                StringBuilder stringBuilder9 = new StringBuilder();
                                stringBuilder9.append("Failure [");
                                stringBuilder9.append(queue.mQueueName);
                                stringBuilder9.append("] sending broadcast result of ");
                                stringBuilder9.append(intent4);
                                Slog.w(str5, stringBuilder9.toString(), e4);
                            }
                        }
                        List list4 = receivers2;
                    }
                    return 0;
                }
            }
            killProcess = false;
            if (registeredReceivers2 != null) {
            }
            intent5 = intent3;
            z3 = true;
            action2 = killProcess;
            processRecord2 = callerApp;
            processQueue = null;
            if ((intent5.getFlags() & 536870912) != 0) {
            }
            z2 = (intent5.getFlags() & 536870912) != 0 ? z3 : action2;
            stringBuilder4 = new StringBuilder();
            stringBuilder4.append("sendBroadcast caller:");
            stringBuilder4.append(processRecord2);
            stringBuilder4.append(",action:");
            stringBuilder4.append(intent5.getAction());
            stringBuilder4.append(",replace:");
            stringBuilder4.append(z2);
            stringBuilder4.append(",ordered:");
            z4 = ordered;
            stringBuilder4.append(z4);
            stringBuilder4.append(",hasComponent:");
            if (intent5.getComponent() != null) {
            }
            stringBuilder4.append(intent5.getComponent() != null ? z3 : action2);
            stringBuilder4.append(",manifestNum:");
            if (receivers3 == null) {
            }
            stringBuilder4.append(receivers3 == null ? action2 : receivers3.size());
            stringBuilder4.append(",registeredNum:");
            if (registeredReceivers2 == null) {
            }
            stringBuilder4.append(registeredReceivers2 == null ? action2 : registeredReceivers2.size());
            Flog.i(104, stringBuilder4.toString());
            str4 = callerPackage;
            checkBroadcastRecordSpeed(i9, str4, processRecord2);
            if (registeredReceivers2 != null) {
            }
            NR = registeredReceivers2 != null ? registeredReceivers2.size() : action2;
            if (z4) {
            }
            i4 = z3;
            intent4 = intent5;
            iArr = users;
            userId2 = i3;
            ssp = str4;
            replacePending = z2;
            userId3 = processRecord2;
            registeredReceivers = registeredReceivers2;
            i7 = NR;
            i8 = 0;
            if (receivers3 != null) {
            }
            while (intent3 < i7) {
            }
            if (isCallerSystem2) {
            }
            if (receivers != null) {
            }
            receivers2 = receivers;
            intent6 = intent3;
            list = registeredReceivers;
            i10 = i7;
            if (intent4.getComponent() != null) {
            }
            return 0;
            i9 = action2;
            action5 = action4;
            i7 = -1;
            action2 = action5;
            if ("android.intent.action.PACKAGE_ADDED".equals(action2) || "android.intent.action.PACKAGE_REMOVED".equals(action2) || "android.intent.action.PACKAGE_REPLACED".equals(action2)) {
                appId2 = getUidFromIntent(intent3);
                if (appId2 != i7) {
                    UidRecord uidRec = (UidRecord) this.mActiveUids.get(appId2);
                    if (uidRec != null) {
                        uidRec.updateHasInternetPermission();
                    }
                }
            }
            if (sticky) {
            }
            if (i3 != i7) {
            }
            int[] users2 = i3 != i7 ? this.mUserController.getStartedUserArray() : new int[]{i3};
            List receivers32 = null;
            List<BroadcastFilter> registeredReceivers22 = null;
            if ((intent3.getFlags() & 1073741824) != 0) {
            }
            if (intent3.getComponent() == null) {
            }
            killProcess = false;
            if (registeredReceivers22 != null) {
            }
            intent5 = intent3;
            z3 = true;
            action2 = killProcess;
            processRecord2 = callerApp;
            processQueue = null;
            if ((intent5.getFlags() & 536870912) != 0) {
            }
            z2 = (intent5.getFlags() & 536870912) != 0 ? z3 : action2;
            stringBuilder4 = new StringBuilder();
            stringBuilder4.append("sendBroadcast caller:");
            stringBuilder4.append(processRecord2);
            stringBuilder4.append(",action:");
            stringBuilder4.append(intent5.getAction());
            stringBuilder4.append(",replace:");
            stringBuilder4.append(z2);
            stringBuilder4.append(",ordered:");
            z4 = ordered;
            stringBuilder4.append(z4);
            stringBuilder4.append(",hasComponent:");
            if (intent5.getComponent() != null) {
            }
            stringBuilder4.append(intent5.getComponent() != null ? z3 : action2);
            stringBuilder4.append(",manifestNum:");
            if (receivers32 == null) {
            }
            stringBuilder4.append(receivers32 == null ? action2 : receivers32.size());
            stringBuilder4.append(",registeredNum:");
            if (registeredReceivers22 == null) {
            }
            stringBuilder4.append(registeredReceivers22 == null ? action2 : registeredReceivers22.size());
            Flog.i(104, stringBuilder4.toString());
            str4 = callerPackage;
            checkBroadcastRecordSpeed(i9, str4, processRecord2);
            if (registeredReceivers22 != null) {
            }
            NR = registeredReceivers22 != null ? registeredReceivers22.size() : action2;
            if (z4) {
            }
            i4 = z3;
            intent4 = intent5;
            iArr = users2;
            userId2 = i3;
            ssp = str4;
            replacePending = z2;
            userId3 = processRecord2;
            registeredReceivers = registeredReceivers22;
            i7 = NR;
            i8 = 0;
            if (receivers32 != null) {
            }
            while (intent3 < i7) {
            }
            if (isCallerSystem2) {
            }
            if (receivers != null) {
            }
            receivers2 = receivers;
            intent6 = intent3;
            list = registeredReceivers;
            i10 = i7;
            if (intent4.getComponent() != null) {
            }
            return 0;
        } catch (RemoteException e42) {
            String str8 = action;
            userId2 = i3;
            intent4 = intent3;
            i3 = processRecord;
            Slog.w(TAG, "Remote exception", e42);
            return 0;
        }
    }

    private int getUidFromIntent(Intent intent) {
        int i = -1;
        if (intent == null) {
            return -1;
        }
        Bundle intentExtras = intent.getExtras();
        if (intent.hasExtra("android.intent.extra.UID")) {
            i = intentExtras.getInt("android.intent.extra.UID");
        }
        return i;
    }

    final void rotateBroadcastStatsIfNeededLocked() {
        long now = SystemClock.elapsedRealtime();
        if (this.mCurBroadcastStats == null || this.mCurBroadcastStats.mStartRealtime + 86400000 < now) {
            this.mLastBroadcastStats = this.mCurBroadcastStats;
            if (this.mLastBroadcastStats != null) {
                this.mLastBroadcastStats.mEndRealtime = SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new BroadcastStats();
        }
    }

    final void addBroadcastStatLocked(String action, String srcPackage, int receiveCount, int skipCount, long dispatchTime) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBroadcast(action, srcPackage, receiveCount, skipCount, dispatchTime);
    }

    final void addBackgroundCheckViolationLocked(String action, String targetPackage) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBackgroundCheckViolation(action, targetPackage);
    }

    final Intent verifyBroadcastLocked(Intent intent) {
        if (intent == null || !intent.hasFileDescriptors()) {
            int flags = intent.getFlags();
            if (!this.mProcessesReady && (67108864 & flags) == 0 && (1073741824 & flags) == 0) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Attempt to launch receivers of broadcast intent ");
                stringBuilder.append(intent);
                stringBuilder.append(" before boot completion");
                Slog.e(TAG, stringBuilder.toString());
                throw new IllegalStateException("Cannot broadcast before boot completed");
            } else if ((DumpState.DUMP_HANDLE & flags) == 0) {
                if ((flags & DumpState.DUMP_CHANGES) != 0) {
                    int callingUid = Binder.getCallingUid();
                    if (!(callingUid == 0 || callingUid == IHwShutdownThread.SHUTDOWN_ANIMATION_WAIT_TIME)) {
                        String str = TAG;
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Removing FLAG_RECEIVER_FROM_SHELL because caller is UID ");
                        stringBuilder2.append(Binder.getCallingUid());
                        Slog.w(str, stringBuilder2.toString());
                        intent.removeFlags(DumpState.DUMP_CHANGES);
                    }
                }
                return intent;
            } else {
                throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
            }
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public final int broadcastIntent(IApplicationThread caller, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        Throwable th;
        Intent intent2 = intent;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_BROADCASTINTENT, new Object[]{intent2});
        enforceNotIsolatedCaller("broadcastIntent");
        synchronized (this) {
            Intent intent3;
            try {
                boostPriorityForLockedSection();
                intent3 = verifyBroadcastLocked(intent2);
                try {
                    ProcessRecord callerApp = getRecordForAppLocked(caller);
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    String str = callerApp != null ? callerApp.info.packageName : null;
                    long origId = Binder.clearCallingIdentity();
                    try {
                        int res = broadcastIntentLocked(callerApp, str, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, appOp, bOptions, serialized, sticky, callingPid, callingUid, userId);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return res;
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                intent3 = intent2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    int broadcastIntentInPackage(String packageName, int uid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        Throwable th;
        synchronized (this) {
            Intent intent2;
            Intent intent3;
            try {
                boostPriorityForLockedSection();
                this.mHwAMSEx.removePackageStopFlag(packageName, uid, resolvedType, resultCode, requiredPermission, bOptions, userId);
                intent2 = intent;
                try {
                    intent3 = verifyBroadcastLocked(intent2);
                    try {
                        long origId = Binder.clearCallingIdentity();
                        try {
                            int res = broadcastIntentLocked(null, packageName, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermission == null ? null : new String[]{requiredPermission}, -1, bOptions, serialized, sticky, -1, uid, userId);
                            Binder.restoreCallingIdentity(origId);
                            resetPriorityAfterLockedSection();
                            return res;
                        } catch (Throwable th2) {
                            th = th2;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    intent3 = intent2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th5) {
                th = th5;
                intent2 = intent;
                intent3 = intent2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void unbroadcastIntent(IApplicationThread caller, Intent intent, int userId) {
        if (intent == null || !intent.hasFileDescriptors()) {
            userId = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 0, "removeStickyBroadcast", null);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.BROADCAST_STICKY") == 0) {
                        ArrayMap<String, ArrayList<Intent>> stickies = (ArrayMap) this.mStickyBroadcasts.get(userId);
                        if (stickies != null) {
                            ArrayList<Intent> list = (ArrayList) stickies.get(intent.getAction());
                            if (list != null) {
                                int N = list.size();
                                for (int i = 0; i < N; i++) {
                                    if (intent.filterEquals((Intent) list.get(i))) {
                                        list.remove(i);
                                        break;
                                    }
                                }
                                if (list.size() <= 0) {
                                    stickies.remove(intent.getAction());
                                }
                            }
                            if (stickies.size() <= 0) {
                                this.mStickyBroadcasts.remove(userId);
                            }
                        }
                    } else {
                        String msg = new StringBuilder();
                        msg.append("Permission Denial: unbroadcastIntent() from pid=");
                        msg.append(Binder.getCallingPid());
                        msg.append(", uid=");
                        msg.append(Binder.getCallingUid());
                        msg.append(" requires ");
                        msg.append("android.permission.BROADCAST_STICKY");
                        msg = msg.toString();
                        Slog.w(TAG, msg);
                        throw new SecurityException(msg);
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    void backgroundServicesFinishedLocked(int userId) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.backgroundServicesFinishedLocked(userId);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:39:0x0095 A:{SYNTHETIC, Splitter: B:39:0x0095} */
    /* JADX WARNING: Removed duplicated region for block: B:44:0x00ac A:{Catch:{ all -> 0x00a7 }} */
    /* JADX WARNING: Missing block: B:48:?, code:
            resetPriorityAfterLockedSection();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void finishReceiver(IBinder who, int resultCode, String resultData, Bundle resultExtras, boolean resultAbort, int flags) {
        Throwable th;
        IBinder iBinder = who;
        int i = flags;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Finish receiver: ");
            stringBuilder.append(iBinder);
            Slog.v(str, stringBuilder.toString());
        }
        if (resultExtras == null || !resultExtras.hasFileDescriptors()) {
            long origId = Binder.clearCallingIdentity();
            boolean doNext = false;
            BroadcastRecord r = null;
            try {
                synchronized (this) {
                    try {
                        BroadcastRecord r2;
                        boostPriorityForLockedSection();
                        BroadcastQueue keyQueue;
                        if ((i & 4096) != 0) {
                            keyQueue = (i & 268435456) != 0 ? this.mFgKeyAppBroadcastQueue : this.mBgKeyAppBroadcastQueue;
                            if (keyQueue != null) {
                                r = keyQueue.getMatchingOrderedReceiver(iBinder);
                            }
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                String str2 = TAG;
                                StringBuilder stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("Finish receiver find key broadcast: ");
                                stringBuilder2.append(r);
                                Slog.v(str2, stringBuilder2.toString());
                            }
                        } else if ((i & 8192) != 0) {
                            keyQueue = (i & 268435456) != 0 ? this.mFgThirdAppBroadcastQueue : this.mBgThirdAppBroadcastQueue;
                            if (keyQueue != null) {
                                r = keyQueue.getMatchingOrderedReceiver(iBinder);
                            }
                        } else {
                            r2 = ((i & 268435456) != 0 ? this.mFgBroadcastQueue : this.mBgBroadcastQueue).getMatchingOrderedReceiver(iBinder);
                            if (r2 != null) {
                                try {
                                    doNext = r2.queue.finishReceiverLocked(r2, resultCode, resultData, resultExtras, resultAbort, true);
                                } catch (Throwable th2) {
                                    th = th2;
                                    r = r2;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            if (doNext) {
                                r2.queue.processNextBroadcastLocked(false, true);
                            }
                            trimApplicationsLocked();
                        }
                        r2 = r;
                        if (r2 != null) {
                        }
                        if (doNext) {
                        }
                        trimApplicationsLocked();
                    } catch (Throwable th3) {
                        th = th3;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:22:0x0079  */
    /* JADX WARNING: Removed duplicated region for block: B:18:0x0060 A:{SYNTHETIC, Splitter: B:18:0x0060} */
    /* JADX WARNING: Removed duplicated region for block: B:18:0x0060 A:{SYNTHETIC, Splitter: B:18:0x0060} */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0079  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean startInstrumentation(ComponentName className, String profileFile, int flags, Bundle arguments, IInstrumentationWatcher watcher, IUiAutomationConnection uiAutomationConnection, int userId, String abiOverride) {
        InstrumentationInfo ii;
        boolean z;
        ComponentName componentName = className;
        Bundle bundle = arguments;
        IInstrumentationWatcher iInstrumentationWatcher = watcher;
        enforceNotIsolatedCaller("startInstrumentation");
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startInstrumentation", null);
        if (bundle == null || !arguments.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    ApplicationInfo ai;
                    boostPriorityForLockedSection();
                    InstrumentationInfo ii2 = null;
                    ApplicationInfo applicationInfo = null;
                    try {
                        ii2 = this.mContext.getPackageManager().getInstrumentationInfo(componentName, 1024);
                        ai = AppGlobals.getPackageManager().getApplicationInfo(ii2.targetPackage, 1024, userId2);
                        ii = ii2;
                    } catch (NameNotFoundException e) {
                        ii = ii2;
                        ai = applicationInfo;
                        z = false;
                        if (ii == null) {
                        }
                    } catch (RemoteException e2) {
                        ii = ii2;
                        ai = applicationInfo;
                        z = false;
                        if (ii == null) {
                        }
                    }
                    z = false;
                    StringBuilder stringBuilder;
                    if (ii == null) {
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Unable to find instrumentation info for: ");
                        stringBuilder.append(componentName);
                        reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, stringBuilder.toString());
                    } else if (ai == null) {
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Unable to find instrumentation target package: ");
                        stringBuilder.append(ii.targetPackage);
                        reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, stringBuilder.toString());
                        resetPriorityAfterLockedSection();
                        return false;
                    } else if (ai.hasCode()) {
                        int match = this.mContext.getPackageManager().checkSignatures(ii.targetPackage, ii.packageName);
                        String defProcess;
                        if (match >= 0 || match == -1) {
                            boolean evenPersistent;
                            ActiveInstrumentation activeInstr = new ActiveInstrumentation(this);
                            activeInstr.mClass = componentName;
                            defProcess = ai.processName;
                            boolean z2 = true;
                            if (ii.targetProcesses == null) {
                                activeInstr.mTargetProcesses = new String[]{ai.processName};
                            } else if (ii.targetProcesses.equals("*")) {
                                activeInstr.mTargetProcesses = new String[0];
                            } else {
                                activeInstr.mTargetProcesses = ii.targetProcesses.split(",");
                                defProcess = activeInstr.mTargetProcesses[0];
                            }
                            String defProcess2 = defProcess;
                            activeInstr.mTargetInfo = ai;
                            activeInstr.mProfileFile = profileFile;
                            activeInstr.mArguments = bundle;
                            activeInstr.mWatcher = iInstrumentationWatcher;
                            activeInstr.mUiAutomationConnection = uiAutomationConnection;
                            activeInstr.mResultClass = componentName;
                            boolean disableHiddenApiChecks = (flags & 1) != 0;
                            if (disableHiddenApiChecks) {
                                enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                            }
                            long origId = Binder.clearCallingIdentity();
                            if (bundle != null) {
                                String str = TAG;
                                StringBuilder stringBuilder2 = new StringBuilder();
                                evenPersistent = true;
                                stringBuilder2.append("Arguments param disableAnalytics results = ");
                                stringBuilder2.append(bundle.getString("disableAnalytics"));
                                Slog.i(str, stringBuilder2.toString());
                                z2 = true;
                                evenPersistent = "true".equals(bundle.getString("disableAnalytics")) ^ true;
                            } else {
                                evenPersistent = true;
                            }
                            long origId2 = origId;
                            boolean z3 = z2;
                            ActiveInstrumentation activeInstr2 = activeInstr;
                            ApplicationInfo ai2 = ai;
                            forceStopPackageLocked(ii.targetPackage, -1, true, false, true, evenPersistent, false, userId2, "start instr");
                            if (this.mUsageStatsService != null) {
                                this.mUsageStatsService.reportEvent(ii.targetPackage, userId2, 6);
                            }
                            ProcessRecord app = addAppLocked(ai2, defProcess2, false, disableHiddenApiChecks, abiOverride);
                            ActiveInstrumentation activeInstr3 = activeInstr2;
                            app.instr = activeInstr3;
                            activeInstr3.mFinished = false;
                            activeInstr3.mRunningProcesses.add(app);
                            if (!this.mActiveInstrumentation.contains(activeInstr3)) {
                                this.mActiveInstrumentation.add(activeInstr3);
                            }
                            Binder.restoreCallingIdentity(origId2);
                            resetPriorityAfterLockedSection();
                            return z3;
                        }
                        defProcess = new StringBuilder();
                        defProcess.append("Permission Denial: starting instrumentation ");
                        defProcess.append(componentName);
                        defProcess.append(" from pid=");
                        defProcess.append(Binder.getCallingPid());
                        defProcess.append(", uid=");
                        defProcess.append(Binder.getCallingPid());
                        defProcess.append(" not allowed because package ");
                        defProcess.append(ii.packageName);
                        defProcess.append(" does not have a signature matching the target ");
                        defProcess.append(ii.targetPackage);
                        defProcess = defProcess.toString();
                        reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, defProcess);
                        throw new SecurityException(defProcess);
                    } else {
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Instrumentation target has no code: ");
                        stringBuilder.append(ii.targetPackage);
                        reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, stringBuilder.toString());
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
        return z;
    }

    private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher, ComponentName cn, String report) {
        Slog.w(TAG, report);
        if (watcher != null) {
            Bundle results = new Bundle();
            results.putString("id", "ActivityManagerService");
            results.putString("Error", report);
            this.mInstrumentationReporter.reportStatus(watcher, cn, -1, results);
        }
    }

    void addInstrumentationResultsLocked(ProcessRecord app, Bundle results) {
        if (app.instr == null) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("finishInstrumentation called on non-instrumented: ");
            stringBuilder.append(app);
            Slog.w(str, stringBuilder.toString());
            return;
        }
        if (!(app.instr.mFinished || results == null)) {
            if (app.instr.mCurResults == null) {
                app.instr.mCurResults = new Bundle(results);
            } else {
                app.instr.mCurResults.putAll(results);
            }
        }
    }

    public void addInstrumentationResults(IApplicationThread target, Bundle results) {
        int userId = UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("addInstrumentationResults: no app for ");
                        stringBuilder.append(target);
                        Slog.w(str, stringBuilder.toString());
                    } else {
                        long origId = Binder.clearCallingIdentity();
                        addInstrumentationResultsLocked(app, results);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    @GuardedBy("this")
    void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results) {
        String str;
        if (app.instr == null) {
            str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("finishInstrumentation called on non-instrumented: ");
            stringBuilder.append(app);
            Slog.w(str, stringBuilder.toString());
            return;
        }
        StringBuilder stringBuilder2;
        if (!app.instr.mFinished) {
            if (app.instr.mWatcher != null) {
                Bundle finalResults = app.instr.mCurResults;
                if (finalResults == null) {
                    finalResults = results;
                } else if (!(app.instr.mCurResults == null || results == null)) {
                    finalResults.putAll(results);
                }
                this.mInstrumentationReporter.reportFinished(app.instr.mWatcher, app.instr.mClass, resultCode, finalResults);
            }
            if (app.instr.mUiAutomationConnection != null) {
                str = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("finishInstrumentationLocked shortMsg:");
                stringBuilder2.append(results != null ? results.getString("shortMsg") : null);
                stringBuilder2.append(" from app:");
                stringBuilder2.append(app);
                Slog.d(str, stringBuilder2.toString());
                this.mHandler.obtainMessage(56, app.instr.mUiAutomationConnection).sendToTarget();
            }
            app.instr.mFinished = true;
        }
        app.instr.removeProcess(app);
        app.instr = null;
        boolean evenPersistent = true;
        if (results != null) {
            String str2 = TAG;
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Bundle param DontKillDeptProc = ");
            stringBuilder2.append(results.getString("DontKillDeptProc"));
            Slog.i(str2, stringBuilder2.toString());
            evenPersistent = 1 ^ "true".equals(results.getString("DontKillDeptProc"));
        }
        forceStopPackageLocked(app.info.packageName, -1, false, false, true, evenPersistent, false, app.userId, "finished inst");
    }

    public void finishInstrumentation(IApplicationThread target, int resultCode, Bundle results) {
        int userId = UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        String str = TAG;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("finishInstrumentation: no app for ");
                        stringBuilder.append(target);
                        Slog.w(str, stringBuilder.toString());
                    } else {
                        long origId = Binder.clearCallingIdentity();
                        finishInstrumentationLocked(app, resultCode, results);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public ConfigurationInfo getDeviceConfigurationInfo() {
        ConfigurationInfo config = new ConfigurationInfo();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                Configuration globalConfig = getGlobalConfiguration();
                config.reqTouchScreen = globalConfig.touchscreen;
                config.reqKeyboardType = globalConfig.keyboard;
                config.reqNavigation = globalConfig.navigation;
                if (globalConfig.navigation == 2 || globalConfig.navigation == 3) {
                    config.reqInputFeatures |= 2;
                }
                if (!(globalConfig.keyboard == 0 || globalConfig.keyboard == 1)) {
                    config.reqInputFeatures |= 1;
                }
                config.reqGlEsVersion = this.GL_ES_VERSION;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return config;
    }

    ActivityStack getFocusedStack() {
        return this.mStackSupervisor.getFocusedStack();
    }

    public StackInfo getFocusedStackInfo() throws RemoteException {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getStackInfo()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityStack focusedStack = getFocusedStack();
                if (focusedStack != null) {
                    StackInfo stackInfo = this.mStackSupervisor.getStackInfo(focusedStack.mStackId);
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return stackInfo;
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(ident);
                return null;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public Configuration getConfiguration() {
        Configuration ci;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ci = new Configuration(getGlobalConfiguration());
                ci.userSetLocale = false;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return ci;
    }

    public void suppressResizeConfigChanges(boolean suppress) throws RemoteException {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "suppressResizeConfigChanges()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mSuppressResizeConfigChanges = suppress;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void moveTasksToFullscreenStack(int fromStackId, boolean onTop) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "moveTasksToFullscreenStack()");
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                ActivityStack stack = this.mStackSupervisor.getStack(fromStackId);
                if (stack != null) {
                    if (stack.isActivityTypeStandardOrUndefined()) {
                        this.mStackSupervisor.moveTasksToFullscreenStackLocked(stack, onTop);
                    } else {
                        throw new IllegalArgumentException("You can't move tasks from non-standard stacks.");
                    }
                }
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void updatePersistentConfiguration(Configuration values) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission("updatePersistentConfiguration()");
        if (values != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    updatePersistentConfigurationLocked(values, this.mUserController.getCurrentUserId());
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new NullPointerException("Configuration must not be null");
    }

    private void updatePersistentConfigurationLocked(Configuration values, int userId) {
        long origId = Binder.clearCallingIdentity();
        try {
            updateConfigurationLocked(values, null, false, true, userId, false);
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    private void updateFontScaleIfNeeded(int userId) {
        float scaleFactor = System.getFloatForUser(this.mContext.getContentResolver(), "font_scale", 1.0f, userId);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (getGlobalConfiguration().fontScale == scaleFactor) {
                } else {
                    Configuration configuration = this.mWindowManager.computeNewConfiguration(0);
                    configuration.fontScale = scaleFactor;
                    updatePersistentConfigurationLocked(configuration, userId);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void enforceWriteSettingsPermission(String func) {
        int uid = Binder.getCallingUid();
        if (uid != 0 && !Settings.checkAndNoteWriteSettingsOperation(this.mContext, uid, Settings.getPackageNameForUid(this.mContext, uid), false)) {
            String msg = new StringBuilder();
            msg.append("Permission Denial: ");
            msg.append(func);
            msg.append(" from pid=");
            msg.append(Binder.getCallingPid());
            msg.append(", uid=");
            msg.append(uid);
            msg.append(" requires ");
            msg.append("android.permission.WRITE_SETTINGS");
            msg = msg.toString();
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public boolean updateConfiguration(Configuration values) {
        boolean z;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(BehaviorId.ACTIVITYMANAGER_UPDATECONFIGURATION);
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateConfiguration()");
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                z = false;
                if (values == null && this.mWindowManager != null) {
                    values = this.mWindowManager.computeNewConfiguration(0);
                }
                if (this.mWindowManager != null) {
                    this.mProcessList.applyDisplaySize(this.mWindowManager);
                }
                origId = Binder.clearCallingIdentity();
                if (values != null) {
                    System.clearConfiguration(values);
                }
                updateConfigurationLocked(values, null, false, false, -10000, false, this.mTmpUpdateConfigurationResult);
                if (this.mTmpUpdateConfigurationResult.changes != 0) {
                    z = true;
                }
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    void updateUserConfigurationLocked() {
        Configuration configuration = new Configuration(getGlobalConfiguration());
        int currentUserId = this.mUserController.getCurrentUserId();
        System.adjustConfigurationForUser(this.mContext.getContentResolver(), configuration, currentUserId, System.canWrite(this.mContext));
        updateConfigurationLocked(configuration, null, false, false, currentUserId, false);
    }

    boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale) {
        return updateConfigurationLocked(values, starting, initLocale, false);
    }

    boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale, boolean deferResume) {
        return updateConfigurationLocked(values, starting, initLocale, false, -10000, deferResume);
    }

    private boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale, boolean persistent, int userId, boolean deferResume) {
        return updateConfigurationLocked(values, starting, initLocale, persistent, userId, deferResume, null);
    }

    private boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale, boolean persistent, int userId, boolean deferResume, UpdateConfigurationResult result) {
        int changes = 0;
        if (this.mWindowManager != null) {
            this.mWindowManager.deferSurfaceLayout();
        }
        if (values != null) {
            try {
                changes = updateGlobalConfigurationLocked(values, initLocale, persistent, userId, deferResume);
            } catch (Throwable th) {
                if (this.mWindowManager != null) {
                    this.mWindowManager.continueSurfaceLayout();
                }
            }
        }
        boolean kept = ensureConfigAndVisibilityAfterUpdate(starting, changes);
        if (this.mWindowManager != null) {
            this.mWindowManager.continueSurfaceLayout();
        }
        if (result != null) {
            result.changes = changes;
            result.activityRelaunched = !kept;
        }
        return kept;
    }

    private static boolean isSplitConfigurationChange(int configDiff) {
        return (configDiff & 4100) != 0;
    }

    /* JADX WARNING: Missing block: B:71:0x0304, code:
            if (r14.mProcessesReady == false) goto L_0x0309;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private int updateGlobalConfigurationLocked(Configuration values, boolean initLocale, boolean persistent, int userId, boolean deferResume) {
        ActivityManagerService thisR;
        Configuration configuration = values;
        boolean z = deferResume;
        this.mTempConfig.setTo(getGlobalConfiguration());
        int oldOrientation = this.mTempConfig.orientation;
        int changes = this.mTempConfig.updateFrom(configuration);
        if (!(this.mWindowManager == null || this.mWindowManager.mIsPerfBoost || oldOrientation == this.mTempConfig.orientation || this.mTempConfig.orientation == 0 || oldOrientation == 0)) {
            this.mWindowManager.mIsPerfBoost = true;
            UniPerf.getInstance().uniPerfEvent(4105, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, new int[]{0});
        }
        if (changes == 0) {
            performDisplayOverrideConfigUpdate(configuration, z, 0);
            return 0;
        }
        String str;
        StringBuilder stringBuilder;
        int bestLocaleIndex;
        int changes2;
        int changes3;
        if (ActivityManagerDebugConfig.DEBUG_SWITCH || ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
            str = TAG_CONFIGURATION;
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Updating global configuration to: ");
            stringBuilder2.append(configuration);
            Slog.i(str, stringBuilder2.toString());
        }
        IHwConfiguration oldConfigEx = getGlobalConfiguration().extraConfig;
        IHwConfiguration newConfigEx = this.mTempConfig.extraConfig;
        int oldConfigHwt = oldConfigEx.getConfigItem(1);
        int newConfigHwt = newConfigEx.getConfigItem(1);
        int oldConfigUserId = oldConfigEx.getConfigItem(3);
        int newConfigUserId = newConfigEx.getConfigItem(3);
        boolean isSuccess = false;
        if (!(oldConfigHwt == newConfigHwt && oldConfigUserId == newConfigUserId)) {
            int currentUserId = this.mUserController.getCurrentUserId();
            String str2 = TAG;
            stringBuilder = new StringBuilder();
            stringBuilder.append("updateConfigurationLocked  currentUserId ");
            stringBuilder.append(currentUserId);
            stringBuilder.append(" ; oldConfigHwt ");
            stringBuilder.append(oldConfigHwt);
            stringBuilder.append(" ; newConfigHwt ");
            stringBuilder.append(newConfigHwt);
            Slog.i(str2, stringBuilder.toString());
            this.mTempConfig.extraConfig.setConfigItem(3, currentUserId);
            if (oldConfigHwt != newConfigHwt) {
                isSuccess = Process.updateHwThemeZipsAndSomeIcons(currentUserId);
                this.mTempConfig.extraConfig.setConfigItem(4, 1);
            }
        }
        boolean isSuccess2 = isSuccess;
        EventLog.writeEvent(EventLogTags.CONFIGURATION_CHANGED, changes);
        int newConfigUserId2 = newConfigUserId;
        int oldConfigUserId2 = oldConfigUserId;
        int newConfigHwt2 = newConfigHwt;
        int oldConfigHwt2 = oldConfigHwt;
        IHwConfiguration newConfigEx2 = newConfigEx;
        IHwConfiguration oldConfigEx2 = oldConfigEx;
        int oldOrientation2 = oldOrientation;
        int changes4 = changes;
        StatsLog.write(66, configuration.colorMode, configuration.densityDpi, configuration.fontScale, configuration.hardKeyboardHidden, configuration.keyboard, configuration.keyboardHidden, configuration.mcc, configuration.mnc, configuration.navigation, configuration.navigationHidden, configuration.orientation, configuration.screenHeightDp, configuration.screenLayout, configuration.screenWidthDp, configuration.smallestScreenWidthDp, configuration.touchscreen, configuration.uiMode);
        if (initLocale || values.getLocales().isEmpty() || !configuration.userSetLocale) {
            thisR = this;
        } else {
            LocaleList locales = values.getLocales();
            bestLocaleIndex = 0;
            if (locales.size() > 1) {
                thisR = this;
                if (thisR.mSupportedSystemLocales == null) {
                    thisR.mSupportedSystemLocales = Resources.getSystem().getAssets().getLocales();
                }
                bestLocaleIndex = Math.max(0, locales.getFirstMatchIndex(thisR.mSupportedSystemLocales));
            } else {
                thisR = this;
            }
            SystemProperties.set("persist.sys.locale", locales.get(bestLocaleIndex).toLanguageTag());
            LocaleList.setDefault(locales, bestLocaleIndex);
            thisR.mHandler.sendMessage(thisR.mHandler.obtainMessage(47, locales.get(bestLocaleIndex)));
        }
        changes = changes4;
        HwThemeManager.updateSimpleUIConfig(thisR.mContext.getContentResolver(), thisR.mTempConfig, changes);
        int i = thisR.mConfigurationSeq + 1;
        thisR.mConfigurationSeq = i;
        thisR.mConfigurationSeq = Math.max(i, 1);
        thisR.mTempConfig.seq = thisR.mConfigurationSeq;
        thisR.mStackSupervisor.onConfigurationChanged(thisR.mTempConfig);
        str = TAG;
        StringBuilder stringBuilder3 = new StringBuilder();
        stringBuilder3.append("Config changes=");
        stringBuilder3.append(Integer.toHexString(changes));
        stringBuilder3.append(" ");
        stringBuilder3.append(thisR.mTempConfig);
        Slog.i(str, stringBuilder3.toString());
        thisR.mUsageStatsService.reportConfigurationChange(thisR.mTempConfig, thisR.mUserController.getCurrentUserId());
        getGlobalConfiguration().extraConfig.setConfigItem(3, thisR.mTempConfig.extraConfig.getConfigItem(3));
        if (isSuccess2) {
            getGlobalConfiguration().extraConfig.setConfigItem(4, 0);
        }
        thisR.updateShouldShowDialogsLocked(thisR.mTempConfig);
        AttributeCache ac = AttributeCache.instance();
        if (ac != null) {
            ac.updateConfiguration(thisR.mTempConfig);
        }
        thisR.mSystemThread.applyConfigurationToResources(thisR.mTempConfig);
        Configuration configCopy = new Configuration(thisR.mTempConfig);
        if (persistent && System.hasInterestingConfigurationChanges(changes)) {
            Message msg = thisR.mHandler.obtainMessage(4);
            msg.obj = configCopy;
            msg.arg1 = userId;
            thisR.mHandler.sendMessage(msg);
        } else {
            int i2 = userId;
        }
        i = thisR.mLruProcesses.size() - 1;
        while (true) {
            bestLocaleIndex = i;
            if (bestLocaleIndex < 0) {
                break;
            }
            ProcessRecord app = (ProcessRecord) thisR.mLruProcesses.get(bestLocaleIndex);
            try {
                if (app.thread != null) {
                    if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                        str = TAG_CONFIGURATION;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Sending to proc ");
                        stringBuilder.append(app.processName);
                        stringBuilder.append(" new config ");
                        stringBuilder.append(configCopy);
                        Slog.v(str, stringBuilder.toString());
                    }
                    thisR.mLifecycleManager.scheduleTransaction(app.thread, ConfigurationChangeItem.obtain(configCopy));
                }
            } catch (Exception e) {
                Slog.e(TAG_CONFIGURATION, "Failed to schedule configuration change", e);
            }
            i = bestLocaleIndex - 1;
        }
        Intent intent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
        intent.addFlags(1881145344);
        int changes5 = changes;
        thisR.broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, -1);
        int changes6 = changes5;
        if ((changes6 & 4) != 0) {
            ActivityManagerService activityManagerService;
            intent = new Intent("android.intent.action.LOCALE_CHANGED");
            intent.addFlags(287309824);
            if (initLocale) {
                activityManagerService = this;
            } else {
                activityManagerService = this;
            }
            intent.addFlags(1073741824);
            changes2 = changes6;
            activityManagerService.broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, -1);
        } else {
            changes2 = changes6;
        }
        if (initLocale) {
            changes3 = changes2;
        } else {
            changes6 = changes2;
            if (isSplitConfigurationChange(changes6)) {
                intent = new Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                intent.addFlags(553648128);
                changes3 = changes6;
                broadcastIntentLocked(null, null, intent, null, null, 0, null, null, new String[]{"android.permission.INSTALL_PACKAGES"}, -1, null, false, false, MY_PID, 1000, -1);
            } else {
                changes3 = changes6;
            }
        }
        performDisplayOverrideConfigUpdate(this.mStackSupervisor.getConfiguration(), deferResume, 0);
        return changes3;
    }

    /* JADX WARNING: Missing block: B:9:0x0030, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:10:0x0033, code:
            return false;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean updateDisplayOverrideConfiguration(Configuration values, int displayId) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateDisplayOverrideConfiguration()");
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                boolean z = false;
                if (this.mStackSupervisor.isDisplayAdded(displayId)) {
                    if (values == null) {
                        if (this.mWindowManager != null) {
                            values = this.mWindowManager.computeNewConfiguration(displayId);
                        }
                    }
                    if (this.mWindowManager != null) {
                        this.mProcessList.applyDisplaySize(this.mWindowManager);
                    }
                    origId = Binder.clearCallingIdentity();
                    if (values != null) {
                        System.clearConfiguration(values);
                    }
                    updateDisplayOverrideConfigurationLocked(values, null, false, displayId, this.mTmpUpdateConfigurationResult);
                    if (this.mTmpUpdateConfigurationResult.changes != 0) {
                        z = true;
                    }
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return z;
                } else if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                    String str = TAG;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Trying to update display configuration for non-existing displayId=");
                    stringBuilder.append(displayId);
                    Slog.w(str, stringBuilder.toString());
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    boolean updateDisplayOverrideConfigurationLocked(Configuration values, ActivityRecord starting, boolean deferResume, int displayId) {
        return updateDisplayOverrideConfigurationLocked(values, starting, deferResume, displayId, null);
    }

    private boolean updateDisplayOverrideConfigurationLocked(Configuration values, ActivityRecord starting, boolean deferResume, int displayId, UpdateConfigurationResult result) {
        int changes = 0;
        if (this.mWindowManager != null) {
            this.mWindowManager.mAppTransitTrack = "updateconfig";
            this.mWindowManager.deferSurfaceLayout();
        }
        if (values != null) {
            if (displayId == 0) {
                try {
                    changes = updateGlobalConfigurationLocked(values, false, false, -10000, deferResume);
                } catch (Throwable th) {
                    if (this.mWindowManager != null) {
                        this.mWindowManager.continueSurfaceLayout();
                    }
                }
            } else {
                changes = performDisplayOverrideConfigUpdate(values, deferResume, displayId);
            }
        }
        boolean kept = ensureConfigAndVisibilityAfterUpdate(starting, changes);
        if (this.mWindowManager != null) {
            this.mWindowManager.continueSurfaceLayout();
        }
        if (result != null) {
            result.changes = changes;
            result.activityRelaunched = !kept;
        }
        return kept;
    }

    private int performDisplayOverrideConfigUpdate(Configuration values, boolean deferResume, int displayId) {
        this.mTempConfig.setTo(this.mStackSupervisor.getDisplayOverrideConfiguration(displayId));
        int changes = this.mTempConfig.updateFrom(values);
        int i = 0;
        if (changes != 0) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Override config changes=");
            stringBuilder.append(Integer.toHexString(changes));
            stringBuilder.append(" ");
            stringBuilder.append(this.mTempConfig);
            stringBuilder.append(" for displayId=");
            stringBuilder.append(displayId);
            Slog.i(str, stringBuilder.toString());
            this.mStackSupervisor.setDisplayOverrideConfiguration(this.mTempConfig, displayId);
            if (((changes & 4096) != 0) && displayId == 0) {
                this.mAppWarnings.onDensityChanged();
                killAllBackgroundProcessesExcept(24, 4);
            }
        }
        if (this.mWindowManager != null) {
            int[] resizedStacks = this.mWindowManager.setNewDisplayOverrideConfiguration(this.mTempConfig, displayId);
            if (resizedStacks != null) {
                int length = resizedStacks.length;
                while (i < length) {
                    resizeStackWithBoundsFromWindowManager(resizedStacks[i], deferResume);
                    i++;
                }
            }
        }
        return changes;
    }

    private boolean ensureConfigAndVisibilityAfterUpdate(ActivityRecord starting, int changes) {
        ActivityStack mainStack = this.mStackSupervisor.getFocusedStack();
        if (mainStack == null) {
            return true;
        }
        if (changes != 0 && starting == null) {
            starting = mainStack.topRunningActivityLocked();
        }
        if (starting == null) {
            return true;
        }
        boolean kept = starting.ensureActivityConfiguration(changes, false);
        this.mStackSupervisor.ensureActivitiesVisibleLocked(starting, changes, false);
        return kept;
    }

    private void resizeStackWithBoundsFromWindowManager(int stackId, boolean deferResume) {
        Rect newStackBounds = new Rect();
        ActivityStack stack = this.mStackSupervisor.getStack(stackId);
        if (stack == null) {
            StringWriter writer = new StringWriter();
            PrintWriter printWriter = new PrintWriter(writer);
            this.mStackSupervisor.dumpDisplays(printWriter);
            printWriter.flush();
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("stack not found:");
            stringBuilder.append(stackId);
            stringBuilder.append(" displays:");
            stringBuilder.append(writer);
            Log.wtf(str, stringBuilder.toString());
        }
        stack.getBoundsForNewConfiguration(newStackBounds);
        this.mStackSupervisor.resizeStackLocked(stack, !newStackBounds.isEmpty() ? newStackBounds : null, null, null, false, false, deferResume);
    }

    private void updateShouldShowDialogsLocked(Configuration config) {
        boolean z = false;
        boolean inputMethodExists = (config.keyboard == 1 && config.touchscreen == 1 && config.navigation == 1) ? false : true;
        int modeType = config.uiMode & 15;
        boolean uiModeSupportsDialogs = (modeType == 3 || ((modeType == 6 && Build.IS_USER) || modeType == 4 || modeType == 7)) ? false : true;
        boolean hideDialogsSet = Global.getInt(this.mContext.getContentResolver(), "hide_error_dialogs", 0) != 0;
        if (inputMethodExists && uiModeSupportsDialogs && !hideDialogsSet) {
            z = true;
        }
        this.mShowDialogs = z;
    }

    public boolean shouldUpRecreateTask(IBinder token, String destAffinity) {
        boolean shouldUpRecreateTaskLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord srec = ActivityRecord.forTokenLocked(token);
                if (srec != null) {
                    shouldUpRecreateTaskLocked = srec.getStack().shouldUpRecreateTaskLocked(srec, destAffinity);
                } else {
                    resetPriorityAfterLockedSection();
                    return false;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return shouldUpRecreateTaskLocked;
    }

    public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode, Intent resultData) {
        IHwBehaviorCollectManager hwBehaviorCollectManager = HwFrameworkFactory.getHwBehaviorCollectManager();
        boolean z = BehaviorId.ACTIVITYMANAGER_NAVIGATEUPTO;
        hwBehaviorCollectManager.sendBehavior(z);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r != null) {
                    z = r.getStack().navigateUpToLocked(r, destIntent, resultCode, resultData);
                } else {
                    z = null;
                    resetPriorityAfterLockedSection();
                    return false;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    public int getLaunchedFromUid(IBinder activityToken) {
        ActivityRecord srec;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                srec = ActivityRecord.forTokenLocked(activityToken);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (srec == null) {
            return -1;
        }
        return srec.launchedFromUid;
    }

    public String getLaunchedFromPackage(IBinder activityToken) {
        ActivityRecord srec;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                srec = ActivityRecord.forTokenLocked(activityToken);
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        if (srec == null) {
            return null;
        }
        return srec.launchedFromPackage;
    }

    private boolean isReceivingBroadcastLocked(ProcessRecord app, ArraySet<BroadcastQueue> receivingQueues) {
        int N = app.curReceivers.size();
        int i = 0;
        if (N > 0) {
            while (i < N) {
                receivingQueues.add(((BroadcastRecord) app.curReceivers.valueAt(i)).queue);
                i++;
            }
            return true;
        }
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        int length = broadcastQueueArr.length;
        while (i < length) {
            BroadcastQueue queue = broadcastQueueArr[i];
            BroadcastRecord r = queue.mPendingBroadcast;
            if (r != null && r.curApp == app) {
                receivingQueues.add(queue);
            }
            i++;
        }
        return receivingQueues.isEmpty() ^ true;
    }

    Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState, int targetUid, ComponentName targetComponent, String targetProcess) {
        int i = sourceUid;
        String str = sourceProcess;
        int i2 = targetUid;
        ComponentName componentName = targetComponent;
        if (!this.mTrackingAssociations) {
            return null;
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components = (ArrayMap) this.mAssociations.get(i2);
        if (components == null) {
            components = new ArrayMap();
            this.mAssociations.put(i2, components);
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components2 = components;
        SparseArray<ArrayMap<String, Association>> sourceUids = (SparseArray) components2.get(componentName);
        if (sourceUids == null) {
            sourceUids = new SparseArray();
            components2.put(componentName, sourceUids);
        }
        SparseArray<ArrayMap<String, Association>> sourceUids2 = sourceUids;
        ArrayMap<String, Association> sourceProcesses = (ArrayMap) sourceUids2.get(i);
        if (sourceProcesses == null) {
            sourceProcesses = new ArrayMap();
            sourceUids2.put(i, sourceProcesses);
        }
        ArrayMap<String, Association> sourceProcesses2 = sourceProcesses;
        Association ass = (Association) sourceProcesses2.get(str);
        if (ass == null) {
            ass = new Association(i, str, i2, componentName, targetProcess);
            sourceProcesses2.put(str, ass);
        }
        ass.mCount++;
        ass.mNesting++;
        if (ass.mNesting == 1) {
            long uptimeMillis = SystemClock.uptimeMillis();
            ass.mLastStateUptime = uptimeMillis;
            ass.mStartTime = uptimeMillis;
            ass.mLastState = sourceState;
        } else {
            int i3 = sourceState;
        }
        return ass;
    }

    void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent) {
        if (this.mTrackingAssociations) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components = (ArrayMap) this.mAssociations.get(targetUid);
            if (components != null) {
                SparseArray<ArrayMap<String, Association>> sourceUids = (SparseArray) components.get(targetComponent);
                if (sourceUids != null) {
                    ArrayMap<String, Association> sourceProcesses = (ArrayMap) sourceUids.get(sourceUid);
                    if (sourceProcesses != null) {
                        Association ass = (Association) sourceProcesses.get(sourceProcess);
                        if (ass == null) {
                        } else if (ass.mNesting <= 0) {
                            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap = components;
                        } else {
                            ass.mNesting--;
                            if (ass.mNesting == 0) {
                                long uptime = SystemClock.uptimeMillis();
                                ass.mTime += uptime - ass.mStartTime;
                                long[] jArr = ass.mStateTimes;
                                int i = ass.mLastState + 0;
                                jArr[i] = jArr[i] + (uptime - ass.mLastStateUptime);
                                ass.mLastState = 21;
                            }
                        }
                    }
                }
            }
        }
    }

    private void noteUidProcessState(int uid, int state) {
        ActivityManagerService activityManagerService = this;
        int i = uid;
        int i2 = state;
        activityManagerService.mBatteryStatsService.noteUidProcessState(i, i2);
        activityManagerService.mAppOpsService.updateUidProcState(i, i2);
        if (activityManagerService.mTrackingAssociations) {
            int i1 = 0;
            int N1 = activityManagerService.mAssociations.size();
            while (i1 < N1) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents = (ArrayMap) activityManagerService.mAssociations.valueAt(i1);
                int i22 = 0;
                int N2 = targetComponents.size();
                while (i22 < N2) {
                    ArrayMap<String, Association> sourceProcesses = (ArrayMap) ((SparseArray) targetComponents.valueAt(i22)).get(i);
                    if (sourceProcesses != null) {
                        int i4 = 0;
                        int N4 = sourceProcesses.size();
                        while (i4 < N4) {
                            int N12;
                            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2;
                            Association ass = (Association) sourceProcesses.valueAt(i4);
                            if (ass.mNesting >= 1) {
                                long uptime = SystemClock.uptimeMillis();
                                long[] jArr = ass.mStateTimes;
                                int i3 = ass.mLastState + 0;
                                N12 = N1;
                                targetComponents2 = targetComponents;
                                jArr[i3] = jArr[i3] + (uptime - ass.mLastStateUptime);
                                ass.mLastState = i2;
                                ass.mLastStateUptime = uptime;
                            } else {
                                N12 = N1;
                                targetComponents2 = targetComponents;
                            }
                            i4++;
                            N1 = N12;
                            targetComponents = targetComponents2;
                        }
                    }
                    i22++;
                    N1 = N1;
                    targetComponents = targetComponents;
                }
                i1++;
                activityManagerService = this;
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:504:0x0a30  */
    /* JADX WARNING: Removed duplicated region for block: B:501:0x0a29  */
    /* JADX WARNING: Removed duplicated region for block: B:517:0x0aa8  */
    /* JADX WARNING: Removed duplicated region for block: B:511:0x0a41  */
    /* JADX WARNING: Removed duplicated region for block: B:491:0x0a11  */
    /* JADX WARNING: Removed duplicated region for block: B:467:0x09be  */
    /* JADX WARNING: Removed duplicated region for block: B:501:0x0a29  */
    /* JADX WARNING: Removed duplicated region for block: B:504:0x0a30  */
    /* JADX WARNING: Removed duplicated region for block: B:511:0x0a41  */
    /* JADX WARNING: Removed duplicated region for block: B:517:0x0aa8  */
    /* JADX WARNING: Removed duplicated region for block: B:432:0x0959  */
    /* JADX WARNING: Removed duplicated region for block: B:467:0x09be  */
    /* JADX WARNING: Removed duplicated region for block: B:491:0x0a11  */
    /* JADX WARNING: Removed duplicated region for block: B:504:0x0a30  */
    /* JADX WARNING: Removed duplicated region for block: B:501:0x0a29  */
    /* JADX WARNING: Removed duplicated region for block: B:517:0x0aa8  */
    /* JADX WARNING: Removed duplicated region for block: B:511:0x0a41  */
    /* JADX WARNING: Removed duplicated region for block: B:432:0x0959  */
    /* JADX WARNING: Removed duplicated region for block: B:491:0x0a11  */
    /* JADX WARNING: Removed duplicated region for block: B:467:0x09be  */
    /* JADX WARNING: Removed duplicated region for block: B:501:0x0a29  */
    /* JADX WARNING: Removed duplicated region for block: B:504:0x0a30  */
    /* JADX WARNING: Removed duplicated region for block: B:511:0x0a41  */
    /* JADX WARNING: Removed duplicated region for block: B:517:0x0aa8  */
    /* JADX WARNING: Removed duplicated region for block: B:664:0x0e9f  */
    /* JADX WARNING: Removed duplicated region for block: B:693:0x0f0d  */
    /* JADX WARNING: Removed duplicated region for block: B:672:0x0eb8  */
    /* JADX WARNING: Removed duplicated region for block: B:696:0x0f18  */
    /* JADX WARNING: Removed duplicated region for block: B:705:0x0f2d  */
    /* JADX WARNING: Removed duplicated region for block: B:701:0x0f24  */
    /* JADX WARNING: Removed duplicated region for block: B:709:0x0f4c  */
    /* JADX WARNING: Removed duplicated region for block: B:708:0x0f44  */
    /* JADX WARNING: Removed duplicated region for block: B:715:0x0f62  */
    /* JADX WARNING: Removed duplicated region for block: B:712:0x0f56  */
    /* JADX WARNING: Removed duplicated region for block: B:233:0x0500  */
    /* JADX WARNING: Removed duplicated region for block: B:232:0x04fc  */
    /* JADX WARNING: Removed duplicated region for block: B:248:0x0542  */
    /* JADX WARNING: Removed duplicated region for block: B:246:0x053e  */
    /* JADX WARNING: Removed duplicated region for block: B:258:0x0574  */
    /* JADX WARNING: Removed duplicated region for block: B:251:0x0547  */
    /* JADX WARNING: Removed duplicated region for block: B:275:0x05d9  */
    /* JADX WARNING: Removed duplicated region for block: B:290:0x062f  */
    /* JADX WARNING: Removed duplicated region for block: B:309:0x0691  */
    /* JADX WARNING: Removed duplicated region for block: B:316:0x06be  */
    /* JADX WARNING: Removed duplicated region for block: B:326:0x06f8  */
    /* JADX WARNING: Removed duplicated region for block: B:339:0x0741  */
    /* JADX WARNING: Removed duplicated region for block: B:345:0x0776  */
    /* JADX WARNING: Removed duplicated region for block: B:547:0x0bb2  */
    /* JADX WARNING: Removed duplicated region for block: B:646:0x0df5  */
    /* JADX WARNING: Removed duplicated region for block: B:630:0x0d90  */
    /* JADX WARNING: Removed duplicated region for block: B:649:0x0dfb  */
    /* JADX WARNING: Removed duplicated region for block: B:664:0x0e9f  */
    /* JADX WARNING: Removed duplicated region for block: B:672:0x0eb8  */
    /* JADX WARNING: Removed duplicated region for block: B:693:0x0f0d  */
    /* JADX WARNING: Removed duplicated region for block: B:696:0x0f18  */
    /* JADX WARNING: Removed duplicated region for block: B:701:0x0f24  */
    /* JADX WARNING: Removed duplicated region for block: B:705:0x0f2d  */
    /* JADX WARNING: Removed duplicated region for block: B:708:0x0f44  */
    /* JADX WARNING: Removed duplicated region for block: B:709:0x0f4c  */
    /* JADX WARNING: Removed duplicated region for block: B:712:0x0f56  */
    /* JADX WARNING: Removed duplicated region for block: B:715:0x0f62  */
    /* JADX WARNING: Missing block: B:247:0x053f, code:
            if (r3 > true) goto L_0x0543;
     */
    /* JADX WARNING: Missing block: B:408:0x0903, code:
            if (r0.completedAdjSeq < r7.mAdjSeq) goto L_0x0906;
     */
    /* JADX WARNING: Missing block: B:514:0x0a5c, code:
            if (r13 == r5) goto L_0x0a65;
     */
    /* JADX WARNING: Missing block: B:570:0x0c3d, code:
            if (r9.completedAdjSeq < r7.mAdjSeq) goto L_0x0c40;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected boolean computeOomAdjLocked(ProcessRecord app, int cachedAdj, ProcessRecord TOP_APP, boolean doingAll, long now) {
        ProcessRecord processRecord = app;
        ProcessRecord processRecord2 = TOP_APP;
        boolean z = false;
        if (this.mAdjSeq == processRecord.adjSeq) {
            if (processRecord.adjSeq == processRecord.completedAdjSeq) {
                return false;
            }
            processRecord.containsCycle = true;
            return false;
        } else if (processRecord.thread == null) {
            processRecord.adjSeq = this.mAdjSeq;
            processRecord.curSchedGroup = 0;
            processRecord.curProcState = 18;
            processRecord.curRawAdj = 906;
            processRecord.curAdj = 906;
            processRecord.completedAdjSeq = processRecord.adjSeq;
            return false;
        } else {
            processRecord.adjTypeCode = 0;
            processRecord.adjSource = null;
            processRecord.adjTarget = null;
            processRecord.empty = false;
            processRecord.cached = false;
            int activitiesSize = processRecord.activities.size();
            int appUid = processRecord.info.uid;
            int logUid = this.mCurOomAdjUid;
            int prevAppAdj = processRecord.curAdj;
            boolean prevProcState = processRecord.curProcState;
            boolean bConnectTopApp;
            String str;
            StringBuilder stringBuilder;
            int j;
            int i;
            int conni;
            int i2;
            int prevProcState2;
            boolean bConnectTopApp2;
            if (processRecord.maxAdj <= 0) {
                bConnectTopApp = false;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("Making fixed: ");
                    stringBuilder.append(processRecord);
                    reportOomAdjMessageLocked(str, stringBuilder.toString());
                }
                processRecord.adjType = "fixed";
                processRecord.adjSeq = this.mAdjSeq;
                processRecord.curRawAdj = processRecord.maxAdj;
                processRecord.foregroundActivities = false;
                processRecord.curSchedGroup = 2;
                processRecord.curProcState = 0;
                processRecord.systemNoUi = true;
                if (processRecord == processRecord2) {
                    processRecord.systemNoUi = false;
                    processRecord.curSchedGroup = 3;
                    processRecord.adjType = "pers-top-activity";
                } else if (processRecord.hasTopUi) {
                    processRecord.systemNoUi = false;
                    processRecord.adjType = "pers-top-ui";
                } else if (activitiesSize > 0) {
                    for (j = 0; j < activitiesSize; j++) {
                        if (((ActivityRecord) processRecord.activities.get(j)).visible) {
                            processRecord.systemNoUi = false;
                        }
                    }
                }
                if (processRecord.systemNoUi) {
                    i = 1;
                } else {
                    i = 1;
                    if (this.mWakefulness == 1) {
                        processRecord.curProcState = 1;
                        processRecord.curSchedGroup = 3;
                    } else {
                        processRecord.curProcState = 4;
                        processRecord.curSchedGroup = 1;
                    }
                }
                j = processRecord.services.size() - i;
                while (j >= 0) {
                    ServiceRecord s = (ServiceRecord) processRecord.services.valueAt(j);
                    conni = s.connections.size() - 1;
                    while (conni >= 0) {
                        int prevProcState3;
                        ArrayList<ConnectionRecord> clist = (ArrayList) s.connections.valueAt(conni);
                        boolean bConnectTopApp3 = bConnectTopApp;
                        i2 = z;
                        while (i2 < clist.size()) {
                            ConnectionRecord cr = (ConnectionRecord) clist.get(i2);
                            ServiceRecord s2 = s;
                            s = cr.binding.client;
                            prevProcState3 = prevProcState2;
                            if ((cr.flags & 32) != 0) {
                                ConnectionRecord connectionRecord = cr;
                            } else if ((cr.flags & 4) == 0) {
                                if (s.curSchedGroup == 5) {
                                    processRecord.curSchedGroup = 5;
                                }
                            }
                            if (s == processRecord2) {
                                bConnectTopApp3 = true;
                            }
                            i2++;
                            s = s2;
                            prevProcState2 = prevProcState3;
                        }
                        prevProcState3 = prevProcState2;
                        conni--;
                        bConnectTopApp = bConnectTopApp3;
                        z = false;
                    }
                    j--;
                    z = false;
                }
                for (j = processRecord.pubProviders.size() - 1; j >= 0; j--) {
                    ContentProviderRecord cpr = (ContentProviderRecord) processRecord.pubProviders.valueAt(j);
                    for (prevProcState2 = cpr.connections.size() - 1; prevProcState2 >= 0; prevProcState2--) {
                        ProcessRecord client = ((ContentProviderConnection) cpr.connections.get(prevProcState2)).client;
                        bConnectTopApp2 = bConnectTopApp;
                        if (client.curSchedGroup == 5) {
                            processRecord.curSchedGroup = 5;
                        }
                        if (client == processRecord2) {
                            bConnectTopApp = true;
                        } else {
                            bConnectTopApp = bConnectTopApp2;
                        }
                    }
                    bConnectTopApp2 = bConnectTopApp;
                }
                if (this.mCpusetSwitch) {
                    setWhiteListProcessGroup(processRecord, processRecord2, bConnectTopApp);
                }
                processRecord.curAdj = processRecord.maxAdj;
                processRecord.completedAdjSeq = processRecord.adjSeq;
                return processRecord.curAdj < prevAppAdj;
            }
            StringBuilder stringBuilder2;
            boolean adj;
            boolean adj2;
            int prevAppAdj2;
            boolean foregroundActivities;
            int schedGroup;
            StringBuilder stringBuilder3;
            String str2;
            StringBuilder stringBuilder4;
            String mayBeTopType;
            Object mayBeTopSource;
            Object mayBeTopTarget;
            boolean mayBeTop;
            boolean bConnectTopApp4;
            int i3;
            boolean prevProcState4;
            int prevAppAdj3;
            Object mayBeTopSource2;
            Object mayBeTopTarget2;
            boolean bConnectTopApp5;
            boolean foregroundActivities2;
            Object obj;
            int schedGroup2;
            boolean bConnectTopApp6;
            Object mayBeTopSource3;
            Object mayBeTopSource4;
            boolean z2;
            boolean prevProcState5 = prevProcState2;
            processRecord.systemNoUi = false;
            conni = this.mTopProcessState;
            bConnectTopApp = processRecord == processRecord2;
            this.mTmpBroadcastQueue.clear();
            String str3;
            if (conni == 2 && processRecord == processRecord2) {
                i = 3;
                processRecord.adjType = "top-activity";
                prevProcState2 = conni;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    adj = false;
                    stringBuilder2.append("Making top: ");
                    stringBuilder2.append(processRecord);
                    reportOomAdjMessageLocked(str3, stringBuilder2.toString());
                } else {
                    adj = false;
                }
            } else if (processRecord.runningRemoteAnimation) {
                boolean adj3;
                i = 3;
                processRecord.adjType = "running-remote-anim";
                prevProcState2 = conni;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    adj3 = true;
                    stringBuilder2.append("Making running remote anim: ");
                    stringBuilder2.append(processRecord);
                    reportOomAdjMessageLocked(str3, stringBuilder2.toString());
                } else {
                    adj3 = true;
                }
                adj = adj3;
            } else if (processRecord.instr != null) {
                boolean adj4;
                i = 2;
                processRecord.adjType = "instrumentation";
                prevProcState2 = true;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    adj4 = false;
                    stringBuilder2.append("Making instrumentation: ");
                    stringBuilder2.append(processRecord);
                    reportOomAdjMessageLocked(str3, stringBuilder2.toString());
                } else {
                    adj4 = false;
                }
                adj = adj4;
            } else if (isReceivingBroadcastLocked(processRecord, this.mTmpBroadcastQueue)) {
                boolean adj5;
                i = (this.mTmpBroadcastQueue.contains(this.mFgBroadcastQueue) || ((this.mFgThirdAppBroadcastQueue != null && this.mTmpBroadcastQueue.contains(this.mFgThirdAppBroadcastQueue)) || (this.mFgKeyAppBroadcastQueue != null && this.mTmpBroadcastQueue.contains(this.mFgKeyAppBroadcastQueue)))) ? 2 : 0;
                processRecord.adjType = "broadcast";
                prevProcState2 = true;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    adj5 = false;
                    stringBuilder2.append("Making broadcast: ");
                    stringBuilder2.append(processRecord);
                    reportOomAdjMessageLocked(str3, stringBuilder2.toString());
                } else {
                    adj5 = false;
                }
                adj = adj5;
            } else if (processRecord.executingServices.size() > 0) {
                boolean adj6;
                i = processRecord.execServicesFg ? 2 : 0;
                processRecord.adjType = "exec-service";
                prevProcState2 = true;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    adj6 = false;
                    stringBuilder2.append("Making exec-service: ");
                    stringBuilder2.append(processRecord);
                    reportOomAdjMessageLocked(str3, stringBuilder2.toString());
                } else {
                    adj6 = false;
                }
                adj = adj6;
            } else if (processRecord == processRecord2) {
                boolean adj7;
                i = 0;
                processRecord.adjType = "top-sleeping";
                prevProcState2 = conni;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    adj7 = false;
                    stringBuilder2.append("Making top (sleeping): ");
                    stringBuilder2.append(processRecord);
                    reportOomAdjMessageLocked(str3, stringBuilder2.toString());
                } else {
                    adj7 = false;
                }
                adj = adj7;
            } else {
                boolean adj8;
                i = 0;
                adj2 = cachedAdj;
                prevProcState2 = true;
                processRecord.cached = true;
                processRecord.empty = true;
                processRecord.adjType = "cch-empty";
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                    str3 = TAG;
                    stringBuilder2 = new StringBuilder();
                    adj8 = adj2;
                    stringBuilder2.append("Making empty: ");
                    stringBuilder2.append(processRecord);
                    reportOomAdjMessageLocked(str3, stringBuilder2.toString());
                } else {
                    adj8 = adj2;
                }
                adj = adj8;
            }
            int i4;
            if (bConnectTopApp || activitiesSize <= 0) {
                prevAppAdj2 = prevAppAdj;
                i4 = activitiesSize;
                foregroundActivities = bConnectTopApp;
                schedGroup = i;
            } else {
                int minLayer = 99;
                boolean foregroundActivities3 = bConnectTopApp;
                schedGroup = i;
                i = adj;
                i2 = 0;
                while (i2 < activitiesSize) {
                    ActivityRecord r = (ActivityRecord) processRecord.activities.get(i2);
                    prevAppAdj2 = prevAppAdj;
                    if (r.app != processRecord) {
                        prevAppAdj = TAG;
                        i4 = activitiesSize;
                        stringBuilder3 = new StringBuilder();
                        stringBuilder3.append("Found activity ");
                        stringBuilder3.append(r);
                        stringBuilder3.append(" in proc activity list using ");
                        stringBuilder3.append(r.app);
                        stringBuilder3.append(" instead of expected ");
                        stringBuilder3.append(processRecord);
                        Log.e(prevAppAdj, stringBuilder3.toString());
                        if (r.app == 0 || r.app.uid == processRecord.uid) {
                            r.setProcess(processRecord);
                        } else {
                            i2++;
                            prevAppAdj = prevAppAdj2;
                            activitiesSize = i4;
                            processRecord2 = TOP_APP;
                        }
                    } else {
                        i4 = activitiesSize;
                    }
                    StringBuilder stringBuilder5;
                    boolean z3;
                    if (r.visible != 0) {
                        if (i > true) {
                            i = true;
                            processRecord.adjType = "vis-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid == appUid) {
                                prevAppAdj = TAG;
                                stringBuilder5 = new StringBuilder();
                                stringBuilder5.append("Raise adj to vis-activity: ");
                                stringBuilder5.append(processRecord);
                                reportOomAdjMessageLocked(prevAppAdj, stringBuilder5.toString());
                            }
                        }
                        if (prevProcState2 > conni) {
                            prevProcState2 = conni;
                            processRecord.adjType = "vis-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid == appUid) {
                                prevAppAdj = TAG;
                                stringBuilder5 = new StringBuilder();
                                stringBuilder5.append("Raise procstate to vis-activity (top): ");
                                stringBuilder5.append(processRecord);
                                reportOomAdjMessageLocked(prevAppAdj, stringBuilder5.toString());
                            }
                        }
                        if (schedGroup < 2) {
                            schedGroup = 2;
                        }
                        processRecord.cached = false;
                        processRecord.empty = false;
                        TaskRecord task = r.getTask();
                        if (task != null && 99 > null) {
                            activitiesSize = task.mLayerRank;
                            if (activitiesSize >= 0 && 99 > activitiesSize) {
                                minLayer = activitiesSize;
                            }
                        }
                        bConnectTopApp = true;
                        if (i != true) {
                            adj = i + minLayer;
                            foregroundActivities = bConnectTopApp;
                        } else {
                            StringBuilder stringBuilder6;
                            String str4;
                            StringBuilder stringBuilder7;
                            String mayBeTopType2;
                            foregroundActivities = bConnectTopApp;
                            if (prevProcState2 > true && processRecord.recentTasks.size() > 0) {
                                prevProcState2 = true;
                                processRecord.adjType = "cch-rec";
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                    str2 = TAG;
                                    stringBuilder4 = new StringBuilder();
                                    stringBuilder4.append("Raise procstate to cached recent: ");
                                    stringBuilder4.append(processRecord);
                                    reportOomAdjMessageLocked(str2, stringBuilder4.toString());
                                }
                            }
                            if (i > true) {
                            }
                            if (!processRecord.foregroundServices) {
                                i = true;
                                prevProcState2 = true;
                                processRecord.cached = false;
                                processRecord.adjType = "fg-service";
                                if (!this.mCpusetSwitch) {
                                    schedGroup = 2;
                                }
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                    str2 = TAG;
                                    stringBuilder2 = new StringBuilder();
                                    stringBuilder2.append("Raise to fg service: ");
                                    stringBuilder2.append(processRecord);
                                    reportOomAdjMessageLocked(str2, stringBuilder2.toString());
                                }
                            } else if (processRecord.hasOverlayUi) {
                                i = true;
                                prevProcState2 = true;
                                processRecord.cached = false;
                                processRecord.adjType = "has-overlay-ui";
                                schedGroup = 2;
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                    str2 = TAG;
                                    stringBuilder2 = new StringBuilder();
                                    stringBuilder2.append("Raise to overlay ui: ");
                                    stringBuilder2.append(processRecord);
                                    reportOomAdjMessageLocked(str2, stringBuilder2.toString());
                                }
                            }
                            if ((i > true || procState > true) && processRecord.forcingToImportant != null) {
                                i = true;
                                prevProcState2 = true;
                                processRecord.cached = false;
                                processRecord.adjType = "force-imp";
                                processRecord.adjSource = processRecord.forcingToImportant;
                                schedGroup = 2;
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                    str2 = TAG;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("Raise to force imp: ");
                                    stringBuilder3.append(processRecord);
                                    reportOomAdjMessageLocked(str2, stringBuilder3.toString());
                                }
                            }
                            if (processRecord == this.mHeavyWeightProcess) {
                                if (i > true) {
                                    processRecord.cached = false;
                                    processRecord.adjType = "heavy";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str = TAG;
                                        stringBuilder6 = new StringBuilder();
                                        stringBuilder6.append("Raise adj to heavy: ");
                                        stringBuilder6.append(processRecord);
                                        reportOomAdjMessageLocked(str, stringBuilder6.toString());
                                    }
                                    i = true;
                                    schedGroup = 0;
                                }
                                if (prevProcState2 > true) {
                                    prevProcState2 = true;
                                    processRecord.adjType = "heavy";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str2 = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("Raise procstate to heavy: ");
                                        stringBuilder.append(processRecord);
                                        reportOomAdjMessageLocked(str2, stringBuilder.toString());
                                    }
                                }
                            }
                            if (processRecord == this.mHomeProcess) {
                                if (i > true) {
                                    processRecord.cached = false;
                                    processRecord.adjType = "home";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str = TAG;
                                        stringBuilder6 = new StringBuilder();
                                        stringBuilder6.append("Raise adj to home: ");
                                        stringBuilder6.append(processRecord);
                                        reportOomAdjMessageLocked(str, stringBuilder6.toString());
                                    }
                                    i = true;
                                    schedGroup = 0;
                                }
                                if (prevProcState2 > true) {
                                    prevProcState2 = true;
                                    processRecord.adjType = "home";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str2 = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("Raise procstate to home: ");
                                        stringBuilder.append(processRecord);
                                        reportOomAdjMessageLocked(str2, stringBuilder.toString());
                                    }
                                }
                            }
                            if (processRecord == this.mPreviousProcess && processRecord.activities.size() > 0) {
                                if (i > true) {
                                    processRecord.cached = false;
                                    processRecord.adjType = "previous";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str = TAG;
                                        stringBuilder6 = new StringBuilder();
                                        stringBuilder6.append("Raise adj to prev: ");
                                        stringBuilder6.append(processRecord);
                                        reportOomAdjMessageLocked(str, stringBuilder6.toString());
                                    }
                                    i = true;
                                    schedGroup = 0;
                                }
                                if (prevProcState2 > true) {
                                    prevProcState2 = true;
                                    processRecord.adjType = "previous";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str2 = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("Raise procstate to prev: ");
                                        stringBuilder.append(processRecord);
                                        reportOomAdjMessageLocked(str2, stringBuilder.toString());
                                    }
                                }
                            }
                            processRecord.curRawAdj = i;
                            processRecord.hasStartedServices = false;
                            processRecord.adjSeq = this.mAdjSeq;
                            if (this.mBackupTarget != null && processRecord == this.mBackupTarget.app) {
                                if (i > true) {
                                    if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                        str2 = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("oom BACKUP_APP_ADJ for ");
                                        stringBuilder.append(processRecord);
                                        Slog.v(str2, stringBuilder.toString());
                                    }
                                    if (prevProcState2 > true) {
                                        prevProcState2 = true;
                                    }
                                    processRecord.adjType = HealthServiceWrapper.INSTANCE_HEALTHD;
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str4 = TAG;
                                        stringBuilder7 = new StringBuilder();
                                        stringBuilder7.append("Raise adj to backup: ");
                                        stringBuilder7.append(processRecord);
                                        reportOomAdjMessageLocked(str4, stringBuilder7.toString());
                                    }
                                    processRecord.cached = false;
                                    i = true;
                                }
                                if (prevProcState2 > true) {
                                    prevProcState2 = true;
                                    processRecord.adjType = HealthServiceWrapper.INSTANCE_HEALTHD;
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                        str2 = TAG;
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("Raise procstate to backup: ");
                                        stringBuilder.append(processRecord);
                                        reportOomAdjMessageLocked(str2, stringBuilder.toString());
                                    }
                                }
                            }
                            bConnectTopApp = false;
                            adj2 = false;
                            mayBeTopType = null;
                            mayBeTopSource = null;
                            mayBeTopTarget = null;
                            prevAppAdj = processRecord.services.size() - 1;
                            while (prevAppAdj >= 0) {
                                if (i <= false && schedGroup != 0 && prevProcState2 <= true) {
                                    mayBeTop = bConnectTopApp;
                                    bConnectTopApp4 = adj2;
                                    i3 = conni;
                                    str2 = mayBeTopType;
                                    prevProcState4 = prevProcState5;
                                    prevAppAdj3 = prevAppAdj2;
                                    activitiesSize = logUid;
                                    logUid = TOP_APP;
                                    break;
                                }
                                int is;
                                ServiceRecord s3 = (ServiceRecord) processRecord.services.valueAt(prevAppAdj);
                                mayBeTop = bConnectTopApp;
                                if (s3.startRequested) {
                                    processRecord.hasStartedServices = true;
                                    if (prevProcState2 > true) {
                                        boolean procState;
                                        processRecord.adjType = "started-services";
                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                            String str5 = TAG;
                                            procState = true;
                                            bConnectTopApp = new StringBuilder();
                                            bConnectTopApp4 = adj2;
                                            bConnectTopApp.append("Raise procstate to started service: ");
                                            bConnectTopApp.append(processRecord);
                                            reportOomAdjMessageLocked(str5, bConnectTopApp.toString());
                                        } else {
                                            procState = true;
                                            bConnectTopApp4 = adj2;
                                        }
                                        prevProcState2 = procState;
                                    } else {
                                        bConnectTopApp4 = adj2;
                                    }
                                    if (!processRecord.hasShownUi || processRecord == this.mHomeProcess) {
                                        boolean procState2 = prevProcState2;
                                        is = prevAppAdj;
                                        if (now < s3.lastActivity + this.mConstants.MAX_SERVICE_INACTIVITY && i > true) {
                                            processRecord.adjType = "started-services";
                                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                                str4 = TAG;
                                                stringBuilder7 = new StringBuilder();
                                                stringBuilder7.append("Raise adj to started service: ");
                                                stringBuilder7.append(processRecord);
                                                reportOomAdjMessageLocked(str4, stringBuilder7.toString());
                                            }
                                            processRecord.cached = false;
                                            i = true;
                                        }
                                        if (i > true) {
                                            processRecord.adjType = "cch-started-services";
                                        }
                                        prevProcState2 = procState2;
                                    } else {
                                        if (i > true) {
                                            processRecord.adjType = "cch-started-ui-services";
                                        }
                                        is = prevAppAdj;
                                    }
                                } else {
                                    bConnectTopApp4 = adj2;
                                    is = prevAppAdj;
                                }
                                bConnectTopApp = s3.connections.size() - true;
                                adj2 = bConnectTopApp4;
                                while (true) {
                                    prevAppAdj = bConnectTopApp;
                                    if (prevAppAdj < false || (adj > false && schedGroup != 0 && procState <= true)) {
                                        bConnectTopApp = mayBeTopType;
                                        activitiesSize = logUid;
                                        logUid = TOP_APP;
                                        prevAppAdj = is - 1;
                                        logUid = activitiesSize;
                                        conni = conni;
                                        prevProcState5 = prevProcState5;
                                        prevAppAdj2 = prevAppAdj2;
                                        mayBeTopType = bConnectTopApp;
                                        bConnectTopApp = mayBeTop;
                                    } else {
                                        boolean adj9;
                                        int schedGroup3;
                                        bConnectTopApp = (ArrayList) s3.connections.valueAt(prevAppAdj);
                                        bConnectTopApp2 = adj2;
                                        Object mayBeTopTarget3 = mayBeTopTarget;
                                        j = 0;
                                        mayBeTopTarget = mayBeTopSource;
                                        String mayBeTopType3 = mayBeTopType;
                                        activitiesSize = schedGroup;
                                        z = adj9;
                                        while (true) {
                                            i = j;
                                            if (i >= bConnectTopApp.size() || (z > false && activitiesSize != 0 && prevProcState2 <= true)) {
                                                schedGroup3 = activitiesSize;
                                                activitiesSize = logUid;
                                                logUid = TOP_APP;
                                                bConnectTopApp = prevAppAdj - 1;
                                                adj9 = z;
                                                logUid = activitiesSize;
                                                mayBeTopType = mayBeTopType3;
                                                mayBeTopSource = mayBeTopTarget;
                                                prevProcState2 = prevProcState2;
                                                mayBeTopTarget = mayBeTopTarget3;
                                                adj2 = bConnectTopApp2;
                                                is = is;
                                                conni = conni;
                                                schedGroup = schedGroup3;
                                                prevProcState5 = prevProcState5;
                                                prevAppAdj2 = prevAppAdj2;
                                            } else {
                                                int i5;
                                                int conni2;
                                                int appUid2;
                                                int logUid2;
                                                int is2;
                                                ArrayList<ConnectionRecord> clist2;
                                                int schedGroup4;
                                                ConnectionRecord cr2 = (ConnectionRecord) bConnectTopApp.get(i);
                                                ArrayList<ConnectionRecord> clist3 = bConnectTopApp;
                                                if (cr2.binding.client == processRecord) {
                                                    i5 = i;
                                                    conni2 = prevAppAdj;
                                                    appUid2 = appUid;
                                                    logUid2 = logUid;
                                                    i3 = conni;
                                                    schedGroup3 = activitiesSize;
                                                    prevProcState4 = prevProcState5;
                                                    prevAppAdj3 = prevAppAdj2;
                                                    is2 = is;
                                                    clist2 = clist3;
                                                    prevProcState5 = prevProcState2;
                                                } else {
                                                    ConnectionRecord cr3;
                                                    if (cr2.flags & 32) {
                                                        i5 = i;
                                                        conni2 = prevAppAdj;
                                                        i3 = conni;
                                                        schedGroup3 = activitiesSize;
                                                        prevProcState4 = prevProcState5;
                                                        prevAppAdj3 = prevAppAdj2;
                                                        is2 = is;
                                                        clist2 = clist3;
                                                        cr3 = cr2;
                                                        prevProcState5 = prevProcState2;
                                                        activitiesSize = logUid;
                                                        logUid = TOP_APP;
                                                        schedGroup4 = schedGroup3;
                                                    } else {
                                                        boolean clientProcState;
                                                        String adjType;
                                                        boolean procState3;
                                                        ProcessRecord client2 = cr2.binding.client;
                                                        if (this.mCpusetSwitch) {
                                                            processRecord.curSchedGroup = activitiesSize;
                                                        }
                                                        clist2 = clist3;
                                                        ProcessRecord client3 = client2;
                                                        i3 = conni;
                                                        schedGroup3 = activitiesSize;
                                                        cr3 = cr2;
                                                        i5 = i;
                                                        prevProcState4 = prevProcState5;
                                                        prevProcState5 = prevProcState2;
                                                        conni2 = prevAppAdj;
                                                        prevAppAdj3 = prevAppAdj2;
                                                        is2 = is;
                                                        appUid2 = appUid;
                                                        logUid2 = logUid;
                                                        computeOomAdjLocked(client3, cachedAdj, TOP_APP, doingAll, now);
                                                        bConnectTopApp = client3;
                                                        if (bConnectTopApp.containsCycle) {
                                                            processRecord.containsCycle = true;
                                                        }
                                                        adj2 = bConnectTopApp.curRawAdj;
                                                        adj9 = bConnectTopApp.curProcState;
                                                        if (adj9 >= true) {
                                                            adj9 = true;
                                                        }
                                                        prevProcState2 = null;
                                                        if ((cr3.flags & 16) == 0) {
                                                            clientProcState = adj9;
                                                            adjType = null;
                                                        } else if (!processRecord.hasShownUi || processRecord == this.mHomeProcess) {
                                                            clientProcState = adj9;
                                                            adjType = null;
                                                            if (now >= s3.lastActivity + this.mConstants.MAX_SERVICE_INACTIVITY) {
                                                                if (z > adj2) {
                                                                    prevProcState2 = "cch-bound-services";
                                                                } else {
                                                                    prevProcState2 = adjType;
                                                                }
                                                                adj2 = z;
                                                                adj9 = clientProcState;
                                                                if (z > adj2) {
                                                                    if (!processRecord.hasShownUi || processRecord == this.mHomeProcess || adj2 <= true) {
                                                                        if ((cr3.flags & 72) == 0) {
                                                                            if ((cr3.flags & 1073741824) != 0) {
                                                                                z3 = true;
                                                                                if (adj2 < true && z > true) {
                                                                                    z3 = true;
                                                                                }
                                                                            } else {
                                                                                z3 = true;
                                                                            }
                                                                            z3 = adj2 >= z3 ? adj2 : z > true ? Math.max(adj2, 100) : z;
                                                                        } else if (adj2 >= true) {
                                                                            z3 = adj2;
                                                                        } else {
                                                                            z3 = true;
                                                                            schedGroup3 = 2;
                                                                            prevProcState5 = false;
                                                                        }
                                                                        if (!bConnectTopApp.cached) {
                                                                            processRecord.cached = false;
                                                                        }
                                                                        if (z > z3) {
                                                                            procState3 = z3;
                                                                            prevAppAdj = "service";
                                                                            z = procState3;
                                                                            procState3 = prevProcState5;
                                                                            prevProcState2 = schedGroup3;
                                                                            if ((cr3.flags & 8388612) != 0) {
                                                                                if (bConnectTopApp.curSchedGroup > prevProcState2) {
                                                                                    if ((cr3.flags & 64) != 0) {
                                                                                        prevProcState2 = bConnectTopApp.curSchedGroup;
                                                                                    } else {
                                                                                        prevProcState2 = 2;
                                                                                    }
                                                                                }
                                                                                if (bConnectTopApp == TOP_APP) {
                                                                                    bConnectTopApp2 = true;
                                                                                }
                                                                                ProcessRecord client4;
                                                                                if (adj9 > true) {
                                                                                    client4 = bConnectTopApp;
                                                                                    activitiesSize = prevProcState2;
                                                                                } else if (adj9) {
                                                                                    mayBeTopType3 = "service";
                                                                                    client4 = bConnectTopApp;
                                                                                    Object mayBeTopSource5 = cr3.binding.client;
                                                                                    adj9 = true;
                                                                                    mayBeTopTarget3 = s3.name;
                                                                                    mayBeTop = true;
                                                                                    mayBeTopTarget = mayBeTopSource5;
                                                                                } else {
                                                                                    client4 = bConnectTopApp;
                                                                                    if (cr3.flags & true) {
                                                                                        adj9 = true;
                                                                                    } else if (this.mWakefulness && (cr3.flags & true)) {
                                                                                        adj9 = true;
                                                                                    } else {
                                                                                        adj9 = true;
                                                                                    }
                                                                                    activitiesSize = prevProcState2;
                                                                                }
                                                                                if (procState3 > adj9) {
                                                                                    prevProcState2 = adj9;
                                                                                    if (prevAppAdj == 0) {
                                                                                        prevAppAdj = "service";
                                                                                    }
                                                                                } else {
                                                                                    prevProcState2 = procState3;
                                                                                }
                                                                                if (prevProcState2 < true && (cr3.flags & 536870912) != 0) {
                                                                                    processRecord.pendingUiClean = true;
                                                                                }
                                                                                if (prevAppAdj != 0) {
                                                                                    processRecord.adjType = prevAppAdj;
                                                                                    processRecord.adjTypeCode = 2;
                                                                                    processRecord.adjSource = cr3.binding.client;
                                                                                    processRecord.adjSourceProcState = adj9;
                                                                                    processRecord.adjTarget = s3.name;
                                                                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON) {
                                                                                        schedGroup4 = activitiesSize;
                                                                                        appUid = appUid2;
                                                                                        activitiesSize = logUid2;
                                                                                    } else {
                                                                                        schedGroup4 = activitiesSize;
                                                                                        appUid = appUid2;
                                                                                        activitiesSize = logUid2;
                                                                                    }
                                                                                    bConnectTopApp = TAG;
                                                                                    cr2 = new StringBuilder();
                                                                                    boolean clientProcState2 = adj9;
                                                                                    cr2.append("Raise to ");
                                                                                    cr2.append(prevAppAdj);
                                                                                    cr2.append(": ");
                                                                                    cr2.append(processRecord);
                                                                                    cr2.append(", due to ");
                                                                                    cr2.append(cr3.binding.client);
                                                                                    cr2.append(" adj=");
                                                                                    cr2.append(z);
                                                                                    cr2.append(" procState=");
                                                                                    cr2.append(ProcessList.makeProcStateString(prevProcState2));
                                                                                    reportOomAdjMessageLocked(bConnectTopApp, cr2.toString());
                                                                                } else {
                                                                                    schedGroup4 = activitiesSize;
                                                                                    appUid = appUid2;
                                                                                    activitiesSize = logUid2;
                                                                                }
                                                                            } else {
                                                                                logUid = TOP_APP;
                                                                                Object obj2 = bConnectTopApp;
                                                                                if (cr3.flags & true) {
                                                                                    if (adj9 < true) {
                                                                                        adj9 = true;
                                                                                    }
                                                                                } else if (adj9 < true) {
                                                                                    adj9 = true;
                                                                                }
                                                                            }
                                                                            activitiesSize = prevProcState2;
                                                                            if (procState3 > adj9) {
                                                                            }
                                                                            processRecord.pendingUiClean = true;
                                                                            if (prevAppAdj != 0) {
                                                                            }
                                                                        }
                                                                    } else if (z >= true) {
                                                                        prevProcState2 = "cch-bound-ui-services";
                                                                    }
                                                                }
                                                                prevAppAdj = prevProcState2;
                                                                procState3 = prevProcState5;
                                                                prevProcState2 = schedGroup3;
                                                                if ((cr3.flags & 8388612) != 0) {
                                                                }
                                                                activitiesSize = prevProcState2;
                                                                if (procState3 > adj9) {
                                                                }
                                                                processRecord.pendingUiClean = true;
                                                                if (prevAppAdj != 0) {
                                                                }
                                                            }
                                                        } else {
                                                            if (z > adj2) {
                                                                prevProcState2 = "cch-bound-ui-services";
                                                            }
                                                            processRecord.cached = false;
                                                            adj2 = z;
                                                            adj9 = prevProcState5;
                                                            if (z > adj2) {
                                                            }
                                                            prevAppAdj = prevProcState2;
                                                            procState3 = prevProcState5;
                                                            prevProcState2 = schedGroup3;
                                                            if ((cr3.flags & 8388612) != 0) {
                                                            }
                                                            activitiesSize = prevProcState2;
                                                            if (procState3 > adj9) {
                                                            }
                                                            processRecord.pendingUiClean = true;
                                                            if (prevAppAdj != 0) {
                                                            }
                                                        }
                                                        prevProcState2 = adjType;
                                                        adj9 = clientProcState;
                                                        if (z > adj2) {
                                                        }
                                                        prevAppAdj = prevProcState2;
                                                        procState3 = prevProcState5;
                                                        prevProcState2 = schedGroup3;
                                                        if ((cr3.flags & 8388612) != 0) {
                                                        }
                                                        activitiesSize = prevProcState2;
                                                        if (procState3 > adj9) {
                                                        }
                                                        processRecord.pendingUiClean = true;
                                                        if (prevAppAdj != 0) {
                                                        }
                                                    }
                                                    if (cr3.flags & true) {
                                                        processRecord.treatLikeActivity = true;
                                                    }
                                                    bConnectTopApp = cr3.activity;
                                                    if ((cr3.flags & 128) != 0 && bConnectTopApp && adj <= false && (bConnectTopApp.visible || bConnectTopApp.isState(ActivityState.RESUMED, ActivityState.PAUSING))) {
                                                        if ((cr3.flags & 4) == 0) {
                                                            if ((cr3.flags & 64) != 0) {
                                                                schedGroup4 = 4;
                                                            } else {
                                                                schedGroup4 = 2;
                                                            }
                                                        }
                                                        processRecord.cached = false;
                                                        processRecord.adjType = "service";
                                                        processRecord.adjTypeCode = 2;
                                                        processRecord.adjSource = bConnectTopApp;
                                                        processRecord.adjSourceProcState = prevProcState2;
                                                        processRecord.adjTarget = s3.name;
                                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                                            str = TAG;
                                                            stringBuilder6 = new StringBuilder();
                                                            stringBuilder6.append("Raise to service w/activity: ");
                                                            stringBuilder6.append(processRecord);
                                                            reportOomAdjMessageLocked(str, stringBuilder6.toString());
                                                        }
                                                        z = false;
                                                    }
                                                    j = i5 + 1;
                                                    logUid = activitiesSize;
                                                    bConnectTopApp = clist2;
                                                    is = is2;
                                                    prevAppAdj = conni2;
                                                    conni = i3;
                                                    prevProcState5 = prevProcState4;
                                                    prevAppAdj2 = prevAppAdj3;
                                                    activitiesSize = schedGroup4;
                                                }
                                                logUid = TOP_APP;
                                                prevProcState2 = prevProcState5;
                                                schedGroup4 = schedGroup3;
                                                appUid = appUid2;
                                                activitiesSize = logUid2;
                                                j = i5 + 1;
                                                logUid = activitiesSize;
                                                bConnectTopApp = clist2;
                                                is = is2;
                                                prevAppAdj = conni2;
                                                conni = i3;
                                                prevProcState5 = prevProcState4;
                                                prevAppAdj2 = prevAppAdj3;
                                                activitiesSize = schedGroup4;
                                            }
                                        }
                                        schedGroup3 = activitiesSize;
                                        activitiesSize = logUid;
                                        logUid = TOP_APP;
                                        bConnectTopApp = prevAppAdj - 1;
                                        adj9 = z;
                                        logUid = activitiesSize;
                                        mayBeTopType = mayBeTopType3;
                                        mayBeTopSource = mayBeTopTarget;
                                        prevProcState2 = prevProcState2;
                                        mayBeTopTarget = mayBeTopTarget3;
                                        adj2 = bConnectTopApp2;
                                        is = is;
                                        conni = conni;
                                        schedGroup = schedGroup3;
                                        prevProcState5 = prevProcState5;
                                        prevAppAdj2 = prevAppAdj2;
                                    }
                                }
                                bConnectTopApp = mayBeTopType;
                                activitiesSize = logUid;
                                logUid = TOP_APP;
                                prevAppAdj = is - 1;
                                logUid = activitiesSize;
                                conni = conni;
                                prevProcState5 = prevProcState5;
                                prevAppAdj2 = prevAppAdj2;
                                mayBeTopType = bConnectTopApp;
                                bConnectTopApp = mayBeTop;
                            }
                            mayBeTop = bConnectTopApp;
                            bConnectTopApp4 = adj2;
                            i3 = conni;
                            str2 = mayBeTopType;
                            prevProcState4 = prevProcState5;
                            prevAppAdj3 = prevAppAdj2;
                            activitiesSize = logUid;
                            logUid = TOP_APP;
                            j = processRecord.pubProviders.size() - 1;
                            mayBeTopSource2 = mayBeTopSource;
                            mayBeTopTarget2 = mayBeTopTarget;
                            bConnectTopApp5 = bConnectTopApp4;
                            while (j >= 0) {
                                int appUid3;
                                ContentProviderRecord cpr2;
                                int provi;
                                int i6;
                                if (i <= 0 && schedGroup != 0) {
                                    appUid3 = appUid;
                                    if (prevProcState2 <= 2) {
                                        Object obj3 = logUid;
                                        foregroundActivities2 = foregroundActivities;
                                        logUid = appUid3;
                                        break;
                                    }
                                }
                                appUid3 = appUid;
                                ContentProviderRecord cpr3 = (ContentProviderRecord) processRecord.pubProviders.valueAt(j);
                                int provi2 = j;
                                j = cpr3.connections.size() - 1;
                                String mayBeTopType4 = str2;
                                mayBeTopSource = mayBeTopSource2;
                                mayBeTopTarget = mayBeTopTarget2;
                                prevProcState5 = bConnectTopApp5;
                                conni = i;
                                minLayer = prevProcState2;
                                while (true) {
                                    prevAppAdj = j;
                                    if (prevAppAdj >= 0) {
                                        if (conni <= 0 && schedGroup != 0 && minLayer <= 2) {
                                            cpr2 = cpr3;
                                            cpr3 = logUid;
                                            foregroundActivities2 = foregroundActivities;
                                            logUid = appUid3;
                                            provi = provi2;
                                            break;
                                        }
                                        int i7;
                                        int logUid3;
                                        int appUid4;
                                        ContentProviderConnection conn = (ContentProviderConnection) cpr3.connections.get(prevAppAdj);
                                        ProcessRecord client5 = conn.client;
                                        if (client5 == processRecord) {
                                            i7 = prevAppAdj;
                                            foregroundActivities2 = foregroundActivities;
                                            logUid3 = activitiesSize;
                                            appUid4 = appUid3;
                                            provi = provi2;
                                            activitiesSize = cpr3;
                                        } else {
                                            if (this.mCpusetSwitch) {
                                                processRecord.curSchedGroup = schedGroup;
                                            }
                                            provi = provi2;
                                            foregroundActivities2 = foregroundActivities;
                                            processRecord2 = client5;
                                            i7 = prevAppAdj;
                                            logUid3 = activitiesSize;
                                            appUid4 = appUid3;
                                            activitiesSize = cpr3;
                                            computeOomAdjLocked(client5, cachedAdj, logUid, doingAll, now);
                                            if (processRecord2.containsCycle) {
                                                processRecord.containsCycle = true;
                                            }
                                            i2 = processRecord2.curRawAdj;
                                            j = processRecord2.curProcState;
                                            if (j >= 15) {
                                                j = 18;
                                            }
                                            str = null;
                                            if (conni > i2) {
                                                if (!processRecord.hasShownUi || processRecord == this.mHomeProcess || i2 <= 200) {
                                                    str = "provider";
                                                    conni = i2 > 0 ? i2 : 0;
                                                } else {
                                                    str = "cch-ui-provider";
                                                }
                                                processRecord.cached &= processRecord2.cached;
                                            }
                                            if (j <= 2) {
                                                if (j == 2) {
                                                    j = 18;
                                                    mayBeTopType2 = "provider-top";
                                                    str = mayBeTopType2;
                                                    ProcessRecord mayBeTopSource6 = processRecord2;
                                                    mayBeTop = true;
                                                    mayBeTopType4 = mayBeTopType2;
                                                    mayBeTopTarget = activitiesSize.name;
                                                    mayBeTopSource = mayBeTopSource6;
                                                } else {
                                                    j = 4;
                                                    if (str == null) {
                                                        str = "provider";
                                                    }
                                                }
                                            }
                                            if (minLayer > j) {
                                                minLayer = j;
                                            }
                                            if (processRecord2.curSchedGroup > schedGroup) {
                                                schedGroup = 2;
                                            }
                                            cpr2 = activitiesSize;
                                            cpr3 = TOP_APP;
                                            if (processRecord2 == cpr3) {
                                                prevProcState5 = true;
                                            }
                                            if (str != null) {
                                                processRecord.adjType = str;
                                                processRecord.adjTypeCode = 1;
                                                processRecord.adjSource = processRecord2;
                                                processRecord.adjSourceProcState = j;
                                                processRecord.adjTarget = cpr2.name;
                                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON) {
                                                    activitiesSize = logUid3;
                                                    logUid = appUid4;
                                                } else {
                                                    activitiesSize = logUid3;
                                                    logUid = appUid4;
                                                    if (activitiesSize != logUid) {
                                                    }
                                                }
                                                mayBeTopType2 = TAG;
                                                StringBuilder stringBuilder8 = new StringBuilder();
                                                stringBuilder8.append("Raise to ");
                                                stringBuilder8.append(str);
                                                stringBuilder8.append(": ");
                                                stringBuilder8.append(processRecord);
                                                stringBuilder8.append(", due to ");
                                                stringBuilder8.append(processRecord2);
                                                stringBuilder8.append(" adj=");
                                                stringBuilder8.append(conni);
                                                stringBuilder8.append(" procState=");
                                                stringBuilder8.append(ProcessList.makeProcStateString(minLayer));
                                                reportOomAdjMessageLocked(mayBeTopType2, stringBuilder8.toString());
                                            } else {
                                                activitiesSize = logUid3;
                                                logUid = appUid4;
                                            }
                                            j = i7 - 1;
                                            appUid3 = logUid;
                                            provi2 = provi;
                                            foregroundActivities = foregroundActivities2;
                                            logUid = cpr3;
                                            cpr3 = cpr2;
                                        }
                                        cpr2 = activitiesSize;
                                        activitiesSize = logUid3;
                                        logUid = appUid4;
                                        cpr3 = TOP_APP;
                                        j = i7 - 1;
                                        appUid3 = logUid;
                                        provi2 = provi;
                                        foregroundActivities = foregroundActivities2;
                                        logUid = cpr3;
                                        cpr3 = cpr2;
                                    } else {
                                        cpr2 = cpr3;
                                        cpr3 = logUid;
                                        foregroundActivities2 = foregroundActivities;
                                        logUid = appUid3;
                                        provi = provi2;
                                        break;
                                    }
                                }
                                if (cpr2.hasExternalProcessHandles()) {
                                    if (conni > 0) {
                                        conni = 0;
                                        schedGroup = 2;
                                        processRecord.cached = false;
                                        processRecord.adjType = "ext-provider";
                                        processRecord.adjTarget = cpr2.name;
                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || activitiesSize == logUid) {
                                            str2 = TAG;
                                            stringBuilder = new StringBuilder();
                                            stringBuilder.append("Raise adj to external provider: ");
                                            stringBuilder.append(processRecord);
                                            reportOomAdjMessageLocked(str2, stringBuilder.toString());
                                        }
                                    }
                                    if (minLayer > 5) {
                                        str = TAG;
                                        stringBuilder4 = new StringBuilder();
                                        stringBuilder4.append("Raise procstate to external provider: ");
                                        stringBuilder4.append(processRecord);
                                        reportOomAdjMessageLocked(str, stringBuilder4.toString());
                                        prevProcState2 = 5;
                                        i = conni;
                                        j = provi - 1;
                                        str2 = mayBeTopType4;
                                        mayBeTopSource2 = mayBeTopSource;
                                        mayBeTopTarget2 = mayBeTopTarget;
                                        bConnectTopApp5 = prevProcState5;
                                        foregroundActivities = foregroundActivities2;
                                        i6 = logUid;
                                        logUid = cpr3;
                                        appUid = i6;
                                    }
                                }
                                i = conni;
                                prevProcState2 = minLayer;
                                j = provi - 1;
                                str2 = mayBeTopType4;
                                mayBeTopSource2 = mayBeTopSource;
                                mayBeTopTarget2 = mayBeTopTarget;
                                bConnectTopApp5 = prevProcState5;
                                foregroundActivities = foregroundActivities2;
                                i6 = logUid;
                                logUid = cpr3;
                                appUid = i6;
                            }
                            foregroundActivities2 = foregroundActivities;
                            obj = logUid;
                            logUid = appUid;
                            appUid = obj;
                            schedGroup2 = schedGroup;
                            bConnectTopApp6 = bConnectTopApp5;
                            if (processRecord.lastProviderTime <= 0) {
                                mayBeTopSource3 = mayBeTopSource2;
                                if (processRecord.lastProviderTime + this.mConstants.CONTENT_PROVIDER_RETAIN_TIME > now) {
                                    StringBuilder stringBuilder9;
                                    if (i > 700) {
                                        processRecord.cached = false;
                                        processRecord.adjType = "recent-provider";
                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                            mayBeTopType2 = TAG;
                                            stringBuilder9 = new StringBuilder();
                                            stringBuilder9.append("Raise adj to recent provider: ");
                                            stringBuilder9.append(processRecord);
                                            reportOomAdjMessageLocked(mayBeTopType2, stringBuilder9.toString());
                                        }
                                        schedGroup = 0;
                                        i = 700;
                                    } else {
                                        schedGroup = schedGroup2;
                                    }
                                    if (prevProcState2 > 14) {
                                        prevProcState2 = 14;
                                        processRecord.adjType = "recent-provider";
                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                            str4 = TAG;
                                            stringBuilder4 = new StringBuilder();
                                            stringBuilder4.append("Raise procstate to recent provider: ");
                                            stringBuilder4.append(processRecord);
                                            reportOomAdjMessageLocked(str4, stringBuilder4.toString());
                                        }
                                    }
                                    if (!mayBeTop && prevProcState2 > 2) {
                                        switch (prevProcState2) {
                                            case 3:
                                            case 4:
                                                mayBeTopSource4 = mayBeTopSource3;
                                                break;
                                            case 5:
                                            case 6:
                                            case 7:
                                            case 9:
                                                prevProcState2 = 4;
                                                processRecord.adjType = str2;
                                                mayBeTopSource4 = mayBeTopSource3;
                                                processRecord.adjSource = mayBeTopSource4;
                                                processRecord.adjTarget = mayBeTopTarget2;
                                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                                    mayBeTopType2 = TAG;
                                                    stringBuilder9 = new StringBuilder();
                                                    stringBuilder9.append("May be top raise to ");
                                                    stringBuilder9.append(str2);
                                                    stringBuilder9.append(": ");
                                                    stringBuilder9.append(processRecord);
                                                    stringBuilder9.append(", due to ");
                                                    stringBuilder9.append(mayBeTopSource4);
                                                    stringBuilder9.append(" adj=");
                                                    stringBuilder9.append(i);
                                                    stringBuilder9.append(" procState=");
                                                    stringBuilder9.append(ProcessList.makeProcStateString(4));
                                                    reportOomAdjMessageLocked(mayBeTopType2, stringBuilder9.toString());
                                                    break;
                                                }
                                            default:
                                                mayBeTopSource4 = mayBeTopSource3;
                                                prevProcState2 = 2;
                                                processRecord.adjType = str2;
                                                processRecord.adjSource = mayBeTopSource4;
                                                processRecord.adjTarget = mayBeTopTarget2;
                                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid == appUid) {
                                                    mayBeTopType2 = TAG;
                                                    stringBuilder9 = new StringBuilder();
                                                    stringBuilder9.append("May be top raise to ");
                                                    stringBuilder9.append(str2);
                                                    stringBuilder9.append(": ");
                                                    stringBuilder9.append(processRecord);
                                                    stringBuilder9.append(", due to ");
                                                    stringBuilder9.append(mayBeTopSource4);
                                                    stringBuilder9.append(" adj=");
                                                    stringBuilder9.append(i);
                                                    stringBuilder9.append(" procState=");
                                                    stringBuilder9.append(ProcessList.makeProcStateString(2));
                                                    reportOomAdjMessageLocked(mayBeTopType2, stringBuilder9.toString());
                                                    break;
                                                }
                                        }
                                    }
                                    mayBeTopSource4 = mayBeTopSource3;
                                    if (prevProcState2 >= 18) {
                                        if (processRecord.hasClientActivities) {
                                            prevProcState2 = 16;
                                            processRecord.adjType = "cch-client-act";
                                        } else if (processRecord.treatLikeActivity) {
                                            prevProcState2 = 15;
                                            processRecord.adjType = "cch-as-act";
                                        }
                                    }
                                    Object obj4;
                                    if (i == 500) {
                                        if (doingAll) {
                                            processRecord.serviceb = this.mNewNumAServiceProcs > this.mNumServiceProcs / 3;
                                            this.mNewNumServiceProcs++;
                                            if (processRecord.serviceb) {
                                                obj4 = mayBeTopSource4;
                                                processRecord.serviceHighRam = false;
                                            } else {
                                                if (this.mLastMemoryLevel > 0) {
                                                    if (processRecord.lastPss >= this.mProcessList.getCachedRestoreThresholdKb()) {
                                                        processRecord.serviceHighRam = true;
                                                        processRecord.serviceb = true;
                                                    } else {
                                                        i2 = 1;
                                                    }
                                                } else {
                                                    obj4 = mayBeTopSource4;
                                                    i2 = 1;
                                                }
                                                this.mNewNumAServiceProcs += i2;
                                            }
                                        } else {
                                            obj4 = mayBeTopSource4;
                                        }
                                        if (processRecord.serviceb) {
                                            i = 800;
                                        }
                                    } else {
                                        obj4 = mayBeTopSource4;
                                    }
                                    processRecord.curRawAdj = i;
                                    if (i > processRecord.maxAdj) {
                                        i = processRecord.maxAdj;
                                        if (processRecord.maxAdj <= 200) {
                                            schedGroup = 2;
                                        }
                                    }
                                    if (prevProcState2 >= 4) {
                                        if (this.mWakefulness != 1 && schedGroup > 1) {
                                            schedGroup = 1;
                                        }
                                    }
                                    processRecord.curAdj = processRecord.modifyRawOomAdj(i);
                                    processRecord.curSchedGroup = schedGroup;
                                    processRecord.curProcState = prevProcState2;
                                    adj2 = foregroundActivities2;
                                    processRecord.foregroundActivities = adj2;
                                    processRecord.completedAdjSeq = this.mAdjSeq;
                                    if (this.mCpusetSwitch) {
                                        setWhiteListProcessGroup(processRecord, TOP_APP, bConnectTopApp6);
                                    } else {
                                        bConnectTopApp5 = bConnectTopApp6;
                                        processRecord2 = TOP_APP;
                                    }
                                    if (processRecord.curAdj >= prevAppAdj3) {
                                        if (processRecord.curProcState >= prevProcState4) {
                                            z2 = false;
                                            return z2;
                                        }
                                    }
                                    z2 = true;
                                    return z2;
                                }
                            }
                            mayBeTopSource3 = mayBeTopSource2;
                            schedGroup = schedGroup2;
                            if (!mayBeTop) {
                            }
                            mayBeTopSource4 = mayBeTopSource3;
                            if (prevProcState2 >= 18) {
                            }
                            if (i == 500) {
                            }
                            processRecord.curRawAdj = i;
                            if (i > processRecord.maxAdj) {
                            }
                            if (prevProcState2 >= 4) {
                            }
                            processRecord.curAdj = processRecord.modifyRawOomAdj(i);
                            processRecord.curSchedGroup = schedGroup;
                            processRecord.curProcState = prevProcState2;
                            adj2 = foregroundActivities2;
                            processRecord.foregroundActivities = adj2;
                            processRecord.completedAdjSeq = this.mAdjSeq;
                            if (this.mCpusetSwitch) {
                            }
                            if (processRecord.curAdj >= prevAppAdj3) {
                            }
                            z2 = true;
                            return z2;
                        }
                    }
                    if (r.isState(ActivityState.PAUSING, ActivityState.PAUSED) != 0) {
                        if (i > true) {
                            i = true;
                            processRecord.adjType = "pause-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid == appUid) {
                                prevAppAdj = TAG;
                                stringBuilder5 = new StringBuilder();
                                stringBuilder5.append("Raise adj to pause-activity: ");
                                stringBuilder5.append(processRecord);
                                reportOomAdjMessageLocked(prevAppAdj, stringBuilder5.toString());
                            }
                        }
                        if (prevProcState2 > conni) {
                            prevProcState2 = conni;
                            processRecord.adjType = "pause-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid == appUid) {
                                prevAppAdj = TAG;
                                stringBuilder5 = new StringBuilder();
                                stringBuilder5.append("Raise procstate to pause-activity (top): ");
                                stringBuilder5.append(processRecord);
                                reportOomAdjMessageLocked(prevAppAdj, stringBuilder5.toString());
                            }
                        }
                        if (schedGroup < 2) {
                            schedGroup = 2;
                        }
                        processRecord.cached = false;
                        processRecord.empty = false;
                        z3 = true;
                    } else if (r.isState(ActivityState.STOPPING) != 0) {
                        if (i > true) {
                            i = true;
                            processRecord.adjType = "stop-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid == appUid) {
                                prevAppAdj = TAG;
                                stringBuilder5 = new StringBuilder();
                                stringBuilder5.append("Raise adj to stop-activity: ");
                                stringBuilder5.append(processRecord);
                                reportOomAdjMessageLocked(prevAppAdj, stringBuilder5.toString());
                            }
                        }
                        if (r.finishing == 0 && prevProcState2 > true) {
                            prevProcState2 = true;
                            processRecord.adjType = "stop-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid == appUid) {
                                prevAppAdj = TAG;
                                stringBuilder5 = new StringBuilder();
                                stringBuilder5.append("Raise procstate to stop-activity: ");
                                stringBuilder5.append(processRecord);
                                reportOomAdjMessageLocked(prevAppAdj, stringBuilder5.toString());
                            }
                        }
                        processRecord.cached = false;
                        processRecord.empty = false;
                        z3 = true;
                    } else {
                        if (prevProcState2 > true) {
                            prevProcState2 = true;
                            processRecord.adjType = "cch-act";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid == appUid) {
                                prevAppAdj = TAG;
                                stringBuilder5 = new StringBuilder();
                                stringBuilder5.append("Raise procstate to cached activity: ");
                                stringBuilder5.append(processRecord);
                                reportOomAdjMessageLocked(prevAppAdj, stringBuilder5.toString());
                            }
                        }
                        i2++;
                        prevAppAdj = prevAppAdj2;
                        activitiesSize = i4;
                        processRecord2 = TOP_APP;
                    }
                    foregroundActivities3 = z3;
                    i2++;
                    prevAppAdj = prevAppAdj2;
                    activitiesSize = i4;
                    processRecord2 = TOP_APP;
                }
                prevAppAdj2 = prevAppAdj;
                i4 = activitiesSize;
                bConnectTopApp = foregroundActivities3;
                if (i != true) {
                }
            }
            i = adj;
            prevProcState2 = true;
            processRecord.adjType = "cch-rec";
            str2 = TAG;
            stringBuilder4 = new StringBuilder();
            stringBuilder4.append("Raise procstate to cached recent: ");
            stringBuilder4.append(processRecord);
            reportOomAdjMessageLocked(str2, stringBuilder4.toString());
            if (i > true) {
            }
            if (!processRecord.foregroundServices) {
            }
            i = true;
            prevProcState2 = true;
            processRecord.cached = false;
            processRecord.adjType = "force-imp";
            processRecord.adjSource = processRecord.forcingToImportant;
            schedGroup = 2;
            str2 = TAG;
            stringBuilder3 = new StringBuilder();
            stringBuilder3.append("Raise to force imp: ");
            stringBuilder3.append(processRecord);
            reportOomAdjMessageLocked(str2, stringBuilder3.toString());
            if (processRecord == this.mHeavyWeightProcess) {
            }
            if (processRecord == this.mHomeProcess) {
            }
            if (i > true) {
            }
            if (prevProcState2 > true) {
            }
            processRecord.curRawAdj = i;
            processRecord.hasStartedServices = false;
            processRecord.adjSeq = this.mAdjSeq;
            if (i > true) {
            }
            if (prevProcState2 > true) {
            }
            bConnectTopApp = false;
            adj2 = false;
            mayBeTopType = null;
            mayBeTopSource = null;
            mayBeTopTarget = null;
            prevAppAdj = processRecord.services.size() - 1;
            while (prevAppAdj >= 0) {
            }
            mayBeTop = bConnectTopApp;
            bConnectTopApp4 = adj2;
            i3 = conni;
            str2 = mayBeTopType;
            prevProcState4 = prevProcState5;
            prevAppAdj3 = prevAppAdj2;
            activitiesSize = logUid;
            logUid = TOP_APP;
            j = processRecord.pubProviders.size() - 1;
            mayBeTopSource2 = mayBeTopSource;
            mayBeTopTarget2 = mayBeTopTarget;
            bConnectTopApp5 = bConnectTopApp4;
            while (j >= 0) {
            }
            foregroundActivities2 = foregroundActivities;
            obj = logUid;
            logUid = appUid;
            appUid = obj;
            schedGroup2 = schedGroup;
            bConnectTopApp6 = bConnectTopApp5;
            if (processRecord.lastProviderTime <= 0) {
            }
            schedGroup = schedGroup2;
            if (!mayBeTop) {
            }
            mayBeTopSource4 = mayBeTopSource3;
            if (prevProcState2 >= 18) {
            }
            if (i == 500) {
            }
            processRecord.curRawAdj = i;
            if (i > processRecord.maxAdj) {
            }
            if (prevProcState2 >= 4) {
            }
            processRecord.curAdj = processRecord.modifyRawOomAdj(i);
            processRecord.curSchedGroup = schedGroup;
            processRecord.curProcState = prevProcState2;
            adj2 = foregroundActivities2;
            processRecord.foregroundActivities = adj2;
            processRecord.completedAdjSeq = this.mAdjSeq;
            if (this.mCpusetSwitch) {
            }
            if (processRecord.curAdj >= prevAppAdj3) {
            }
            z2 = true;
            return z2;
        }
    }

    void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss, long rss, int statType, long pssDuration, long now) {
        ProcessRecord processRecord = proc;
        long j = pss;
        long j2 = swapPss;
        if (processRecord.info != null) {
            this.mDAProxy.addPssToMap(processRecord.processName, processRecord.info.uid, processRecord.pid, procState, j, SystemClock.uptimeMillis(), this.mTestPssMode);
        }
        int i = processRecord.pid;
        EventLogTags.writeAmPss(i, processRecord.uid, processRecord.processName, j * 1024, uss * 1024, j2 * 1024, rss * 1024, statType, procState, pssDuration);
        processRecord.lastPssTime = now;
        processRecord.baseProcessTracker.addPss(j, uss, rss, true, statType, pssDuration, processRecord.pkgList);
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("pss of ");
            stringBuilder.append(proc.toShortString());
            stringBuilder.append(": ");
            stringBuilder.append(j);
            stringBuilder.append(" lastPss=");
            stringBuilder.append(processRecord.lastPss);
            stringBuilder.append(" state=");
            stringBuilder.append(ProcessList.makeProcStateString(procState));
            Slog.d(str, stringBuilder.toString());
        }
        if (processRecord.initialIdlePss == 0) {
            processRecord.initialIdlePss = j;
        }
        processRecord.lastPss = j;
        long j3 = swapPss;
        processRecord.lastSwapPss = j3;
        if (procState >= 13) {
            processRecord.lastCachedPss = j;
            processRecord.lastCachedSwapPss = j3;
        }
        SparseArray<Pair<Long, String>> watchUids = (SparseArray) this.mMemWatchProcesses.getMap().get(processRecord.processName);
        Long check = null;
        if (watchUids != null) {
            Pair<Long, String> val = (Pair) watchUids.get(processRecord.uid);
            if (val == null) {
                val = (Pair) watchUids.get(0);
            }
            if (val != null) {
                check = val.first;
            }
        }
        if (check != null && j * 1024 >= check.longValue() && processRecord.thread != null && this.mMemWatchDumpProcName == null) {
            boolean isDebuggable = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
            if (!(isDebuggable || (processRecord.info.flags & 2) == 0)) {
                isDebuggable = true;
            }
            String str2;
            StringBuilder stringBuilder2;
            if (isDebuggable) {
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Process ");
                stringBuilder2.append(processRecord);
                stringBuilder2.append(" exceeded pss limit ");
                stringBuilder2.append(check);
                stringBuilder2.append("; reporting");
                Slog.w(str2, stringBuilder2.toString());
                final ProcessRecord myProc = processRecord;
                final File heapdumpFile = DumpHeapProvider.getJavaFile();
                this.mMemWatchDumpProcName = processRecord.processName;
                this.mMemWatchDumpFile = heapdumpFile.toString();
                this.mMemWatchDumpPid = processRecord.pid;
                this.mMemWatchDumpUid = processRecord.uid;
                BackgroundThread.getHandler().post(new Runnable() {
                    public void run() {
                        ActivityManagerService.this.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
                        ParcelFileDescriptor fd = null;
                        try {
                            heapdumpFile.delete();
                            fd = ParcelFileDescriptor.open(heapdumpFile, 771751936);
                            IApplicationThread thread = myProc.thread;
                            if (thread != null) {
                                try {
                                    if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                        String str = ActivityManagerService.TAG;
                                        StringBuilder stringBuilder = new StringBuilder();
                                        stringBuilder.append("Requesting dump heap from ");
                                        stringBuilder.append(myProc);
                                        stringBuilder.append(" to ");
                                        stringBuilder.append(heapdumpFile);
                                        Slog.d(str, stringBuilder.toString());
                                    }
                                    thread.dumpHeap(true, false, false, heapdumpFile.toString(), fd);
                                } catch (RemoteException e) {
                                }
                            }
                            if (fd != null) {
                                try {
                                    fd.close();
                                } catch (IOException e2) {
                                }
                            }
                        } catch (FileNotFoundException e3) {
                            e3.printStackTrace();
                            if (fd != null) {
                                fd.close();
                            }
                        } catch (Throwable th) {
                            if (fd != null) {
                                try {
                                    fd.close();
                                } catch (IOException e4) {
                                }
                            }
                        }
                    }
                });
                return;
            }
            str2 = TAG;
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append("Process ");
            stringBuilder2.append(processRecord);
            stringBuilder2.append(" exceeded pss limit ");
            stringBuilder2.append(check);
            stringBuilder2.append(", but debugging not enabled");
            Slog.w(str2, stringBuilder2.toString());
        }
    }

    boolean requestPssLocked(ProcessRecord proc, int procState) {
        if (this.mPendingPssProcesses.contains(proc)) {
            return false;
        }
        if (this.mPendingPssProcesses.size() == 0) {
            this.mBgHandler.sendEmptyMessage(1);
        }
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Requesting pss of: ");
            stringBuilder.append(proc);
            Slog.d(str, stringBuilder.toString());
        }
        proc.pssProcState = procState;
        proc.pssStatType = 0;
        this.mPendingPssProcesses.add(proc);
        return true;
    }

    void requestPssAllProcsLocked(long now, boolean always, boolean memLowered) {
        int i;
        if (!always) {
            long j;
            long j2 = this.mLastFullPssTime;
            if (memLowered) {
                j = this.mConstants.FULL_PSS_LOWERED_INTERVAL;
            } else {
                j = this.mConstants.FULL_PSS_MIN_INTERVAL;
            }
            if (now < j2 + j) {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Requesting pss of all procs!  memLowered=");
            stringBuilder.append(memLowered);
            Slog.d(str, stringBuilder.toString());
        }
        this.mLastFullPssTime = now;
        this.mFullPssPending = true;
        for (i = this.mPendingPssProcesses.size() - 1; i >= 0; i--) {
            ProcessList.abortNextPssTime(((ProcessRecord) this.mPendingPssProcesses.get(i)).procStateMemTracker);
        }
        this.mPendingPssProcesses.ensureCapacity(this.mLruProcesses.size());
        this.mPendingPssProcesses.clear();
        for (i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = (ProcessRecord) this.mLruProcesses.get(i);
            if (!(app.thread == null || app.curProcState == 19 || ((!memLowered && ((!always || now <= app.lastStateTime + 1000) && now <= app.lastStateTime + 1200000)) || app.curProcState < 0))) {
                int i2;
                app.pssProcState = app.setProcState;
                if (always) {
                    i2 = 2;
                } else {
                    i2 = 1;
                }
                app.pssStatType = i2;
                app.nextPssTime = ProcessList.computeNextPssTime(app.curProcState, app.procStateMemTracker, this.mTestPssMode, isSleepingLocked(), now);
                this.mPendingPssProcesses.add(app);
            }
        }
        if (!this.mBgHandler.hasMessages(1)) {
            this.mBgHandler.sendEmptyMessage(1);
        }
    }

    public void setTestPssMode(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mTestPssMode = enabled;
                if (enabled) {
                    requestPssAllProcsLocked(SystemClock.uptimeMillis(), true, true);
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    final void performAppGcLocked(ProcessRecord app) {
        try {
            app.lastRequestedGc = SystemClock.uptimeMillis();
            if (app.thread == null) {
                return;
            }
            if (app.reportLowMemory) {
                app.reportLowMemory = false;
                app.thread.scheduleLowMemory();
                return;
            }
            app.thread.processInBackground();
        } catch (Exception e) {
        }
    }

    private final boolean canGcNowLocked() {
        boolean processingBroadcasts = false;
        for (BroadcastQueue q : this.mBroadcastQueues) {
            if (q.mParallelBroadcasts.size() != 0 || q.mOrderedBroadcasts.size() != 0) {
                processingBroadcasts = true;
            }
        }
        if (processingBroadcasts) {
            return false;
        }
        if (isSleepingLocked() || this.mStackSupervisor.allResumedActivitiesIdle()) {
            return true;
        }
        return false;
    }

    final void performAppGcsLocked() {
        if (this.mProcessesToGc.size() > 0 && canGcNowLocked()) {
            while (this.mProcessesToGc.size() > 0) {
                ProcessRecord proc = (ProcessRecord) this.mProcessesToGc.remove(0);
                if (proc.curRawAdj > 200 || proc.reportLowMemory) {
                    if (proc.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL <= SystemClock.uptimeMillis()) {
                        performAppGcLocked(proc);
                        scheduleAppGcsLocked();
                        return;
                    }
                    addProcessToGcListLocked(proc);
                    scheduleAppGcsLocked();
                }
            }
            scheduleAppGcsLocked();
        }
    }

    final void performAppGcsIfAppropriateLocked() {
        if (canGcNowLocked()) {
            performAppGcsLocked();
        } else {
            scheduleAppGcsLocked();
        }
    }

    final void scheduleAppGcsLocked() {
        this.mHandler.removeMessages(5);
        if (this.mProcessesToGc.size() > 0) {
            ProcessRecord proc = (ProcessRecord) this.mProcessesToGc.get(0);
            Message msg = this.mHandler.obtainMessage(5);
            long when = proc.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL;
            long now = SystemClock.uptimeMillis();
            if (when < this.mConstants.GC_TIMEOUT + now) {
                when = now + this.mConstants.GC_TIMEOUT;
            }
            this.mHandler.sendMessageAtTime(msg, when);
        }
    }

    final void addProcessToGcListLocked(ProcessRecord proc) {
        boolean added = false;
        for (int i = this.mProcessesToGc.size() - 1; i >= 0; i--) {
            if (((ProcessRecord) this.mProcessesToGc.get(i)).lastRequestedGc < proc.lastRequestedGc) {
                added = true;
                this.mProcessesToGc.add(i + 1, proc);
                break;
            }
        }
        if (!added) {
            this.mProcessesToGc.add(0, proc);
        }
    }

    final void scheduleAppGcLocked(ProcessRecord app) {
        if (app.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL <= SystemClock.uptimeMillis() && !this.mProcessesToGc.contains(app)) {
            addProcessToGcListLocked(app);
            scheduleAppGcsLocked();
        }
    }

    /* JADX WARNING: Missing block: B:37:0x00f8, code:
            r0 = new java.lang.StringBuilder();
            r0.append("excessive cpu ");
            r0.append(r10);
            r0.append(" during ");
            r0.append(r12);
            r0.append(" dur=");
            r0.append(r24);
            r0.append(" limit=");
            r0.append(r23);
            r1.kill(r0.toString(), true);
     */
    /* JADX WARNING: Missing block: B:38:0x012b, code:
            if (r1.baseProcessTracker == null) goto L_0x0155;
     */
    /* JADX WARNING: Missing block: B:39:0x012d, code:
            r1.baseProcessTracker.reportExcessiveCpu(r1.pkgList);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    final void checkExcessivePowerUsageLocked() {
        long curUptime;
        Throwable th;
        boolean z;
        long j;
        ActivityManagerService activityManagerService = this;
        updateCpuStatsNow();
        BatteryStatsImpl stats = activityManagerService.mBatteryStatsService.getActiveStatistics();
        boolean doCpuKills = true;
        long j2 = 0;
        if (activityManagerService.mLastPowerCheckUptime == 0) {
            doCpuKills = false;
        }
        boolean doCpuKills2 = doCpuKills;
        long curUptime2 = SystemClock.uptimeMillis();
        long uptimeSince = curUptime2 - activityManagerService.mLastPowerCheckUptime;
        activityManagerService.mLastPowerCheckUptime = curUptime2;
        int i = activityManagerService.mLruProcesses.size();
        while (i > 0) {
            long j3;
            boolean doCpuKills3;
            int i2 = i - 1;
            ProcessRecord app = (ProcessRecord) activityManagerService.mLruProcesses.get(i2);
            if (app.setProcState < 13) {
                j3 = j2;
                doCpuKills3 = doCpuKills2;
                curUptime = curUptime2;
                doCpuKills2 = uptimeSince;
            } else if (app.lastCpuTime <= j2) {
                j3 = j2;
                doCpuKills3 = doCpuKills2;
                curUptime = curUptime2;
                doCpuKills2 = uptimeSince;
            } else {
                ProcessRecord app2;
                j2 = app.curCpuTime - app.lastCpuTime;
                if (ActivityManagerDebugConfig.DEBUG_POWER) {
                    StringBuilder sb = new StringBuilder(128);
                    sb.append("CPU for ");
                    app.toShortString(sb);
                    sb.append(": over ");
                    TimeUtils.formatDuration(uptimeSince, sb);
                    sb.append(" used ");
                    TimeUtils.formatDuration(j2, sb);
                    sb.append(" (");
                    sb.append((j2 * SINGLE_DISPATCH_THRESHOLD_MS) / uptimeSince);
                    sb.append("%)");
                    Slog.i(TAG, sb.toString());
                }
                if (doCpuKills2) {
                    j3 = 0;
                    if (uptimeSince > 0) {
                        long checkDur = curUptime2 - app.whenUnimportant;
                        doCpuKills3 = doCpuKills2;
                        curUptime = curUptime2;
                        if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL) {
                            doCpuKills = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_1;
                        } else if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL * 2 || app.setProcState <= 13) {
                            doCpuKills = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_2;
                        } else if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL * 3) {
                            doCpuKills = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_3;
                        } else {
                            doCpuKills = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_4;
                        }
                        doCpuKills2 = doCpuKills;
                        if ((SINGLE_DISPATCH_THRESHOLD_MS * j2) / uptimeSince >= ((long) doCpuKills2)) {
                            synchronized (stats) {
                                try {
                                    app2 = app;
                                    boolean cpuLimit = doCpuKills2;
                                    long checkDur2 = checkDur;
                                    doCpuKills2 = uptimeSince;
                                    try {
                                        stats.reportExcessiveCpuLocked(app.info.uid, app.processName, uptimeSince, j2);
                                    } catch (Throwable th2) {
                                        th = th2;
                                        z = cpuLimit;
                                        j = checkDur2;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th3) {
                                                th = th3;
                                            }
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    j = checkDur;
                                    app2 = app;
                                    z = doCpuKills2;
                                    doCpuKills2 = uptimeSince;
                                }
                            }
                        } else {
                            app2 = app;
                            doCpuKills2 = uptimeSince;
                        }
                        app2.lastCpuTime = app2.curCpuTime;
                    } else {
                        app2 = app;
                        doCpuKills3 = doCpuKills2;
                        curUptime = curUptime2;
                    }
                } else {
                    app2 = app;
                    doCpuKills3 = doCpuKills2;
                    curUptime = curUptime2;
                    j3 = 0;
                }
                doCpuKills2 = uptimeSince;
                app2.lastCpuTime = app2.curCpuTime;
            }
            uptimeSince = doCpuKills2;
            i = i2;
            j2 = j3;
            doCpuKills2 = doCpuKills3;
            curUptime2 = curUptime;
            activityManagerService = this;
        }
        curUptime = curUptime2;
    }

    /* JADX WARNING: Removed duplicated region for block: B:154:0x03c6  */
    /* JADX WARNING: Removed duplicated region for block: B:171:0x0451  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final boolean applyOomAdjLocked(ProcessRecord app, boolean doingAll, long now, long nowElapsed) {
        String msg;
        int oldSchedGroup;
        int processGroup;
        String str;
        StringBuilder stringBuilder;
        ProcessRecord processRecord = app;
        long j = now;
        long j2 = nowElapsed;
        boolean success = true;
        if (processRecord.curRawAdj != processRecord.setRawAdj) {
            processRecord.setRawAdj = processRecord.curRawAdj;
        }
        int changes = 0;
        if (processRecord.curAdj != processRecord.setAdj) {
            if (this.mCpusetSwitch) {
                ProcessList.setOomAdj(processRecord.pid, processRecord.uid, processRecord.curAdj, processRecord.processName);
            } else {
                ProcessList.setOomAdj(processRecord.pid, processRecord.uid, processRecord.curAdj);
            }
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ || this.mCurOomAdjUid == processRecord.info.uid) {
                msg = new StringBuilder();
                msg.append("Set ");
                msg.append(processRecord.pid);
                msg.append(" ");
                msg.append(processRecord.processName);
                msg.append(" adj ");
                msg.append(processRecord.curAdj);
                msg.append(": ");
                msg.append(processRecord.adjType);
                reportOomAdjMessageLocked(TAG, msg.toString());
            }
            processRecord.setAdj = processRecord.curAdj;
            processRecord.verifiedAdj = -10000;
        }
        if (processRecord.setSchedGroup != processRecord.curSchedGroup) {
            oldSchedGroup = processRecord.setSchedGroup;
            processRecord.setSchedGroup = processRecord.curSchedGroup;
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ || this.mCurOomAdjUid == processRecord.uid) {
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("Setting sched group of ");
                stringBuilder2.append(processRecord.processName);
                stringBuilder2.append(" to ");
                stringBuilder2.append(processRecord.curSchedGroup);
                stringBuilder2.append(": ");
                stringBuilder2.append(processRecord.adjType);
                reportOomAdjMessageLocked(TAG, stringBuilder2.toString());
            }
            if (processRecord.waitingToKill != null && processRecord.curReceivers.isEmpty() && processRecord.setSchedGroup == 0) {
                processRecord.kill(processRecord.waitingToKill, true);
                success = false;
            } else {
                switch (processRecord.curSchedGroup) {
                    case 0:
                        processGroup = 0;
                        break;
                    case 1:
                        processGroup = 7;
                        break;
                    case 3:
                    case 4:
                        if (processRecord.foregroundActivities && !processRecord.runningRemoteAnimation) {
                            this.mHwAMSEx.onAppGroupChanged(processRecord.pid, processRecord.info.uid, processRecord.processName, oldSchedGroup, processRecord.curSchedGroup);
                        }
                        processGroup = 5;
                        break;
                    case 7:
                        processGroup = 8;
                        break;
                    default:
                        processGroup = -1;
                        break;
                }
                int processGroup2 = processGroup;
                long oldId = Binder.clearCallingIdentity();
                try {
                    Process.setProcessGroup(processRecord.pid, processGroup2);
                    StringBuilder stringBuilder3;
                    if (processRecord.curSchedGroup == 3) {
                        if (oldSchedGroup != 3) {
                            this.mVrController.onTopProcChangedLocked(processRecord);
                            if (this.mUseFifoUiScheduling) {
                                processRecord.savedPriority = Process.getThreadPriority(processRecord.pid);
                                scheduleAsFifoPriority(processRecord.pid, true);
                                if (processRecord.renderThreadTid != 0) {
                                    scheduleAsFifoPriority(processRecord.renderThreadTid, true);
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                        stringBuilder3 = new StringBuilder();
                                        stringBuilder3.append("Set RenderThread (TID ");
                                        stringBuilder3.append(processRecord.renderThreadTid);
                                        stringBuilder3.append(") to FIFO");
                                        Slog.d("UI_FIFO", stringBuilder3.toString());
                                    }
                                } else if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    Slog.d("UI_FIFO", "Not setting RenderThread TID");
                                }
                            } else {
                                Process.setThreadPriority(processRecord.pid, -10);
                                if (processRecord.renderThreadTid != 0) {
                                    try {
                                        Process.setThreadPriority(processRecord.renderThreadTid, -10);
                                    } catch (IllegalArgumentException e) {
                                    }
                                }
                            }
                        }
                    } else if (oldSchedGroup == 3) {
                        if (processRecord.curSchedGroup != 3) {
                            this.mVrController.onTopProcChangedLocked(processRecord);
                            if (this.mUseFifoUiScheduling) {
                                try {
                                    Process.setThreadScheduler(processRecord.pid, 0, 0);
                                    Process.setThreadPriority(processRecord.pid, processRecord.savedPriority);
                                    if (processRecord.renderThreadTid != 0) {
                                        Process.setThreadScheduler(processRecord.renderThreadTid, 0, 0);
                                        Process.setThreadPriority(processRecord.renderThreadTid, -4);
                                    }
                                } catch (IllegalArgumentException e2) {
                                    str = TAG;
                                    StringBuilder stringBuilder4 = new StringBuilder();
                                    stringBuilder4.append("Failed to set scheduling policy, thread does not exist:\n");
                                    stringBuilder4.append(e2);
                                    Slog.w(str, stringBuilder4.toString());
                                } catch (SecurityException e3) {
                                    str = TAG;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("Failed to set scheduling policy, not allowed:\n");
                                    stringBuilder3.append(e3);
                                    Slog.w(str, stringBuilder3.toString());
                                }
                            } else {
                                Process.setThreadPriority(processRecord.pid, 0);
                                if (processRecord.renderThreadTid != 0) {
                                    Process.setThreadPriority(processRecord.renderThreadTid, 0);
                                }
                            }
                        }
                    }
                } catch (Exception e4) {
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(oldId);
                }
                Binder.restoreCallingIdentity(oldId);
                this.mDAProxy.notifyProcessGroupChange(processRecord.pid, processRecord.uid);
                if (this.mCpusetSwitch) {
                    this.mDAProxy.notifyProcessGroupChangeCpu(processRecord.pid, processRecord.uid, processRecord.curSchedGroup);
                    this.mHwAMSEx.setThreadSchedPolicy(oldSchedGroup, processRecord);
                }
            }
        }
        boolean success2 = success;
        if (processRecord.repForegroundActivities != processRecord.foregroundActivities) {
            processRecord.repForegroundActivities = processRecord.foregroundActivities;
            changes = 0 | 1;
        }
        int changes2 = changes;
        if (processRecord.repProcState != processRecord.curProcState) {
            processRecord.repProcState = processRecord.curProcState;
            if (processRecord.thread != null) {
                try {
                    processRecord.thread.setProcessState(processRecord.repProcState);
                } catch (RemoteException e5) {
                }
            }
        }
        if (processRecord.setProcState == 19 || ProcessList.procStatesDifferForMem(processRecord.curProcState, processRecord.setProcState)) {
            processRecord.lastStateTime = j;
            processRecord.nextPssTime = ProcessList.computeNextPssTime(processRecord.curProcState, processRecord.procStateMemTracker, this.mTestPssMode, isSleepingLocked(), j);
            if (ActivityManagerDebugConfig.DEBUG_PSS) {
                msg = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Process state change from ");
                stringBuilder.append(ProcessList.makeProcStateString(processRecord.setProcState));
                stringBuilder.append(" to ");
                stringBuilder.append(ProcessList.makeProcStateString(processRecord.curProcState));
                stringBuilder.append(" next pss in ");
                stringBuilder.append(processRecord.nextPssTime - j);
                stringBuilder.append(": ");
                stringBuilder.append(processRecord);
                Slog.d(msg, stringBuilder.toString());
            }
        } else if ((j > processRecord.nextPssTime || (j > processRecord.lastPssTime + SettingsObserver.DEFAULT_STRONG_USAGE_TIMEOUT && j > processRecord.lastStateTime + ProcessList.minTimeFromStateChange(this.mTestPssMode))) && requestPssLocked(processRecord, processRecord.setProcState)) {
            processRecord.nextPssTime = ProcessList.computeNextPssTime(processRecord.curProcState, processRecord.procStateMemTracker, this.mTestPssMode, isSleepingLocked(), j);
        }
        if (processRecord.setProcState != processRecord.curProcState) {
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ || this.mCurOomAdjUid == processRecord.uid) {
                msg = new StringBuilder();
                msg.append("Proc state change of ");
                msg.append(processRecord.processName);
                msg.append(" to ");
                msg.append(ProcessList.makeProcStateString(processRecord.curProcState));
                msg.append(" (");
                msg.append(processRecord.curProcState);
                msg.append("): ");
                msg.append(processRecord.adjType);
                reportOomAdjMessageLocked(TAG, msg.toString());
            }
            boolean setImportant = processRecord.setProcState < 9;
            success = processRecord.curProcState < 9;
            if (setImportant && !success) {
                processRecord.whenUnimportant = j;
                processRecord.lastCpuTime = 0;
            }
            maybeUpdateUsageStatsLocked(processRecord, j2);
            processRecord.setProcState = processRecord.curProcState;
            if (processRecord.setProcState >= 13) {
                processRecord.notCachedSinceIdle = false;
            }
            if (doingAll) {
                processRecord.procStateChanged = true;
            } else {
                setProcessTrackerStateLocked(processRecord, this.mProcessStats.getMemFactorLocked(), j);
            }
        } else if (processRecord.reportedInteraction && j2 - processRecord.interactionEventTime > this.mConstants.USAGE_STATS_INTERACTION_INTERVAL) {
            maybeUpdateUsageStatsLocked(processRecord, j2);
        }
        if (changes2 != 0) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                msg = TAG;
                stringBuilder = new StringBuilder();
                stringBuilder.append("Changes in ");
                stringBuilder.append(processRecord);
                stringBuilder.append(": ");
                stringBuilder.append(changes2);
                Slog.i(msg, stringBuilder.toString());
            }
            processGroup = this.mPendingProcessChanges.size() - 1;
            ProcessChangeItem item = null;
            while (processGroup >= 0) {
                item = (ProcessChangeItem) this.mPendingProcessChanges.get(processGroup);
                if (item.pid == processRecord.pid) {
                    String str2;
                    StringBuilder stringBuilder5;
                    if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                        str2 = TAG;
                        stringBuilder5 = new StringBuilder();
                        stringBuilder5.append("Re-using existing item: ");
                        stringBuilder5.append(item);
                        Slog.i(str2, stringBuilder5.toString());
                    }
                    if (processGroup < 0) {
                        oldSchedGroup = this.mAvailProcessChanges.size();
                        String str3;
                        StringBuilder stringBuilder6;
                        if (oldSchedGroup > 0) {
                            item = (ProcessChangeItem) this.mAvailProcessChanges.remove(oldSchedGroup - 1);
                            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                                str3 = TAG;
                                stringBuilder6 = new StringBuilder();
                                stringBuilder6.append("Retrieving available item: ");
                                stringBuilder6.append(item);
                                Slog.i(str3, stringBuilder6.toString());
                            }
                        } else {
                            item = new ProcessChangeItem();
                            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                                str3 = TAG;
                                stringBuilder6 = new StringBuilder();
                                stringBuilder6.append("Allocating new item: ");
                                stringBuilder6.append(item);
                                Slog.i(str3, stringBuilder6.toString());
                            }
                        }
                        item.changes = 0;
                        item.pid = processRecord.pid;
                        item.uid = processRecord.info.uid;
                        if (this.mPendingProcessChanges.size() == 0) {
                            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                                Slog.i(TAG, "*** Enqueueing dispatch processes changed!");
                            }
                            this.mUiHandler.obtainMessage(31).sendToTarget();
                        }
                        this.mPendingProcessChanges.add(item);
                    }
                    item.changes |= changes2;
                    item.foregroundActivities = processRecord.repForegroundActivities;
                    if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                        str2 = TAG;
                        stringBuilder5 = new StringBuilder();
                        stringBuilder5.append("Item ");
                        stringBuilder5.append(Integer.toHexString(System.identityHashCode(item)));
                        stringBuilder5.append(" ");
                        stringBuilder5.append(app.toShortString());
                        stringBuilder5.append(": changes=");
                        stringBuilder5.append(item.changes);
                        stringBuilder5.append(" foreground=");
                        stringBuilder5.append(item.foregroundActivities);
                        stringBuilder5.append(" type=");
                        stringBuilder5.append(processRecord.adjType);
                        stringBuilder5.append(" source=");
                        stringBuilder5.append(processRecord.adjSource);
                        stringBuilder5.append(" target=");
                        stringBuilder5.append(processRecord.adjTarget);
                        Slog.i(str2, stringBuilder5.toString());
                    }
                } else {
                    processGroup--;
                }
            }
            if (processGroup < 0) {
            }
            item.changes |= changes2;
            item.foregroundActivities = processRecord.repForegroundActivities;
            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
            }
        }
        return success2;
    }

    private boolean isEphemeralLocked(int uid) {
        String[] packages = this.mContext.getPackageManager().getPackagesForUid(uid);
        if (packages == null || packages.length != 1) {
            return false;
        }
        return getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packages[0]);
    }

    @VisibleForTesting
    final void enqueueUidChangeLocked(UidRecord uidRec, int uid, int change) {
        ChangeItem pendingChange;
        if (uidRec == null || uidRec.pendingChange == null) {
            ChangeItem pendingChange2;
            if (this.mPendingUidChanges.size() == 0) {
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    Slog.i(TAG, "*** Enqueueing dispatch uid changed!");
                }
                pendingChange2 = 53;
                this.mUiHandler.obtainMessage(53).sendToTarget();
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int NA = this.mAvailUidChanges.size();
                    String str;
                    StringBuilder stringBuilder;
                    if (NA > 0) {
                        pendingChange2 = (ChangeItem) this.mAvailUidChanges.remove(NA - 1);
                        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                            str = TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Retrieving available item: ");
                            stringBuilder.append(pendingChange2);
                            Slog.i(str, stringBuilder.toString());
                        }
                    } else {
                        pendingChange2 = new ChangeItem();
                        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                            str = TAG;
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("Allocating new item: ");
                            stringBuilder.append(pendingChange2);
                            Slog.i(str, stringBuilder.toString());
                        }
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            pendingChange = pendingChange2;
            if (uidRec != null) {
                uidRec.pendingChange = pendingChange;
                if (!((change & 1) == 0 || uidRec.idle)) {
                    change |= 2;
                }
            } else if (uid < 0) {
                throw new IllegalArgumentException("No UidRecord or uid");
            }
            pendingChange.uidRecord = uidRec;
            pendingChange.uid = uidRec != null ? uidRec.uid : uid;
            this.mPendingUidChanges.add(pendingChange);
        } else {
            pendingChange = uidRec.pendingChange;
            if ((change & 6) == 0) {
                change |= pendingChange.change & 6;
            }
            if ((change & 24) == 0) {
                change |= pendingChange.change & 24;
            }
            if ((change & 1) != 0) {
                change &= -13;
                if (!uidRec.idle) {
                    change |= 2;
                }
            }
        }
        pendingChange.change = change;
        pendingChange.processState = uidRec != null ? uidRec.setProcState : 19;
        pendingChange.ephemeral = uidRec != null ? uidRec.ephemeral : isEphemeralLocked(uid);
        pendingChange.procStateSeq = uidRec != null ? uidRec.curProcStateSeq : 0;
        if (uidRec != null) {
            uidRec.lastReportedChange = change;
            uidRec.updateLastDispatchedProcStateSeq(change);
        }
        if (this.mLocalPowerManager != null) {
            if ((change & 4) != 0) {
                this.mLocalPowerManager.uidActive(pendingChange.uid);
            }
            if ((change & 2) != 0) {
                this.mLocalPowerManager.uidIdle(pendingChange.uid);
            }
            if ((change & 1) != 0) {
                this.mLocalPowerManager.uidGone(pendingChange.uid);
            } else {
                this.mLocalPowerManager.updateUidProcState(pendingChange.uid, pendingChange.processState);
            }
        }
    }

    private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName, String authority) {
        if (app != null && app.curProcState <= 5) {
            UserState userState = this.mUserController.getStartedUserState(app.userId);
            if (userState != null) {
                long now = SystemClock.elapsedRealtime();
                Long lastReported = (Long) userState.mProviderLastReportedFg.get(authority);
                if (lastReported == null || lastReported.longValue() < now - 60000) {
                    if (this.mSystemReady) {
                        this.mUsageStatsService.reportContentProviderUsage(authority, providerPkgName, app.userId);
                    }
                    userState.mProviderLastReportedFg.put(authority, Long.valueOf(now));
                }
            }
        }
    }

    private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed) {
        if (ActivityManagerDebugConfig.DEBUG_USAGE_STATS) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Checking proc [");
            stringBuilder.append(Arrays.toString(app.getPackageList()));
            stringBuilder.append("] state changes: old = ");
            stringBuilder.append(app.setProcState);
            stringBuilder.append(", new = ");
            stringBuilder.append(app.curProcState);
            Slog.d(str, stringBuilder.toString());
        }
        if (this.mUsageStatsService != null) {
            boolean isInteraction;
            int i = 0;
            if (app.curProcState <= 2) {
                isInteraction = true;
                app.fgInteractionTime = 0;
            } else {
                boolean z = true;
                if (app.curProcState > 3) {
                    if (app.curProcState > 5) {
                        z = false;
                    }
                    isInteraction = z;
                    app.fgInteractionTime = 0;
                } else if (app.fgInteractionTime == 0) {
                    app.fgInteractionTime = nowElapsed;
                    isInteraction = false;
                } else {
                    if (nowElapsed <= app.fgInteractionTime + this.mConstants.SERVICE_USAGE_INTERACTION_TIME) {
                        z = false;
                    }
                    isInteraction = z;
                }
            }
            if (isInteraction && (!app.reportedInteraction || nowElapsed - app.interactionEventTime > this.mConstants.USAGE_STATS_INTERACTION_INTERVAL)) {
                app.interactionEventTime = nowElapsed;
                String[] packages = app.getPackageList();
                if (packages != null) {
                    while (i < packages.length) {
                        this.mUsageStatsService.reportEvent(packages[i], app.userId, 6);
                        i++;
                    }
                }
            }
            app.reportedInteraction = isInteraction;
            if (!isInteraction) {
                app.interactionEventTime = 0;
            }
        }
    }

    private final void setProcessTrackerStateLocked(ProcessRecord proc, int memFactor, long now) {
        if (proc.thread != null && proc.baseProcessTracker != null) {
            proc.baseProcessTracker.setState(proc.repProcState, memFactor, now, proc.pkgList);
        }
    }

    private final boolean updateOomAdjLocked(ProcessRecord app, int cachedAdj, ProcessRecord TOP_APP, boolean doingAll, long now) {
        if (app.thread == null) {
            return false;
        }
        computeOomAdjLocked(app, cachedAdj, TOP_APP, doingAll, now);
        return applyOomAdjLocked(app, doingAll, now, SystemClock.elapsedRealtime());
    }

    @GuardedBy("this")
    final void updateProcessForegroundLocked(ProcessRecord proc, boolean isForeground, boolean oomAdj) {
        if (isForeground != proc.foregroundServices) {
            proc.foregroundServices = isForeground;
            ArrayList<ProcessRecord> curProcs = (ArrayList) this.mForegroundPackages.get(proc.info.packageName, proc.info.uid);
            if (isForeground) {
                if (curProcs == null) {
                    curProcs = new ArrayList();
                    this.mForegroundPackages.put(proc.info.packageName, proc.info.uid, curProcs);
                }
                if (!curProcs.contains(proc)) {
                    curProcs.add(proc);
                    this.mBatteryStatsService.noteEvent(32770, proc.info.packageName, proc.info.uid);
                }
            } else if (curProcs != null && curProcs.remove(proc)) {
                this.mBatteryStatsService.noteEvent(16386, proc.info.packageName, proc.info.uid);
                if (curProcs.size() <= 0) {
                    this.mForegroundPackages.remove(proc.info.packageName, proc.info.uid);
                }
            }
            if (oomAdj) {
                updateOomAdjLocked();
            }
        }
    }

    private final ActivityRecord resumedAppLocked() {
        String pkg;
        int uid;
        ActivityRecord act = this.mStackSupervisor.getResumedActivityLocked();
        if (act != null) {
            pkg = act.packageName;
            uid = act.info.applicationInfo.uid;
        } else {
            pkg = null;
            uid = -1;
        }
        if (uid != this.mCurResumedUid || (pkg != this.mCurResumedPackage && (pkg == null || !pkg.equals(this.mCurResumedPackage)))) {
            if (this.mCurResumedPackage != null) {
                this.mBatteryStatsService.noteEvent(16387, this.mCurResumedPackage, this.mCurResumedUid);
            }
            this.mCurResumedPackage = pkg;
            this.mCurResumedUid = uid;
            if (this.mCurResumedPackage != null) {
                this.mBatteryStatsService.noteEvent(32771, this.mCurResumedPackage, this.mCurResumedUid);
            }
        }
        return act;
    }

    @GuardedBy("this")
    final boolean updateOomAdjLocked(ProcessRecord app, boolean oomAdjAll) {
        ActivityRecord TOP_ACT = resumedAppLocked();
        ProcessRecord TOP_APP = TOP_ACT != null ? TOP_ACT.app : null;
        boolean wasCached = app.cached;
        this.mAdjSeq++;
        boolean success = updateOomAdjLocked(app, app.curRawAdj >= 900 ? app.curRawAdj : NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE, TOP_APP, false, SystemClock.uptimeMillis());
        if (oomAdjAll && (wasCached != app.cached || app.curRawAdj == NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE)) {
            updateOomAdjLocked();
        }
        return success;
    }

    @GuardedBy("this")
    final void updateOomAdjLocked() {
        int i;
        int i2;
        ActivityRecord TOP_ACT = resumedAppLocked();
        ProcessRecord TOP_APP = TOP_ACT != null ? TOP_ACT.app : null;
        long now = SystemClock.uptimeMillis();
        long nowElapsed = SystemClock.elapsedRealtime();
        long oldTime = now - 1800000;
        int N = this.mLruProcesses.size();
        for (i = this.mActiveUids.size() - 1; i >= 0; i--) {
            ((UidRecord) this.mActiveUids.valueAt(i)).reset();
        }
        this.mStackSupervisor.rankTaskLayersIfNeeded();
        this.mAdjSeq++;
        this.mNewNumServiceProcs = 0;
        this.mNewNumAServiceProcs = 0;
        int emptyProcessLimit = this.mConstants.CUR_MAX_EMPTY_PROCESSES;
        int cachedProcessLimit = this.mConstants.CUR_MAX_CACHED_PROCESSES - emptyProcessLimit;
        i = (N - this.mNumNonCachedProcs) - this.mNumCachedHiddenProcs;
        if (i > cachedProcessLimit) {
            i = cachedProcessLimit;
        }
        i /= 3;
        if (i < 1) {
            i = 1;
        }
        int emptyFactor = i;
        i = (this.mNumCachedHiddenProcs > 0 ? this.mNumCachedHiddenProcs : 1) / 3;
        if (i < 1) {
            i = 1;
        }
        int cachedFactor = i;
        int stepEmpty = 0;
        int numTrimming = 0;
        this.mNumNonCachedProcs = 0;
        this.mNumCachedHiddenProcs = 0;
        int nextCachedAdj = 900 + 1;
        int nextEmptyAdj = 900 + 2;
        boolean retryCycles = false;
        int i3 = N - 1;
        while (true) {
            i2 = i3;
            if (i2 < 0) {
                break;
            }
            ((ProcessRecord) this.mLruProcesses.get(i2)).containsCycle = false;
            i3 = i2 - 1;
        }
        ProcessRecord selectedAppRecord = null;
        int i4 = N - 1;
        long nowElapsed2 = nowElapsed;
        int curCachedAdj = 900;
        int nextCachedAdj2 = nextCachedAdj;
        int curEmptyAdj = 900;
        int nextEmptyAdj2 = nextEmptyAdj;
        long serviceLastActivity = 0;
        i2 = 0;
        int stepCached = 0;
        while (true) {
            i = i4;
            int emptyProcessLimit2 = emptyProcessLimit;
            ProcessRecord selectedAppRecord2 = selectedAppRecord;
            int curCachedAdj2 = curCachedAdj;
            int s;
            String str;
            ActivityRecord TOP_ACT2;
            int N2;
            int nextCachedAdj3;
            int emptyProcessLimit3;
            int cachedProcessLimit2;
            boolean z;
            boolean retryCycles2;
            if (i >= 0) {
                int emptyFactor2;
                int cachedProcessLimit3;
                int cachedFactor2;
                ProcessRecord selectedAppRecord3;
                String str2;
                ProcessRecord selectedAppRecord4;
                int numBServices;
                ProcessRecord app = (ProcessRecord) this.mLruProcesses.get(i);
                if (ProcessList.ENABLE_B_SERVICE_PROPAGATION && app.serviceb && app.curAdj == 800) {
                    i2++;
                    if ((app.info.flags & NetworkConstants.ICMPV6_ECHO_REPLY_TYPE) == 0 || (app.info.hwFlags & 100663296) != 0) {
                        s = app.services.size() - 1;
                        while (s >= 0) {
                            ServiceRecord sr = (ServiceRecord) app.services.valueAt(s);
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                str = TAG;
                                emptyFactor2 = emptyFactor;
                                StringBuilder stringBuilder = new StringBuilder();
                                cachedProcessLimit3 = cachedProcessLimit;
                                stringBuilder.append("app.processName = ");
                                stringBuilder.append(app.processName);
                                stringBuilder.append(" serviceb = ");
                                stringBuilder.append(app.serviceb);
                                stringBuilder.append(" s = ");
                                stringBuilder.append(s);
                                stringBuilder.append(" sr.lastActivity = ");
                                TOP_ACT2 = TOP_ACT;
                                cachedFactor2 = cachedFactor;
                                stringBuilder.append(sr.lastActivity);
                                stringBuilder.append(" packageName = ");
                                stringBuilder.append(sr.packageName);
                                stringBuilder.append(" processName = ");
                                stringBuilder.append(sr.processName);
                                Slog.d(str, stringBuilder.toString());
                            } else {
                                emptyFactor2 = emptyFactor;
                                cachedProcessLimit3 = cachedProcessLimit;
                                TOP_ACT2 = TOP_ACT;
                                cachedFactor2 = cachedFactor;
                            }
                            if (SystemClock.uptimeMillis() - sr.lastActivity >= ((long) ProcessList.MIN_BSERVICE_AGING_TIME)) {
                                long serviceLastActivity2;
                                if (serviceLastActivity == 0) {
                                    serviceLastActivity2 = sr.lastActivity;
                                    selectedAppRecord = app;
                                } else if (sr.lastActivity < serviceLastActivity) {
                                    serviceLastActivity2 = sr.lastActivity;
                                    selectedAppRecord = app;
                                }
                                selectedAppRecord2 = selectedAppRecord;
                                serviceLastActivity = serviceLastActivity2;
                            } else if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                Slog.d(TAG, "Not aged enough!!!");
                            }
                            s--;
                            emptyFactor = emptyFactor2;
                            cachedProcessLimit = cachedProcessLimit3;
                            TOP_ACT = TOP_ACT2;
                            cachedFactor = cachedFactor2;
                        }
                        emptyFactor2 = emptyFactor;
                        cachedProcessLimit3 = cachedProcessLimit;
                        TOP_ACT2 = TOP_ACT;
                        cachedFactor2 = cachedFactor;
                        selectedAppRecord3 = selectedAppRecord2;
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ && selectedAppRecord3 != null) {
                            str2 = TAG;
                            cachedProcessLimit = new StringBuilder();
                            cachedProcessLimit.append("Identified app.processName = ");
                            cachedProcessLimit.append(selectedAppRecord3.processName);
                            cachedProcessLimit.append(" app.pid = ");
                            cachedProcessLimit.append(selectedAppRecord3.pid);
                            Slog.d(str2, cachedProcessLimit.toString());
                        }
                        if (!app.killedByAm || app.thread == null) {
                            N2 = N;
                            selectedAppRecord4 = selectedAppRecord3;
                            numBServices = i2;
                            s = nextEmptyAdj2;
                            nextCachedAdj3 = nextCachedAdj2;
                            emptyProcessLimit3 = emptyProcessLimit2;
                            emptyProcessLimit = curCachedAdj2;
                            cachedFactor = emptyFactor2;
                            cachedProcessLimit2 = cachedProcessLimit3;
                            N = cachedFactor2;
                        } else {
                            app.procStateChanged = false;
                            cachedFactor = emptyFactor2;
                            cachedProcessLimit2 = cachedProcessLimit3;
                            selectedAppRecord4 = selectedAppRecord3;
                            numBServices = i2;
                            emptyProcessLimit3 = emptyProcessLimit2;
                            curCachedAdj = app;
                            z = false;
                            N2 = N;
                            computeOomAdjLocked(app, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE, TOP_APP, true, now);
                            retryCycles2 = retryCycles | curCachedAdj.containsCycle;
                            if (curCachedAdj.curAdj >= NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE) {
                                switch (curCachedAdj.curProcState) {
                                    case 15:
                                    case 16:
                                    case 17:
                                        emptyProcessLimit = curCachedAdj2;
                                        curCachedAdj.curRawAdj = emptyProcessLimit;
                                        curCachedAdj.curAdj = curCachedAdj.modifyRawOomAdj(emptyProcessLimit);
                                        cachedProcessLimit = ActivityManagerDebugConfig.DEBUG_LRU;
                                        nextCachedAdj3 = nextCachedAdj2;
                                        if (emptyProcessLimit == nextCachedAdj3) {
                                            N = cachedFactor2;
                                            s = nextEmptyAdj2;
                                            break;
                                        }
                                        cachedProcessLimit = stepCached + 1;
                                        N = cachedFactor2;
                                        if (cachedProcessLimit < N) {
                                            retryCycles = retryCycles2;
                                            stepCached = cachedProcessLimit;
                                            curCachedAdj = emptyProcessLimit;
                                            break;
                                        }
                                        emptyProcessLimit = nextCachedAdj3;
                                        s = nextCachedAdj3 + 2;
                                        if (s > 906) {
                                            s = 906;
                                        }
                                        retryCycles = retryCycles2;
                                        stepCached = 0;
                                        curCachedAdj = emptyProcessLimit;
                                        nextCachedAdj2 = s;
                                        break;
                                    default:
                                        nextCachedAdj3 = nextCachedAdj2;
                                        emptyProcessLimit = curCachedAdj2;
                                        N = cachedFactor2;
                                        curCachedAdj.curRawAdj = curEmptyAdj;
                                        curCachedAdj.curAdj = curCachedAdj.modifyRawOomAdj(curEmptyAdj);
                                        cachedProcessLimit = ActivityManagerDebugConfig.DEBUG_LRU;
                                        s = nextEmptyAdj2;
                                        if (curEmptyAdj != s) {
                                            cachedProcessLimit = stepEmpty + 1;
                                            if (cachedProcessLimit >= cachedFactor) {
                                                cachedProcessLimit = 0;
                                                curEmptyAdj = s;
                                                s += 2;
                                                if (s > 906) {
                                                    s = 906;
                                                }
                                            }
                                            retryCycles = retryCycles2;
                                            stepEmpty = cachedProcessLimit;
                                            break;
                                        }
                                        break;
                                }
                            }
                            s = nextEmptyAdj2;
                            nextCachedAdj3 = nextCachedAdj2;
                            emptyProcessLimit = curCachedAdj2;
                            N = cachedFactor2;
                            retryCycles = retryCycles2;
                        }
                        curCachedAdj = emptyProcessLimit;
                        nextEmptyAdj2 = s;
                        nextCachedAdj2 = nextCachedAdj3;
                        i4 = i - 1;
                        emptyFactor = cachedFactor;
                        cachedProcessLimit = cachedProcessLimit2;
                        i2 = numBServices;
                        selectedAppRecord = selectedAppRecord4;
                        emptyProcessLimit = emptyProcessLimit3;
                        cachedFactor = N;
                        N = N2;
                        TOP_ACT = TOP_ACT2;
                    } else {
                        emptyFactor2 = emptyFactor;
                        cachedProcessLimit3 = cachedProcessLimit;
                        TOP_ACT2 = TOP_ACT;
                        cachedFactor2 = cachedFactor;
                    }
                } else {
                    emptyFactor2 = emptyFactor;
                    cachedProcessLimit3 = cachedProcessLimit;
                    TOP_ACT2 = TOP_ACT;
                    cachedFactor2 = cachedFactor;
                }
                selectedAppRecord3 = selectedAppRecord2;
                str2 = TAG;
                cachedProcessLimit = new StringBuilder();
                cachedProcessLimit.append("Identified app.processName = ");
                cachedProcessLimit.append(selectedAppRecord3.processName);
                cachedProcessLimit.append(" app.pid = ");
                cachedProcessLimit.append(selectedAppRecord3.pid);
                Slog.d(str2, cachedProcessLimit.toString());
                if (app.killedByAm) {
                }
                N2 = N;
                selectedAppRecord4 = selectedAppRecord3;
                numBServices = i2;
                s = nextEmptyAdj2;
                nextCachedAdj3 = nextCachedAdj2;
                emptyProcessLimit3 = emptyProcessLimit2;
                emptyProcessLimit = curCachedAdj2;
                cachedFactor = emptyFactor2;
                cachedProcessLimit2 = cachedProcessLimit3;
                N = cachedFactor2;
                curCachedAdj = emptyProcessLimit;
                nextEmptyAdj2 = s;
                nextCachedAdj2 = nextCachedAdj3;
                i4 = i - 1;
                emptyFactor = cachedFactor;
                cachedProcessLimit = cachedProcessLimit2;
                i2 = numBServices;
                selectedAppRecord = selectedAppRecord4;
                emptyProcessLimit = emptyProcessLimit3;
                cachedFactor = N;
                N = N2;
                TOP_ACT = TOP_ACT2;
            } else {
                long now2;
                long nowElapsed3;
                ProcessRecord selectedAppRecord5;
                cachedProcessLimit2 = cachedProcessLimit;
                TOP_ACT2 = TOP_ACT;
                curCachedAdj = i2;
                s = nextEmptyAdj2;
                nextCachedAdj3 = nextCachedAdj2;
                emptyProcessLimit3 = emptyProcessLimit2;
                emptyProcessLimit = curCachedAdj2;
                N2 = N;
                N = cachedFactor;
                i = 0;
                while (true) {
                    int cycleCount = i;
                    if (retryCycles) {
                        cachedProcessLimit = cycleCount;
                        if (cachedProcessLimit < 10) {
                            int cycleCount2;
                            i = cachedProcessLimit + 1;
                            retryCycles2 = false;
                            cachedProcessLimit = 0;
                            while (cachedProcessLimit < N2) {
                                boolean retryCycles3;
                                ProcessRecord app2 = (ProcessRecord) this.mLruProcesses.get(cachedProcessLimit);
                                cycleCount2 = i;
                                if (app2.killedByAm != 0 || app2.thread == null) {
                                    retryCycles3 = retryCycles2;
                                } else {
                                    retryCycles3 = retryCycles2;
                                    if (app2.containsCycle) {
                                        app2.adjSeq--;
                                        app2.completedAdjSeq--;
                                    }
                                }
                                cachedProcessLimit++;
                                i = cycleCount2;
                                retryCycles2 = retryCycles3;
                            }
                            cycleCount2 = i;
                            retryCycles = retryCycles2;
                            i = 0;
                            while (i < N2) {
                                ProcessRecord cycleCount3 = (ProcessRecord) this.mLruProcesses.get(i);
                                if (cycleCount3.killedByAm || cycleCount3.thread == null || !cycleCount3.containsCycle) {
                                    i2 = emptyProcessLimit;
                                    nextEmptyAdj = s;
                                    i3 = N;
                                    nextCachedAdj2 = nextCachedAdj3;
                                    emptyProcessLimit = curCachedAdj;
                                    i4 = curEmptyAdj;
                                    now2 = now;
                                    nowElapsed3 = nowElapsed2;
                                    selectedAppRecord5 = selectedAppRecord2;
                                } else {
                                    nextEmptyAdj = s;
                                    i3 = N;
                                    nextCachedAdj2 = nextCachedAdj3;
                                    selectedAppRecord5 = selectedAppRecord2;
                                    i2 = emptyProcessLimit;
                                    emptyProcessLimit = curCachedAdj;
                                    nowElapsed3 = nowElapsed2;
                                    i4 = curEmptyAdj;
                                    now2 = now;
                                    if (computeOomAdjLocked(cycleCount3, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE, TOP_APP, true, now)) {
                                        retryCycles = true;
                                    }
                                }
                                i++;
                                curCachedAdj = emptyProcessLimit;
                                emptyProcessLimit = i2;
                                s = nextEmptyAdj;
                                N = i3;
                                curEmptyAdj = i4;
                                nextCachedAdj3 = nextCachedAdj2;
                                selectedAppRecord2 = selectedAppRecord5;
                                nowElapsed2 = nowElapsed3;
                                now = now2;
                            }
                            i = cycleCount2;
                        } else {
                            nextEmptyAdj = s;
                            i3 = N;
                            nextCachedAdj2 = nextCachedAdj3;
                            emptyProcessLimit = curCachedAdj;
                            i4 = curEmptyAdj;
                            now2 = now;
                            nowElapsed3 = nowElapsed2;
                            selectedAppRecord5 = selectedAppRecord2;
                            now = 10;
                        }
                    } else {
                        nextEmptyAdj = s;
                        i3 = N;
                        nextCachedAdj2 = nextCachedAdj3;
                        emptyProcessLimit = curCachedAdj;
                        i4 = curEmptyAdj;
                        now2 = now;
                        nowElapsed3 = nowElapsed2;
                        selectedAppRecord5 = selectedAppRecord2;
                        cachedProcessLimit = cycleCount;
                        now = 10;
                    }
                }
                N = N2 - 1;
                int numCached = 0;
                curCachedAdj = 0;
                while (true) {
                    i = N;
                    ProcessRecord TOP_APP2;
                    ProcessRecord app3;
                    StringBuilder stringBuilder2;
                    StringBuilder stringBuilder3;
                    UidRecord uidRec;
                    if (i >= 0) {
                        int cycleCount4;
                        ProcessRecord processRecord = (ProcessRecord) this.mLruProcesses.get(i);
                        if (processRecord.killedByAm || processRecord.thread == null) {
                            cycleCount4 = cachedProcessLimit;
                            TOP_APP2 = TOP_APP;
                            emptyFactor = curCachedAdj;
                            cachedProcessLimit = numCached;
                            nextCachedAdj3 = cachedProcessLimit2;
                            N = emptyProcessLimit3;
                        } else {
                            ProcessRecord app4 = processRecord;
                            emptyFactor = curCachedAdj;
                            cycleCount4 = cachedProcessLimit;
                            TOP_APP2 = TOP_APP;
                            TOP_APP = now;
                            cachedProcessLimit = numCached;
                            applyOomAdjLocked(processRecord, true, now2, nowElapsed3);
                            app3 = app4;
                            switch (app3.curProcState) {
                                case 15:
                                case 16:
                                    N = emptyProcessLimit3;
                                    this.mNumCachedHiddenProcs++;
                                    numCached = cachedProcessLimit + 1;
                                    nextCachedAdj3 = cachedProcessLimit2;
                                    if (numCached > nextCachedAdj3) {
                                        cachedProcessLimit = new StringBuilder();
                                        cachedProcessLimit.append("cached #");
                                        cachedProcessLimit.append(numCached);
                                        app3.kill(cachedProcessLimit.toString(), true);
                                    }
                                    cachedProcessLimit = numCached;
                                    break;
                                case 18:
                                    if (emptyFactor > this.mConstants.CUR_TRIM_EMPTY_PROCESSES && app3.lastActivityTime < oldTime) {
                                        stringBuilder2 = new StringBuilder();
                                        stringBuilder2.append("empty for ");
                                        stringBuilder2.append(((oldTime + 1800000) - app3.lastActivityTime) / 1000);
                                        stringBuilder2.append("s");
                                        app3.kill(stringBuilder2.toString(), true);
                                        nextCachedAdj3 = cachedProcessLimit2;
                                        N = emptyProcessLimit3;
                                        break;
                                    }
                                    curCachedAdj = emptyFactor + 1;
                                    N = emptyProcessLimit3;
                                    if (curCachedAdj > N) {
                                        emptyFactor = app3.userId;
                                        str = app3.processName;
                                        stringBuilder3 = new StringBuilder();
                                        stringBuilder3.append("empty #");
                                        stringBuilder3.append(curCachedAdj);
                                        app3.kill(stringBuilder3.toString(), true);
                                        this.mHwAMSEx.reportAppDiedMsg(emptyFactor, str, -1, "emptyProcess");
                                    }
                                    emptyFactor = curCachedAdj;
                                    nextCachedAdj3 = cachedProcessLimit2;
                                    break;
                                    break;
                                default:
                                    nextCachedAdj3 = cachedProcessLimit2;
                                    N = emptyProcessLimit3;
                                    this.mNumNonCachedProcs++;
                                    break;
                            }
                            if (app3.isolated && app3.services.size() <= 0 && app3.isolatedEntryPoint == null) {
                                app3.kill("isolated not needed", true);
                            } else {
                                uidRec = app3.uidRecord;
                                if (uidRec != null) {
                                    uidRec.ephemeral = app3.info.isInstantApp();
                                    if (uidRec.curProcState > app3.curProcState) {
                                        uidRec.curProcState = app3.curProcState;
                                    }
                                    if (app3.foregroundServices) {
                                        uidRec.foregroundServices = true;
                                    }
                                }
                            }
                            if (app3.curProcState >= 13 && app3.killedByAm == null) {
                                numTrimming++;
                            }
                        }
                        curCachedAdj = emptyFactor;
                        numCached = cachedProcessLimit;
                        emptyProcessLimit3 = N;
                        cachedProcessLimit2 = nextCachedAdj3;
                        cachedProcessLimit = cycleCount4;
                        TOP_APP = TOP_APP2;
                        now = 10;
                        N = i - 1;
                    } else {
                        String str3;
                        boolean allChanged;
                        StringBuilder stringBuilder4;
                        TOP_APP2 = TOP_APP;
                        TOP_APP = -1;
                        emptyFactor = curCachedAdj;
                        curCachedAdj = 13;
                        cachedProcessLimit = numCached;
                        nextCachedAdj3 = cachedProcessLimit2;
                        N = emptyProcessLimit3;
                        if (emptyProcessLimit <= ProcessList.BSERVICE_APP_THRESHOLD || true != this.mAllowLowerMemLevel) {
                            app3 = selectedAppRecord5;
                        } else {
                            app3 = selectedAppRecord5;
                            if (app3 != null) {
                                if (this.mCpusetSwitch) {
                                    ProcessList.setOomAdj(app3.pid, app3.info.uid, 906, app3.processName);
                                } else {
                                    ProcessList.setOomAdj(app3.pid, app3.info.uid, 906);
                                }
                                app3.setAdj = app3.curAdj;
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    str3 = TAG;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("app.processName = ");
                                    stringBuilder3.append(app3.processName);
                                    stringBuilder3.append(" app.pid = ");
                                    stringBuilder3.append(app3.pid);
                                    stringBuilder3.append(" is moved to higher adj");
                                    Slog.d(str3, stringBuilder3.toString());
                                }
                            }
                        }
                        incrementProcStateSeqAndNotifyAppsLocked();
                        this.mNumServiceProcs = this.mNewNumServiceProcs;
                        numCached = cachedProcessLimit + emptyFactor;
                        if (cachedProcessLimit > this.mConstants.CUR_TRIM_CACHED_PROCESSES || emptyFactor > this.mConstants.CUR_TRIM_EMPTY_PROCESSES) {
                            i = 0;
                        } else if (numCached <= 3) {
                            i = 3;
                        } else if (numCached <= 5) {
                            i = 2;
                        } else {
                            i = 1;
                        }
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            String str4 = TAG;
                            stringBuilder3 = new StringBuilder();
                            stringBuilder3.append("oom: memFactor=");
                            stringBuilder3.append(i);
                            stringBuilder3.append(" last=");
                            stringBuilder3.append(this.mLastMemoryLevel);
                            stringBuilder3.append(" allowLow=");
                            stringBuilder3.append(this.mAllowLowerMemLevel);
                            stringBuilder3.append(" numProcs=");
                            stringBuilder3.append(this.mLruProcesses.size());
                            stringBuilder3.append(" last=");
                            stringBuilder3.append(this.mLastNumProcesses);
                            Slog.d(str4, stringBuilder3.toString());
                        }
                        if (i > this.mLastMemoryLevel && (!this.mAllowLowerMemLevel || this.mLruProcesses.size() >= this.mLastNumProcesses)) {
                            i = this.mLastMemoryLevel;
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                Slog.d(TAG, "Keeping last mem factor!");
                            }
                        }
                        int memFactor = i;
                        if (memFactor != this.mLastMemoryLevel) {
                            EventLogTags.writeAmMemFactor(memFactor, this.mLastMemoryLevel);
                        }
                        this.mLastMemoryLevel = memFactor;
                        this.mLastNumProcesses = this.mLruProcesses.size();
                        long now3 = now2;
                        boolean allChanged2 = this.mProcessStats.setMemFactorLocked(memFactor, isSleepingLocked() ^ true, now3);
                        int trackerMemFactor = this.mProcessStats.getMemFactorLocked();
                        int memFactor2;
                        int cachedProcessLimit4;
                        StringBuilder stringBuilder5;
                        if (memFactor != 0) {
                            allChanged = allChanged2;
                            if (this.mLowRamStartTime == null) {
                                this.mLowRamStartTime = now3;
                            }
                            switch (memFactor) {
                                case 2:
                                    curEmptyAdj = 10;
                                    break;
                                case 3:
                                    curEmptyAdj = 15;
                                    break;
                                default:
                                    curEmptyAdj = 5;
                                    break;
                            }
                            curCachedAdj = curEmptyAdj;
                            allChanged2 = numTrimming / 3;
                            int minFactor = 2;
                            if (this.mHomeProcess != null) {
                                minFactor = 2 + 1;
                            }
                            if (this.mPreviousProcess != null) {
                                minFactor++;
                            }
                            s = minFactor;
                            if (allChanged2 < s) {
                                allChanged2 = s;
                            }
                            N = 80;
                            int step = 0;
                            i = this.mLruProcesses.size() - 1;
                            while (true) {
                                int numBServices2 = emptyProcessLimit;
                                emptyProcessLimit = i;
                                if (emptyProcessLimit >= 0) {
                                    int minFactor2;
                                    ProcessRecord app5 = null;
                                    try {
                                        memFactor2 = memFactor;
                                        memFactor = (ProcessRecord) this.mLruProcesses.get(emptyProcessLimit);
                                        if (memFactor == 0) {
                                            minFactor2 = s;
                                            cachedProcessLimit4 = nextCachedAdj3;
                                        } else {
                                            if (allChanged || memFactor.procStateChanged) {
                                                setProcessTrackerStateLocked(memFactor, trackerMemFactor, now3);
                                                minFactor2 = s;
                                                memFactor.procStateChanged = false;
                                            } else {
                                                minFactor2 = s;
                                            }
                                            if (memFactor.curProcState < 13 || memFactor.killedByAm) {
                                                cachedProcessLimit4 = nextCachedAdj3;
                                                if (memFactor.curProcState != 12 || memFactor.killedByAm) {
                                                    if ((memFactor.curProcState >= 6 || memFactor.systemNoUi) && memFactor.pendingUiClean) {
                                                        int level;
                                                        if (memFactor.trimMemoryLevel >= 20 || memFactor.thread == null) {
                                                            level = 20;
                                                        } else {
                                                            try {
                                                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                                    str3 = TAG;
                                                                    stringBuilder4 = new StringBuilder();
                                                                    level = 20;
                                                                    try {
                                                                        stringBuilder4.append("Trimming memory of bg-ui ");
                                                                        stringBuilder4.append(memFactor.processName);
                                                                        stringBuilder4.append(" to ");
                                                                        stringBuilder4.append(20);
                                                                        Slog.v(str3, stringBuilder4.toString());
                                                                    } catch (RemoteException e) {
                                                                    }
                                                                } else {
                                                                    level = 20;
                                                                }
                                                                memFactor.thread.scheduleTrimMemory(20);
                                                            } catch (RemoteException e2) {
                                                                level = 20;
                                                            }
                                                        }
                                                        memFactor.pendingUiClean = false;
                                                    }
                                                    if (memFactor.trimMemoryLevel < curCachedAdj && memFactor.thread != null) {
                                                        try {
                                                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                                str3 = TAG;
                                                                s = new StringBuilder();
                                                                s.append("Trimming memory of fg ");
                                                                s.append(memFactor.processName);
                                                                s.append(" to ");
                                                                s.append(curCachedAdj);
                                                                Slog.v(str3, s.toString());
                                                            }
                                                            memFactor.thread.scheduleTrimMemory(curCachedAdj);
                                                        } catch (RemoteException e3) {
                                                        }
                                                    }
                                                    memFactor.trimMemoryLevel = curCachedAdj;
                                                } else {
                                                    if (memFactor.trimMemoryLevel < 40 && memFactor.thread != null) {
                                                        try {
                                                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                                str3 = TAG;
                                                                stringBuilder4 = new StringBuilder();
                                                                stringBuilder4.append("Trimming memory of heavy-weight ");
                                                                stringBuilder4.append(memFactor.processName);
                                                                stringBuilder4.append(" to ");
                                                                stringBuilder4.append(40);
                                                                Slog.v(str3, stringBuilder4.toString());
                                                            }
                                                            memFactor.thread.scheduleTrimMemory(40);
                                                        } catch (RemoteException e4) {
                                                        }
                                                    }
                                                    memFactor.trimMemoryLevel = 40;
                                                }
                                            } else {
                                                if (memFactor.trimMemoryLevel >= N || memFactor.thread == null) {
                                                    cachedProcessLimit4 = nextCachedAdj3;
                                                } else {
                                                    try {
                                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                            str3 = TAG;
                                                            stringBuilder5 = new StringBuilder();
                                                            cachedProcessLimit4 = nextCachedAdj3;
                                                            try {
                                                                stringBuilder5.append("Trimming memory of ");
                                                                stringBuilder5.append(memFactor.processName);
                                                                stringBuilder5.append(" to ");
                                                                stringBuilder5.append(N);
                                                                Slog.v(str3, stringBuilder5.toString());
                                                            } catch (RemoteException e5) {
                                                            }
                                                        } else {
                                                            cachedProcessLimit4 = nextCachedAdj3;
                                                        }
                                                        SmartShrinker.reclaim(memFactor.pid, 4);
                                                        memFactor.thread.scheduleTrimMemory(N);
                                                    } catch (RemoteException e6) {
                                                        cachedProcessLimit4 = nextCachedAdj3;
                                                    }
                                                }
                                                memFactor.trimMemoryLevel = N;
                                                i = step + 1;
                                                if (i >= allChanged2) {
                                                    i = 0;
                                                    if (N == 60) {
                                                        N = 40;
                                                    } else if (N == 80) {
                                                        N = 60;
                                                    }
                                                }
                                                step = i;
                                            }
                                        }
                                    } catch (IndexOutOfBoundsException e7) {
                                        memFactor2 = memFactor;
                                        minFactor2 = s;
                                        cachedProcessLimit4 = nextCachedAdj3;
                                        Log.w(TAG, "ProcessRecord index out of bounds!", e7);
                                    }
                                    i = emptyProcessLimit - 1;
                                    emptyProcessLimit = numBServices2;
                                    memFactor = memFactor2;
                                    s = minFactor2;
                                    nextCachedAdj3 = cachedProcessLimit4;
                                } else {
                                    cachedProcessLimit4 = nextCachedAdj3;
                                }
                            }
                        } else {
                            memFactor2 = memFactor;
                            ProcessRecord processRecord2 = app3;
                            int i5 = N;
                            cachedProcessLimit4 = nextCachedAdj3;
                            allChanged = allChanged2;
                            if (this.mLowRamStartTime != 0) {
                                this.mLowRamTimeSinceLastIdle += now3 - this.mLowRamStartTime;
                                this.mLowRamStartTime = 0;
                            }
                            i = this.mLruProcesses.size() - 1;
                            while (true) {
                                emptyProcessLimit = i;
                                if (emptyProcessLimit >= 0) {
                                    app3 = null;
                                    try {
                                        TOP_APP = (ProcessRecord) this.mLruProcesses.get(emptyProcessLimit);
                                        if (TOP_APP != null) {
                                            if (allChanged || TOP_APP.procStateChanged) {
                                                setProcessTrackerStateLocked(TOP_APP, trackerMemFactor, now3);
                                                TOP_APP.procStateChanged = false;
                                            }
                                            if ((TOP_APP.curProcState >= 6 || TOP_APP.systemNoUi) && TOP_APP.pendingUiClean) {
                                                if (TOP_APP.trimMemoryLevel >= 20) {
                                                    nextCachedAdj3 = 20;
                                                } else if (TOP_APP.thread != null) {
                                                    try {
                                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                            str3 = TAG;
                                                            stringBuilder5 = new StringBuilder();
                                                            stringBuilder5.append("Trimming memory of ui hidden ");
                                                            stringBuilder5.append(TOP_APP.processName);
                                                            stringBuilder5.append(" to ");
                                                            try {
                                                                stringBuilder5.append(20);
                                                                Slog.v(str3, stringBuilder5.toString());
                                                            } catch (RemoteException e8) {
                                                            }
                                                        }
                                                        TOP_APP.thread.scheduleTrimMemory(20);
                                                    } catch (RemoteException e9) {
                                                    }
                                                }
                                                s = 0;
                                                TOP_APP.pendingUiClean = false;
                                            } else {
                                                s = 0;
                                            }
                                            TOP_APP.trimMemoryLevel = s;
                                        }
                                    } catch (IndexOutOfBoundsException e72) {
                                        Log.w(TAG, "ProcessRecord index out of bounds!", e72);
                                    }
                                    i = emptyProcessLimit - 1;
                                }
                            }
                        }
                        if (this.mAlwaysFinishActivities) {
                            this.mStackSupervisor.scheduleDestroyAllActivities(null, "always-finish");
                        }
                        if (allChanged) {
                            requestPssAllProcsLocked(now3, false, this.mProcessStats.isMemFactorLowered());
                        }
                        ArrayList<UidRecord> becameIdle = null;
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.startUidChanges();
                        }
                        emptyProcessLimit = this.mActiveUids.size() - 1;
                        while (emptyProcessLimit >= 0) {
                            long nowElapsed4;
                            uidRec = (UidRecord) this.mActiveUids.valueAt(emptyProcessLimit);
                            if (uidRec.curProcState == 19) {
                                nowElapsed4 = nowElapsed3;
                            } else if (uidRec.setProcState == uidRec.curProcState && uidRec.setWhitelist == uidRec.curWhitelist) {
                                nowElapsed4 = nowElapsed3;
                            } else {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    String str5 = TAG;
                                    stringBuilder4 = new StringBuilder();
                                    stringBuilder4.append("Changes in ");
                                    stringBuilder4.append(uidRec);
                                    stringBuilder4.append(": proc state from ");
                                    stringBuilder4.append(uidRec.setProcState);
                                    stringBuilder4.append(" to ");
                                    stringBuilder4.append(uidRec.curProcState);
                                    stringBuilder4.append(", whitelist from ");
                                    stringBuilder4.append(uidRec.setWhitelist);
                                    stringBuilder4.append(" to ");
                                    stringBuilder4.append(uidRec.curWhitelist);
                                    Slog.i(str5, stringBuilder4.toString());
                                }
                                int uidChange;
                                if (!ActivityManager.isProcStateBackground(uidRec.curProcState) || uidRec.curWhitelist) {
                                    uidChange = 0;
                                    nowElapsed4 = nowElapsed3;
                                    if (uidRec.idle) {
                                        s = 4;
                                        EventLogTags.writeAmUidActive(uidRec.uid);
                                        uidRec.idle = false;
                                    } else {
                                        s = uidChange;
                                    }
                                    uidRec.lastBackgroundTime = 0;
                                } else {
                                    if (!ActivityManager.isProcStateBackground(uidRec.setProcState) || uidRec.setWhitelist) {
                                        long nowElapsed5 = nowElapsed3;
                                        uidRec.lastBackgroundTime = nowElapsed5;
                                        if (this.mHandler.hasMessages(58)) {
                                            uidChange = 0;
                                            nowElapsed4 = nowElapsed5;
                                        } else {
                                            uidChange = 0;
                                            nowElapsed4 = nowElapsed5;
                                            this.mHandler.sendEmptyMessageDelayed(58, this.mConstants.BACKGROUND_SETTLE_TIME);
                                        }
                                    } else {
                                        uidChange = 0;
                                        nowElapsed4 = nowElapsed3;
                                    }
                                    if (!uidRec.idle || uidRec.setIdle) {
                                        s = uidChange;
                                    } else {
                                        s = 2;
                                        if (becameIdle == null) {
                                            becameIdle = new ArrayList();
                                        }
                                        becameIdle.add(uidRec);
                                    }
                                }
                                allChanged2 = uidRec.setProcState > 10;
                                z = uidRec.curProcState > 10;
                                if (allChanged2 != z || uidRec.setProcState == 19) {
                                    s |= z ? 8 : 16;
                                }
                                uidRec.setProcState = uidRec.curProcState;
                                uidRec.setWhitelist = uidRec.curWhitelist;
                                uidRec.setIdle = uidRec.idle;
                                enqueueUidChangeLocked(uidRec, -1, s);
                                noteUidProcessState(uidRec.uid, uidRec.curProcState);
                                if (uidRec.foregroundServices) {
                                    this.mServices.foregroundServiceProcStateChangedLocked(uidRec);
                                }
                            }
                            emptyProcessLimit--;
                            nowElapsed3 = nowElapsed4;
                        }
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.finishUidChanges();
                        }
                        if (becameIdle != null) {
                            for (emptyProcessLimit = becameIdle.size() - 1; emptyProcessLimit >= 0; emptyProcessLimit--) {
                                this.mServices.stopInBackgroundLocked(((UidRecord) becameIdle.get(emptyProcessLimit)).uid);
                            }
                        }
                        if (this.mProcessStats.shouldWriteNowLocked(now3)) {
                            this.mHandler.post(new Runnable() {
                                public void run() {
                                    synchronized (ActivityManagerService.this) {
                                        try {
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            ActivityManagerService.this.mProcessStats.writeStateAsyncLocked();
                                        } finally {
                                            while (true) {
                                            }
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                        }
                                    }
                                }
                            });
                        }
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            long duration = SystemClock.uptimeMillis() - now3;
                            String str6 = TAG;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("Did OOM ADJ in ");
                            stringBuilder2.append(duration);
                            stringBuilder2.append("ms");
                            Slog.d(str6, stringBuilder2.toString());
                            return;
                        }
                        return;
                    }
                }
            }
        }
    }

    public void makePackageIdle(String packageName, int userId) {
        String str = packageName;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "makePackageIdle", null);
            long callingId = Binder.clearCallingIdentity();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int i = -1;
                    int pkgUid = -1;
                    try {
                        pkgUid = AppGlobals.getPackageManager().getPackageUid(str, 268443648, 0);
                    } catch (RemoteException e) {
                    }
                    StringBuilder stringBuilder;
                    if (pkgUid != -1) {
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.startUidChanges();
                        }
                        int appId = UserHandle.getAppId(pkgUid);
                        int i2 = this.mActiveUids.size() - 1;
                        while (i2 >= 0) {
                            int appId2;
                            UidRecord uidRec = (UidRecord) this.mActiveUids.valueAt(i2);
                            if (uidRec.lastBackgroundTime <= 0 || uidRec.idle || UserHandle.getAppId(uidRec.uid) != appId) {
                                appId2 = appId;
                            } else if (userId2 == i || userId2 == UserHandle.getUserId(uidRec.uid)) {
                                EventLogTags.writeAmUidIdle(uidRec.uid);
                                uidRec.idle = true;
                                uidRec.setIdle = true;
                                String str2 = TAG;
                                stringBuilder = new StringBuilder();
                                appId2 = appId;
                                stringBuilder.append("Idling uid ");
                                stringBuilder.append(UserHandle.formatUid(uidRec.uid));
                                stringBuilder.append(" from package ");
                                stringBuilder.append(str);
                                stringBuilder.append(" user ");
                                stringBuilder.append(userId2);
                                Slog.w(str2, stringBuilder.toString());
                                doStopUidLocked(uidRec.uid, uidRec);
                            } else {
                                appId2 = appId;
                            }
                            i2--;
                            appId = appId2;
                            i = -1;
                        }
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.finishUidChanges();
                        }
                        Binder.restoreCallingIdentity(callingId);
                    } else {
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Unknown package name ");
                        stringBuilder.append(str);
                        throw new IllegalArgumentException(stringBuilder.toString());
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        String msg = new StringBuilder();
        msg.append("Permission Denial: makePackageIdle() from pid=");
        msg.append(Binder.getCallingPid());
        msg.append(", uid=");
        msg.append(Binder.getCallingUid());
        msg.append(" requires ");
        msg.append("android.permission.FORCE_STOP_PACKAGES");
        msg = msg.toString();
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    /* JADX WARNING: Missing block: B:33:0x007e, code:
            resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Missing block: B:34:0x0081, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    final void idleUids() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int N = this.mActiveUids.size();
                if (N <= 0) {
                } else {
                    long nowElapsed = SystemClock.elapsedRealtime();
                    long maxBgTime = nowElapsed - this.mConstants.BACKGROUND_SETTLE_TIME;
                    long nextTime = 0;
                    if (this.mLocalPowerManager != null) {
                        this.mLocalPowerManager.startUidChanges();
                    }
                    for (int i = N - 1; i >= 0; i--) {
                        UidRecord uidRec = (UidRecord) this.mActiveUids.valueAt(i);
                        long bgTime = uidRec.lastBackgroundTime;
                        if (bgTime > 0 && !uidRec.idle) {
                            if (bgTime <= maxBgTime) {
                                EventLogTags.writeAmUidIdle(uidRec.uid);
                                uidRec.idle = true;
                                uidRec.setIdle = true;
                                doStopUidLocked(uidRec.uid, uidRec);
                            } else if (nextTime == 0 || nextTime > bgTime) {
                                nextTime = bgTime;
                            }
                        }
                    }
                    if (this.mLocalPowerManager != null) {
                        this.mLocalPowerManager.finishUidChanges();
                    }
                    if (nextTime > 0) {
                        this.mHandler.removeMessages(58);
                        this.mHandler.sendEmptyMessageDelayed(58, (this.mConstants.BACKGROUND_SETTLE_TIME + nextTime) - nowElapsed);
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy("this")
    @VisibleForTesting
    void incrementProcStateSeqAndNotifyAppsLocked() {
        if (this.mWaitForNetworkTimeoutMs > 0) {
            int i;
            UidRecord uidRec;
            ArrayList<Integer> blockingUids = null;
            for (i = this.mActiveUids.size() - 1; i >= 0; i--) {
                uidRec = (UidRecord) this.mActiveUids.valueAt(i);
                if (this.mInjector.isNetworkRestrictedForUid(uidRec.uid) && UserHandle.isApp(uidRec.uid) && uidRec.hasInternetPermission && uidRec.setProcState != uidRec.curProcState) {
                    int blockState = getBlockStateForUid(uidRec);
                    if (blockState == 0) {
                        continue;
                    } else {
                        synchronized (uidRec.networkStateLock) {
                            long j = this.mProcStateSeqCounter + 1;
                            this.mProcStateSeqCounter = j;
                            uidRec.curProcStateSeq = j;
                            if (blockState == 1) {
                                if (blockingUids == null) {
                                    blockingUids = new ArrayList();
                                }
                                blockingUids.add(Integer.valueOf(uidRec.uid));
                            } else {
                                if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                    String str = TAG_NETWORK;
                                    StringBuilder stringBuilder = new StringBuilder();
                                    stringBuilder.append("uid going to background, notifying all blocking threads for uid: ");
                                    stringBuilder.append(uidRec);
                                    Slog.d(str, stringBuilder.toString());
                                }
                                if (uidRec.waitingForNetwork) {
                                    uidRec.networkStateLock.notifyAll();
                                }
                            }
                        }
                    }
                }
            }
            if (blockingUids != null) {
                for (i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord app = (ProcessRecord) this.mLruProcesses.get(i);
                    if (!(!blockingUids.contains(Integer.valueOf(app.uid)) || app.killedByAm || app.thread == null)) {
                        uidRec = (UidRecord) this.mActiveUids.get(app.uid);
                        try {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                String str2 = TAG_NETWORK;
                                StringBuilder stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("Informing app thread that it needs to block: ");
                                stringBuilder2.append(uidRec);
                                Slog.d(str2, stringBuilder2.toString());
                            }
                            app.thread.setNetworkBlockSeq(uidRec.curProcStateSeq);
                        } catch (RemoteException e) {
                        }
                    }
                }
            }
        }
    }

    @VisibleForTesting
    int getBlockStateForUid(UidRecord uidRec) {
        boolean isAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.curProcState) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.curProcState);
        boolean wasAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.setProcState) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.setProcState);
        if (!wasAllowed && isAllowed) {
            return 1;
        }
        if (!wasAllowed || isAllowed) {
            return 0;
        }
        return 2;
    }

    final void runInBackgroundDisabled(int uid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = (UidRecord) this.mActiveUids.get(uid);
                if (uidRec == null) {
                    doStopUidLocked(uid, null);
                } else if (uidRec.idle) {
                    doStopUidLocked(uidRec.uid, uidRec);
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void doStopUidForIdleUidsLocked() {
        int size = this.mActiveUids.size();
        for (int i = 0; i < size; i++) {
            if (!UserHandle.isCore(this.mActiveUids.keyAt(i))) {
                UidRecord uidRec = (UidRecord) this.mActiveUids.valueAt(i);
                if (uidRec.idle) {
                    doStopUidLocked(uidRec.uid, uidRec);
                }
            }
        }
    }

    final void doStopUidLocked(int uid, UidRecord uidRec) {
        this.mServices.stopInBackgroundLocked(uid);
        enqueueUidChangeLocked(uidRec, uid, 2);
    }

    /* JADX WARNING: Missing block: B:19:0x0091, code:
            tempWhitelistUidLocked(r8, r9, r11);
     */
    /* JADX WARNING: Missing block: B:20:0x0094, code:
            return;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @GuardedBy("this")
    void tempWhitelistForPendingIntentLocked(int callerPid, int callerUid, int targetUid, long duration, String tag) {
        if (ActivityManagerDebugConfig.DEBUG_WHITELISTS) {
            String str = TAG;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("tempWhitelistForPendingIntentLocked(");
            stringBuilder.append(callerPid);
            stringBuilder.append(", ");
            stringBuilder.append(callerUid);
            stringBuilder.append(", ");
            stringBuilder.append(targetUid);
            stringBuilder.append(", ");
            stringBuilder.append(duration);
            stringBuilder.append(")");
            Slog.d(str, stringBuilder.toString());
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord pr = (ProcessRecord) this.mPidsSelfLocked.get(callerPid);
            String str2;
            StringBuilder stringBuilder2;
            if (pr == null) {
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("tempWhitelistForPendingIntentLocked() no ProcessRecord for pid ");
                stringBuilder2.append(callerPid);
                Slog.w(str2, stringBuilder2.toString());
            } else if (pr.whitelistManager || checkPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", callerPid, callerUid) == 0) {
            } else {
                str2 = TAG;
                stringBuilder2 = new StringBuilder();
                stringBuilder2.append("tempWhitelistForPendingIntentLocked() for target ");
                stringBuilder2.append(targetUid);
                stringBuilder2.append(": pid ");
                stringBuilder2.append(callerPid);
                stringBuilder2.append(" is not allowed");
                Slog.d(str2, stringBuilder2.toString());
            }
        }
    }

    @GuardedBy("this")
    void tempWhitelistUidLocked(int targetUid, long duration, String tag) {
        this.mPendingTempWhitelist.put(targetUid, new PendingTempWhitelist(targetUid, duration, tag));
        setUidTempWhitelistStateLocked(targetUid, true);
        this.mUiHandler.obtainMessage(68).sendToTarget();
    }

    void pushTempWhitelist() {
        synchronized (this) {
            try {
                int i;
                boostPriorityForLockedSection();
                int N = this.mPendingTempWhitelist.size();
                PendingTempWhitelist[] list = new PendingTempWhitelist[N];
                int i2 = 0;
                for (i = 0; i < N; i++) {
                    list[i] = (PendingTempWhitelist) this.mPendingTempWhitelist.valueAt(i);
                }
                for (i = 0; i < N; i++) {
                    PendingTempWhitelist ptw = list[i];
                    this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(ptw.targetUid, ptw.duration, true, ptw.tag);
                }
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        while (i2 < N) {
                            PendingTempWhitelist ptw2 = list[i2];
                            int index = this.mPendingTempWhitelist.indexOfKey(ptw2.targetUid);
                            if (index >= 0 && this.mPendingTempWhitelist.valueAt(index) == ptw2) {
                                this.mPendingTempWhitelist.removeAt(index);
                            }
                            i2++;
                        }
                    } finally {
                        while (true) {
                        }
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy("this")
    final void setAppIdTempWhitelistStateLocked(int appId, boolean onWhitelist) {
        boolean changed = false;
        for (int i = this.mActiveUids.size() - 1; i >= 0; i--) {
            UidRecord uidRec = (UidRecord) this.mActiveUids.valueAt(i);
            if (UserHandle.getAppId(uidRec.uid) == appId && uidRec.curWhitelist != onWhitelist) {
                uidRec.curWhitelist = onWhitelist;
                changed = true;
            }
        }
        if (changed) {
            updateOomAdjLocked();
        }
    }

    @GuardedBy("this")
    final void setUidTempWhitelistStateLocked(int uid, boolean onWhitelist) {
        UidRecord uidRec = (UidRecord) this.mActiveUids.get(uid);
        if (uidRec != null && uidRec.curWhitelist != onWhitelist) {
            uidRec.curWhitelist = onWhitelist;
            updateOomAdjLocked();
        }
    }

    final void trimApplications() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                trimApplicationsLocked();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    final void trimApplicationsLocked() {
        for (int i = this.mRemovedProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = (ProcessRecord) this.mRemovedProcesses.get(i);
            if (app.activities.size() == 0 && app.recentTasks.size() == 0 && app.curReceivers.isEmpty() && app.services.size() == 0) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Exiting empty application process ");
                stringBuilder.append(app.toShortString());
                stringBuilder.append(" (");
                stringBuilder.append(app.thread != null ? app.thread.asBinder() : null);
                stringBuilder.append(")\n");
                Slog.i(str, stringBuilder.toString());
                if (app.pid > 0 && app.pid != MY_PID) {
                    app.kill("empty", false);
                } else if (app.thread != null) {
                    try {
                        app.thread.scheduleExit();
                    } catch (Exception e) {
                    }
                }
                cleanUpApplicationRecordLocked(app, false, true, -1, false);
                this.mRemovedProcesses.remove(i);
                if (app.persistent) {
                    addAppLocked(app.info, null, false, null);
                }
            }
        }
        updateOomAdjLocked();
    }

    final void trimServicesAfterBoot() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord app = (ProcessRecord) this.mLruProcesses.get(i);
                    if (app.serviceb || app.curAdj == 500) {
                        SmartShrinker.reclaim(app.pid, 4);
                    }
                }
                int i2 = 0;
                if (SystemProperties.getBoolean("ro.config.reclaim_zygote", false) && "zygote32_64".equals(SystemProperties.get("ro.zygote", "zygote64_32"))) {
                    int[] pids = Process.getPidsForCommands(new String[]{"zygote64"});
                    if (pids != null) {
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                int length = pids.length;
                                while (i2 < length) {
                                    SmartShrinker.reclaim(pids[i2], 2);
                                    i2++;
                                }
                            } finally {
                                while (true) {
                                }
                                resetPriorityAfterLockedSection();
                            }
                        }
                    }
                    return;
                }
                return;
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void signalPersistentProcesses(int sig) throws RemoteException {
        if (sig == 10) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") == 0) {
                        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                            ProcessRecord r = (ProcessRecord) this.mLruProcesses.get(i);
                            if (r.thread != null && r.persistent) {
                                Process.sendSignal(r.pid, sig);
                            }
                        }
                    } else {
                        throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Only SIGNAL_USR1 is allowed");
    }

    private void stopProfilerLocked(ProcessRecord proc, int profileType) {
        if (proc == null || proc == this.mProfileProc) {
            proc = this.mProfileProc;
            profileType = this.mProfileType;
            clearProfilerLocked();
        }
        if (proc != null) {
            try {
                proc.thread.profilerControl(false, null, profileType);
            } catch (RemoteException e) {
                throw new IllegalStateException("Process disappeared");
            }
        }
    }

    private void clearProfilerLocked() {
        if (!(this.mProfilerInfo == null || this.mProfilerInfo.profileFd == null)) {
            try {
                this.mProfilerInfo.profileFd.close();
            } catch (IOException e) {
            }
        }
        this.mProfileApp = null;
        this.mProfileProc = null;
        this.mProfilerInfo = null;
    }

    public boolean profileControl(String process, int userId, boolean start, ProfilerInfo profilerInfo, int profileType) throws RemoteException {
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                } else if (start && (profilerInfo == null || profilerInfo.profileFd == null)) {
                    throw new IllegalArgumentException("null profile info or fd");
                } else {
                    ProcessRecord proc = null;
                    if (process != null) {
                        proc = findProcessLocked(process, userId, "profileControl");
                    }
                    if (start && (proc == null || proc.thread == null)) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Unknown process: ");
                        stringBuilder.append(process);
                        throw new IllegalArgumentException(stringBuilder.toString());
                    }
                    if (start) {
                        ParcelFileDescriptor fd;
                        stopProfilerLocked(null, 0);
                        setProfileApp(proc.info, proc.processName, profilerInfo);
                        this.mProfileProc = proc;
                        this.mProfileType = profileType;
                        try {
                            fd = profilerInfo.profileFd.dup();
                        } catch (IOException e) {
                            fd = null;
                        }
                        profilerInfo.profileFd = fd;
                        proc.thread.profilerControl(start, profilerInfo, profileType);
                        try {
                            this.mProfilerInfo.profileFd.close();
                        } catch (IOException e2) {
                        }
                        this.mProfilerInfo.profileFd = null;
                        if (proc.pid == MY_PID) {
                            profilerInfo = null;
                        }
                    } else {
                        stopProfilerLocked(proc, profileType);
                        if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                            try {
                                profilerInfo.profileFd.close();
                            } catch (IOException e3) {
                            }
                        }
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                try {
                    profilerInfo.profileFd.close();
                } catch (IOException e4) {
                }
            }
            return true;
        } catch (RemoteException e5) {
            try {
                throw new IllegalStateException("Process disappeared");
            } catch (Throwable th) {
                if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                    try {
                        profilerInfo.profileFd.close();
                    } catch (IOException e6) {
                    }
                }
            }
        } catch (Throwable th2) {
            resetPriorityAfterLockedSection();
        }
    }

    private ProcessRecord findProcessLocked(String process, int userId, String callName) {
        userId = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, callName, null);
        ProcessRecord proc = null;
        try {
            int pid = Integer.parseInt(process);
            synchronized (this.mPidsSelfLocked) {
                proc = (ProcessRecord) this.mPidsSelfLocked.get(pid);
            }
        } catch (NumberFormatException e) {
        }
        if (proc != null) {
            return proc;
        }
        SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessNames.getMap().get(process);
        if (procs == null || procs.size() <= 0) {
            return proc;
        }
        proc = (ProcessRecord) procs.valueAt(0);
        if (userId == -1 || proc.userId == userId) {
            return proc;
        }
        for (int i = 1; i < procs.size(); i++) {
            ProcessRecord thisProc = (ProcessRecord) procs.valueAt(i);
            if (thisProc.userId == userId) {
                return thisProc;
            }
        }
        return proc;
    }

    public boolean dumpHeap(String process, int userId, boolean managed, boolean mallocInfo, boolean runGc, String path, ParcelFileDescriptor fd) throws RemoteException {
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                } else if (fd != null) {
                    ProcessRecord proc = findProcessLocked(process, userId, "dumpHeap");
                    if (proc == null || proc.thread == null) {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("Unknown process: ");
                        stringBuilder.append(process);
                        throw new IllegalArgumentException(stringBuilder.toString());
                    } else if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (proc.info.flags & 2) != 0) {
                        proc.thread.dumpHeap(managed, mallocInfo, runGc, path, fd);
                        fd = null;
                    } else {
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("Process not debuggable: ");
                        stringBuilder2.append(proc);
                        throw new SecurityException(stringBuilder2.toString());
                    }
                } else {
                    throw new IllegalArgumentException("null fd");
                }
            }
            resetPriorityAfterLockedSection();
            if (fd != null) {
                try {
                    fd.close();
                } catch (IOException e) {
                }
            }
            return true;
        } catch (RemoteException e2) {
            try {
                throw new IllegalStateException("Process disappeared");
            } catch (Throwable th) {
                if (fd != null) {
                    try {
                        fd.close();
                    } catch (IOException e3) {
                    }
                }
            }
        } catch (Throwable th2) {
            resetPriorityAfterLockedSection();
        }
    }

    public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize, String reportPackage) {
        ProcessRecord proc;
        if (processName != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
        } else {
            synchronized (this.mPidsSelfLocked) {
                proc = (ProcessRecord) this.mPidsSelfLocked.get(Binder.getCallingPid());
                StringBuilder stringBuilder;
                if (proc == null) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("No process found for calling pid ");
                    stringBuilder.append(Binder.getCallingPid());
                    throw new SecurityException(stringBuilder.toString());
                } else if (Build.IS_DEBUGGABLE || (proc.info.flags & 2) != 0) {
                    processName = proc.processName;
                    uid = proc.uid;
                    if (reportPackage == null || proc.pkgList.containsKey(reportPackage)) {
                    } else {
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Package ");
                        stringBuilder.append(reportPackage);
                        stringBuilder.append(" is not running in ");
                        stringBuilder.append(proc);
                        throw new SecurityException(stringBuilder.toString());
                    }
                } else {
                    throw new SecurityException("Not running a debuggable build");
                }
            }
        }
        String processName2 = processName;
        proc = uid;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (maxMemSize > 0) {
                    this.mMemWatchProcesses.put(processName2, proc, new Pair(Long.valueOf(maxMemSize), reportPackage));
                } else if (proc != null) {
                    this.mMemWatchProcesses.remove(processName2, proc);
                } else {
                    this.mMemWatchProcesses.getMap().remove(processName2);
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void dumpHeapFinished(String path) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                String str;
                StringBuilder stringBuilder;
                if (Binder.getCallingPid() != this.mMemWatchDumpPid) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("dumpHeapFinished: Calling pid ");
                    stringBuilder.append(Binder.getCallingPid());
                    stringBuilder.append(" does not match last pid ");
                    stringBuilder.append(this.mMemWatchDumpPid);
                    Slog.w(str, stringBuilder.toString());
                } else if (this.mMemWatchDumpFile == null || !this.mMemWatchDumpFile.equals(path)) {
                    str = TAG;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("dumpHeapFinished: Calling path ");
                    stringBuilder.append(path);
                    stringBuilder.append(" does not match last path ");
                    stringBuilder.append(this.mMemWatchDumpFile);
                    Slog.w(str, stringBuilder.toString());
                    resetPriorityAfterLockedSection();
                } else {
                    if (ActivityManagerDebugConfig.DEBUG_PSS) {
                        str = TAG;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("Dump heap finished for ");
                        stringBuilder.append(path);
                        Slog.d(str, stringBuilder.toString());
                    }
                    this.mHandler.sendEmptyMessage(50);
                    Runtime.getRuntime().gc();
                    resetPriorityAfterLockedSection();
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void monitor() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    void onCoreSettingsChange(Bundle settings) {
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord processRecord = (ProcessRecord) this.mLruProcesses.get(i);
            try {
                if (processRecord.thread != null) {
                    processRecord.thread.setCoreSettings(settings);
                }
            } catch (RemoteException e) {
            }
        }
    }

    public boolean startUserInBackground(int userId) {
        return startUserInBackgroundWithListener(userId, null);
    }

    public boolean startUserInBackgroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.startUser(userId, false, unlockListener);
    }

    public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener) {
        return this.mUserController.unlockUser(userId, token, secret, listener);
    }

    public boolean switchUser(int targetUserId) {
        Boolean ret = this.mHwAMSEx.switchUser(targetUserId);
        if (ret != null) {
            return ret.booleanValue();
        }
        UniPerf.getInstance().uniPerfEvent(4099, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, new int[0]);
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("switchUser ");
        stringBuilder.append(targetUserId);
        stringBuilder.append(", callingUid = ");
        stringBuilder.append(Binder.getCallingUid());
        stringBuilder.append(", callingPid = ");
        stringBuilder.append(Binder.getCallingPid());
        Slog.i(str, stringBuilder.toString());
        return this.mUserController.switchUser(targetUserId);
    }

    public int stopUser(int userId, boolean force, IStopUserCallback callback) {
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("stopUser ");
        stringBuilder.append(userId);
        stringBuilder.append(", force = ");
        stringBuilder.append(force);
        stringBuilder.append(", callingUid = ");
        stringBuilder.append(Binder.getCallingUid());
        stringBuilder.append(", callingPid = ");
        stringBuilder.append(Binder.getCallingPid());
        Slog.i(str, stringBuilder.toString());
        return this.mUserController.stopUser(userId, force, callback);
    }

    public UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    String getStartedUserState(int userId) {
        return UserState.stateToString(this.mUserController.getStartedUserState(userId).state);
    }

    public boolean isUserRunning(int userId, int flags) {
        if (this.mUserController.isSameProfileGroup(userId, UserHandle.getCallingUserId()) || checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.isUserRunning(userId, flags);
        }
        String msg = new StringBuilder();
        msg.append("Permission Denial: isUserRunning() from pid=");
        msg.append(Binder.getCallingPid());
        msg.append(", uid=");
        msg.append(Binder.getCallingUid());
        msg.append(" requires ");
        msg.append("android.permission.INTERACT_ACROSS_USERS");
        msg = msg.toString();
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public int[] getRunningUserIds() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.getStartedUserArray();
        }
        String msg = new StringBuilder();
        msg.append("Permission Denial: isUserRunning() from pid=");
        msg.append(Binder.getCallingPid());
        msg.append(", uid=");
        msg.append(Binder.getCallingUid());
        msg.append(" requires ");
        msg.append("android.permission.INTERACT_ACROSS_USERS");
        msg = msg.toString();
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public void registerUserSwitchObserver(IUserSwitchObserver observer, String name) {
        this.mUserController.registerUserSwitchObserver(observer, name);
    }

    public void unregisterUserSwitchObserver(IUserSwitchObserver observer) {
        this.mUserController.unregisterUserSwitchObserver(observer);
    }

    ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId) {
        if (info == null) {
            return null;
        }
        ApplicationInfo newInfo = new ApplicationInfo(info);
        newInfo.initForUser(userId);
        return newInfo;
    }

    public boolean isUserStopped(int userId) {
        return this.mUserController.getStartedUserState(userId) == null;
    }

    ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
        if (aInfo == null || (userId < 1 && aInfo.applicationInfo.uid < 100000)) {
            return aInfo;
        }
        ActivityInfo info = new ActivityInfo(aInfo);
        info.applicationInfo = getAppInfoForUser(info.applicationInfo, userId);
        return info;
    }

    private boolean processSanityChecksLocked(ProcessRecord process) {
        if (process == null || process.thread == null) {
            return false;
        }
        if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (process.info.flags & 2) != 0) {
            return true;
        }
        return false;
    }

    public boolean startBinderTracking() throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBinderTransactionTrackingEnabled = true;
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                    for (int i = 0; i < this.mLruProcesses.size(); i++) {
                        ProcessRecord process = (ProcessRecord) this.mLruProcesses.get(i);
                        if (processSanityChecksLocked(process)) {
                            process.thread.startBinderTracking();
                        }
                    }
                } else {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
            } catch (RemoteException e) {
                Log.v(TAG, "Process disappared");
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    public boolean stopBinderTrackingAndDump(ParcelFileDescriptor fd) throws RemoteException {
        StringBuilder stringBuilder;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mBinderTransactionTrackingEnabled = false;
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                } else if (fd != null) {
                    PrintWriter pw = new FastPrintWriter(new FileOutputStream(fd.getFileDescriptor()));
                    pw.println("Binder transaction traces for all processes.\n");
                    Iterator it = this.mLruProcesses.iterator();
                    while (it.hasNext()) {
                        ProcessRecord process = (ProcessRecord) it.next();
                        if (processSanityChecksLocked(process)) {
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("Traces for process: ");
                            stringBuilder2.append(process.processName);
                            pw.println(stringBuilder2.toString());
                            pw.flush();
                            TransferPipe tp;
                            try {
                                tp = new TransferPipe();
                                process.thread.stopBinderTrackingAndDump(tp.getWriteFd());
                                tp.go(fd.getFileDescriptor());
                                tp.kill();
                            } catch (IOException e) {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("Failure while dumping IPC traces from ");
                                stringBuilder.append(process);
                                stringBuilder.append(".  Exception: ");
                                stringBuilder.append(e);
                                pw.println(stringBuilder.toString());
                                pw.flush();
                            } catch (RemoteException e2) {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("Got a RemoteException while dumping IPC traces from ");
                                stringBuilder.append(process);
                                stringBuilder.append(".  Exception: ");
                                stringBuilder.append(e2);
                                pw.println(stringBuilder.toString());
                                pw.flush();
                            } catch (Throwable th) {
                                tp.kill();
                            }
                        }
                    }
                    fd = null;
                } else {
                    throw new IllegalArgumentException("null fd");
                }
            }
            resetPriorityAfterLockedSection();
            if (fd != null) {
                try {
                    fd.close();
                } catch (IOException e3) {
                }
            }
            return true;
        } catch (Throwable th2) {
            if (fd != null) {
                try {
                    fd.close();
                } catch (IOException e4) {
                }
            }
        }
    }

    /* JADX WARNING: Missing block: B:11:0x003a, code:
            resetPriorityAfterLockedSection();
            r2 = r1.networkStateLock;
     */
    /* JADX WARNING: Missing block: B:12:0x003f, code:
            monitor-enter(r2);
     */
    /* JADX WARNING: Missing block: B:15:0x0044, code:
            if (r1.lastDispatchedProcStateSeq >= r11) goto L_0x0074;
     */
    /* JADX WARNING: Missing block: B:17:0x0048, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x0072;
     */
    /* JADX WARNING: Missing block: B:18:0x004a, code:
            r3 = TAG_NETWORK;
            r4 = new java.lang.StringBuilder();
            r4.append("Uid state change for seq no. ");
            r4.append(r11);
            r4.append(" is not dispatched to NPMS yet, so don't wait. Uid: ");
            r4.append(r0);
            r4.append(" lastProcStateSeqDispatchedToObservers: ");
            r4.append(r1.lastDispatchedProcStateSeq);
            android.util.Slog.d(r3, r4.toString());
     */
    /* JADX WARNING: Missing block: B:19:0x0072, code:
            monitor-exit(r2);
     */
    /* JADX WARNING: Missing block: B:20:0x0073, code:
            return;
     */
    /* JADX WARNING: Missing block: B:22:0x0078, code:
            if (r1.curProcStateSeq <= r11) goto L_0x00a8;
     */
    /* JADX WARNING: Missing block: B:24:0x007c, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00a6;
     */
    /* JADX WARNING: Missing block: B:25:0x007e, code:
            r3 = TAG_NETWORK;
            r4 = new java.lang.StringBuilder();
            r4.append("Ignore the wait requests for older seq numbers. Uid: ");
            r4.append(r0);
            r4.append(", curProcStateSeq: ");
            r4.append(r1.curProcStateSeq);
            r4.append(", procStateSeq: ");
            r4.append(r11);
            android.util.Slog.d(r3, r4.toString());
     */
    /* JADX WARNING: Missing block: B:26:0x00a6, code:
            monitor-exit(r2);
     */
    /* JADX WARNING: Missing block: B:27:0x00a7, code:
            return;
     */
    /* JADX WARNING: Missing block: B:29:0x00ac, code:
            if (r1.lastNetworkUpdatedProcStateSeq < r11) goto L_0x00dc;
     */
    /* JADX WARNING: Missing block: B:31:0x00b0, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00da;
     */
    /* JADX WARNING: Missing block: B:32:0x00b2, code:
            r3 = TAG_NETWORK;
            r4 = new java.lang.StringBuilder();
            r4.append("Network rules have been already updated for seq no. ");
            r4.append(r11);
            r4.append(", so no need to wait. Uid: ");
            r4.append(r0);
            r4.append(", lastProcStateSeqWithUpdatedNetworkState: ");
            r4.append(r1.lastNetworkUpdatedProcStateSeq);
            android.util.Slog.d(r3, r4.toString());
     */
    /* JADX WARNING: Missing block: B:33:0x00da, code:
            monitor-exit(r2);
     */
    /* JADX WARNING: Missing block: B:34:0x00db, code:
            return;
     */
    /* JADX WARNING: Missing block: B:37:0x00de, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00fe;
     */
    /* JADX WARNING: Missing block: B:38:0x00e0, code:
            r3 = TAG_NETWORK;
            r4 = new java.lang.StringBuilder();
            r4.append("Starting to wait for the network rules update. Uid: ");
            r4.append(r0);
            r4.append(" procStateSeq: ");
            r4.append(r11);
            android.util.Slog.d(r3, r4.toString());
     */
    /* JADX WARNING: Missing block: B:39:0x00fe, code:
            r3 = android.os.SystemClock.uptimeMillis();
            r1.waitingForNetwork = true;
            r1.networkStateLock.wait(r10.mWaitForNetworkTimeoutMs);
            r1.waitingForNetwork = false;
            r5 = android.os.SystemClock.uptimeMillis() - r3;
     */
    /* JADX WARNING: Missing block: B:40:0x0118, code:
            if (r5 >= r10.mWaitForNetworkTimeoutMs) goto L_0x011e;
     */
    /* JADX WARNING: Missing block: B:42:0x011c, code:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x0163;
     */
    /* JADX WARNING: Missing block: B:43:0x011e, code:
            r7 = TAG_NETWORK;
            r8 = new java.lang.StringBuilder();
            r8.append("Total time waited for network rules to get updated: ");
            r8.append(r5);
            r8.append(". Uid: ");
            r8.append(r0);
            r8.append(" procStateSeq: ");
            r8.append(r11);
            r8.append(" UidRec: ");
            r8.append(r1);
            r8.append(" validateUidRec: ");
            r8.append(r10.mValidateUids.get(r0));
            android.util.Slog.w(r7, r8.toString());
     */
    /* JADX WARNING: Missing block: B:46:?, code:
            java.lang.Thread.currentThread().interrupt();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void waitForNetworkStateUpdate(long procStateSeq) {
        int callingUid = Binder.getCallingUid();
        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
            String str = TAG_NETWORK;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Called from ");
            stringBuilder.append(callingUid);
            stringBuilder.append(" to wait for seq: ");
            stringBuilder.append(procStateSeq);
            Slog.d(str, stringBuilder.toString());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord record = (UidRecord) this.mActiveUids.get(callingUid);
                if (record == null) {
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void waitForBroadcastIdle(PrintWriter pw) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        while (true) {
            boolean idle = true;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (BroadcastQueue queue : this.mBroadcastQueues) {
                        if (!queue.isIdle()) {
                            String msg = new StringBuilder();
                            msg.append("Waiting for queue ");
                            msg.append(queue);
                            msg.append(" to become idle...");
                            msg = msg.toString();
                            pw.println(msg);
                            pw.flush();
                            Slog.v(TAG, msg);
                            idle = false;
                        }
                    }
                } finally {
                    while (true) {
                    }
                    resetPriorityAfterLockedSection();
                }
            }
            if (idle) {
                String msg2 = "All broadcast queues are idle!";
                pw.println("All broadcast queues are idle!");
                pw.flush();
                Slog.v(TAG, "All broadcast queues are idle!");
                return;
            }
            SystemClock.sleep(1000);
        }
    }

    public int getLastResumedActivityUserId() {
        int currentUserId;
        enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "getLastResumedActivityUserId()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mLastResumedActivity == null) {
                    currentUserId = this.mUserController.getCurrentUserId();
                } else {
                    currentUserId = this.mLastResumedActivity.userId;
                    resetPriorityAfterLockedSection();
                    return currentUserId;
                }
            } finally {
                while (true) {
                }
                resetPriorityAfterLockedSection();
            }
        }
        return currentUserId;
    }

    public void killPackageDependents(String packageName, int userId) {
        Throwable th;
        int i;
        IPackageManager iPackageManager;
        String str = packageName;
        int i2 = userId;
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (str != null) {
            long callingId = Binder.clearCallingIdentity();
            IPackageManager pm = AppGlobals.getPackageManager();
            int pkgUid = -1;
            try {
                pkgUid = pm.getPackageUid(str, 268435456, i2);
            } catch (RemoteException e) {
            }
            int pkgUid2 = pkgUid;
            StringBuilder stringBuilder;
            if (i2 == -1 || pkgUid2 != -1) {
                try {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            int appId = UserHandle.getAppId(pkgUid2);
                            stringBuilder = new StringBuilder();
                            stringBuilder.append("dep: ");
                            stringBuilder.append(str);
                            try {
                                killPackageProcessesLocked(str, appId, i2, 0, false, true, true, false, stringBuilder.toString());
                                try {
                                    resetPriorityAfterLockedSection();
                                    Binder.restoreCallingIdentity(callingId);
                                    return;
                                } catch (Throwable th2) {
                                    th = th2;
                                    Binder.restoreCallingIdentity(callingId);
                                    throw th;
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            i = pkgUid2;
                            iPackageManager = pm;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th5) {
                    th = th5;
                    i = pkgUid2;
                    iPackageManager = pm;
                    Binder.restoreCallingIdentity(callingId);
                    throw th;
                }
            }
            stringBuilder = new StringBuilder();
            stringBuilder.append("Cannot kill dependents of non-existing package ");
            stringBuilder.append(str);
            throw new IllegalArgumentException(stringBuilder.toString());
        }
        throw new NullPointerException("Cannot kill the dependents of a package without its name.");
    }

    public void dismissKeyguard(IBinder token, IKeyguardDismissCallback callback, CharSequence message) throws RemoteException {
        if (message != null) {
            enforceCallingPermission("android.permission.SHOW_KEYGUARD_MESSAGE", "dismissKeyguard()");
        }
        long callingId = Binder.clearCallingIdentity();
        try {
            this.mKeyguardController.dismissKeyguard(token, callback, message);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    public int restartUserInBackground(int userId) {
        return this.mUserController.restartUser(userId, false);
    }

    public void scheduleApplicationInfoChanged(List<String> packageNames, int userId) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                updateApplicationInfoLocked(packageNames, userId);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    void updateApplicationInfoLocked(List<String> packagesToUpdate, int userId) {
        boolean updateFrameworkRes = packagesToUpdate.contains(PackageManagerService.PLATFORM_PACKAGE_NAME);
        boolean updateFrameworkReshwext = packagesToUpdate.contains("androidhwext");
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = (ProcessRecord) this.mLruProcesses.get(i);
            if (app.thread != null && (userId == -1 || app.userId == userId)) {
                int packageCount = app.pkgList.size();
                for (int j = 0; j < packageCount; j++) {
                    String packageName = (String) app.pkgList.keyAt(j);
                    if (updateFrameworkRes || updateFrameworkReshwext || packagesToUpdate.contains(packageName)) {
                        try {
                            ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(packageName, 1024, app.userId);
                            if (ai != null) {
                                IApplicationThread iApplicationThread = app.thread;
                                boolean z = updateFrameworkRes || updateFrameworkReshwext;
                                iApplicationThread.scheduleApplicationThemeInfoChanged(ai, z);
                                app.updateApplicationInfo(ai);
                            }
                        } catch (RemoteException e) {
                            Slog.w(TAG, String.format("Failed to update %s ApplicationInfo for %s", new Object[]{packageName, app}));
                        }
                    }
                }
            }
        }
        if (updateFrameworkRes) {
            Executor executor = ActivityThread.currentActivityThread().getExecutor();
            DisplayManagerInternal display = (DisplayManagerInternal) LocalServices.getService(DisplayManagerInternal.class);
            if (display != null) {
                Objects.requireNonNull(display);
                executor.execute(new -$$Lambda$ActivityManagerService$gATL8uvTPRd405IfefK1RL9bNqA(display));
            }
            if (this.mWindowManager != null) {
                WindowManagerService windowManagerService = this.mWindowManager;
                Objects.requireNonNull(windowManagerService);
                executor.execute(new -$$Lambda$5hokEl5hcign5FXeGZdl53qh2zg(windowManagerService));
            }
        }
    }

    public void attachAgent(String process, String path) {
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ProcessRecord proc = findProcessLocked(process, null, "attachAgent");
                if (proc == null || proc.thread == null) {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("Unknown process: ");
                    stringBuilder.append(process);
                    throw new IllegalArgumentException(stringBuilder.toString());
                } else if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (proc.info.flags & 2) != 0) {
                    proc.thread.attachAgent(path);
                } else {
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("Process not debuggable: ");
                    stringBuilder2.append(proc);
                    throw new SecurityException(stringBuilder2.toString());
                }
            }
            resetPriorityAfterLockedSection();
        } catch (RemoteException e) {
            throw new IllegalStateException("Process disappeared");
        } catch (Throwable th) {
            resetPriorityAfterLockedSection();
        }
    }

    void cleanupBroadcastLocked(ProcessRecord app) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.cleanupBroadcastLocked(app);
        }
    }

    protected void exitSingleHandMode() {
    }

    protected boolean isMaximizedPortraitAppOnPCMode(ActivityRecord r) {
        return false;
    }

    private boolean shouldDropCtsBroadcast(Intent intent) {
        String data = intent.getDataString();
        if (data != null && this.mCtsActions.contains(intent.getAction()) && this.mCtsPackages.contains(data)) {
            return true;
        }
        return false;
    }

    private void initCtsDropActions() {
        this.mCtsActions.add("android.intent.action.PACKAGE_ADDED");
        this.mCtsActions.add("android.intent.action.PACKAGE_REMOVED");
        this.mCtsActions.add("android.intent.action.PACKAGE_REPLACED");
        this.mCtsActions.add("android.intent.action.PACKAGE_CHANGED");
    }

    private void initCtsDropPackages() {
        this.mCtsPackages.add("package:android.jobscheduler.cts.deviceside");
        this.mCtsPackages.add("package:android.tests.devicesetup");
        this.mCtsPackages.add("package:com.android.cts.launcherapps.simpleapp");
        this.mCtsPackages.add("package:com.android.cts.launchertests");
        this.mCtsPackages.add("package:com.android.cts.launchertests.support");
        this.mCtsPackages.add("package:com.google.android.xts.deviceowner");
        this.mCtsPackages.add("package:com.android.cts.deviceowner");
        this.mCtsPackages.add("package:com.android.cts.deviceandprofileowner");
        this.mCtsPackages.add("package:com.android.cts.intent.receiver");
        this.mCtsPackages.add("package:com.android.cts.intent.sender");
        this.mCtsPackages.add("package:com.android.cts.permissionapp");
        this.mCtsPackages.add("package:com.android.cts.location");
        this.mCtsPackages.add("package:com.android.compatibility.common.deviceinfo");
    }

    /* JADX WARNING: Removed duplicated region for block: B:22:0x0047 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:26:0x004b A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x004a A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0049 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x0048 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0047 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:26:0x004b A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x004a A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0049 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x0048 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0047 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:26:0x004b A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x004a A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0049 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x0048 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0047 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:26:0x004b A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x004a A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0049 A:{RETURN} */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x0048 A:{RETURN} */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private boolean isForbidWifiAction(String action) {
        boolean z;
        int hashCode = action.hashCode();
        if (hashCode == -1875733435) {
            if (action.equals("android.net.wifi.WIFI_STATE_CHANGED")) {
                z = true;
                switch (z) {
                    case false:
                        break;
                    case true:
                        break;
                    case true:
                        break;
                    case true:
                        break;
                    default:
                        break;
                }
            }
        } else if (hashCode == -1172645946) {
            if (action.equals("android.net.conn.CONNECTIVITY_CHANGE")) {
                z = true;
                switch (z) {
                    case false:
                        break;
                    case true:
                        break;
                    case true:
                        break;
                    case true:
                        break;
                    default:
                        break;
                }
            }
        } else if (hashCode == 1217084795) {
            if (action.equals("android.provider.Telephony.SMS_RECEIVED")) {
                z = true;
                switch (z) {
                    case false:
                        break;
                    case true:
                        break;
                    case true:
                        break;
                    case true:
                        break;
                    default:
                        break;
                }
            }
        } else if (hashCode == 1878357501 && action.equals("android.net.wifi.SCAN_RESULTS")) {
            z = false;
            switch (z) {
                case false:
                    return true;
                case true:
                    return true;
                case true:
                    return true;
                case true:
                    return true;
                default:
                    return false;
            }
        }
        z = true;
        switch (z) {
            case false:
                break;
            case true:
                break;
            case true:
                break;
            case true:
                break;
            default:
                break;
        }
    }

    private boolean shouldPreventBadPackage(String pkg, String action) {
        if (!(pkg == null || action == null)) {
            Boolean bobj = (Boolean) this.mBadPkgs.get(pkg);
            boolean forceskip = bobj != null ? bobj.booleanValue() : false;
            if ("com.icbc".equals(pkg) && forceskip && isForbidWifiAction(action)) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("shouldPrevent bad pkg: ");
                stringBuilder.append(pkg);
                stringBuilder.append(" forceskip:");
                stringBuilder.append(forceskip);
                stringBuilder.append(" action:");
                stringBuilder.append(action);
                Slog.d(str, stringBuilder.toString());
                return true;
            }
        }
        return false;
    }

    public void filterBadAppsReceiverList(Intent intent, List<ResolveInfo> receivers) {
        String action = intent != null ? intent.getAction() : null;
        Iterator<ResolveInfo> iterator = receivers.iterator();
        while (iterator.hasNext()) {
            String targetPkg = ((ResolveInfo) iterator.next()).activityInfo.applicationInfo.packageName;
            if (shouldPreventBadPackage(targetPkg, action)) {
                String str = TAG;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("prevent start receiver of package ");
                stringBuilder.append(targetPkg);
                stringBuilder.append(" for action ");
                stringBuilder.append(action);
                Slog.i(str, stringBuilder.toString());
                iterator.remove();
            }
        }
    }

    public ArrayList<TaskRecord> getRecentRawTasks() {
        return this.mRecentTasks.getRawTasks();
    }

    static boolean isInCallActivity(ActivityRecord r) {
        return "com.android.incallui/.InCallActivity".equals(r.shortComponentName);
    }

    static boolean isTimerAlertActivity(ActivityRecord r) {
        return "com.android.deskclock/.timer.TimerAlertActivity".equals(r.shortComponentName);
    }

    public boolean isTopProcessLocked(ProcessRecord processRecord) {
        if (processRecord == null) {
            return false;
        }
        ActivityRecord topActivity = getFocusedStack().topRunningActivityLocked();
        if (topActivity == null || topActivity.app == null || processRecord.pid != topActivity.app.pid) {
            return false;
        }
        return true;
    }

    public boolean zrHungSendEvent(String eventType, int pid, int uid, String packageName, String processName, String event) {
        return this.mHwAMSEx.zrHungSendEvent(eventType, pid, uid, packageName, processName, event);
    }

    public void setShowWhenLocked(IBinder token, boolean showWhenLocked) throws RemoteException {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setShowWhenLocked(showWhenLocked);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setTurnScreenOn(IBinder token, boolean turnScreenOn) throws RemoteException {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setTurnScreenOn(turnScreenOn);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void registerRemoteAnimations(IBinder token, RemoteAnimationDefinition definition) throws RemoteException {
        enforceCallingPermission("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "registerRemoteAnimations");
        definition.setCallingPid(Binder.getCallingPid());
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.registerRemoteAnimations(definition);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void registerRemoteAnimationForNextActivityStart(String packageName, RemoteAnimationAdapter adapter) throws RemoteException {
        enforceCallingPermission("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "registerRemoteAnimationForNextActivityStart");
        adapter.setCallingPid(Binder.getCallingPid());
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mActivityStartController.registerRemoteAnimationForNextActivityStart(packageName, adapter);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void alwaysShowUnsupportedCompileSdkWarning(ComponentName activity) {
        synchronized (this) {
            long origId;
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mAppWarnings.alwaysShowUnsupportedCompileSdkWarning(activity);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void swapDockedAndFullscreenStack() throws RemoteException {
        synchronized (this) {
            long ident;
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                ActivityStack primarySplitScreenStack = this.mStackSupervisor.getDefaultDisplay().getSplitScreenPrimaryStack();
                if (primarySplitScreenStack == null) {
                    Slog.w(TAG, "swapDockedAndFullscreenStack: primary split-screen stack not found.");
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (primarySplitScreenStack.mWindowContainerController != null) {
                    primarySplitScreenStack.mWindowContainerController.clearTempInsetBounds();
                }
                ArrayList<TaskRecord> primaryTasks = primarySplitScreenStack != null ? primarySplitScreenStack.getAllTasks() : null;
                ActivityStack secondarySplitScreenStack = primarySplitScreenStack.getDisplay().getTopStackInWindowingMode(4);
                if (secondarySplitScreenStack == null) {
                    Slog.w(TAG, "swapDockedAndFullscreenStack: secondary split-screen stack not found.");
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                TaskRecord topTask;
                if (secondarySplitScreenStack != null) {
                    topTask = secondarySplitScreenStack.topTask();
                } else {
                    topTask = null;
                }
                TaskRecord secondaryTask = topTask;
                TaskRecord taskRecord;
                ActivityStack activityStack;
                if (primaryTasks == null || secondaryTask == null) {
                    taskRecord = secondaryTask;
                    activityStack = secondarySplitScreenStack;
                } else if (primaryTasks.size() == 0) {
                    taskRecord = secondaryTask;
                    activityStack = secondarySplitScreenStack;
                } else {
                    boolean z;
                    boolean z2 = false;
                    this.mWindowManager.startFreezingScreen(0, 0);
                    this.mWindowManager.mShouldResetTime = true;
                    secondaryTask.reparent(primarySplitScreenStack, true, 1, true, true, "swapDockedAndFullscreenStack - sss->pss");
                    int size = primaryTasks.size();
                    int i = 0;
                    while (i < size) {
                        if (((TaskRecord) primaryTasks.get(i)).taskId == secondaryTask.taskId) {
                            z = z2;
                            taskRecord = secondaryTask;
                            activityStack = secondarySplitScreenStack;
                        } else {
                            z = z2;
                            taskRecord = secondaryTask;
                            activityStack = secondarySplitScreenStack;
                            ((TaskRecord) primaryTasks.get(i)).reparent(secondarySplitScreenStack, true, 1, true, true, "swapDockedAndFullscreenStack - pss->sss");
                        }
                        i++;
                        secondaryTask = taskRecord;
                        z2 = z;
                        secondarySplitScreenStack = activityStack;
                    }
                    z = z2;
                    taskRecord = secondaryTask;
                    activityStack = secondarySplitScreenStack;
                    this.mStackSupervisor.ensureActivitiesVisibleLocked(null, z, z);
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                    this.mWindowManager.stopFreezingScreen();
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                Slog.w(TAG, "Unable to swap tasks, either secondary or primary split-screen stack is empty.");
                Binder.restoreCallingIdentity(ident);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public IBinder getHwInnerService() {
        return this.mHwInnerService;
    }

    public ActivityManagerService getAMSForLock() {
        return this;
    }

    public ProcessMap<ProcessRecord> getProcessNames() {
        return this.mProcessNames;
    }

    public ActivityStackSupervisor getStackSupervisor() {
        return this.mStackSupervisor;
    }

    public boolean finishDisabledPackageActivitiesLocked(String packageName, Set<String> filterByClasses, boolean doit, boolean evenPersistent, int userId) {
        return this.mStackSupervisor.finishDisabledPackageActivitiesLocked(packageName, filterByClasses, doit, evenPersistent, userId);
    }

    public boolean bringDownDisabledPackageServicesLocked(String packageName, Set<String> filterByClasses, int userId, boolean evenPersistent, boolean killProcess, boolean doit) {
        return this.mServices.bringDownDisabledPackageServicesLocked(packageName, filterByClasses, userId, evenPersistent, killProcess, doit);
    }

    public SparseArray<ArrayMap<String, ArrayList<Intent>>> getStickyBroadcasts() {
        return this.mStickyBroadcasts;
    }

    public ProviderMap getProviderMap() {
        return this.mProviderMap;
    }

    public ArrayList<ContentProviderRecord> getLaunchingProviders() {
        return this.mLaunchingProviders;
    }

    public BroadcastQueue[] getBroadcastQueues() {
        return this.mBroadcastQueues;
    }

    public BroadcastQueue getBgBroadcastQueue() {
        return this.mBgBroadcastQueue;
    }

    public void stopAssociationLockedInner(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent) {
        stopAssociationLocked(sourceUid, sourceProcess, targetUid, targetComponent);
    }

    public void finishForceStopPackageLockedInner(String packageName, int uid) {
        finishForceStopPackageLocked(packageName, uid);
    }

    public AlarmManagerService getAlarmService() {
        return this.mAlms;
    }

    public int getAmsPid() {
        return MY_PID;
    }

    public UserController getUserController() {
        return this.mUserController;
    }

    public Context getUiContext() {
        return this.mUiContext;
    }

    public boolean getActivityIdle() {
        return this.mActivityIdle;
    }

    public boolean getSystemReady() {
        return this.mSystemReady;
    }

    public SystemServiceManager getServiceManager() {
        return this.mSystemServiceManager;
    }

    public TaskChangeNotificationController getHwTaskChangeController() {
        return this.mHwAMSEx.getHwTaskChangeController();
    }

    void notifyActivityState(ActivityRecord r, ActivityState state) {
        this.mHwAMSEx.notifyActivityState(r, state != null ? state.toString() : null);
    }

    public ActivityRecord getLastResumedActivityRecord() {
        return getLastResumedActivity();
    }

    public boolean isSleeping() {
        return isSleepingLocked();
    }

    private void setWhiteListProcessGroup(ProcessRecord app, ProcessRecord TOP_APP, boolean bConnectTopApp) {
        if (app != null) {
            if (app.curSchedGroup == 0) {
                if (SystemClock.elapsedRealtime() - app.startTime <= 3000) {
                    app.curSchedGroup = 7;
                }
                return;
            }
            if (!(app == TOP_APP || bConnectTopApp || this.mDAProxy.getCPUConfigGroupBG() != this.mDAProxy.isCPUConfigWhiteList(app.processName))) {
                app.curSchedGroup = 0;
            }
        }
    }

    public void reportCamera(int uid, int status) {
        this.mDAProxy.reportCamera(uid, status);
    }

    public File dumpStackTracesInner(boolean clearTraces, ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids) {
        return dumpStackTraces(clearTraces, (ArrayList) firstPids, processCpuTracker, (SparseArray) lastPids, (ArrayList) nativePids);
    }

    public boolean forceStopPackageLockedInner(String pkg, int appId, boolean callerWillRestart, boolean purgeCache, boolean doit, boolean evenPersistent, boolean uninstalling, int userId, String reason) {
        return forceStopPackageLocked(pkg, appId, callerWillRestart, purgeCache, doit, evenPersistent, uninstalling, userId, reason);
    }

    public void showUninstallLauncherDialog(String pkgName) {
        this.mHwAMSEx.showUninstallLauncherDialog(pkgName);
    }

    public HwDAMonitorProxy getDAMonitor() {
        return this.mDAProxy;
    }

    public boolean canCleanTaskRecord(String packageName) {
        return this.mHwAMSEx.canCleanTaskRecord(packageName);
    }

    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        this.mHwAMSEx.onMultiWindowModeChanged(isInMultiWindowMode);
    }

    public void startPersistApp(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride) {
        addAppLocked(info, customProcess, isolated, abiOverride);
    }

    public PackageManagerInternal getPackageManagerInternal() {
        return getPackageManagerInternalLocked();
    }

    public ProcessRecord getProcessRecord(String processName, int uid, boolean keepIfLarge) {
        return getProcessRecordLocked(processName, uid, keepIfLarge);
    }

    public boolean handleANRFilterFIFO(int uid, int cmd) {
        return this.mHwAMSEx.handleANRFilterFIFO(uid, cmd);
    }

    public AppErrors getAppErrors() {
        return this.mAppErrors;
    }

    public Handler getUiHandler() {
        return this.mUiHandler;
    }

    public SparseArray<ProcessRecord> getPidsSelfLocked() {
        return this.mPidsSelfLocked;
    }

    public ActivityManagerConstants getConstants() {
        return this.mConstants;
    }

    public ProcessRecord newProcessRecordLockedEx(ApplicationInfo info, String customProcess, boolean isolated, int isolatedUid) {
        return newProcessRecordLocked(info, customProcess, isolated, isolatedUid);
    }

    public void updateLruProcessLockedEx(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        updateLruProcessLocked(app, activityChange, client);
    }

    public void updateOomAdjLockedEx() {
        updateOomAdjLocked();
    }

    public void startProcessLockedEx(ProcessRecord app, String hostingType, String hostingNameStr, String abiOverride) {
        startProcessLocked(app, hostingType, hostingNameStr, abiOverride);
    }

    public ProcessRecord getProcessRecordLockedEx(String processName, int uid, boolean keepIfLarge) {
        return getProcessRecordLocked(processName, uid, keepIfLarge);
    }

    public boolean cleanupAppInLaunchingProvidersLockedEx(ProcessRecord app, boolean alwaysBad) {
        return cleanupAppInLaunchingProvidersLocked(app, alwaysBad);
    }

    public boolean removeProcessLockedEx(ProcessRecord app, boolean callerWillRestart, boolean allowRestart, String reason) {
        return removeProcessLocked(app, callerWillRestart, allowRestart, reason);
    }

    public void cleanupBroadcastLockedEx(ProcessRecord app) {
        cleanupBroadcastLocked(app);
    }

    public void cleanupAlarmLockedEx(ProcessRecord process) {
        cleanupAlarmLocked(process);
    }

    public int getMyPid() {
        return MY_PID;
    }

    public ArrayList<ProcessRecord> getLruProcesses() {
        return this.mLruProcesses;
    }

    public void recognizeFakeActivity(String compName, int pid, int uid) {
        this.mDAProxy.recognizeFakeActivity(compName, this.mBatteryStatsService.getActiveStatistics().isScreenOn(), pid, uid);
    }

    private BroadcastQueue getProcessBroadcastQueue(ProcessRecord callerApp, String callerPackage, Intent intent) {
        intent.removeFlags(12288);
        BroadcastQueue queue;
        if (isKeyAppBroadcastQueue(1, callerPackage) || isKeyAppBroadcastQueue(2, intent.getAction())) {
            queue = keyAppBroadcastQueueForIntent(intent);
            intent.addFlags(4096);
            return queue;
        } else if (!isThirdPartyAppBroadcastQueue(callerApp)) {
            return broadcastQueueForIntent(intent);
        } else {
            queue = thirdPartyAppBroadcastQueueForIntent(intent);
            intent.addFlags(8192);
            return queue;
        }
    }

    public boolean isExcludedInBGCheck(String pkg, String action) {
        return this.mDAProxy.isExcludedInBGCheck(pkg, action);
    }
}
