package org.apache.xalan.processor;

import java.util.HashMap;
import org.apache.xalan.templates.Constants;
import org.apache.xalan.templates.ElemApplyImport;
import org.apache.xalan.templates.ElemApplyTemplates;
import org.apache.xalan.templates.ElemAttribute;
import org.apache.xalan.templates.ElemCallTemplate;
import org.apache.xalan.templates.ElemChoose;
import org.apache.xalan.templates.ElemComment;
import org.apache.xalan.templates.ElemCopy;
import org.apache.xalan.templates.ElemCopyOf;
import org.apache.xalan.templates.ElemElement;
import org.apache.xalan.templates.ElemExsltFuncResult;
import org.apache.xalan.templates.ElemExsltFunction;
import org.apache.xalan.templates.ElemExtensionDecl;
import org.apache.xalan.templates.ElemExtensionScript;
import org.apache.xalan.templates.ElemFallback;
import org.apache.xalan.templates.ElemForEach;
import org.apache.xalan.templates.ElemIf;
import org.apache.xalan.templates.ElemLiteralResult;
import org.apache.xalan.templates.ElemMessage;
import org.apache.xalan.templates.ElemNumber;
import org.apache.xalan.templates.ElemOtherwise;
import org.apache.xalan.templates.ElemPI;
import org.apache.xalan.templates.ElemParam;
import org.apache.xalan.templates.ElemSort;
import org.apache.xalan.templates.ElemTemplate;
import org.apache.xalan.templates.ElemText;
import org.apache.xalan.templates.ElemTextLiteral;
import org.apache.xalan.templates.ElemUnknown;
import org.apache.xalan.templates.ElemValueOf;
import org.apache.xalan.templates.ElemVariable;
import org.apache.xalan.templates.ElemWhen;
import org.apache.xalan.templates.ElemWithParam;
import org.apache.xml.utils.QName;

public class XSLTSchema extends XSLTElementDef {
    private HashMap m_availElems = new HashMap();

    XSLTSchema() {
        build();
    }

    void build() {
        XSLTAttributeDef hrefAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_HREF, 2, true, false, 1);
        XSLTAttributeDef elementsAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_ELEMENTS, 12, true, false, 1);
        XSLTAttributeDef methodAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_METHOD, 9, false, false, 1);
        XSLTAttributeDef versionAttr = new XSLTAttributeDef(null, "version", 13, false, false, 1);
        XSLTAttributeDef encodingAttr = new XSLTAttributeDef(null, "encoding", 1, false, false, 1);
        XSLTAttributeDef omitXmlDeclarationAttr = new XSLTAttributeDef(null, "omit-xml-declaration", 8, false, false, 1);
        XSLTAttributeDef standaloneAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_STANDALONE, 8, false, false, 1);
        XSLTAttributeDef doctypePublicAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_DOCTYPE_PUBLIC, 1, false, false, 1);
        XSLTAttributeDef doctypeSystemAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_DOCTYPE_SYSTEM, 1, false, false, 1);
        XSLTAttributeDef cdataSectionElementsAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS, 19, false, false, 1);
        XSLTAttributeDef indentAttr = new XSLTAttributeDef(null, "indent", 8, false, false, 1);
        XSLTAttributeDef mediaTypeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_OUTPUT_MEDIATYPE, 1, false, false, 1);
        XSLTAttributeDef nameAttrRequired = new XSLTAttributeDef(null, "name", 9, true, false, 1);
        XSLTAttributeDef nameAVTRequired = new XSLTAttributeDef(null, "name", 18, true, true, 2);
        XSLTAttributeDef nameAVT_NCNAMERequired = new XSLTAttributeDef(null, "name", 17, true, true, 2);
        XSLTAttributeDef nameAttrOpt_ERROR = new XSLTAttributeDef(null, "name", 9, false, false, 1);
        XSLTAttributeDef useAttr = new XSLTAttributeDef(null, "use", 5, true, false, 1);
        XSLTAttributeDef namespaceAVTOpt = new XSLTAttributeDef(null, Constants.ATTRNAME_NAMESPACE, 2, false, true, 2);
        XSLTAttributeDef decimalSeparatorAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DECIMALSEPARATOR, 6, false, 1, Constants.ATTRVAL_THIS);
        XSLTAttributeDef infinityAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_INFINITY, 1, false, 1, Constants.ATTRVAL_INFINITY);
        XSLTAttributeDef minusSignAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_MINUSSIGN, 6, false, 1, "-");
        XSLTAttributeDef NaNAttr = new XSLTAttributeDef(null, "NaN", 1, false, 1, "NaN");
        XSLTAttributeDef percentAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PERCENT, 6, false, 1, "%");
        XSLTAttributeDef perMilleAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PERMILLE, 6, false, false, 1);
        XSLTAttributeDef zeroDigitAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_ZERODIGIT, 6, false, 1, "0");
        XSLTAttributeDef digitAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DIGIT, 6, false, 1, "#");
        XSLTAttributeDef patternSeparatorAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PATTERNSEPARATOR, 6, false, 1, ";");
        XSLTAttributeDef groupingSeparatorAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_GROUPINGSEPARATOR, 6, false, 1, ",");
        XSLTAttributeDef useAttributeSetsAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_USEATTRIBUTESETS, 10, false, false, 1);
        XSLTAttributeDef testAttrRequired = new XSLTAttributeDef(null, Constants.ATTRNAME_TEST, 5, true, false, 1);
        XSLTAttributeDef selectAttrRequired = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, true, false, 1);
        XSLTAttributeDef selectAttrOpt = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, false, false, 1);
        XSLTAttributeDef selectAttrDefNode = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, false, 1, "node()");
        XSLTAttributeDef selectAttrDefDot = new XSLTAttributeDef(null, Constants.ATTRNAME_SELECT, 5, false, 1, Constants.ATTRVAL_THIS);
        XSLTAttributeDef matchAttrRequired = new XSLTAttributeDef(null, Constants.ATTRNAME_MATCH, 4, true, false, 1);
        XSLTAttributeDef matchAttrOpt = new XSLTAttributeDef(null, Constants.ATTRNAME_MATCH, 4, false, false, 1);
        XSLTAttributeDef priorityAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_PRIORITY, 7, false, false, 1);
        XSLTAttributeDef modeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_MODE, 9, false, false, 1);
        XSLTAttributeDef spaceAttr = new XSLTAttributeDef("http://www.w3.org/XML/1998/namespace", "space", false, false, false, 2, Constants.ATTRNAME_DEFAULT, 2, "preserve", 1);
        XSLTAttributeDef spaceAttrLiteral = new XSLTAttributeDef("http://www.w3.org/XML/1998/namespace", "space", 2, false, true, 1);
        XSLTAttributeDef stylesheetPrefixAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_STYLESHEET_PREFIX, 1, true, false, 1);
        XSLTAttributeDef resultPrefixAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_RESULT_PREFIX, 1, true, false, 1);
        XSLTAttributeDef disableOutputEscapingAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DISABLE_OUTPUT_ESCAPING, 8, false, false, 1);
        mediaTypeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_LEVEL, false, false, false, 1, Constants.ATTRVAL_SINGLE, 1, Constants.ATTRVAL_MULTI, 2, "any", 3);
        mediaTypeAttr.setDefault(Constants.ATTRVAL_SINGLE);
        XSLTAttributeDef xSLTAttributeDef = new XSLTAttributeDef(null, "count", 4, false, false, 1);
        xSLTAttributeDef = new XSLTAttributeDef(null, Constants.ATTRNAME_FROM, 4, false, false, 1);
        XSLTAttributeDef valueAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_VALUE, 5, false, false, 1);
        cdataSectionElementsAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_FORMAT, 1, false, true, 1);
        cdataSectionElementsAttr.setDefault("1");
        XSLTAttributeDef xSLTAttributeDef2 = new XSLTAttributeDef(null, "lang", 13, false, true, 1);
        xSLTAttributeDef2 = new XSLTAttributeDef(null, Constants.ATTRNAME_LETTERVALUE, false, true, false, 1, Constants.ATTRVAL_ALPHABETIC, 1, Constants.ATTRVAL_TRADITIONAL, 2);
        XSLTAttributeDef groupingSeparatorAVT = new XSLTAttributeDef(null, Constants.ATTRNAME_GROUPINGSEPARATOR, 6, false, true, 1);
        XSLTAttributeDef groupingSizeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_GROUPINGSIZE, 7, false, true, 1);
        doctypePublicAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DATATYPE, false, true, true, 1, "text", 1, "number", 1);
        doctypePublicAttr.setDefault("text");
        XSLTAttributeDef xSLTAttributeDef3 = new XSLTAttributeDef(null, Constants.ATTRNAME_ORDER, false, true, false, 1, Constants.ATTRVAL_ORDER_ASCENDING, 1, Constants.ATTRVAL_ORDER_DESCENDING, 2);
        xSLTAttributeDef3.setDefault(Constants.ATTRVAL_ORDER_ASCENDING);
        xSLTAttributeDef3 = new XSLTAttributeDef(null, Constants.ATTRNAME_CASEORDER, false, true, false, 1, Constants.ATTRVAL_CASEORDER_UPPER, 1, Constants.ATTRVAL_CASEORDER_LOWER, 2);
        encodingAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_TERMINATE, 8, false, false, 1);
        encodingAttr.setDefault("no");
        XSLTAttributeDef xSLTAttributeDef4 = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_EXCLUDE_RESULT_PREFIXES, 20, false, false, 1);
        xSLTAttributeDef4 = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_EXTENSIONELEMENTPREFIXES, 15, false, false, 1);
        XSLTAttributeDef xslUseAttributeSetsAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_USEATTRIBUTESETS, 10, false, false, 1);
        XSLTAttributeDef xslVersionAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "version", 13, false, false, 1);
        XSLTElementDef charData = new XSLTElementDef(this, null, "text()", null, null, null, new ProcessorCharacters(), ElemTextLiteral.class);
        charData.setType(2);
        XSLTElementDef xSLTElementDef = new XSLTElementDef(this, null, "text()", null, null, null, null, ElemTextLiteral.class);
        charData.setType(2);
        xSLTAttributeDef3 = new XSLTAttributeDef(null, "*", 3, false, true, 2);
        xSLTAttributeDef3 = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "*", 1, false, false, 2);
        XSLTElementDef[] templateElements = new XSLTElementDef[23];
        templateElementsAndParams = new XSLTElementDef[24];
        templateElementsAndSort = new XSLTElementDef[24];
        exsltFunctionElements = new XSLTElementDef[24];
        XSLTElementDef[] charTemplateElements = new XSLTElementDef[15];
        XSLTElementDef charData2 = charData;
        XSLTElementDef resultElement = new XSLTElementDef(this, null, "*", null, templateElements, new XSLTAttributeDef[]{spaceAttrLiteral, xSLTAttributeDef4, xSLTAttributeDef4, xslUseAttributeSetsAttr, xslVersionAttr, xSLTAttributeDef3, xSLTAttributeDef3}, new ProcessorLRE(), ElemLiteralResult.class, 20, true);
        XSLTElementDef[] charTemplateElements2 = charTemplateElements;
        XSLTElementDef unknownElement = new XSLTElementDef(this, "*", "unknown", null, templateElementsAndParams, new XSLTAttributeDef[]{xSLTAttributeDef4, xSLTAttributeDef4, xslUseAttributeSetsAttr, xslVersionAttr, xSLTAttributeDef3, xSLTAttributeDef3}, new ProcessorUnknown(), ElemUnknown.class, 20, true);
        XSLTAttributeDef xslExcludeResultPrefixesAttr = xSLTAttributeDef4;
        xSLTElementDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VALUEOF_STRING, null, null, new XSLTAttributeDef[]{selectAttrRequired, disableOutputEscapingAttr}, new ProcessorTemplateElem(), ElemValueOf.class, 20, true);
        XSLTElementDef[] templateElementsAndParams = templateElementsAndParams;
        XSLTElementDef xslCopyOf = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COPY_OF_STRING, null, null, new XSLTAttributeDef[]{selectAttrRequired}, new ProcessorTemplateElem(), ElemCopyOf.class, 20, true);
        XSLTElementDef unknownElement2 = unknownElement;
        unknownElement = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "number", null, null, new XSLTAttributeDef[]{mediaTypeAttr, xSLTAttributeDef, xSLTAttributeDef, valueAttr, cdataSectionElementsAttr, xSLTAttributeDef2, xSLTAttributeDef2, groupingSeparatorAVT, groupingSizeAttr}, new ProcessorTemplateElem(), ElemNumber.class, 20, true);
        xSLTElementDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_SORT_STRING, null, null, new XSLTAttributeDef[]{selectAttrDefDot, xSLTAttributeDef2, doctypePublicAttr, xSLTAttributeDef3, xSLTAttributeDef3}, new ProcessorTemplateElem(), ElemSort.class, 19, true);
        XSLTAttributeDef caseOrderAttr = xSLTAttributeDef3;
        XSLTElementDef xslWithParam = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_WITHPARAM_STRING, null, templateElements, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorTemplateElem(), ElemWithParam.class, 19, true);
        XSLTAttributeDef orderAttr = xSLTAttributeDef3;
        XSLTElementDef xslApplyTemplates = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_APPLY_TEMPLATES_STRING, null, new XSLTElementDef[]{xSLTElementDef, xslWithParam}, new XSLTAttributeDef[]{selectAttrDefNode, modeAttr}, new ProcessorTemplateElem(), ElemApplyTemplates.class, 20, true);
        xSLTElementDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_APPLY_IMPORTS_STRING, null, null, new XSLTAttributeDef[0], new ProcessorTemplateElem(), ElemApplyImport.class);
        XSLTAttributeDef langAttr = xSLTAttributeDef2;
        XSLTElementDef xSLTElementDef2 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_FOREACH_STRING, null, templateElementsAndSort, new XSLTAttributeDef[]{selectAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemForEach.class, true, false, true, 20, true);
        xSLTElementDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_IF_STRING, null, templateElements, new XSLTAttributeDef[]{testAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemIf.class, 20, true);
        XSLTAttributeDef countAttr = xSLTAttributeDef;
        XSLTElementDef[] xSLTElementDefArr = templateElements;
        XSLTElementDef xSLTElementDef3 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_WHEN_STRING, null, xSLTElementDefArr, new XSLTAttributeDef[]{testAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemWhen.class, false, true, 1, true);
        XSLTElementDef xslSort = xSLTElementDef;
        XSLTElementDef xslOtherwise = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_OTHERWISE_STRING, null, xSLTElementDefArr, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemOtherwise.class, false, false, 2, false);
        XSLTElementDef[] templateElementsAndSort = templateElementsAndSort;
        templateElementsAndSort = new XSLTElementDef[]{xSLTElementDef3, xslOtherwise};
        XSLTElementDef xslChoose = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_CHOOSE_STRING, null, templateElementsAndSort, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemChoose.class, true, false, true, 20, true);
        xSLTElementDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "attribute", null, charTemplateElements2, new XSLTAttributeDef[]{nameAVTRequired, namespaceAVTOpt, spaceAttr}, new ProcessorTemplateElem(), ElemAttribute.class, 20, true);
        XSLTElementDef xslWhen = xSLTElementDef3;
        XSLTElementDef[] xSLTElementDefArr2 = new XSLTElementDef[]{xslWithParam};
        xslWithParam = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_CALLTEMPLATE_STRING, null, xSLTElementDefArr2, new XSLTAttributeDef[]{nameAttrRequired}, new ProcessorTemplateElem(), ElemCallTemplate.class, 20, true);
        XSLTElementDef[] xSLTElementDefArr3 = templateElements;
        xSLTElementDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VARIABLE_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorTemplateElem(), ElemVariable.class, 20, true);
        XSLTElementDef xslAttribute = xSLTElementDef;
        XSLTElementDef xslParam = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PARAMVARIABLE_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorTemplateElem(), ElemParam.class, 19, true);
        XSLTElementDef xslVariable = xSLTElementDef;
        xslOtherwise = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "text", null, new XSLTElementDef[]{charData2}, new XSLTAttributeDef[]{disableOutputEscapingAttr}, new ProcessorText(), ElemText.class, 20, true);
        XSLTElementDef xslProcessingInstruction = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PI_STRING, null, charTemplateElements2, new XSLTAttributeDef[]{nameAVT_NCNAMERequired, spaceAttr}, new ProcessorTemplateElem(), ElemPI.class, 20, true);
        XSLTElementDef xslElement = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "element", null, templateElements, new XSLTAttributeDef[]{nameAVTRequired, namespaceAVTOpt, useAttributeSetsAttr, spaceAttr}, new ProcessorTemplateElem(), ElemElement.class, 20, true);
        XSLTElementDef xslComment = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COMMENT_STRING, null, charTemplateElements2, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemComment.class, 20, true);
        XSLTElementDef xslElement2 = xslElement;
        xSLTElementDefArr3 = templateElements;
        xslElement = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COPY_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{spaceAttr, useAttributeSetsAttr}, new ProcessorTemplateElem(), ElemCopy.class, 20, true);
        XSLTElementDef xslComment2 = xslComment;
        xslComment = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_MESSAGE_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{terminateAttr}, new ProcessorTemplateElem(), ElemMessage.class, 20, true);
        XSLTElementDef xslMessage = xslComment;
        xslComment = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_FALLBACK_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemFallback.class, 20, true);
        XSLTElementDef xslFallback = xslComment;
        xslComment = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_EXSLT_FUNCTIONS_URL, Constants.EXSLT_ELEMNAME_FUNCTION_STRING, null, exsltFunctionElements, new XSLTAttributeDef[]{nameAttrRequired}, new ProcessorExsltFunction(), ElemExsltFunction.class);
        XSLTElementDef exsltResult = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_EXSLT_FUNCTIONS_URL, Constants.EXSLT_ELEMNAME_FUNCRESULT_STRING, null, templateElements, new XSLTAttributeDef[]{selectAttrOpt}, new ProcessorExsltFuncResult(), ElemExsltFuncResult.class);
        int i = 0 + 1;
        templateElements[0] = charData2;
        int i2 = i + 1;
        templateElements[i] = xslApplyTemplates;
        i = i2 + 1;
        templateElements[i2] = xslWithParam;
        i2 = i + 1;
        templateElements[i] = xSLTElementDef;
        i = i2 + 1;
        templateElements[i2] = xSLTElementDef2;
        i2 = i + 1;
        templateElements[i] = xSLTElementDef;
        i = i2 + 1;
        templateElements[i2] = xslCopyOf;
        i2 = i + 1;
        templateElements[i] = unknownElement;
        i = i2 + 1;
        templateElements[i2] = xslChoose;
        i2 = i + 1;
        templateElements[i] = xSLTElementDef;
        i = i2 + 1;
        templateElements[i2] = xslOtherwise;
        i2 = i + 1;
        templateElements[i] = xslElement;
        i = i2 + 1;
        templateElements[i2] = xslVariable;
        i2 = i + 1;
        templateElements[i] = xslMessage;
        i = i2 + 1;
        templateElements[i2] = xslFallback;
        i2 = i + 1;
        templateElements[i] = xslProcessingInstruction;
        i = i2 + 1;
        templateElements[i2] = xslComment2;
        i2 = i + 1;
        templateElements[i] = xslElement2;
        i = i2 + 1;
        templateElements[i2] = xslAttribute;
        i2 = i + 1;
        templateElements[i] = resultElement;
        i = i2 + 1;
        templateElements[i2] = unknownElement2;
        i2 = i + 1;
        templateElements[i] = xslComment;
        i = i2 + 1;
        templateElements[i2] = exsltResult;
        charTemplateElements = templateElementsAndParams;
        System.arraycopy(templateElements, 0, charTemplateElements, 0, i);
        XSLTElementDef exsltFunction = xslComment;
        XSLTElementDef[] templateElementsAndSort2 = templateElementsAndSort;
        System.arraycopy(templateElements, 0, templateElementsAndSort2, 0, i);
        XSLTElementDef xslCopy = xslElement;
        xSLTElementDefArr2 = exsltFunctionElements;
        System.arraycopy(templateElements, 0, xSLTElementDefArr2, 0, i);
        charTemplateElements[i] = xslParam;
        templateElementsAndSort2[i] = xslSort;
        xSLTElementDefArr2[i] = xslParam;
        i = 0 + 1;
        charTemplateElements2[0] = charData2;
        int i3 = i + 1;
        charTemplateElements2[i] = xslApplyTemplates;
        i = i3 + 1;
        charTemplateElements2[i3] = xslWithParam;
        i3 = i + 1;
        charTemplateElements2[i] = xSLTElementDef;
        i = i3 + 1;
        charTemplateElements2[i3] = xSLTElementDef2;
        i3 = i + 1;
        charTemplateElements2[i] = xSLTElementDef;
        i = i3 + 1;
        charTemplateElements2[i3] = xslCopyOf;
        i3 = i + 1;
        charTemplateElements2[i] = unknownElement;
        i = i3 + 1;
        charTemplateElements2[i3] = xslChoose;
        i3 = i + 1;
        charTemplateElements2[i] = xSLTElementDef;
        i = i3 + 1;
        charTemplateElements2[i3] = xslOtherwise;
        i3 = i + 1;
        charTemplateElements2[i] = xslCopy;
        i = i3 + 1;
        charTemplateElements2[i3] = xslVariable;
        i3 = i + 1;
        charTemplateElements2[i] = xslMessage;
        i = i3 + 1;
        charTemplateElements2[i3] = xslFallback;
        xslCopyOf = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_IMPORT_STRING, null, null, new XSLTAttributeDef[]{hrefAttr}, new ProcessorImport(), null, 1, true);
        XSLTElementDef xslValueOf = xSLTElementDef;
        xSLTElementDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_INCLUDE_STRING, null, null, new XSLTAttributeDef[]{hrefAttr}, new ProcessorInclude(), null, 20, true);
        XSLTAttributeDef[] scriptAttrs = new XSLTAttributeDef[]{new XSLTAttributeDef(null, "lang", 13, true, false, 2), new XSLTAttributeDef(null, "src", 2, false, false, 2)};
        XSLTAttributeDef[] componentAttrs = new XSLTAttributeDef[]{new XSLTAttributeDef(null, "prefix", 13, true, false, 2), new XSLTAttributeDef(null, Constants.ATTRNAME_ELEMENTS, 14, false, false, 2), new XSLTAttributeDef(null, Constants.ELEMNAME_EXTENSION_STRING, 14, false, false, 2)};
        r3 = new XSLTElementDef[17];
        r3[4] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_STRIPSPACE_STRING, null, null, new XSLTAttributeDef[]{elementsAttr}, new ProcessorStripSpace(), null, 20, true);
        r3[5] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PRESERVESPACE_STRING, null, null, new XSLTAttributeDef[]{elementsAttr}, new ProcessorPreserveSpace(), null, 20, true);
        r3[6] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_OUTPUT_STRING, null, null, new XSLTAttributeDef[]{methodAttr, versionAttr, encodingAttr, omitXmlDeclarationAttr, standaloneAttr, doctypePublicAttr, doctypeSystemAttr, cdataSectionElementsAttr, indentAttr, mediaTypeAttr, XSLTAttributeDef.m_foreignAttr}, new ProcessorOutputElem(), null, 20, true);
        r3[7] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "key", null, null, new XSLTAttributeDef[]{nameAttrRequired, matchAttrRequired, useAttr}, new ProcessorKey(), null, 20, true);
        r3[8] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_DECIMALFORMAT_STRING, null, null, new XSLTAttributeDef[]{nameAttrOpt_ERROR, decimalSeparatorAttr, groupingSeparatorAttr, infinityAttr, minusSignAttr, NaNAttr, percentAttr, perMilleAttr, zeroDigitAttr, digitAttr, patternSeparatorAttr}, new ProcessorDecimalFormat(), null, 20, true);
        r3[9] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "attribute-set", null, new XSLTElementDef[]{xslAttribute}, new XSLTAttributeDef[]{nameAttrRequired, useAttributeSetsAttr}, new ProcessorAttributeSet(), null, 20, true);
        xSLTElementDefArr3 = templateElements;
        r3[10] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VARIABLE_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorGlobalVariableDecl(), ElemVariable.class, 20, true);
        r3[11] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PARAMVARIABLE_STRING, null, xSLTElementDefArr3, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, new ProcessorGlobalParamDecl(), ElemParam.class, 20, true);
        r3[12] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_TEMPLATE_STRING, null, charTemplateElements, new XSLTAttributeDef[]{matchAttrOpt, nameAttrOpt_ERROR, priorityAttr, modeAttr, spaceAttr}, new ProcessorTemplate(), ElemTemplate.class, true, 20, true);
        r3[13] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_NSALIAS_STRING, null, null, new XSLTAttributeDef[]{stylesheetPrefixAttr, resultPrefixAttr}, new ProcessorNamespaceAlias(), null, 20, true);
        String str = Constants.ELEMNAME_COMPONENT_STRING;
        XSLTElementDef[] xSLTElementDefArr4 = new XSLTElementDef[1];
        xSLTElementDefArr4[0] = new XSLTElementDef(this, "http://xml.apache.org/xalan", Constants.ELEMNAME_SCRIPT_STRING, null, new XSLTElementDef[]{charData2}, scriptAttrs, new ProcessorLRE(), ElemExtensionScript.class, 20, true);
        r3[14] = new XSLTElementDef(this, "http://xml.apache.org/xalan", str, null, xSLTElementDefArr4, componentAttrs, new ProcessorLRE(), ElemExtensionDecl.class);
        String str2 = org.apache.xml.utils.Constants.S_BUILTIN_OLD_EXTENSIONS_URL;
        String str3 = Constants.ELEMNAME_COMPONENT_STRING;
        XSLTElementDef[] xSLTElementDefArr5 = new XSLTElementDef[1];
        xSLTElementDefArr5[0] = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_BUILTIN_OLD_EXTENSIONS_URL, Constants.ELEMNAME_SCRIPT_STRING, null, new XSLTElementDef[]{charData2}, scriptAttrs, new ProcessorLRE(), ElemExtensionScript.class, 20, true);
        r3[15] = new XSLTElementDef(this, str2, str3, null, xSLTElementDefArr5, componentAttrs, new ProcessorLRE(), ElemExtensionDecl.class);
        r3[16] = exsltFunction;
        xSLTElementDefArr3 = r3;
        XSLTAttributeDef xSLTAttributeDef5 = new XSLTAttributeDef(null, Constants.ATTRNAME_EXCLUDE_RESULT_PREFIXES, 20, false, false, 2);
        xSLTAttributeDef5 = new XSLTAttributeDef(null, Constants.ATTRNAME_EXTENSIONELEMENTPREFIXES, 15, false, false, 2);
        xSLTAttributeDef5 = new XSLTAttributeDef(null, "id", 1, false, false, 2);
        xSLTAttributeDef5 = new XSLTAttributeDef(null, "version", 13, true, false, 2);
        XSLTAttributeDef excludeResultPrefixesAttr = xSLTAttributeDef5;
        XSLTElementDef stylesheetElemDef = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_STYLESHEET_STRING, Constants.ELEMNAME_TRANSFORM_STRING, xSLTElementDefArr3, new XSLTAttributeDef[]{xSLTAttributeDef5, xSLTAttributeDef5, xSLTAttributeDef5, xSLTAttributeDef5, spaceAttr}, new ProcessorStylesheetElement(), null, true, -1, false);
        xslCopyOf.setElements(new XSLTElementDef[]{stylesheetElemDef, resultElement, unknownElement2});
        xSLTElementDef.setElements(new XSLTElementDef[]{stylesheetElemDef, resultElement, unknownElement2});
        build(null, null, null, new XSLTElementDef[]{stylesheetElemDef, xSLTElementDef, resultElement, unknownElement2}, null, new ProcessorStylesheetDoc(), null);
    }

    public HashMap getElemsAvailable() {
        return this.m_availElems;
    }

    void addAvailableElement(QName elemName) {
        this.m_availElems.put(elemName, elemName);
    }

    public boolean elementAvailable(QName elemName) {
        return this.m_availElems.containsKey(elemName);
    }
}
