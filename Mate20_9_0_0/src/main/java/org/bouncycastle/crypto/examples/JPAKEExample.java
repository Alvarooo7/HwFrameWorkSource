package org.bouncycastle.crypto.examples;

import java.io.PrintStream;
import java.math.BigInteger;
import java.security.SecureRandom;
import org.bouncycastle.crypto.CryptoException;
import org.bouncycastle.crypto.agreement.jpake.JPAKEParticipant;
import org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;
import org.bouncycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound1Payload;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound2Payload;
import org.bouncycastle.crypto.agreement.jpake.JPAKERound3Payload;
import org.bouncycastle.crypto.digests.SHA256Digest;

public class JPAKEExample {
    private static BigInteger deriveSessionKey(BigInteger bigInteger) {
        SHA256Digest sHA256Digest = new SHA256Digest();
        byte[] toByteArray = bigInteger.toByteArray();
        byte[] bArr = new byte[sHA256Digest.getDigestSize()];
        sHA256Digest.update(toByteArray, 0, toByteArray.length);
        sHA256Digest.doFinal(bArr, 0);
        return new BigInteger(bArr);
    }

    public static void main(String[] strArr) throws CryptoException {
        JPAKEPrimeOrderGroup jPAKEPrimeOrderGroup = JPAKEPrimeOrderGroups.NIST_3072;
        BigInteger p = jPAKEPrimeOrderGroup.getP();
        BigInteger q = jPAKEPrimeOrderGroup.getQ();
        BigInteger g = jPAKEPrimeOrderGroup.getG();
        String str = "password";
        String str2 = "password";
        System.out.println("********* Initialization **********");
        System.out.println("Public parameters for the cyclic group:");
        PrintStream printStream = System.out;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("p (");
        stringBuilder.append(p.bitLength());
        stringBuilder.append(" bits): ");
        stringBuilder.append(p.toString(16));
        printStream.println(stringBuilder.toString());
        printStream = System.out;
        stringBuilder = new StringBuilder();
        stringBuilder.append("q (");
        stringBuilder.append(q.bitLength());
        stringBuilder.append(" bits): ");
        stringBuilder.append(q.toString(16));
        printStream.println(stringBuilder.toString());
        printStream = System.out;
        stringBuilder = new StringBuilder();
        stringBuilder.append("g (");
        stringBuilder.append(p.bitLength());
        stringBuilder.append(" bits): ");
        stringBuilder.append(g.toString(16));
        printStream.println(stringBuilder.toString());
        printStream = System.out;
        stringBuilder = new StringBuilder();
        stringBuilder.append("p mod q = ");
        stringBuilder.append(p.mod(q).toString(16));
        printStream.println(stringBuilder.toString());
        printStream = System.out;
        stringBuilder = new StringBuilder();
        stringBuilder.append("g^{q} mod p = ");
        stringBuilder.append(g.modPow(q, p).toString(16));
        printStream.println(stringBuilder.toString());
        System.out.println("");
        PrintStream printStream2 = System.out;
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append("(Secret passwords used by Alice and Bob: \"");
        stringBuilder2.append(str);
        stringBuilder2.append("\" and \"");
        stringBuilder2.append(str2);
        stringBuilder2.append("\")\n");
        printStream2.println(stringBuilder2.toString());
        SHA256Digest sHA256Digest = new SHA256Digest();
        SecureRandom secureRandom = new SecureRandom();
        char[] toCharArray = str.toCharArray();
        JPAKEPrimeOrderGroup jPAKEPrimeOrderGroup2 = jPAKEPrimeOrderGroup;
        SHA256Digest sHA256Digest2 = sHA256Digest;
        SecureRandom secureRandom2 = secureRandom;
        JPAKEParticipant jPAKEParticipant = new JPAKEParticipant("alice", toCharArray, jPAKEPrimeOrderGroup2, sHA256Digest2, secureRandom2);
        jPAKEParticipant = new JPAKEParticipant("bob", str2.toCharArray(), jPAKEPrimeOrderGroup2, sHA256Digest2, secureRandom2);
        JPAKERound1Payload createRound1PayloadToSend = jPAKEParticipant.createRound1PayloadToSend();
        JPAKERound1Payload createRound1PayloadToSend2 = jPAKEParticipant.createRound1PayloadToSend();
        System.out.println("************ Round 1 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream3 = System.out;
        StringBuilder stringBuilder3 = new StringBuilder();
        stringBuilder3.append("g^{x1}=");
        stringBuilder3.append(createRound1PayloadToSend.getGx1().toString(16));
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("g^{x2}=");
        stringBuilder3.append(createRound1PayloadToSend.getGx2().toString(16));
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("KP{x1}={");
        stringBuilder3.append(createRound1PayloadToSend.getKnowledgeProofForX1()[0].toString(16));
        stringBuilder3.append("};{");
        stringBuilder3.append(createRound1PayloadToSend.getKnowledgeProofForX1()[1].toString(16));
        stringBuilder3.append("}");
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("KP{x2}={");
        stringBuilder3.append(createRound1PayloadToSend.getKnowledgeProofForX2()[0].toString(16));
        stringBuilder3.append("};{");
        stringBuilder3.append(createRound1PayloadToSend.getKnowledgeProofForX2()[1].toString(16));
        stringBuilder3.append("}");
        printStream3.println(stringBuilder3.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("g^{x3}=");
        stringBuilder3.append(createRound1PayloadToSend2.getGx1().toString(16));
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("g^{x4}=");
        stringBuilder3.append(createRound1PayloadToSend2.getGx2().toString(16));
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("KP{x3}={");
        stringBuilder3.append(createRound1PayloadToSend2.getKnowledgeProofForX1()[0].toString(16));
        stringBuilder3.append("};{");
        stringBuilder3.append(createRound1PayloadToSend2.getKnowledgeProofForX1()[1].toString(16));
        stringBuilder3.append("}");
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("KP{x4}={");
        stringBuilder3.append(createRound1PayloadToSend2.getKnowledgeProofForX2()[0].toString(16));
        stringBuilder3.append("};{");
        stringBuilder3.append(createRound1PayloadToSend2.getKnowledgeProofForX2()[1].toString(16));
        stringBuilder3.append("}");
        printStream3.println(stringBuilder3.toString());
        System.out.println("");
        jPAKEParticipant.validateRound1PayloadReceived(createRound1PayloadToSend2);
        System.out.println("Alice checks g^{x4}!=1: OK");
        System.out.println("Alice checks KP{x3}: OK");
        System.out.println("Alice checks KP{x4}: OK");
        System.out.println("");
        jPAKEParticipant.validateRound1PayloadReceived(createRound1PayloadToSend);
        System.out.println("Bob checks g^{x2}!=1: OK");
        System.out.println("Bob checks KP{x1},: OK");
        System.out.println("Bob checks KP{x2},: OK");
        System.out.println("");
        JPAKERound2Payload createRound2PayloadToSend = jPAKEParticipant.createRound2PayloadToSend();
        JPAKERound2Payload createRound2PayloadToSend2 = jPAKEParticipant.createRound2PayloadToSend();
        System.out.println("************ Round 2 **************");
        System.out.println("Alice sends to Bob: ");
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("A=");
        stringBuilder3.append(createRound2PayloadToSend.getA().toString(16));
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("KP{x2*s}={");
        stringBuilder3.append(createRound2PayloadToSend.getKnowledgeProofForX2s()[0].toString(16));
        stringBuilder3.append("},{");
        stringBuilder3.append(createRound2PayloadToSend.getKnowledgeProofForX2s()[1].toString(16));
        stringBuilder3.append("}");
        printStream3.println(stringBuilder3.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice");
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("B=");
        stringBuilder3.append(createRound2PayloadToSend2.getA().toString(16));
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("KP{x4*s}={");
        stringBuilder3.append(createRound2PayloadToSend2.getKnowledgeProofForX2s()[0].toString(16));
        stringBuilder3.append("},{");
        stringBuilder3.append(createRound2PayloadToSend2.getKnowledgeProofForX2s()[1].toString(16));
        stringBuilder3.append("}");
        printStream3.println(stringBuilder3.toString());
        System.out.println("");
        jPAKEParticipant.validateRound2PayloadReceived(createRound2PayloadToSend2);
        System.out.println("Alice checks KP{x4*s}: OK\n");
        jPAKEParticipant.validateRound2PayloadReceived(createRound2PayloadToSend);
        System.out.println("Bob checks KP{x2*s}: OK\n");
        BigInteger calculateKeyingMaterial = jPAKEParticipant.calculateKeyingMaterial();
        p = jPAKEParticipant.calculateKeyingMaterial();
        System.out.println("********* After round 2 ***********");
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("Alice computes key material \t K=");
        stringBuilder3.append(calculateKeyingMaterial.toString(16));
        printStream3.println(stringBuilder3.toString());
        printStream3 = System.out;
        stringBuilder3 = new StringBuilder();
        stringBuilder3.append("Bob computes key material \t K=");
        stringBuilder3.append(p.toString(16));
        printStream3.println(stringBuilder3.toString());
        System.out.println();
        deriveSessionKey(calculateKeyingMaterial);
        deriveSessionKey(p);
        JPAKERound3Payload createRound3PayloadToSend = jPAKEParticipant.createRound3PayloadToSend(calculateKeyingMaterial);
        JPAKERound3Payload createRound3PayloadToSend2 = jPAKEParticipant.createRound3PayloadToSend(p);
        System.out.println("************ Round 3 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream4 = System.out;
        StringBuilder stringBuilder4 = new StringBuilder();
        stringBuilder4.append("MacTag=");
        stringBuilder4.append(createRound3PayloadToSend.getMacTag().toString(16));
        printStream4.println(stringBuilder4.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        printStream4 = System.out;
        stringBuilder4 = new StringBuilder();
        stringBuilder4.append("MacTag=");
        stringBuilder4.append(createRound3PayloadToSend2.getMacTag().toString(16));
        printStream4.println(stringBuilder4.toString());
        System.out.println("");
        jPAKEParticipant.validateRound3PayloadReceived(createRound3PayloadToSend2, calculateKeyingMaterial);
        System.out.println("Alice checks MacTag: OK\n");
        jPAKEParticipant.validateRound3PayloadReceived(createRound3PayloadToSend, p);
        System.out.println("Bob checks MacTag: OK\n");
        System.out.println();
        System.out.println("MacTags validated, therefore the keying material matches.");
    }
}
